<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2020-12-09心情随笔</title>
    <url>/2020/12/09/2020-12-08%E5%BF%83%E6%83%85%E9%9A%8F%E7%AC%94/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote class="blockquote-center">
<p>^ _ ^ </p>

</blockquote>
<a id="more"></a>

<p>&nbsp;&nbsp;&nbsp;&nbsp;曾经在书中看到过一句话：我们每天都在过着今天雷同与昨天的生活。每天都没有什么不同，即便今天是我的生日。今年的我甚至不想过生日，也一直没去看日历。就内心来说，生日与我只是比平常还要麻烦一点的一天。但矛盾的是，如果有人记得，我又会觉得开心。不是收到礼物开心，是有人记得开心。其实我有一点害怕我的生日只是一个人情交换的日子，会让我觉得自己悲哀。像我这样社会化失败的人，宁愿消失隐形，但不想成为一个笑话。<br>&nbsp;&nbsp;&nbsp;&nbsp;很感谢那些关心我的朋友，让我有稍稍温暖，稍稍希望。</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>日记</tag>
      </tags>
  </entry>
  <entry>
    <title>2021-05-17心情随笔</title>
    <url>/2021/05/17/2021-05-17%E5%BF%83%E6%83%85%E9%9A%8F%E7%AC%94/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote class="blockquote-center">
<p>^ _ ^ </p>

</blockquote>
<a id="more"></a>

<p>&nbsp;&nbsp;&nbsp;&nbsp;大概一年以前，我一时兴起部署了这个个人博客，陆陆续续也写了一些文章，虽然看上去（实际也是）质量低劣，写的都是一些拾人牙慧的文章，就连个签都是抄的歌名…不过我并没有在意这一点，因为我的博客别人也无法通过互联网看到，甚至我自己都看不到呢 ^ _ ^ 原因是这样的，我是用 hexo 搭建博客，然后利用 github 进行部署，但是国内访问 github 非常慢，到后期甚至间歇性无法访问，访问自己的博客还要碰运气的情况我可没耐心，就很长一段时间没有把新写的文章同步到 github 上。都是在本地写些无人看到的文章自嗨… 自然就不在意质量了，毕竟是写给自己看的东西，自己能看懂不就好了嘛 ^ _ ^</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;直到最近，我买了一个服务器，一系列人民币玩家操作后已经可以丝滑访问 github 了，然后我就想着让我的小博客见见光好了，况且我正好想玩玩很久没有打开过的 Github Desktop。可惜，天不遂人愿，奇奇怪怪的 bug 总能找上我。</p>
<p><img src="/2021/05/17/2021-05-17%E5%BF%83%E6%83%85%E9%9A%8F%E7%AC%94/1.jpg" alt></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;经过好几次尝试失败仍对解决这个问题毫无思路后，我打算放弃 github 部署，改为把小博客部署到我的服务器上，毕竟我可是有部署博客到阿里云的成功经验，甚至还写了记录博客。那时的心理活动：感谢当时勤劳记录博客的我。按照着我的小博客一路丝滑操作，直到最后，本地hexo文件部署到服务器上时发现竟然部署不上去，但也没什么错误提示。变化后的心理活动：当你觉得写自己能看懂的博客就够了时，最后你就会发现你自己也看不懂。或者你以为你懂了，但现实告诉你“不，你不懂”。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;当事态进展到这一步的时候，我想：这是我一个论文还没改完的人应该继续深究的问题吗？但是临走之前仍想再尝试一次 github 部署，竟然玄学的成功了。Really lucky！</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;但是靠运气解决的问题最后也很可能因为运气再次出现…</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>日记</tag>
      </tags>
  </entry>
  <entry>
    <title>2021-09-10-组会</title>
    <url>/2021/09/10/2021-09-10-%E7%BB%84%E4%BC%9A/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote class="blockquote-center">
<p>^ _ ^ </p>

</blockquote>
<a id="more"></a>

<blockquote>
<p>From 2021-09-04 to 2021-09-10<br>Fix bugs of project(cj_text_analyze)</p>
</blockquote>
<h1 id="Core-Logic-Bug-Fix"><a href="#Core-Logic-Bug-Fix" class="headerlink" title="Core Logic Bug Fix"></a>Core Logic Bug Fix</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># dis = simple_distance(pre_order, cur_order)</span></span><br><span class="line"><span class="comment"># dis = edit_distance(pre_order[0:len(cur_order)], cur_order)</span></span><br><span class="line">dis = cos_distance(pre_order, cur_order, state.element_num)</span><br><span class="line"><span class="keyword">if</span> dis &gt; <span class="number">0</span>:</span><br><span class="line">    sub_score = <span class="number">2</span>**dis</span><br><span class="line">    logger.info(<span class="string">f"dis=<span class="subst">&#123;dis&#125;</span>;棋盘状态加分=<span class="subst">&#123;score&#125;</span>-<span class="subst">&#123;sub_score&#125;</span>"</span>)</span><br><span class="line">    score -= sub_score</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    logger.info(<span class="string">f"dis=<span class="subst">&#123;dis&#125;</span>;棋盘状态加分=<span class="subst">&#123;score&#125;</span>"</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 逐一匹配计算差异</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">simple_distance</span><span class="params">(pre_order, cur_order)</span>:</span></span><br><span class="line">    dis = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i, semantic <span class="keyword">in</span> enumerate(cur_order):</span><br><span class="line">        <span class="keyword">if</span> i &gt;= len(pre_order) <span class="keyword">or</span> pre_order[i] != semantic:</span><br><span class="line">            dis += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> dis</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算数组之间不同元素个数差异</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count_distence</span><span class="params">(arr1, arr2)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> max(len(set(arr1) - set(arr2)), len(set(arr2) - set(arr1)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算数组之间的编辑距离</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit_distance</span><span class="params">(arr1, arr2)</span>:</span></span><br><span class="line">    dp = [[i + j <span class="keyword">for</span> j <span class="keyword">in</span> range(len(arr2)+<span class="number">1</span>)] <span class="keyword">for</span> i <span class="keyword">in</span> range(len(arr1)+<span class="number">1</span>)]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, len(arr1)+<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>, len(arr2)+<span class="number">1</span>):</span><br><span class="line">            d = <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> arr1[i<span class="number">-1</span>] == arr2[j<span class="number">-1</span>]:</span><br><span class="line">                d = <span class="number">0</span></span><br><span class="line">            dp[i][j] = min(dp[i<span class="number">-1</span>][j]+<span class="number">1</span>, dp[i][j<span class="number">-1</span>]+<span class="number">1</span>, dp[i<span class="number">-1</span>][j<span class="number">-1</span>]+d)</span><br><span class="line">    <span class="keyword">return</span> dp[len(arr1)][len(arr2)]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算数组之间余弦距离（会扩大一定倍数）</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cos_distance</span><span class="params">(pre_order, cur_order, element_num)</span>:</span></span><br><span class="line">    pre_vector = [<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> range(element_num)]</span><br><span class="line">    <span class="keyword">for</span> i, item <span class="keyword">in</span> enumerate(pre_order):</span><br><span class="line">        index = element_dict[item]</span><br><span class="line">        pre_vector[index] = i + <span class="number">1</span></span><br><span class="line">    cur_vector = [<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> range(element_num)]</span><br><span class="line">    <span class="keyword">for</span> i, item <span class="keyword">in</span> enumerate(cur_order):</span><br><span class="line">        index = element_dict[item]</span><br><span class="line">        cur_vector[index] = i + <span class="number">1</span></span><br><span class="line">    logger.info(<span class="string">f"pre_vector=<span class="subst">&#123;pre_vector&#125;</span>"</span>)</span><br><span class="line">    logger.info(<span class="string">f"cur_vector=<span class="subst">&#123;cur_vector&#125;</span>"</span>)</span><br><span class="line">    v1, v2 = pre_vector, cur_vector</span><br><span class="line">    cross = sum([v1[i]*v2[i] <span class="keyword">for</span> i <span class="keyword">in</span> range(len(v1))])</span><br><span class="line">    v1_std = sum([item*item <span class="keyword">for</span> item <span class="keyword">in</span> v1])**<span class="number">0.5</span></span><br><span class="line">    v2_std = sum([item*item <span class="keyword">for</span> item <span class="keyword">in</span> v2])**<span class="number">0.5</span></span><br><span class="line">    result = cross/(v1_std*v2_std)</span><br><span class="line">    C = <span class="number">0.8</span></span><br><span class="line">    <span class="keyword">return</span> abs(result<span class="number">-1</span>) * C</span><br></pre></td></tr></table></figure>

<h1 id="Bussiness-Bug-Fix"><a href="#Bussiness-Bug-Fix" class="headerlink" title="Bussiness Bug Fix"></a>Bussiness Bug Fix</h1><h2 id="Supported"><a href="#Supported" class="headerlink" title="Supported"></a>Supported</h2><h3 id="Week-Trans"><a href="#Week-Trans" class="headerlink" title="Week_Trans"></a>Week_Trans</h3><p><strong>demand</strong>: word like “(本/上)周五”、”今天”、”明天” trans to formatted date string, such as “2021-09-10”<br><strong>interface</strong>: <a href="https://github.com/ryanInf/Time-NLPY" target="_blank" rel="noopener">https://github.com/ryanInf/Time-NLPY</a><br><strong>supporter</strong>: QianJin Xiang<br><strong>reback</strong>: Useful<br><strong>current state</strong>: bug closed</p>
<p><img src="/2021/09/10/2021-09-10-%E7%BB%84%E4%BC%9A/3.jpg" alt></p>
<h3 id="Abbreviation-Match"><a href="#Abbreviation-Match" class="headerlink" title="Abbreviation_Match"></a>Abbreviation_Match</h3><p><strong>demand</strong>: Sometimes user use an abbreviation of a noun, which is possiblly not be exact match in database.An idea is generating an abbreviation dictionary using the existing database.<br><strong>interface</strong>: A excel which is generated by a python script(based on dictionary tree).<br><strong>supporter</strong>: NengZheng Jin<br><strong>reback</strong>: Correct but unavailable<br><strong>current state</strong>: Use other methods to fix the bug, bug closed.</p>
<p><img src="/2021/09/10/2021-09-10-%E7%BB%84%E4%BC%9A/4.jpg" alt></p>
<h2 id="Other-Normal-Bussiness-Bug"><a href="#Other-Normal-Bussiness-Bug" class="headerlink" title="Other Normal Bussiness Bug"></a>Other Normal Bussiness Bug</h2><h3 id="Composed-Element"><a href="#Composed-Element" class="headerlink" title="Composed Element"></a>Composed Element</h3><blockquote>
<p>Some Composed Element will contain 2 or more element in one token, the procedure should split it at a good time.</p>
</blockquote>
<p><strong>Situation-01</strong><br>Some elements like <code>Residual_Maturity</code> might be “6L”, “2.8+3.2”. The first value need to be divided evenly to “Agency_Fee” and “Ticket_Fee”, while the second assign “2.8” to “Agency_Fee” and “3.2” to “Ticket_Fee”.</p>
<p><img src="/2021/09/10/2021-09-10-%E7%BB%84%E4%BC%9A/1.jpg" alt></p>
<p><strong>Situation-02</strong><br>When we encouter some special cases, we need to copy one instruction into multiple instructions, but not all the instruction are same.<br>For example, we might encouter 3 product name consequently.</p>
<p><img src="/2021/09/10/2021-09-10-%E7%BB%84%E4%BC%9A/2.jpg" alt></p>
]]></content>
      <categories>
        <category>组会</category>
      </categories>
      <tags>
        <tag>组会</tag>
      </tags>
  </entry>
  <entry>
    <title>Adobe下载</title>
    <url>/2021/05/20/Adobe%E4%B8%8B%E8%BD%BD/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote class="blockquote-center">
<p>免费下载Adobel喽 ^_^ </p>

</blockquote>
<a id="more"></a>

<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>大一的时候，我还对计算机一无所知，却报有莫名的热情。当时热衷于下载各种例如PS之类的知名软件。然而也是在软件下载过程中，发现我的电脑的磁盘内存真的很小。事实上，我的热情仿佛只存在于下载时和初学前几天，千辛万苦下载的PS玩了几天后就弃之不用了。但它占的内存又很多，所以在它在我的磁盘中短暂的生活了一段时间后就被我删除了。当然，我也完全没有为删除它感到后悔，因为在今后的很长一段时间我也没有要用到它的场景。</p>
<p>说回到今天为什么又要下载它。第一，前段时间我买了一个西部数据的移动硬盘，从此我不仅不再需要对256G内存的分配精打细算，为每个大型软件的下载思前想后，甚至还要大手笔地想下什么下什么 ^_^ 2T内存，2048Ghohoho，从此实现下载自由，管它用不用呢，反正我内存用不完 ︿(￣︶￣)︿ 第二呢，我的毕业论文今天定稿提交了hahaha，因此打算做些狂下载的事放松放松什么的（可怕）</p>
<h1 id="Adobe-Creative-Cloud"><a href="#Adobe-Creative-Cloud" class="headerlink" title="Adobe Creative Cloud"></a>Adobe Creative Cloud</h1><p><code>Adobe Creative Cloud</code>有些类似于<code>Unity Hub</code>，是一个 Adobe 系列的软件下载更新的管理工具。</p>
<p>下载链接：<a href="https://creativecloud.adobe.com/apps/download/creative-cloud" target="_blank" rel="noopener">https://creativecloud.adobe.com/apps/download/creative-cloud</a></p>
<p>下载之后打开是这样的（虽然只能试用什么的）：</p>
<p><img src="/2021/05/20/Adobe%E4%B8%8B%E8%BD%BD/1.jpg" alt></p>
<h2 id="更改安装位置"><a href="#更改安装位置" class="headerlink" title="更改安装位置"></a>更改安装位置</h2><p>Adobe Creative Cloud 默认将软件安装到 C 盘，啊喂(#`O′)！所以很重要的一步操作就是将安装位置改成为移动磁盘的Adobe文件夹（我自己创建的文件夹）。</p>
<p>文件 –&gt; 首选项 –&gt; 应用程序 –&gt; 安装位置</p>
<p><img src="/2021/05/20/Adobe%E4%B8%8B%E8%BD%BD/2.jpg" alt></p>
<h2 id="更窒息的事"><a href="#更窒息的事" class="headerlink" title="更窒息的事"></a>更窒息的事</h2><p>Adobe Creative Cloud 本身在安装时是默认安装到 C 盘的，我一开始以为它应该没多大，后来发现，竟然有8G？？？我一定要把它从C盘迁出去，不然就是 Adobe ByeBye(#`O′)</p>
<h1 id="GenP"><a href="#GenP" class="headerlink" title="GenP"></a>GenP</h1><blockquote>
<p>补丁修复程序，懂得都懂 :-)</p>
</blockquote>
<p>下载链接：<a href="https://official-genp.com/" target="_blank" rel="noopener">https://official-genp.com/</a></p>
<p>但是这个官方网站上的下载链接失效了，然后就找了一个别人的网盘链接：<a href="https://pan.baidu.com/s/1nX0zKnltwVmdUSQ5uxPxEQ" target="_blank" rel="noopener">Adobe_2019-2020_GenP_v2.2</a></p>
<h1 id="Byebye"><a href="#Byebye" class="headerlink" title="Byebye"></a>Byebye</h1><p>是我不配，把 Adobe Creaative Cloud移到 F 盘就失灵打不开了，下载计划戛然而止…</p>
]]></content>
      <categories>
        <category>软件下载</category>
      </categories>
      <tags>
        <tag>Adobe</tag>
      </tags>
  </entry>
  <entry>
    <title>2021-09-17-组会</title>
    <url>/2021/09/17/2021-09-17-%E7%BB%84%E4%BC%9A/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote class="blockquote-center">
<p>^ _ ^ </p>

</blockquote>
<a id="more"></a>

<blockquote>
<p>From 2021-09-11 to 2021-09-17<br>Fix bugs of project(cj_text_analyze)</p>
</blockquote>
<h1 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h1><p><img src="/2021/09/17/2021-09-17-%E7%BB%84%E4%BC%9A/1.jpg" alt></p>
<h1 id="9-11"><a href="#9-11" class="headerlink" title="9.11"></a>9.11</h1><p><img src="/2021/09/17/2021-09-17-%E7%BB%84%E4%BC%9A/2.jpg" alt></p>
<h2 id="Score-Compare"><a href="#Score-Compare" class="headerlink" title="Score Compare"></a>Score Compare</h2><p>After a token go through the <code>FSM(Finite-State Machine)</code>, process will find out its’ pattern type. There is a one-to-many relationship between morphological types and semantic types.<br>We define features every semantic type should qualify in <code>token_config.py</code>.If the token match a feature which belongs to a semantic,it will get a score added in this semantic.</p>
<p>After semantic score assigned,the process will normalize the score to [0,1], I call the normalized result weight, which means the possibility of the token to have this semantic.</p>
<p>In some situation, this thinking will make some mistake. Because different pattern type will map into the same semantic type.Sometimes, their weight might be same, but the score is different. Usually, we need the high score one to replace the low score one which might firstly be put into the clot chess.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">occupy_token_score = occupy_token.get_score_by_semantic(semantic)</span><br><span class="line">token_weight = token.get_weight_by_semantic(semantic)</span><br><span class="line">token_score = token.get_score_by_semantic(semantic)</span><br><span class="line"><span class="keyword">if</span> occupy_token_weight &gt;= token_weight <span class="keyword">and</span> occupy_token_score &gt;= token_score:</span><br><span class="line">    logger.info(<span class="string">f"占领token【<span class="subst">&#123;occupy_token.value&#125;</span>】语义权重【<span class="subst">&#123;occupy_token_weight&#125;</span>】&gt;= 当前token【<span class="subst">&#123;token.value&#125;</span>】语义权重【<span class="subst">&#123;token_weight&#125;</span>】;尝试不摆放<span class="subst">&#123;token&#125;</span>"</span>)</span><br><span class="line">    logger.info(<span class="string">f"占领token【<span class="subst">&#123;occupy_token.value&#125;</span>】语义得分【<span class="subst">&#123;occupy_token_score&#125;</span>】&gt;= 当前token【<span class="subst">&#123;token.value&#125;</span>】语义得分【<span class="subst">&#123;token_score&#125;</span>】;尝试不摆放<span class="subst">&#123;token&#125;</span>"</span>)</span><br><span class="line">    next_state = copy.deepcopy(cur_state)</span><br><span class="line">    next_state.discard_token(token)</span><br><span class="line">    logger.info(<span class="string">f"新的元素棋盘放入队列:<span class="subst">&#123;next_state&#125;</span>"</span>)</span><br><span class="line">    state_queue.put([-next_state.get_score(), next_state])</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    logger.info(<span class="string">f"摆放【<span class="subst">&#123;token.value&#125;</span>】替换【<span class="subst">&#123;occupy_token.value&#125;</span>】"</span>)</span><br><span class="line">    next_state = copy.deepcopy(cur_state)</span><br><span class="line">    next_state.pos_token(index, token)</span><br><span class="line">    logger.info(<span class="string">f"新的元素棋盘放入队列:<span class="subst">&#123;next_state&#125;</span>"</span>)</span><br></pre></td></tr></table></figure>

<p><img src="/2021/09/17/2021-09-17-%E7%BB%84%E4%BC%9A/3.jpg" alt></p>
<h2 id="Date-Fix"><a href="#Date-Fix" class="headerlink" title="Date Fix"></a>Date Fix</h2><p><img src="/2021/09/17/2021-09-17-%E7%BB%84%E4%BC%9A/4.jpg" alt> </p>
<h2 id="Float-Bond-Money-Situation"><a href="#Float-Bond-Money-Situation" class="headerlink" title="Float Bond Money Situation"></a>Float Bond Money Situation</h2><p><img src="/2021/09/17/2021-09-17-%E7%BB%84%E4%BC%9A/5.jpg" alt></p>
<h1 id="9-12"><a href="#9-12" class="headerlink" title="9.12"></a>9.12</h1><p><img src="/2021/09/17/2021-09-17-%E7%BB%84%E4%BC%9A/6.jpg" alt></p>
<p><img src="/2021/09/17/2021-09-17-%E7%BB%84%E4%BC%9A/7.jpg" alt></p>
<p><img src="/2021/09/17/2021-09-17-%E7%BB%84%E4%BC%9A/8.jpg" alt></p>
<h1 id="9-13-9-15"><a href="#9-13-9-15" class="headerlink" title="9.13 - 9.15"></a>9.13 - 9.15</h1><p><img src="/2021/09/17/2021-09-17-%E7%BB%84%E4%BC%9A/9.jpg" alt></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">@File    :   merge_strategy.py</span></span><br><span class="line"><span class="string">@Time    :   2021/09/14 07:26:21</span></span><br><span class="line"><span class="string">@Author  :   LuckyQ</span></span><br><span class="line"><span class="string">@Version :   1.0</span></span><br><span class="line"><span class="string">@Desc    :   Token 合并策略</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> token_evaluate <span class="keyword">import</span> has_semantic</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> cj_token <span class="keyword">import</span> Token</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MergeStrategy</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">merge</span><span class="params">(self, token_list)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 交易关键词合并策略，形如“关键词1:xx,关键词2:xx”的(2|4|6|8)个Token进行合并</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DealKeywordMerge</span><span class="params">(MergeStrategy)</span>:</span></span><br><span class="line">    keyword_list = [<span class="string">"买"</span>, <span class="string">"卖"</span>]</span><br><span class="line">    obj_semantic = [<span class="string">"Deal_Company"</span>, <span class="string">"Real_Deal_Op_Name"</span>]</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">merge</span><span class="params">(self, token_list)</span>:</span></span><br><span class="line">        res_list = []</span><br><span class="line">        i, n = <span class="number">0</span>, len(token_list)</span><br><span class="line">        <span class="keyword">while</span> i &lt; n:</span><br><span class="line">            token = token_list[i]</span><br><span class="line">            token_value = token.value</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> self._is_contain_keyword(token_value):</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">                res_list.append(token)</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            flag = <span class="literal">False</span></span><br><span class="line">            <span class="keyword">for</span> semantic <span class="keyword">in</span> self.obj_semantic:</span><br><span class="line">                <span class="keyword">if</span> has_semantic(token, semantic):</span><br><span class="line">                    flag = <span class="literal">True</span></span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> flag:</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">                res_list.append(token)</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="comment"># 从 i 偶数间隔往下寻找可以合并的关键词组</span></span><br><span class="line">            start = i</span><br><span class="line">            <span class="keyword">assert</span> i+<span class="number">1</span> &lt; n</span><br><span class="line">            merge_value_list = [token_list[i].value, token_list[i+<span class="number">1</span>].value]</span><br><span class="line">            i += <span class="number">2</span></span><br><span class="line">            <span class="keyword">while</span> i+<span class="number">1</span> &lt; n:</span><br><span class="line">                token = token_list[i]</span><br><span class="line">                token_value = token.value</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> self._is_contain_keyword(token_value):</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                flag = <span class="literal">False</span></span><br><span class="line">                <span class="keyword">for</span> semantic <span class="keyword">in</span> self.obj_semantic:</span><br><span class="line">                    <span class="keyword">if</span> has_semantic(token, semantic):</span><br><span class="line">                        flag = <span class="literal">True</span></span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> flag:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                </span><br><span class="line">                merge_value_list.extend([token_list[i].value, token_list[i+<span class="number">1</span>].value])</span><br><span class="line">                i += <span class="number">2</span></span><br><span class="line"></span><br><span class="line">            new_token = Token(value=merge_value_list, pattern_type=<span class="string">"Keyword_Compose"</span>)</span><br><span class="line">            new_token.row = token_list[start].row</span><br><span class="line">            res_list.append(new_token)</span><br><span class="line">            <span class="comment"># 找到一个这样的单词组就退出循环</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">while</span> i &lt; n:</span><br><span class="line">            res_list.append(token_list[i])</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> res_list</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 某字符串是否包含 keyword_list 中的关键词</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_is_contain_keyword</span><span class="params">(self, s)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> keyword <span class="keyword">in</span> self.keyword_list:</span><br><span class="line">                <span class="keyword">if</span> keyword <span class="keyword">in</span> s:</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 多个同态要素合并策略</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SemanticSimilaryMerge</span><span class="params">(MergeStrategy)</span>:</span></span><br><span class="line">    semantic_list = [<span class="string">"Product"</span>, <span class="string">"Bond_Money"</span>]</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">merge</span><span class="params">(self, token_list)</span>:</span></span><br><span class="line">        res_list = []</span><br><span class="line">        i, n = <span class="number">0</span>, len(token_list)</span><br><span class="line">        start, end = <span class="number">-1</span>, <span class="number">-1</span></span><br><span class="line">        <span class="keyword">while</span> i &lt; n<span class="number">-1</span>:</span><br><span class="line">            token, next_token = token_list[i], token_list[i+<span class="number">1</span>]</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> self._is_semantic_seq(token, next_token):</span><br><span class="line">                res_list.append(token)</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            start = i</span><br><span class="line">            value_list = [token.value, next_token.value]</span><br><span class="line">            i += <span class="number">2</span></span><br><span class="line">            <span class="keyword">while</span> i &lt; n - <span class="number">1</span>:</span><br><span class="line">                token, next_token = token_list[i], token_list[i+<span class="number">1</span>]</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> self._is_semantic_seq(token, next_token):</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                value_list.extend([token.value, next_token.value])</span><br><span class="line">                i += <span class="number">2</span></span><br><span class="line"></span><br><span class="line">            new_token = Token(value=value_list, pattern_type=<span class="string">"Element_Compose"</span>)</span><br><span class="line">            new_token.row = token_list[start].row</span><br><span class="line">            res_list.append(new_token)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">while</span> i &lt; n:</span><br><span class="line">            res_list.append(token_list[i])</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> res_list</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_is_semantic_seq</span><span class="params">(self, token, next_token)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> has_semantic(token, self.semantic_list[<span class="number">0</span>]) <span class="keyword">and</span> has_semantic(next_token, self.semantic_list[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 同义词、词补充合并策略</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SupplyMerge</span><span class="params">(MergeStrategy)</span>:</span></span><br><span class="line">    sequence_list = [[<span class="string">"Real_Deal_Op_Name"</span>, <span class="string">"Deal_Company"</span>], [<span class="string">"Real_Deal_Op_Name"</span>, <span class="string">"Op_Dealer_No"</span>], \</span><br><span class="line">                    [<span class="string">"Deal_Company"</span>, <span class="string">"Dealer_No"</span>]]</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">merge</span><span class="params">(self, token_list)</span>:</span></span><br><span class="line">        res_list = []</span><br><span class="line">        i, n = <span class="number">0</span>, len(token_list)</span><br><span class="line">        <span class="keyword">while</span> i &lt; n:</span><br><span class="line">            match_seq = <span class="literal">False</span></span><br><span class="line">            <span class="keyword">for</span> sequence <span class="keyword">in</span> self.sequence_list:</span><br><span class="line">                <span class="keyword">if</span> i + len(sequence) - <span class="number">1</span> &gt;= n:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                flag = <span class="literal">True</span></span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>, len(sequence)):</span><br><span class="line">                    <span class="keyword">if</span> <span class="keyword">not</span> has_semantic(token_list[i+j], sequence[j]):</span><br><span class="line">                        flag = <span class="literal">False</span></span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">                <span class="comment"># 有一个满足条件的语义序列，则将它们合并</span></span><br><span class="line">                <span class="keyword">if</span> flag:</span><br><span class="line">                    value_list = [token_list[i].value <span class="keyword">for</span> i <span class="keyword">in</span> range(i,i+len(sequence))]</span><br><span class="line">                    new_token = Token(value=value_list, pattern_type=<span class="string">"Similary_Compose"</span>)</span><br><span class="line">                    new_token.row = token_list[i].row</span><br><span class="line">                    res_list.append(new_token)</span><br><span class="line">                    i += len(sequence)</span><br><span class="line">                    match_seq = <span class="literal">True</span></span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> match_seq:</span><br><span class="line">                res_list.append(token_list[i])</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> res_list</span><br></pre></td></tr></table></figure>

<h1 id="9-16"><a href="#9-16" class="headerlink" title="9.16"></a>9.16</h1><p><img src="/2021/09/17/2021-09-17-%E7%BB%84%E4%BC%9A/10.jpg" alt></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 如果当前棋盘中相邻两行差异太大的话，将下一行合并到这一行</span></span><br><span class="line">        fix_cloth_chess = []</span><br><span class="line">        fix_orders = []</span><br><span class="line">        <span class="comment"># 将交集小于 max_dis 的相邻两行进行合并</span></span><br><span class="line">        max_dis = <span class="number">2</span></span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> i &lt; len(self.cloth_chess):</span><br><span class="line">            row = self.cloth_chess[i]</span><br><span class="line">            <span class="keyword">if</span> i == len(self.cloth_chess) - <span class="number">1</span>:</span><br><span class="line">                fix_cloth_chess.append(row)</span><br><span class="line">                fix_orders.append(self.orders[i])</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            cur_element_list = self.orders[i]</span><br><span class="line">            next_element_list = self.orders[i+<span class="number">1</span>]</span><br><span class="line">            element_dis = len(set(cur_element_list).intersection(set(next_element_list)))</span><br><span class="line">            <span class="keyword">if</span> element_dis &lt;= max_dis:</span><br><span class="line">                fix_order = copy.deepcopy(cur_element_list)</span><br><span class="line">                <span class="keyword">for</span> ele <span class="keyword">in</span> next_element_list:</span><br><span class="line">                    <span class="keyword">if</span> ele <span class="keyword">not</span> <span class="keyword">in</span> fix_order:</span><br><span class="line">                        fix_order.append(ele)</span><br><span class="line">                new_row = copy.deepcopy(row)</span><br><span class="line">                <span class="keyword">for</span> i, col <span class="keyword">in</span> enumerate(self.cloth_chess[i+<span class="number">1</span>]):</span><br><span class="line">                    <span class="keyword">if</span> col != <span class="literal">None</span> <span class="keyword">and</span> row[i] == <span class="literal">None</span>:</span><br><span class="line">                        new_row[i] = copy.deepcopy(col)</span><br><span class="line">                fix_cloth_chess.append(new_row)</span><br><span class="line">                fix_orders.append(fix_order)</span><br><span class="line">                i += <span class="number">2</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                fix_cloth_chess.append(row)</span><br><span class="line">                fix_orders.append(self.orders[i])</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">        self.cloth_chess = fix_cloth_chess</span><br><span class="line">        self.orders = fix_orders</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>组会</category>
      </categories>
      <tags>
        <tag>组会</tag>
      </tags>
  </entry>
  <entry>
    <title>AndrewNg的机器学习课-引言</title>
    <url>/2021/06/02/AndrewNg%E7%9A%84%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%AF%BE-%E5%BC%95%E8%A8%80/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote class="blockquote-center">
<p>简单介绍机器学习 ^_^ </p>

</blockquote>
<a id="more"></a>

<h1 id="什么是机器学习？"><a href="#什么是机器学习？" class="headerlink" title="什么是机器学习？"></a>什么是机器学习？</h1><p>一个程序被认为能从经验<strong>E</strong>中学习，解决任务<strong>T</strong>，达到性能度量值<strong>P</strong>，当且仅当，有了经验<strong>E</strong>后，经过<strong>P</strong>评判，程序在处理<strong>T</strong>时的性能有所提升。</p>
<p>举例：</p>
<ul>
<li>AI下棋程序：E是自我练习；T是下棋；P是与新对手比赛时，赢得比赛的概率。</li>
<li>标记垃圾邮件程序：E已对属性进行标记的邮件集合；T是标记垃圾邮件；P是对一封未知属性邮件进行标记的正确率。</li>
</ul>
<h1 id="监督学习"><a href="#监督学习" class="headerlink" title="监督学习"></a>监督学习</h1><p>监督学习指的就是我们给学习算法一个数据集。这个数据集由“正确答案”组成。然后运用学习算法，算出更多的正确答案。</p>
<h2 id="回归问题"><a href="#回归问题" class="headerlink" title="回归问题"></a>回归问题</h2><p>回归这个词的意思是，我们在试着推测出这一系列连续值属性。</p>
<p>例如房价预测问题，我们试着推测出一个连续值的结果，即房子的价格。一般房子的价格会记到美分，所以房价实际上是一系列离散的值，但是我们通常又把房价看成实数，看成是标量，所以又把它看成一个连续的数值。<br><img src="/2021/06/02/AndrewNg%E7%9A%84%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%AF%BE-%E5%BC%95%E8%A8%80/1.jpg" alt></p>
<h2 id="分类问题"><a href="#分类问题" class="headerlink" title="分类问题"></a>分类问题</h2><p>分类指的是，我们试着推测出离散的输出值。</p>
<p>例如肿瘤分类问题，我们试着推测出离散的输出值：0或1良性或恶性。而事实上在分类问题中，输出可能不止两个值。比如说可能有三种乳腺癌，所以你希望预测离散输出0、1、2、3。0 代表良性，1 表示第1类乳腺癌，2表示第2类癌症，3表示第3类，但这也是分类问题。<br><img src="/2021/06/02/AndrewNg%E7%9A%84%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%AF%BE-%E5%BC%95%E8%A8%80/2.jpg" alt></p>
<h1 id="无监督学习"><a href="#无监督学习" class="headerlink" title="无监督学习"></a>无监督学习</h1><p>不同于监督学习的数据的样子，无监督学习中的数据没有任何的标签或者是有相同的标签或者就是没标签。无监督学习尝试自动地找到数据中的结构，将自动地聚类那些个体数据到各个类。</p>
<p>应用举例：</p>
<ul>
<li>谷歌新闻：谷歌新闻搜索非常多的新闻事件，自动地把它们聚类到一起，使同类新闻具有同一主题，组成关联的新闻。</li>
<li>基因学：输入一组不同个体基因表达图谱，对其中的每个个体，你要分析出它们是否有一个特定的基因。你能做的就是运行一个聚类算法，把个体聚类到不同的类或不同类型的组（人）。</li>
<li>组织大型计算机集群：将易于协同地工作的机器聚类到同一类，让你的数据中心工作得更高效。</li>
<li>社交网络的分析：自动地给出朋友的分组，即每组里的人们彼此都熟识，认识组里的所有人。</li>
<li>市场分割：许多公司有大型的数据库，存储消费者信息。所以，你能检索这些顾客数据集，自动地发现市场分类，并自动地把顾客划分到不同的细分市场中，你才能自动并更有效地销售或不同的细分市场一起进行销售。</li>
<li>天文数据分析：这些聚类算法给出了令人惊讶、有趣、有用的理论，解释了星系是如何诞生的。</li>
<li>鸡尾酒宴问题：在一个包含两个同时说话的人的录音中分离出每个人的声音。</li>
</ul>
]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>AndrewNg 机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title>BootStrap</title>
    <url>/2020/09/11/BootStrap/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote class="blockquote-center">
<p>^ _ ^ </p>

</blockquote>
<a id="more"></a>

<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>BootStrap是一种前端框架，使得开发人员可以在框架基础上，进行开发，简化工作；<br>特点：支持响应式布局，使得一套页面可以兼容不同分辨率的设备；</p>
<p><strong>资料</strong><br><a href="https://v3.bootcss.com/getting-started/" target="_blank" rel="noopener">BootStrap中文网</a></p>
<h1 id="原理与操作"><a href="#原理与操作" class="headerlink" title="原理与操作"></a>原理与操作</h1><h2 id="响应式布局"><a href="#响应式布局" class="headerlink" title="响应式布局"></a>响应式布局</h2><blockquote>
<p>实现：依赖于栅格系统，将一行平均分成12个格子，可以指定元素占几个格子</p>
</blockquote>
<h3 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h3><ol>
<li>定义容器<ul>
<li>container:</li>
<li>container-fluid:</li>
</ul>
</li>
<li>定义行；row</li>
<li>定义元素：col-设备代号-格子数目<ul>
<li>xs: 超新屏幕 手机 (&lt;768px)</li>
<li>sm: 小屏幕 平板 (&gt;=768px)</li>
<li>md: 中等屏幕 笔记本电脑 (&gt;=992px)</li>
<li>lg: 大屏幕 台式电脑 (&gt;=1200px)</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>软件使用</category>
      </categories>
      <tags>
        <tag>BootStrap</tag>
      </tags>
  </entry>
  <entry>
    <title>AndrewNg的机器学习课-逻辑回归</title>
    <url>/2021/06/03/AndrewNg%E7%9A%84%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%AF%BE-%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote class="blockquote-center">
<p>^_^ </p>

</blockquote>
<a id="more"></a>

<h1 id="分类问题"><a href="#分类问题" class="headerlink" title="分类问题"></a>分类问题</h1><p>在分类问题中，我们尝试预测的是结果是否属于某一个类（例如正确或错误），即预测值为离散值。如果我们要用线性回归算法来解决一个分类问题，对于分类，$y$取值为 0 或者1，但如果你使用的是线性回归，那么假设函数的输出值可能远大于 1，或者远小于0。尽管我们知道标签应该取值0 或者1，但是如果算法得到的值远大于1或者远小于0的话，就会感觉很奇怪。所以我们在接下来的要研究的算法就叫做逻辑回归算法，这个算法的性质是：它的输出值永远在0到 1 之间。</p>
<h1 id="逻辑回归模型"><a href="#逻辑回归模型" class="headerlink" title="逻辑回归模型"></a>逻辑回归模型</h1><p>我们引入一个新的模型，逻辑回归，该模型的输出变量范围始终在0和1之间。 逻辑回归模型的假设是：$h_\theta = g(\theta^TX)$。其中，$X$代表特征向量，$g$代表逻辑函数（logistic function)。一个常用的逻辑函数为S形函数（Sigmoid function），公式为：$g(z) = \frac{1}{1+e^{-z}}$</p>
<p>该函数的图像为：<br><img src="/2021/06/03/AndrewNg%E7%9A%84%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%AF%BE-%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92/1.jpg" alt></p>
<p>$h_\theta(x)$的作用是，对于给定的输入变量，根据选择的参数计算输出变量=1的可能性，即$h_\theta(x) = P(y=1|x;\theta)$。</p>
<h1 id="判定边界"><a href="#判定边界" class="headerlink" title="判定边界"></a>判定边界</h1><p>现在讲<strong>下决策边界(decision boundary)</strong>的概念。这个概念能更好地帮助我们理解逻辑回归的假设函数在计算什么。</p>
<p><img src="/2021/06/03/AndrewNg%E7%9A%84%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%AF%BE-%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92/1.png" alt></p>
<p>根据上面绘制出的 S 形函数图像，我们知道当</p>
<ul>
<li>$z=0$时，$g(z)=0.5$;</li>
<li>$z&lt;0$时，$g(z)&lt;0.5$;</li>
<li>$z&gt;0$时，$g(z)&gt;0.5$;</li>
</ul>
<p>又有$z=\theta^Tx$，现在假设我们有一个模型：<br><img src="/2021/06/03/AndrewNg%E7%9A%84%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%AF%BE-%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92/2.png" alt></p>
<p>假设参数$\theta = [-3,1,1]$，则当$-3 + x_1 + x_2 &gt; 0$时，模型将预测$y=1$。我们可以绘制直线$x_1 + x_2 = 3$，这条线便是我们模型的分界线，将预测为1的区域和预测为 0的区域分隔开。<br><img src="/2021/06/03/AndrewNg%E7%9A%84%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%AF%BE-%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92/2.jpg" alt></p>
<p>假使我们的数据呈现这样的分布情况，怎样的模型才能适合呢？<br><img src="/2021/06/03/AndrewNg%E7%9A%84%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%AF%BE-%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92/3.jpg" alt></p>
<p>因为需要用曲线才能分隔$y=0$的区域和$y=1$的区域，我们需要二次方特征：$h_\theta(x)=g(\theta_0+\theta_1x_1+\theta_2x_2+\theta_3x_1^2+\theta_4x_2^2)$。假设参数$\theta = [-1,0,0,1,1]$，，则我们得到的判定边界恰好是圆点在原点且半径为1的圆形。</p>
<p><strong>我们可以用非常复杂的模型来适应非常复杂形状的判定边界。</strong></p>
<h2 id="代价函数"><a href="#代价函数" class="headerlink" title="代价函数"></a>代价函数</h2>]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>AndrewNg 机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Android入门</title>
    <url>/2021/06/09/Android%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote class="blockquote-center">
<p>^_^ </p>

</blockquote>
<a id="more"></a>

<h1 id="下载和安装"><a href="#下载和安装" class="headerlink" title="下载和安装"></a>下载和安装</h1><p>进入官网下载最近版本的 <strong>Android Studio</strong>，下载地址：<a href="https://developer.android.google.cn/studio" target="_blank" rel="noopener">https://developer.android.google.cn/studio</a><br><img src="/2021/06/09/Android%E5%85%A5%E9%97%A8/1.jpg" alt></p>
<h1 id="创建项目-amp-运行应用"><a href="#创建项目-amp-运行应用" class="headerlink" title="创建项目 &amp; 运行应用"></a>创建项目 &amp; 运行应用</h1><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><ol>
<li>在 Welcome to Android Studio 窗口中，点击 Create New Project。</li>
<li>在 Select a Project Template 窗口中，选择 <strong>Empty Activity</strong>，然后点击 Next。</li>
<li>在 Configure your project 窗口中，完成以下操作：<ol>
<li>在 Name 字段中输入项目名，可包含空格。</li>
<li>在 Package name 字段中输入存放 <code>MainActivity</code> 的包，默认为“com.example.myfirstapp”。</li>
<li>如果您想将项目放在其他文件夹中，请更改其 Save 位置。</li>
<li>从 Language 下拉菜单中选择 <strong>Java</strong> 或 <strong>Kotlin</strong>。</li>
<li>在 Minimum SDK 字段中选择您希望应用支持的最低 Android 版本。</li>
</ol>
</li>
<li>点击 Finish，经过一段时间的处理后，Android Studio 主窗口会出现。</li>
</ol>
<p><strong>最重要的文件</strong></p>
<ol>
<li><code>MainActivity</code>：这是主 activity。它是应用的入口点。当您构建和运行应用时，系统会启动此 <code>Activity</code> 的实例并加载其布局。</li>
<li><code>activity_main.xml</code>：此 XML 文件定义了 activity 界面 (UI) 的布局。它包含一个 <code>TextView</code> 元素，其中具有“Hello, World!”文本</li>
<li><code>AndroidManifest.xml</code>：清单文件描述了应用的基本特性并定义了每个应用组件。</li>
<li><code>build.gradle</code>：有两个使用此名称的文件：一个针对项目“Project: My First App”，另一个针对应用模块“Module: My_First_App.app”。每个模块均有自己的 <code>build.gradle</code> 文件。</li>
</ol>
<h2 id="运行应用"><a href="#运行应用" class="headerlink" title="运行应用"></a>运行应用</h2><h3 id="在模拟器上运行"><a href="#在模拟器上运行" class="headerlink" title="在模拟器上运行"></a>在模拟器上运行</h3><ol>
<li>通过按钮 <strong>AVD Manager</strong> 创建一个 Android 虚拟设备 (AVD)，模拟器可以使用该设备安装和运行您的应用。<br><img src="/2021/06/09/Android%E5%85%A5%E9%97%A8/3.jpg" alt></li>
<li>在工具栏中，从运行/调试配置下拉菜单中选择您的应用。</li>
<li>从目标设备下拉菜单中，选择要用来运行应用的 AVD。<br><img src="/2021/06/09/Android%E5%85%A5%E9%97%A8/2.jpg" alt></li>
<li>点击 <strong>Run</strong> 图标 </li>
</ol>
<h3 id="在真实设备上运行"><a href="#在真实设备上运行" class="headerlink" title="在真实设备上运行"></a>在真实设备上运行</h3><ol>
<li>使用一根 USB 线将设备连接到开发机器。</li>
<li>执行以下步骤，在手机的<strong>开发者选项</strong>窗口中启用 <strong>USB 调试</strong>。</li>
<li>按照以下步骤操作，在设备上运行应用：<ol>
<li>在 Android Studio 中，从工具栏中的运行/调试配置下拉菜单中选择您的应用。</li>
<li>在工具栏中，从目标设备下拉菜单中选择要用来运行应用的设备。<br><img src="/2021/06/09/Android%E5%85%A5%E9%97%A8/4.jpg" alt></li>
</ol>
</li>
<li>点击 <strong>Run</strong> </li>
</ol>
<h1 id="构建首个应用"><a href="#构建首个应用" class="headerlink" title="构建首个应用"></a>构建首个应用</h1><h2 id="构建简单的界面"><a href="#构建简单的界面" class="headerlink" title="构建简单的界面"></a>构建简单的界面</h2><p>Android 应用的界面 (UI) 以布局和微件的层次结构形式构建而成。布局是 <code>ViewGroup</code> 对象，即控制其子视图在屏幕上的放置方式的容器。微件是 <code>View</code> 对象，即按钮和文本框等界面组件。<br><img src="/2021/06/09/Android%E5%85%A5%E9%97%A8/5.jpg" alt></p>
<h3 id="打开布局编辑器"><a href="#打开布局编辑器" class="headerlink" title="打开布局编辑器"></a>打开布局编辑器</h3><p>首先，请按照以下步骤设置工作区：</p>
<ol>
<li>在 Project 窗口中，依次打开 <strong>app &gt; res &gt; layout &gt; activity_main.xml</strong>。</li>
<li>若要给布局编辑器留出空间，请隐藏 Project 窗口。</li>
<li>如果您的编辑器显示 XML 源代码，请点击窗口右上角的 Design 标签页。</li>
<li>按如下方式配置布局。图中外边距部分设置为16。<br><img src="/2021/06/09/Android%E5%85%A5%E9%97%A8/6.jpg" alt></li>
</ol>
<p>左下方的 <strong>Component Tree</strong> 面板显示布局的视图层次结构。在本例中，根视图是 <code>ConstraintLayout</code>，它仅包含一个 <code>TextView</code> 对象。</p>
<p><code>ConstraintLayout</code> 是一种布局，它根据同级视图和父布局的约束条件定义每个视图的位置。这样一来，使用扁平视图层次结构既可以创建简单布局，又可以创建复杂布局。这种布局无需嵌套布局。嵌套布局是布局内的布局，会增加绘制界面所需的时间。</p>
<h3 id="添加文本框"><a href="#添加文本框" class="headerlink" title="添加文本框"></a>添加文本框</h3><ol>
<li>首先，您需要在 <strong>Component Tree</strong> 面板中移除布局中已有的内容。</li>
<li>在 <strong>Palette</strong> 面板中，点击 <strong>Text</strong> 以显示可用的文本控件。</li>
<li>将 <strong>Plain Text</strong> 拖动到设计编辑器中，并将其放在靠近布局顶部的位置。这是一个接受纯文本输入的 <code>EditText</code> 微件。</li>
<li>点击设计编辑器中的视图。现在，您可以在每个角上看到调整视图大小的<strong>正方形手柄</strong>，并在每个边上看到<strong>圆形约束锚点</strong>。</li>
<li>点击并按住顶边上的锚点，将其向上拖动，直至其贴靠到布局顶部，然后将其释放。这是一个约束条件：它会将视图约束在已设置的默认外边距内。在本例中，您将其设置为距离布局顶部 16 dp。</li>
<li>使用相同的过程创建一个从视图左侧到布局左侧的约束条件。</li>
</ol>
<p>最终结果：<br><img src="/2021/06/09/Android%E5%85%A5%E9%97%A8/7.jpg" alt></p>
<h3 id="添加按钮"><a href="#添加按钮" class="headerlink" title="添加按钮"></a>添加按钮</h3><ol>
<li>在 <strong>Palette</strong> 面板中，点击 <strong>Buttons</strong> 。</li>
<li>将 <strong>Button</strong> 微件拖到设计编辑器中，并将其放在靠近右侧的位置。</li>
<li>创建一个从按钮左侧到文本框右侧的约束条件。</li>
<li>如需按水平对齐约束视图，请创建一个文本基线之间的约束条件。为此，请右键点击按钮，然后选择 <strong>Show Baseline</strong> 在布局编辑器中显示基准操作。基线锚点显示在按钮内部。点击并按住此锚点，然后将其拖动到相邻文本框中显示的基线锚点上。</li>
</ol>
<p>最终结果：<br><img src="/2021/06/09/Android%E5%85%A5%E9%97%A8/8.jpg" alt></p>
<h3 id="更改界面字符串"><a href="#更改界面字符串" class="headerlink" title="更改界面字符串"></a>更改界面字符串</h3><p>若要预览界面，请点击工具栏中的 <strong>Select Design Surface</strong>，然后选择 <strong>Design</strong>。</p>
<ol>
<li>打开 <strong>Project</strong> 窗口，然后打开 <strong>app &gt; res &gt; values &gt; strings.xml</strong>。<blockquote>
<p>这是一个字符串资源文件，您可在此文件中指定所有界面字符串。您可以利用该文件在一个位置管理所有界面字符串，使字符串的查找、更新和本地化变得更加容易。</p>
</blockquote>
</li>
<li>点击窗口顶部的 <strong>Open editor</strong>。此时将打开 <strong>Translations Editor</strong>，它提供了一个可以添加和修改默认字符串的简单界面。它还有助于让所有已翻译的字符串井然有序。<br><img src="/2021/06/09/Android%E5%85%A5%E9%97%A8/9.jpg" alt></li>
<li>点击 +  可以创建一个新字符串作为文本框的“提示文本”。在 <strong>Add Key</strong> 对话框中，完成以下步骤：<ol>
<li>在 Key 字段中输入“edit_message”。</li>
<li>在 Default Value 字段中输入“Enter a message”。</li>
<li>点击 OK。</li>
</ol>
</li>
<li>再添加一个名为“button_send”且值为“Send”的键。</li>
</ol>
<p>现在，您可以为每个视图设置这些字符串。若要返回布局文件，请点击标签页栏中的 activity_main.xml。然后，添加字符串，如下所示：</p>
<ol>
<li>点击布局中的文本框。如果右侧还未显示 <strong>Attributes</strong> 窗口，请点击右侧边栏上的 <strong>Attributes</strong>。</li>
<li>找到 <strong>text</strong> 属性（当前设为“Name”）并删除相应的值。</li>
<li>找到 <strong>hint</strong> 属性，然后点击文本框右侧的<strong>椭圆(Pick a Resource)</strong>。在显示的对话框中，双击列表中的 <strong>edit_message</strong>。</li>
<li>点击布局中的按钮，找到其 <strong>text</strong> 属性（当前设为“Button”）。然后点击<strong>椭圆(Pick a Resource)</strong>，并选择 <strong>button_send</strong>。</li>
</ol>
<h3 id="让文本框大小可灵活调整"><a href="#让文本框大小可灵活调整" class="headerlink" title="让文本框大小可灵活调整"></a>让文本框大小可灵活调整</h3><p>若要创建一个适应不同屏幕尺寸的布局，您需要让文本框拉伸以填充去除按钮和外边距后剩余的所有水平空间。</p>
<p>继续操作之前，请点击工具栏中的 <strong>Select Design Surface</strong>，然后选择 <strong>Blueprint</strong>。</p>
<p>若要让文本框大小可灵活调整，请按以下步骤操作：</p>
<ol>
<li>选择两个视图。若要执行此操作，请点击一个视图，在按住 <strong>Shift</strong> 键的同时点击另一个视图，然后右键点击任一视图并依次选择 <strong>Chains &gt; Create Horizontal Chain</strong>。<blockquote>
<p>链是两个或多个视图之间的双向约束条件，可让您采用一致的方式安排链接的视图。</p>
</blockquote>
</li>
<li>选择按钮并打开 <strong>Attributes</strong> 窗口。然后使用 <strong>Constraint Widget</strong> 将右外边距设为 16 dp。</li>
<li>点击文本框以查看其属性。然后，点击宽度指示器两次，确保将其设置为锯齿状线 (Match Constraints)。<blockquote>
<p>“Match constraints”表示宽度将延长以符合水平约束条件和外边距的定义。因此，文本框将拉伸以填充去除按钮和所有外边距后剩余的水平空间。</p>
</blockquote>
</li>
</ol>
<p>最终结果：<br><img src="/2021/06/09/Android%E5%85%A5%E9%97%A8/10.jpg" alt></p>
<h2 id="启动另一个-activity"><a href="#启动另一个-activity" class="headerlink" title="启动另一个 activity"></a>启动另一个 activity</h2><blockquote>
<p>在本节中，您将向 <code>MainActivity</code> 添加一些代码，以便在用户点按 <code>Send</code> 按钮时启动一个显示消息的新 activity。</p>
</blockquote>
<h3 id="响应“Send”按钮"><a href="#响应“Send”按钮" class="headerlink" title="响应“Send”按钮"></a>响应“Send”按钮</h3><ol>
<li>在 <strong>app &gt; java &gt; com.example.myfirstapp &gt; MainActivity</strong> 文件中，添加以下 <code>sendMessage()</code> 方法桩：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** Called when the user taps the Send button */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Do something in response to button</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>返回到 <strong>activity_main.xml</strong> 文件，并从该按钮调用此方法：<ol>
<li>选择布局编辑器中的相应按钮。</li>
<li>在 <strong>Attributes</strong> 窗口中，找到 <strong>onClick</strong> 属性，并从其下拉列表中选择 <strong>sendMessage</strong> 。</li>
</ol>
</li>
<li>接下来，填写此方法，以读取文本字段的内容，并将该文本传递给另一个 <code>activity</code> 。</li>
</ol>
<h3 id="构建一个-intent"><a href="#构建一个-intent" class="headerlink" title="构建一个 intent"></a>构建一个 intent</h3><p><code>Intent</code> 是在相互独立的组件（如两个 activity）之间提供运行时绑定功能的对象。Intent 表示应用执行某项操作的意图。您可以使用 intent 执行多种任务，但在本例中，您的 intent 将用于启动另一个 activity。</p>
<p>在 <code>MainActivity</code> 中，添加 <code>EXTRA_MESSAGE</code> 常量和 <code>sendMessage()</code> 代码，如下所示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String EXTRA_MESSAGE = <span class="string">"com.example.myfirstapp.MESSAGE"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Called when the user taps the Send button */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">    Intent intent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, DisplayMessageActivity<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    EditText editText = (EditText) findViewById(R.id.editText);</span><br><span class="line">    String message = editText.getText().toString();</span><br><span class="line">    intent.putExtra(EXTRA_MESSAGE, message);</span><br><span class="line">    startActivity(intent);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>sendMessage()</code> 将发生以下情况：</p>
<ol>
<li><code>Intent</code> 构造函数会获取两个参数：<code>Context</code> 和 <code>Class</code>。首先使用 Context 参数，因为 Activity 类是 Context 的子类，所以将 <code>Main Activity</code>传递过去。在本例中，传递到的应用组件的 Class 参数是要启动的 activity。</li>
<li><code>putExtra()</code> 方法将 <code>EditText</code> 的值添加到 intent。Intent 能够以称为“extra”的键值对形式携带数据类型。<blockquote>
<p>您的键是一个公共常量 EXTRA_MESSAGE，因为下一个 activity 将使用该键检索文本值。为 intent extra 定义键时，最好使用应用的软件包名称作为前缀。这样可以确保这些键是独一无二的，这在您的应用需要与其他应用进行交互时会很重要。</p>
</blockquote>
</li>
<li><code>startActivity()</code> 方法将启动一个由 Intent 指定的 <code>DisplayMessageActivity</code> 实例。接下来，您需要创建该类。</li>
</ol>
<h3 id="创建第二个-activity"><a href="#创建第二个-activity" class="headerlink" title="创建第二个 activity"></a>创建第二个 activity</h3><p>若要创建第二个 activity，请按以下步骤操作：</p>
<ol>
<li>在 <strong>Project</strong> 窗口中，右键点击 <strong>app</strong> 文件夹，然后依次选择 <strong>New &gt; Activity &gt; Empty Activity</strong>。</li>
<li>在 <strong>Configure Activity</strong> 窗口中，输入“DisplayMessageActivity”作为 Activity Name。将所有其他属性保留为默认设置，然后点击 Finish。</li>
</ol>
<p>Android Studio 会自动执行下列三项操作：</p>
<ul>
<li>创建 DisplayMessageActivity 文件。</li>
<li>创建 DisplayMessageActivity 文件对应的布局文件 activity_display_message.xml。</li>
<li>在 AndroidManifest.xml 中添加所需的 <code>&lt;activity&gt;</code> 元素。</li>
</ul>
<p>如果您运行应用并点按第一个 activity 上的按钮，将启动第二个 activity，但它为空。这是因为第二个 activity 使用模板提供的空布局。</p>
<h3 id="添加文本视图"><a href="#添加文本视图" class="headerlink" title="添加文本视图"></a>添加文本视图</h3><p>新 activity 包含一个空白布局文件。请按以下步骤操作，在显示消息的位置添加一个文本视图：</p>
<ol>
<li>打开 <strong>app &gt; res &gt; layout &gt; activity_display_message.xml</strong> 文件。</li>
<li>点击工具栏中的 <strong>Enable Autoconnection to Parent</strong> 。系统将启用 Autoconnect。</li>
<li>在 Palette 面板中，点击 Text，将 TextView 拖动到布局中，然后将其放置在靠近布局顶部中心的位置，使其贴靠到出现的垂直线上。Autoconnect 将添加左侧和右侧约束条件，以便将该视图放置在水平中心位置。</li>
</ol>
<p>最终结果：<br><img src="/2021/06/09/Android%E5%85%A5%E9%97%A8/11.jpg" alt></p>
<h3 id="显示消息"><a href="#显示消息" class="headerlink" title="显示消息"></a>显示消息</h3><p>在此步骤中，您将修改第二个 activity 以显示第一个 activity 传递的消息。</p>
<ol>
<li>在 <code>DisplayMessageActivity</code> 中，将以下代码添加到 <code>onCreate()</code> 方法中：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    setContentView(R.layout.activity_display_message);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Get the Intent that started this activity and extract the string</span></span><br><span class="line">    Intent intent = getIntent();</span><br><span class="line">    String message = intent.getStringExtra(MainActivity.EXTRA_MESSAGE);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Capture the layout's TextView and set the string as its text</span></span><br><span class="line">    TextView textView = findViewById(R.id.textView);</span><br><span class="line">    textView.setText(message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="添加向上导航功能"><a href="#添加向上导航功能" class="headerlink" title="添加向上导航功能"></a>添加向上导航功能</h3><p>在您的应用中，不是主入口点的每个屏幕（所有不是主屏幕的屏幕）都必须提供导航功能，以便将用户引导至应用层次结构中的逻辑父级屏幕。为此，请在应用栏中添加<strong>向上</strong>按钮。</p>
<p>若要添加向上按钮，您需要在 <code>AndroidManifest.xml</code> 文件中声明哪个 activity 是逻辑父级。打开 <strong>app &gt; manifests &gt; AndroidManifest.xml</strong> 文件，找到 <code>DisplayMessageActivity</code> 的 <code>&lt;activity&gt;</code> 标记，然后将其替换为以下代码：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".DisplayMessageActivity"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">android:parentActivityName</span>=<span class="string">".MainActivity"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- The meta-data tag is required if you support API level 15 and lower --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta-data</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:name</span>=<span class="string">"android.support.PARENT_ACTIVITY"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:value</span>=<span class="string">".MainActivity"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="应用基础知识"><a href="#应用基础知识" class="headerlink" title="应用基础知识"></a>应用基础知识</h1><p>您可以使用 Kotlin、Java 和 C++ 语言编写 Android 应用。Android SDK 工具会将您的代码连同任何数据和资源文件编译成一个 APK（Android 软件包），即带有 <code>.apk</code> 后缀的归档文件。</p>
<p>每个 Android 应用都处于各自的安全沙盒中，并受以下 Android 安全功能的保护：</p>
<ul>
<li>Android 操作系统是一种多用户 Linux 系统，其中的每个应用都是一个不同的用户；</li>
<li>默认情况下，系统会为每个应用分配一个唯一的 Linux 用户 ID（该 ID 仅由系统使用，应用并不知晓）。系统会为应用中的所有文件设置权限，使得只有分配给该应用的用户 ID 才能访问这些文件；</li>
<li>每个进程都拥有自己的虚拟机 (VM)，因此应用代码独立于其他应用而运行。</li>
<li>默认情况下，每个应用都在其自己的 Linux 进程内运行。Android 系统会在需要执行任何应用组件时启动该进程，然后当不再需要该进程或系统必须为其他应用恢复内存时，其便会关闭该进程。</li>
</ul>
<p>Android 系统实现了<strong>最小权限原则</strong>。换言之，默认情况下，每个应用只能访问执行其工作所需的组件，而不能访问其他组件。这样便能创建非常安全的环境，在此环境中，应用无法访问其未获得权限的系统部分。不过，应用仍可通过一些途径与其他应用共享数据以及访问系统服务：</p>
<ul>
<li>可以安排两个应用共享同一 Linux 用户 ID，在此情况下，二者便能访问彼此的文件。为节省系统资源，也可安排拥有相同用户 ID 的应用在同一 Linux 进程中运行，并共享同一 VM。应用还必须使用相同的证书进行签名。</li>
<li>应用可以请求访问设备数据（如用户的联系人、短信消息、可装载存储装置（SD 卡）、相机、蓝牙等）的权限。</li>
</ul>
<h2 id="应用组件"><a href="#应用组件" class="headerlink" title="应用组件"></a>应用组件</h2><p>应用组件是 Android 应用的基本构建块。每个组件都是一个入口点，系统或用户可通过该入口点进入您的应用。有些组件会依赖于其他组件。</p>
<p>共有四种不同的应用组件类型：</p>
<ul>
<li>Activity</li>
<li>服务</li>
<li>广播接收器</li>
<li>内容提供程序</li>
</ul>
<p>Android 系统设计的独特之处在于，任何应用都可启动其他应用的组件。例如，当您想让用户使用设备相机拍摄照片时，另一个应用可能也可执行该操作，因而您的应用便可使用该应用，而非自行产生一个 Activity 来拍摄照片。您无需加入甚至链接到该相机应用的代码。只需启动拍摄照片的相机应用中的 Activity 即可。完成拍摄时，系统甚至会将照片返回您的应用，以便您使用。对用户而言，这就如同相机是您应用的一部分。</p>
<p>当系统启动某个组件时，它会启动该应用的进程（如果尚未运行），并实例化该组件所需的类。例如，如果您的应用启动相机应用中拍摄照片的 Activity，则该 Activity 会在属于相机应用的进程（而非您的应用进程）中运行。因此，与大多数其他系统上的应用不同，Android 应用并没有单个入口点（即没有 <code>main()</code> 函数）。</p>
<p>由于系统在单独的进程中运行每个应用，且其文件权限会限制对其他应用的访问，因此您的应用无法直接启动其他应用中的组件，但 Android 系统可以。如要启动其他应用中的组件，请向系统传递一条消息，说明启动特定组件的 Intent。系统随后便会为您启动该组件。</p>
<h3 id="Activity"><a href="#Activity" class="headerlink" title="Activity"></a>Activity</h3><p>Activity 是与用户交互的入口点。它表示拥有界面的单个屏幕。例如，电子邮件应用可能有一个显示新电子邮件列表的 Activity、一个用于撰写电子邮件的 Activity 以及一个用于阅读电子邮件的 Activity。尽管这些 Activity 通过协作在电子邮件应用中形成一种紧密结合的用户体验，但每个 Activity 都独立于其他 Activity 而存在。因此，其他应用可以启动其中任何一个 Activity（如果电子邮件应用允许）。例如，相机应用可以启动电子邮件应用内用于撰写新电子邮件的 Activity，以便用户共享图片。</p>
<p>您需将 Activity 作为 <code>Activity</code> 类的子类来实现。</p>
<h3 id="服务"><a href="#服务" class="headerlink" title="服务"></a>服务</h3><p>服务是一个通用入口点，用于因各种原因使应用在后台保持运行状态。它是一种在后台运行的组件，用于执行长时间运行的操作或为远程进程执行作业。服务不提供界面。</p>
<p>例如，当用户使用其他应用时，服务可能会在后台播放音乐或通过网络获取数据，但这不会阻断用户与 Activity 的交互。诸如 Activity 等其他组件可以启动服务，使该服务运行或绑定到该服务，以便与其进行交互。</p>
<p>事实上，有两种截然不同的语义服务可以告知系统如何管理应用：</p>
<ul>
<li>音乐播放是用户可直接感知的服务，因此，应用会向用户发送通知，表明其希望成为前台，从而告诉系统此消息；在此情况下，系统明白它应尽全力维持该服务进程运行，因为进程消失会令用户感到不快。</li>
<li>通常，用户不会意识到常规后台服务正处于运行状态，因此系统可以更自由地管理其进程。如果系统需要使用 RAM 来处理用户更迫切关注的内容，则其可能允许终止服务（然后在稍后的某个时刻重启服务）。</li>
</ul>
<p>您需将服务作为 <code>Service</code> 的子类来实现。</p>
<h3 id="广播接收器"><a href="#广播接收器" class="headerlink" title="广播接收器"></a>广播接收器</h3><p>借助广播接收器组件，系统能够在常规用户流之外向应用传递事件，从而允许应用响应系统范围内的广播通知。由于广播接收器是另一个明确定义的应用入口，因此系统甚至可以向当前未运行的应用传递广播。</p>
<p>许多广播均由系统发起，例如，通知屏幕已关闭、电池电量不足或已拍摄照片的广播。应用也可发起广播，例如，通知其他应用某些数据已下载至设备，并且可供其使用。尽管广播接收器不会显示界面，但其可以创建状态栏通知，在发生广播事件时提醒用户。但广播接收器更常见的用途只是作为通向其他组件的通道，旨在执行极少量的工作。</p>
<p>广播接收器作为 <code>BroadcastReceiver</code> 的子类实现，并且每条广播都作为 <code>Intent</code> 对象进行传递。</p>
<h3 id="内容提供程序"><a href="#内容提供程序" class="headerlink" title="内容提供程序"></a>内容提供程序</h3><p>内容提供程序管理一组共享的应用数据，您可以将这些数据存储在文件系统、SQLite 数据库、网络中或者您的应用可访问的任何其他持久化存储位置。其他应用可通过内容提供程序查询或修改数据（如果内容提供程序允许）。</p>
<p>我们很容易将内容提供程序看作数据库上的抽象，因为其内置的大量 API 和支持时常适用于这一情况。但从系统设计的角度看，二者的核心目的不同。对系统而言，内容提供程序是应用的入口点，用于发布由 URI 架构识别的已命名数据项。</p>
<p>内容提供程序作为 <code>ContentProvider</code> 的子类实现，并且其必须实现一组标准 API，以便其他应用能够执行事务。</p>
<h2 id="启动组件"><a href="#启动组件" class="headerlink" title="启动组件"></a>启动组件</h2><p>在四种组件类型中，有三种（Activity、服务和广播接收器）均通过<strong>异步消息 Intent</strong>进行启动。Intent 会在运行时对各个组件进行互相绑定。您可以将 Intent 视为从其他组件（无论该组件是属于您的应用还是其他应用）请求操作的信使。</p>
<p>您需使用 <code>Intent</code> 对象创建 Intent，该对象通过定义消息来启动特定组件（显式 Intent）或特定的组件类型（隐式 Intent）。</p>
<p>对于 Activity 和服务，Intent 会定义要执行的操作（例如，查看或发送某内容），并且可指定待操作数据的 URI，以及正在启动的组件可能需要了解的信息。对于广播接收器，Intent 只会定义待广播的通知。</p>
<p>与 Activity、服务和广播接收器不同，内容提供程序并非由 Intent 启动。相反，它们会在成为 <code>ContentResolver</code> 的请求目标时启动。内容解析程序会通过内容提供程序处理所有直接事务，因此通过提供程序执行事务的组件便无需执行事务，而是改为在 <code>ContentResolver</code> 对象上调用方法。这会在内容提供程序与请求信息的组件之间留出一个抽象层（以确保安全）。</p>
<p>每种组件都有不同的启动方法：</p>
<ul>
<li>如要启动 Activity，您可以向 <code>startActivity()</code> 或 <code>startActivityForResult()</code> 传递 <code>Intent</code>（当您想让 Activity 返回结果时），或者为其安排新任务。</li>
<li>在 Android 5.0（API 级别 21）及更高版本中，您可以使用 <code>JobScheduler</code> 类来调度服务操作。</li>
<li>您可以通过向 <code>sendBroadcast()</code>、<code>sendOrderedBroadcast()</code> 或 <code>sendStickyBroadcast()</code> 等方法传递 Intent 来发起广播。</li>
<li>您可以通过在 <code>ContentResolver</code> 上调用 <code>query()</code>，对内容提供程序执行查询。</li>
</ul>
<h2 id="清单文件"><a href="#清单文件" class="headerlink" title="清单文件"></a>清单文件</h2><p>在 Android 系统启动应用组件之前，系统必须通过读取应用的清单文件 (<code>AndroidManifest.xml</code>) 确认组件存在。您的应用必须在此文件中声明其所有组件，该文件必须位于应用项目目录的根目录中。</p>
<p>除了声明应用的组件外，清单文件还有许多其他作用，如：</p>
<ul>
<li>确定应用需要的任何用户权限，如互联网访问权限或对用户联系人的读取权限。</li>
<li>根据应用使用的 API，声明应用所需的最低 API 级别。</li>
<li>声明应用使用或需要的硬件和软件功能，如相机、蓝牙服务或多点触摸屏幕。</li>
<li>声明应用需要链接的 API 库（Android 框架 API 除外），如 Google 地图库。</li>
</ul>
<p>您必须使用以下元素声明所有应用组件：</p>
<ul>
<li>Activity 的 <code>&lt;activity&gt;</code> 元素。</li>
<li>服务的 <code>&lt;service&gt;</code> 元素。</li>
<li>广播接收器的 <code>&lt;receiver&gt;</code> 元素。</li>
<li>内容提供程序的 <code>&lt;provider&gt;</code> 元素。</li>
</ul>
<p>如果未在清单文件中声明源代码中包含的 Activity、服务和内容提供程序，则这些组件对系统不可见，因此也永远不会运行。</p>
<h2 id="应用资源"><a href="#应用资源" class="headerlink" title="应用资源"></a>应用资源</h2><p>Android 应用并非仅包含代码，它还需要与源代码分离的资源，如图像、音频文件以及任何与应用的视觉呈现有关的内容。</p>
<p>对于您在 Android 项目中加入的每一项资源，SDK 构建工具均会定义唯一的整型 ID，您可以利用此 ID 来引用资源，这些资源或来自应用代码，或来自 XML 中定义的其他资源。例如，如果您的应用包含名为 logo.png 的图像文件（保存在 res/drawable/ 目录中），则 SDK 工具会生成名为 <code>R.drawable.logo</code> 的资源 ID。此 ID 映射到应用特定的整型数，您可以利用它来引用该图像，并将其插入您的界面。</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Java Android</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS上的环境安装</title>
    <url>/2020/11/16/CentOS%E4%B8%8A%E7%9A%84%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote class="blockquote-center">
<p>^ _ ^ </p>

</blockquote>
<a id="more"></a>

<h1 id="环境安装"><a href="#环境安装" class="headerlink" title="环境安装"></a>环境安装</h1><p><strong>CentOS上环境安装的4中方式</strong></p>
<ol>
<li>rpm安装</li>
<li>解压缩安装</li>
<li>yum在线安装</li>
<li>宝塔安装</li>
</ol>
<p><strong>实验安装目标</strong></p>
<ol>
<li>rpm安装jdk</li>
<li>解压缩安装tomcat</li>
<li>yum安装docker</li>
<li>宝塔安装mysql</li>
</ol>
<h1 id="rpm安装jdk"><a href="#rpm安装jdk" class="headerlink" title="rpm安装jdk"></a>rpm安装jdk</h1><p><strong>1. 去Oracle官网下载jdk8的rpm</strong></p>
<p>jdk8下载页：<a href="https://www.oracle.com/java/technologies/javase/javase-jdk8-downloads.html" target="_blank" rel="noopener">https://www.oracle.com/java/technologies/javase/javase-jdk8-downloads.html</a></p>
<p>我下载的是这个Linux64位的rpm</p>
<p><img src="/2020/11/16/CentOS%E4%B8%8A%E7%9A%84%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/1.png" alt="jdk的rpm安装包"></p>
<p><strong>2. 通过XFtp工具将rpm文件放入当前用户的目录下</strong></p>
<p><img src="/2020/11/16/CentOS%E4%B8%8A%E7%9A%84%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/2.png" alt="转移rpm包"></p>
<p>传输成功后如下图所示：<br><img src="/2020/11/16/CentOS%E4%B8%8A%E7%9A%84%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/3.png" alt="转移rpm包成功"></p>
<p><strong>3. 安装Java环境</strong></p>
<p>3.1. 查看当前系统是否存在Java环境</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure>

<p>若已有的话则进行卸载</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 检测JDK版本信息</span><br><span class="line">rpm -qa | grep jdk</span><br><span class="line"># -q query</span><br><span class="line"># -a all: query all installed packages</span><br><span class="line">&gt; 得到的结果为一个jdk号</span><br><span class="line"></span><br><span class="line"># 卸载jdk</span><br><span class="line">rpm -e --nodeps 上一步查出的jdk号</span><br><span class="line"># -e</span><br><span class="line"># --nodeps：Dont&#39;t verify dependencies of packages</span><br></pre></td></tr></table></figure>

<p>3.2. 通过rpm命令安装Java环境</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rpm -ivh rpm文件名</span><br><span class="line"></span><br><span class="line"># -i install</span><br><span class="line"># -v print</span><br><span class="line"># -h hash</span><br></pre></td></tr></table></figure>

<p>ps：注意要使用root用户才有安装权限<br><img src="/2020/11/16/CentOS%E4%B8%8A%E7%9A%84%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/4.png" alt="安装"></p>
<p>3.3. 配置环境变量</p>
<p><strong>安装成功的Java文件保存在\usr目录下</strong><br><img src="/2020/11/16/CentOS%E4%B8%8A%E7%9A%84%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/5.png" alt="java安装目录"></p>
<p><strong>1. 进入 /etc/profile</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;profile</span><br></pre></td></tr></table></figure>

<p><strong>2. 在文件末尾添加配置</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">JAVA_HOME&#x3D;&#x2F;usr&#x2F;java&#x2F;jdk1.8.0_271-amd64</span><br><span class="line">CLASSPATH&#x3D;%JAVA_HOME%&#x2F;lib&#x2F;tools.jar:%JAVA_HOME%&#x2F;jre&#x2F;lib&#x2F;dt.jar:.</span><br><span class="line">PATH&#x3D;$PATH:$JAVA_HOME&#x2F;bin:$JAVA_HOME&#x2F;jre&#x2F;bin</span><br><span class="line">export PATH CLASSPATH JAVA_HOME</span><br></pre></td></tr></table></figure>

<p><strong>3. 让配置文件生效</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">source &#x2F;etc&#x2F;profile</span><br></pre></td></tr></table></figure>

<h1 id="解压缩安装Tomcat"><a href="#解压缩安装Tomcat" class="headerlink" title="解压缩安装Tomcat"></a>解压缩安装Tomcat</h1><p><strong>1. 去官网下载tomcat安装包</strong></p>
<p>tomcat9.0.39下载页面：<a href="https://tomcat.apache.org/download-90.cgi#9.0.39" target="_blank" rel="noopener">https://tomcat.apache.org/download-90.cgi#9.0.39</a></p>
<p><img src="/2020/11/16/CentOS%E4%B8%8A%E7%9A%84%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/6.png" alt="tomcat9下载"></p>
<p><strong>2. 通过XFtp将安装包传送到服务器</strong></p>
<p><img src="/2020/11/16/CentOS%E4%B8%8A%E7%9A%84%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/7.png" alt="tomcat9传输到服务器"></p>
<p><strong>3. 解压安装包</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tar -zxvf 安装包名称</span><br></pre></td></tr></table></figure>

<p><img src="/2020/11/16/CentOS%E4%B8%8A%E7%9A%84%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/8.png" alt="tomcat9解压"></p>
<blockquote>
<p>我将解压得到的文件夹移到 /etc/opt目录下了</p>
</blockquote>
<p><strong>4. 启动测试</strong></p>
<ul>
<li>Linux中的可执行文件为.sh文件</li>
<li>tomcat解压后启动文件存放在bin目录中</li>
</ul>
<p><strong>启动和关闭脚本</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;startup.sh # 启动服务器</span><br><span class="line">.&#x2F;shutdown.sh # 关闭服务器</span><br></pre></td></tr></table></figure>

<p><strong>查看启动日志（可选）</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd logs&#x2F;</span><br><span class="line">tail -f catalina.out</span><br></pre></td></tr></table></figure>

<p><strong>访问Tomcat需要通过8080端口</strong><br>服务器端：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 开启8080端口</span><br><span class="line">firewall-cmd --zone&#x3D;public --add-port&#x3D;8080&#x2F;tcp --permanent</span><br><span class="line"></span><br><span class="line"># 重启防火墙</span><br><span class="line">systemctl restart firewalld.service</span><br><span class="line"></span><br><span class="line"># 检查是否已开放8080</span><br><span class="line">firewall-cmd --list-ports</span><br></pre></td></tr></table></figure>

<p>阿里云端：配置安全组规则，添加8080端口</p>
<p><strong>5. 成功页面</strong><br><img src="/2020/11/16/CentOS%E4%B8%8A%E7%9A%84%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/9.png" alt="能正确访问tomcat主页"></p>
<h1 id="yum安装docker"><a href="#yum安装docker" class="headerlink" title="yum安装docker"></a>yum安装docker</h1><p><strong>1. 检测当前CentOS版本信息</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat &#x2F;etc&#x2F;redhat-release</span><br></pre></td></tr></table></figure>

<p><strong>2. 安装环境</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum -y install 包名</span><br></pre></td></tr></table></figure>

<p>安装gcc相关环境</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum -y install gcc</span><br><span class="line">yum -y install gcc-c++</span><br></pre></td></tr></table></figure>

<p><strong>3. 根据docker官网文档进行操作</strong></p>
<p>docket官方文档地址：<a href="https://docs.docker.com/engine/install/centos/" target="_blank" rel="noopener">https://docs.docker.com/engine/install/centos/</a></p>
<p>3.1. 卸载旧版本</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum remove docker \</span><br><span class="line">    docker-client \</span><br><span class="line">    docker-client-latest \</span><br><span class="line">    docker-common \</span><br><span class="line">    docker-latest \</span><br><span class="line">    docker-latest-logrotate \</span><br><span class="line">    docker-logrotate \</span><br><span class="line">    docker-engine</span><br></pre></td></tr></table></figure>

<p>3.2. 安装需要的软件包</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install -y yum-utils device-mapper-persistent-data lvm2</span><br></pre></td></tr></table></figure>

<p>3.3. 设置stable镜像仓库</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;docker-ce&#x2F;linux&#x2F;centos&#x2F;docker-ce.repo</span><br></pre></td></tr></table></figure>

<p>3.4. 更新yum软件包索引</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum makecache fast</span><br></pre></td></tr></table></figure>

<p>3.5. 安装docker ce</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum -y install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure>

<p>3.6. 启动docker</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure>

<p>3.7. 测试</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker version</span><br><span class="line">docker run hello-word</span><br><span class="line">docker images</span><br></pre></td></tr></table></figure>

<p>关闭docker</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker service docker stop</span><br></pre></td></tr></table></figure>

<h1 id="宝塔安装mysql"><a href="#宝塔安装mysql" class="headerlink" title="宝塔安装mysql"></a>宝塔安装mysql</h1><p><strong>1. 进入宝塔面板的软件商店安装mysql</strong></p>
<p><img src="/2020/11/16/CentOS%E4%B8%8A%E7%9A%84%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/10.png" alt="通过宝塔面板安装mysql"></p>
<p>我选择的是mysql5.6</p>
<p><strong>2. 在数据库面板添加一个数据库</strong></p>
<p><img src="/2020/11/16/CentOS%E4%B8%8A%E7%9A%84%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/11.png" alt="通过宝塔面板添加数据库"></p>
<p>访问权限应该设置为所有人<br><img src="/2020/11/16/CentOS%E4%B8%8A%E7%9A%84%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/12.png" alt="访问权限"></p>
<p><strong>3. 在本地通过navicat连接服务器数据库</strong></p>
<p>3.1. 点击新建连接<br><img src="/2020/11/16/CentOS%E4%B8%8A%E7%9A%84%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/13.png" alt="新建连接"></p>
<p>3.2. 连接配置<br><img src="/2020/11/16/CentOS%E4%B8%8A%E7%9A%84%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/14.png" alt="连接配置"></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>C语言中的指针对齐问题</title>
    <url>/2020/09/13/C%E8%AF%AD%E8%A8%80%E4%B8%AD%E7%9A%84%E6%8C%87%E9%92%88%E5%AF%B9%E9%BD%90%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote class="blockquote-center">
<p>^ _ ^ </p>

</blockquote>

<a id="more"></a>

<h1 id="查看占用内存大小的方式"><a href="#查看占用内存大小的方式" class="headerlink" title="查看占用内存大小的方式"></a>查看占用内存大小的方式</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sizeof(类型&#x2F;对象);</span><br></pre></td></tr></table></figure>

<h1 id="基础类型在内存中的大小"><a href="#基础类型在内存中的大小" class="headerlink" title="基础类型在内存中的大小"></a>基础类型在内存中的大小</h1><table>
<thead>
<tr>
<th>类型</th>
<th>所占大小(字节)</th>
</tr>
</thead>
<tbody><tr>
<td>int</td>
<td>4</td>
</tr>
<tr>
<td>long</td>
<td>4</td>
</tr>
<tr>
<td>short</td>
<td>2</td>
</tr>
<tr>
<td>char</td>
<td>1</td>
</tr>
<tr>
<td>指针</td>
<td>8</td>
</tr>
<tr>
<td>long long</td>
<td>8</td>
</tr>
<tr>
<td>float</td>
<td>4</td>
</tr>
<tr>
<td>double</td>
<td>8</td>
</tr>
</tbody></table>
<h1 id="结构体中的内存对齐"><a href="#结构体中的内存对齐" class="headerlink" title="结构体中的内存对齐"></a>结构体中的内存对齐</h1><p><strong>就近原则</strong></p>
<blockquote>
<p>根据最近的下一个变量的大小进行对齐，最后一个变量则是根据它的上一个</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">例1：</span><br><span class="line">char a[3];</span><br><span class="line">int b;</span><br><span class="line">因为a最邻近的b是int类型，因此a按照int类型的大小（4字节）进行对齐，a和它之前的所有成员变量所占内存之和应该为4的倍数</span><br><span class="line"></span><br><span class="line">例2：</span><br><span class="line">char a[3];</span><br><span class="line">long long b;</span><br><span class="line">因为a最邻近的b是int类型，因此a按照long long类型的大小（8字节）进行对齐，a和它之前的所有成员变量所占内存之和应该为8的倍数</span><br><span class="line"></span><br><span class="line">例3：</span><br><span class="line">char a[3];</span><br><span class="line">char b[8];</span><br><span class="line">因为a最邻近的b是char类型，虽然它是一个8字节的数组，a仍然是按照char类型的大小(1字节)进行对齐，a和它之前的所有成员变量所占内存之和应该为1的倍数</span><br><span class="line"></span><br><span class="line">例4：</span><br><span class="line">int a;</span><br><span class="line">char b;</span><br><span class="line">虽然a邻近的b是char类型，但由于a本身为int类型，自身类型大小大于b，因此仍然是按int类型大小(4字节)进行对齐</span><br></pre></td></tr></table></figure>

<p><strong>练习</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">struct Demo1&#123;</span><br><span class="line">    char c;</span><br><span class="line">	long long b;</span><br><span class="line">	char name[7];</span><br><span class="line">	char id[3];	</span><br><span class="line">	long long a;</span><br><span class="line">&#125;;</span><br><span class="line">&#x2F;&#x2F; 占用内存大小为40，：8 + 8 + 7 + 3 + 6 + 8 &#x3D; 40</span><br><span class="line"></span><br><span class="line">struct Demo2&#123;</span><br><span class="line">    long long a;</span><br><span class="line">    char c;</span><br><span class="line">    char c1[2];</span><br><span class="line">    char c2[14];</span><br><span class="line">    int b;</span><br><span class="line">&#125;;</span><br><span class="line">&#x2F;&#x2F; 所占内存大小为 32: 8 + 1 + 2 + 14 + 3 + 4 &#x3D; 32</span><br><span class="line"></span><br><span class="line">struct Demo3&#123;</span><br><span class="line">    char a[3];</span><br><span class="line">    char b[8];</span><br><span class="line">&#125;;</span><br><span class="line">&#x2F;&#x2F; 所占内存大小为 11：3 + 8 &#x3D; 11;</span><br><span class="line"></span><br><span class="line">struct Demo4&#123;</span><br><span class="line">    char a[3];</span><br><span class="line">    int b;</span><br><span class="line">    char c;</span><br><span class="line">    long long d;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; 所占内存大小为24 ：3 + 1 + 4 + 1 + 7 + 8 &#x3D; 24</span><br><span class="line"></span><br><span class="line">struct Demo5&#123;</span><br><span class="line">    long long a;</span><br><span class="line">    int b;</span><br><span class="line">    char c;</span><br><span class="line">&#125;;</span><br><span class="line">&#x2F;&#x2F; 所占内存大小为16 ：8 + 4 + 4 &#x3D; 16</span><br></pre></td></tr></table></figure>

<h1 id="空结构体（类）"><a href="#空结构体（类）" class="headerlink" title="空结构体（类）"></a>空结构体（类）</h1><p>如果是一个空结构体或类，则其所占内存大小为1。</p>
<p><strong>测试</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Empty&#123;</span><br><span class="line">	</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h1 id="虚函数"><a href="#虚函数" class="headerlink" title="虚函数"></a>虚函数</h1><ul>
<li>虚函数的原理是系统初始化一个虚函数表，在类中通过一个指向虚函数表的指针来定位虚函数，因此虽然普通成员函数不占用空间，但申明虚函数会占用一个指针的空间，即8字节；</li>
<li>但无论一个类中有多少个虚函数，这些虚函数都会存放在一个虚函数表中，即只有一个虚函数指针，因此总共只会占用8字节</li>
</ul>
<p><strong>例子</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Demo1&#123;</span><br><span class="line">    char c;</span><br><span class="line">	long long b;</span><br><span class="line">	char name[7];</span><br><span class="line">    virtual void func1();</span><br><span class="line">    virtual void func2();</span><br><span class="line">&#125;;</span><br><span class="line">&#x2F;&#x2F; 占用内存大小为 32: 8 + 8 + 7 + 1 + 8 &#x3D; 32</span><br><span class="line">&#x2F;&#x2F; 其中7变成8是根据虚函数指针的大小，而不是b大小，Demo2可以证明</span><br><span class="line"></span><br><span class="line">class Demo2&#123;</span><br><span class="line">    char c;</span><br><span class="line">	int b;</span><br><span class="line">	char name[3];</span><br><span class="line">    virtual void func1();</span><br><span class="line">    virtual void func2();</span><br><span class="line">&#125;;</span><br><span class="line">&#x2F;&#x2F; 占用内存大小为 24: 4 + 4 + 3 + 5 + 8 &#x3D; 24</span><br><span class="line">&#x2F;&#x2F; 且无论虚函数写在什么位置，其进行内存计算的位置都是Demo2这样，Demo3可以证明</span><br><span class="line"></span><br><span class="line">class Demo2&#123;</span><br><span class="line">    virtual void func1();</span><br><span class="line">    virtual void func2();</span><br><span class="line">    char c;</span><br><span class="line">    int b;</span><br><span class="line">    char name[3];   </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h1 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h1><blockquote>
<ol>
<li>继承父类，相当于继承了父类的所有成员，不管是否可见</li>
<li>根据1，可知子类的大小为继承的父类大小之和，且会根据父类的最后一个元素进行对齐</li>
</ol>
</blockquote>
<p><strong>例子</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Base&#123;</span><br><span class="line">	char arr[10];</span><br><span class="line">	int b;</span><br><span class="line">	virtual void func();</span><br><span class="line">&#125;;</span><br><span class="line">&#x2F;&#x2F; Base：10 + 2 + 4 + 8 &#x3D; 24</span><br><span class="line">class A:Base&#123;</span><br><span class="line">	char a[3];</span><br><span class="line">&#125;;</span><br><span class="line">&#x2F;&#x2F; A ：24 + 3 + 5 &#x3D; 32，因为最后一个虚指针是8字节，因此a要跟它对齐</span><br><span class="line">class B:Base&#123;</span><br><span class="line">	char b[6];</span><br><span class="line">&#125;;</span><br><span class="line">&#x2F;&#x2F; B: 24 + 6 +2 &#x3D; 32</span><br><span class="line">class C:A,B&#123;</span><br><span class="line">	</span><br><span class="line">&#125;;</span><br><span class="line">&#x2F;&#x2F; C：32 + 32 &#x3D; 64</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>C语言</category>
      </categories>
      <tags>
        <tag>C语言</tag>
      </tags>
  </entry>
  <entry>
    <title>Electron进程模型</title>
    <url>/2021/06/06/Electron%E8%BF%9B%E7%A8%8B%E6%A8%A1%E5%9E%8B/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote class="blockquote-center">
<p>^ _ ^ </p>

</blockquote>
<a id="more"></a>

<h1 id="主进程"><a href="#主进程" class="headerlink" title="主进程"></a>主进程</h1><ul>
<li>Electron 运行 package.json 的 main 脚本的进程被称为主进程；</li>
<li>每个应用只有一个主进程；</li>
<li>管理原生 GUI，典型的窗口（BrowerWindow、Tray、Dock、Menu）；</li>
<li>管理渲染进程；</li>
<li>控制应用生命周期（app）</li>
</ul>
<h1 id="渲染进程"><a href="#渲染进程" class="headerlink" title="渲染进程"></a>渲染进程</h1><ul>
<li>展示 Web 页面的进程称为渲染进程；</li>
<li>通过 Node.js、Electron 提供的API可以和系统底层打交道；</li>
<li>一个 Electron 应用可以有多个渲染进程。</li>
</ul>
<h1 id="进程间通信"><a href="#进程间通信" class="headerlink" title="进程间通信"></a>进程间通信</h1><h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><ul>
<li>通知事件</li>
<li>数据传输</li>
<li>共享数据</li>
</ul>
<h2 id="IPC模块通信"><a href="#IPC模块通信" class="headerlink" title="IPC模块通信"></a>IPC模块通信</h2><ul>
<li>Electron提供了IPC通信模块，主进程的<code>ipcMain</code>和渲染进程的<code>ipcRenderer</code></li>
<li><code>ipcMain</code>和<code>ipcRenderer</code>都是<code>EventEmitter</code>对象</li>
</ul>
<h2 id="从渲染进程到主进程"><a href="#从渲染进程到主进程" class="headerlink" title="从渲染进程到主进程"></a>从渲染进程到主进程</h2><p><strong>Callback写法</strong></p>
<ul>
<li>ipcRenderer.send(channel, …args)</li>
<li>ipcMain.on(channel, handler)</li>
</ul>
<p><strong>Promise写法（Electron7.0之后）</strong></p>
<ul>
<li>ipcRenderer.invoke(channel, …args)</li>
<li>ipcMain.handle(channel, handler)</li>
</ul>
<h2 id="从主进程到渲染进程"><a href="#从主进程到渲染进程" class="headerlink" title="从主进程到渲染进程"></a>从主进程到渲染进程</h2><p>ipcRenderer.on(channel, handler)<br>webContent.send(channel)</p>
<h2 id="渲染进程间的通信"><a href="#渲染进程间的通信" class="headerlink" title="渲染进程间的通信"></a>渲染进程间的通信</h2><ul>
<li>通知事件<ul>
<li>通过主进程转发</li>
<li>ipcRenderer.sendTo</li>
</ul>
</li>
<li>数据共享<ul>
<li>Web技术（localStorage、sessionStorage、indexedDB）</li>
<li>使用remote（不推荐）</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>electron</category>
      </categories>
      <tags>
        <tag>nodejs electron</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker</title>
    <url>/2020/11/18/Docker/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote class="blockquote-center">
<p>^ _ ^ </p>

</blockquote>
<a id="more"></a>

<h1 id="Docker简介"><a href="#Docker简介" class="headerlink" title="Docker简介"></a>Docker简介</h1><ul>
<li>Docker是一个开源的容器引擎，基于GO语言开发</li>
<li>Docker可以让开发者打包它们的应用及环境到一个轻量级、可移植的容器中，然后发布到任何流行的Linux机器上</li>
<li>Docker也可实现虚拟化，其相较于传统虚拟机的最大优点是Docker很轻巧，性能开销极低</li>
<li>容器是完全使用沙箱机制，相互之间不会有任何借口</li>
<li>每个容器可以理解为一个精简的linux系统</li>
</ul>
<h2 id="Docker架构"><a href="#Docker架构" class="headerlink" title="Docker架构"></a>Docker架构</h2><p><img src="/2020/11/18/Docker/1.png" alt="Docker架构"></p>
<ul>
<li><strong>镜像（Images）</strong>：用于创建容器的模板</li>
<li><strong>容器（Container）</strong>：独立运行的一个或多个应用，通过镜像创建</li>
<li><strong>仓库（Registry）</strong>：代码仓库，用于保存镜像<ul>
<li>Docker Hub 中提供了大量镜像集合</li>
<li>一个Docker Registry中可以包含多个 <em>Repository</em> , 每个 <em>Repository</em> 中包含多个标签（ <em>Tags</em> ），每个标签对应一个镜像（ <em>images</em> ）</li>
</ul>
</li>
<li><strong>Docker 客户端（Client）</strong>：Docker客户端通过命令行或其他工具使用 Docker SDK 与 Docker 的守护进程进行通信</li>
<li><strong>Docker 主机（HOST）</strong>：一个物理的或虚拟的机器用于执行Docker的守护进程</li>
<li><strong>Docker Machine</strong>：简化Docker安装的命令行工具</li>
</ul>
<h1 id="Docker资料"><a href="#Docker资料" class="headerlink" title="Docker资料"></a>Docker资料</h1><p>Docker 官网：<a href="https://www.docker.com/" target="_blank" rel="noopener">https://www.docker.com/</a></p>
<p>Docker Doc：<a href="https://docs.docker.com/" target="_blank" rel="noopener">https://docs.docker.com/</a></p>
<p>Docker Hub：<a href="https://hub.docker.com/" target="_blank" rel="noopener">https://hub.docker.com/</a></p>
<p>狂神教程：<a href="https://www.bilibili.com/video/BV1og4y1q7M4" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1og4y1q7M4</a></p>
<h1 id="Docker安装"><a href="#Docker安装" class="headerlink" title="Docker安装"></a>Docker安装</h1><p><strong>1. 环境查看</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 确保内核版本在3.10以上</span><br><span class="line">uname -r</span><br><span class="line"></span><br><span class="line"># 查看操作系统信息</span><br><span class="line">cat &#x2F;etc&#x2F;os-release</span><br></pre></td></tr></table></figure>

<p><strong>2. 按照docker doc上的教程安装</strong></p>
<p>docker安装过程在博文 <em>CentOS上的环境安装</em> 中有写，<a href="http://101.200.3.108/2020/11/16/CentOS%E4%B8%8A%E7%9A%84%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/" target="_blank" rel="noopener">去往博文</a></p>
<p><strong>docker的资源目录</strong><br><em>/var/lib/docker</em></p>
<p><strong>3. 阿里云镜像加速</strong></p>
<p>（1）进入阿里云的容器服务</p>
<p><img src="/2020/11/18/Docker/2.png" alt="阿里云容器服务"></p>
<p>（2）选择镜像加速器，按照CentOS操作文档进行配置</p>
<p><img src="/2020/11/18/Docker/3.png" alt="镜像加速器"></p>
<p><img src="/2020/11/18/Docker/4.png" alt="镜像加速配置"></p>
<h1 id="Docker命令"><a href="#Docker命令" class="headerlink" title="Docker命令"></a>Docker命令</h1><p><img src="/2020/11/18/Docker/5.png" alt="小结"></p>
<h2 id="帮助命令"><a href="#帮助命令" class="headerlink" title="帮助命令"></a>帮助命令</h2><p>查看docker版本</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker version</span><br></pre></td></tr></table></figure>

<p>查看docker系统信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker info</span><br></pre></td></tr></table></figure>

<p>命令的帮助文档</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker [命令] --help</span><br></pre></td></tr></table></figure>

<h2 id="镜像命令"><a href="#镜像命令" class="headerlink" title="镜像命令"></a>镜像命令</h2><p>查看docker镜像</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker images [选项]</span><br></pre></td></tr></table></figure>

<p>搜索镜像</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker search 镜像名称 [选项]</span><br><span class="line"></span><br><span class="line"># 可选项</span><br><span class="line">--filter&#x3D;过滤条件</span><br></pre></td></tr></table></figure>

<p>下载镜像</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker pull 镜像名称[:tag]</span><br><span class="line"></span><br><span class="line"># 可通过tag实现指定版本下载</span><br></pre></td></tr></table></figure>

<p>删除镜像</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker rmi 镜像名称</span><br></pre></td></tr></table></figure>

<p>查看镜像构建历史</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker history 镜像ID</span><br></pre></td></tr></table></figure>

<h2 id="容器命令"><a href="#容器命令" class="headerlink" title="容器命令"></a>容器命令</h2><p>新建容器并启动</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run [选项] image</span><br><span class="line"></span><br><span class="line"># 选项</span><br><span class="line">--name&#x3D;容器名称      设置容器名称</span><br><span class="line">-d                  后台方式运行</span><br><span class="line">-it                 使用交互方式运行，进入容器查看内容</span><br><span class="line">-p                  指定容器端口映射</span><br><span class="line">-P                  随机端口映射</span><br></pre></td></tr></table></figure>

<p>退出并停止容器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">exit</span><br></pre></td></tr></table></figure>

<p>退出但不停止容器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Ctrl + p + q</span><br></pre></td></tr></table></figure>

<p>查看正在运行的容器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure>

<p>删除容器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 删除指定容器</span><br><span class="line">docker rm 容器id [选项]</span><br><span class="line"></span><br><span class="line"># 选项</span><br><span class="line">-f # 强制删除</span><br><span class="line"></span><br><span class="line"># 删除所有容器</span><br><span class="line">docker rm -f $(docker ps -aq)</span><br></pre></td></tr></table></figure>

<p>启动和删除容器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker start 容器id #启动容器</span><br><span class="line">docker restart 容器id #重启容器</span><br><span class="line">docker stop 容器id #停止容器</span><br><span class="line">docker kill 容器id #停止容器</span><br></pre></td></tr></table></figure>

<p>查看容器日志</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker logs [选项] 容器ID</span><br><span class="line"></span><br><span class="line"># 可选项</span><br><span class="line">-tf             #显示日志</span><br><span class="line">--tail number   #指定要显示的条数</span><br></pre></td></tr></table></figure>

<p>查看容器中的进程信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker top 容器id</span><br></pre></td></tr></table></figure>

<p>查看镜像的元数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker inspect 容器ID</span><br></pre></td></tr></table></figure>

<p>进入正在运行的容器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 方式一：进入容器后开启一个新的终端（常用）</span><br><span class="line">docker exec -it 容器ID</span><br><span class="line"></span><br><span class="line"># 方式二：进入容器当前的终端，不会开启一个新的线程</span><br><span class="line">docker attach 容器ID</span><br></pre></td></tr></table></figure>

<p>从容器内拷贝文件到主机</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker cp 容器ID:文件路径 主机文件路径</span><br></pre></td></tr></table></figure>

<p>查看docker运行状态</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker status</span><br></pre></td></tr></table></figure>

<p>提交容器称为一个新的镜像</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker commit -m &quot;提交的描述信息&quot; -a &quot;作者&quot; 容器ID 目标镜像:TAG</span><br></pre></td></tr></table></figure>
<p>实例测试<br><img src="/2020/11/18/Docker/8.png" alt="commit实例测试"></p>
<h2 id="数据卷"><a href="#数据卷" class="headerlink" title="数据卷"></a>数据卷</h2><p><strong>查看volume</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker volume ls</span><br></pre></td></tr></table></figure>

<p><strong>查看vlome配置信息</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker volume inspect 卷名称</span><br><span class="line"># 所有docker容器的卷，没有指定目录的情况下都是在 &#x2F;var&#x2F;lib&#x2F;docker&#x2F;volumes&#x2F;xxxx_data</span><br></pre></td></tr></table></figure>

<p><strong>挂载数据卷</strong><br>（1）方法1：直接使用命令挂载</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 指定路径挂载</span><br><span class="line">docker run -v 主机目录:容器内目录[:读写选项] 容器ID</span><br><span class="line"></span><br><span class="line"># 具名挂载（常用）</span><br><span class="line">docker run -v volume名称:容器内目录[:读写选项] 容器ID</span><br><span class="line"></span><br><span class="line"># 匿名挂载</span><br><span class="line">docker run -v 容器内目录[:读写选项] 容器ID</span><br><span class="line"></span><br><span class="line"># 读写选项</span><br><span class="line">ro : readonly</span><br><span class="line">rw : readwrite</span><br></pre></td></tr></table></figure>

<p>（2）方法二：通过DockerFile来构建</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 创建一个放置dockerfile脚本的文件夹并在其中建立一个dockerfile脚本</span><br><span class="line">mkdir &#x2F;home&#x2F;docker-test-volume</span><br><span class="line">touch dockerfile01</span><br><span class="line"></span><br><span class="line">2. 编写dockerfile脚本</span><br><span class="line">vim dockerfile01</span><br><span class="line"></span><br><span class="line">3. 构建dockerfile</span><br><span class="line">docker build -f dockerfile01 -t llunch4w&#x2F;centos:1.0 .</span><br></pre></td></tr></table></figure>

<p>dockerfile01 内容</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 文件中的指令都是大写</span><br><span class="line"># 这里的每个命令就是镜像的一层</span><br><span class="line"></span><br><span class="line">FROM centos</span><br><span class="line"></span><br><span class="line">VOLUME [&quot;volume01&quot;,&quot;volume02&quot;]</span><br><span class="line"></span><br><span class="line">CMD echo &quot;-----end------&quot;</span><br><span class="line">CMD &#x2F;bin&#x2F;bash</span><br></pre></td></tr></table></figure>

<p><img src="/2020/11/18/Docker/9.png" alt="编写dockerfile"></p>
<p>4.通过上文创建的镜像创建一个容器并运行</p>
<p><img src="/2020/11/18/Docker/10.png" alt="检测"></p>
<p>5.此时采用的是匿名挂载，主机上一定有一个卷与其对应</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 查看卷挂载的路径</span><br><span class="line">docker inspect 容器ID</span><br></pre></td></tr></table></figure>

<p>查找Mounts内容即可找到对应的卷</p>
<p><img src="/2020/11/18/Docker/11.png" alt="查看主机对应卷"></p>
<p><strong>多个容器共享数据</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># docker2将复制docker1的挂载数据卷，两个数据卷之间的数据是同步变化的</span><br><span class="line"># 即使之后docker1被删除，docker2挂载的数据卷也不会消失</span><br><span class="line">docker run -it --name docker2 --volumes-from docker1</span><br></pre></td></tr></table></figure>


<h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><h2 id="docker运行centos"><a href="#docker运行centos" class="headerlink" title="docker运行centos"></a>docker运行centos</h2><p><strong>1. 下载centos镜像</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker pull centos</span><br></pre></td></tr></table></figure>

<p><strong>2. 创建并运行centos容器</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run -it centos &#x2F;bin&#x2F;bash</span><br></pre></td></tr></table></figure>

<h2 id="docker运行nginx"><a href="#docker运行nginx" class="headerlink" title="docker运行nginx"></a>docker运行nginx</h2><p><strong>1. 查找nginx镜像</strong></p>
<p>方法一：通过 Docker Hub的搜索框进行查找。包括多个版本可供下载，这里我选择1.18.0</p>
<p><img src="/2020/11/18/Docker/6.png" alt="选择nginx版本"></p>
<p>方法二：命令行搜索</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker search nginx</span><br></pre></td></tr></table></figure>

<p><strong>2. 拉取镜像</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker pull nginx:1.18.0</span><br></pre></td></tr></table></figure>

<p><strong>3. 启动nginx</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run -d --name nginx01 -p 3344:80 nginx:1.18.0</span><br><span class="line"># -d：后台运行</span><br><span class="line"># --name：设置docker名称</span><br><span class="line"># -p：指定端口映射，这个docker的80端口映射到主机的3344端口，80端口是nginx的默认访问端口</span><br></pre></td></tr></table></figure>

<p><strong>4. 访问nginx</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl localhost:3344</span><br></pre></td></tr></table></figure>

<p><strong>5. （可选）配置阿里云安全组</strong><br>安全组开放端口3344。<br>配置完成后，就可以通过访问 <a href="https://101.200.3.108:3344" target="_blank" rel="noopener">https://101.200.3.108:3344</a> 来外网访问容器中部署好的nginx了。</p>
<p><strong>6. （可选）进入docker查看nginx配置信息</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker exec -it nginx01 &#x2F;bin&#x2F;bash</span><br><span class="line"></span><br><span class="line"># 已进入docker后</span><br><span class="line">whereis nginx</span><br></pre></td></tr></table></figure>

<h2 id="docker运行tomcat"><a href="#docker运行tomcat" class="headerlink" title="docker运行tomcat"></a>docker运行tomcat</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 拉取镜像</span><br><span class="line">docker pull tomcat</span><br><span class="line"></span><br><span class="line">2. 启动容器</span><br><span class="line">docker run -d tomcat --name tomcat01 -p 8001:80</span><br><span class="line"></span><br><span class="line">3. 进入容器，为webapp中添加内容</span><br><span class="line">docker exec -it tomcat01 &#x2F;bin&#x2F;bash</span><br><span class="line">cd &#x2F;usr&#x2F;local&#x2F;tomcat</span><br><span class="line">cp -r webapps.dist&#x2F;* webapps&#x2F;</span><br></pre></td></tr></table></figure>

<h2 id="docker运行mysql"><a href="#docker运行mysql" class="headerlink" title="docker运行mysql"></a>docker运行mysql</h2><blockquote>
<p>重点是使用容器挂载技术解决mysql数据持久化问题<br>不能将数据存储到容器中，因为这样会导致容器消失时数据跟着消失</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 下载mysql镜像</span><br><span class="line">docker pull mysql:5.7</span><br><span class="line"></span><br><span class="line">2. 启动MySQL容器</span><br><span class="line">docker run -d -p 8001:3306 -v &#x2F;home&#x2F;mysql&#x2F;conf:&#x2F;etc&#x2F;mysql&#x2F;conf.d -v &#x2F;home&#x2F;mysql&#x2F;data:&#x2F;var&#x2F;lib&#x2F;mysql -e MYSQL_ROOT_PASSWORD&#x3D;MyNewPass --name mysql01 mysql:5.7</span><br><span class="line"># ps：主机映射端口8001应该已在安全组中添加，否则无法访问</span><br><span class="line"></span><br><span class="line">3. 本地使用navicat连接数据库101.200.3.108:8001</span><br><span class="line"></span><br><span class="line">4. 本地创建一个数据库，测试文件路径</span><br></pre></td></tr></table></figure>

<h2 id="构建自己的centos镜像"><a href="#构建自己的centos镜像" class="headerlink" title="构建自己的centos镜像"></a>构建自己的centos镜像</h2><p><strong>1.创建一个dockerfile文件</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir &#x2F;home&#x2F;dockerfile</span><br><span class="line">cd &#x2F;home&#x2F;dockerfile</span><br><span class="line">vim myCentOS_dockerfile</span><br></pre></td></tr></table></figure>

<p><strong>2.编写myCentOS_dockerfile文件</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">FROM centos</span><br><span class="line">MAINTAINER llunch4w&lt;1220296312@qq.com&gt;</span><br><span class="line"></span><br><span class="line">ENV MYPATH &#x2F;usr&#x2F;local</span><br><span class="line">WORKDIR $MYPATH</span><br><span class="line"></span><br><span class="line">RUN yum install -y vim</span><br><span class="line">RUN yum install -y net-tools</span><br><span class="line"></span><br><span class="line">EXPOSE 80</span><br><span class="line"></span><br><span class="line">CMD echo $MYPATH</span><br><span class="line">CMD echo &quot;---end---&quot;</span><br><span class="line">CMD &#x2F;bin&#x2F;bash</span><br></pre></td></tr></table></figure>

<p><strong>3.构建dockerfile文件</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker build</span><br></pre></td></tr></table></figure>

<p><strong>4.测试运行</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run -it --name mycentos01 mycentos:1.0 &#x2F;bin&#x2F;bash</span><br></pre></td></tr></table></figure>

<h2 id="构建自己的tomcat镜像"><a href="#构建自己的tomcat镜像" class="headerlink" title="构建自己的tomcat镜像"></a>构建自己的tomcat镜像</h2><p><strong>1. 准备tomcat压缩包和jdk压缩包</strong></p>
<ul>
<li>分别从tomcat官网和oracle官网上下载tomcat9的安装包和jdk8的安装包</li>
<li>通过Xftp工具将下载好的安装包传输到服务器上</li>
</ul>
<p><img src="/2020/11/18/Docker/21.png" alt="创建tomcat文件夹"></p>
<p><img src="/2020/11/18/Docker/20.png" alt="传输压缩包到tomcat文件夹"></p>
<p><strong>2. 创建readme.txt</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">touch readme.txt</span><br></pre></td></tr></table></figure>

<p><strong>3. 编写dockerfile文件</strong></p>
<blockquote>
<p>Dockerfile是官方命令，build会自动寻找这个文件，就不需要 -f 指定了</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim Dockerfile</span><br><span class="line"></span><br><span class="line"># Dockerfile内容</span><br><span class="line">FROM centos</span><br><span class="line">MAINTAINER llunch4w&lt;1220196312@qq.com&gt;</span><br><span class="line"></span><br><span class="line">COPY readme.txt &#x2F;usr&#x2F;local&#x2F;readme.txt</span><br><span class="line"></span><br><span class="line">ADD jdk-8u271-linux-x64.tar.gz &#x2F;usr&#x2F;local&#x2F;</span><br><span class="line">ADD apache-tomcat-9.0.39.tar.gz &#x2F;usr&#x2F;local&#x2F;</span><br><span class="line"></span><br><span class="line">RUN yum -y install vim</span><br><span class="line"></span><br><span class="line">ENV MYPATH &#x2F;usr&#x2F;local</span><br><span class="line">WORKDIR $MYPATH</span><br><span class="line"></span><br><span class="line">ENV JAVA_HOME &#x2F;usr&#x2F;local&#x2F;jdk1.8.0_271</span><br><span class="line">ENV CLASSPATH $JAVA_HOME&#x2F;lib&#x2F;dt.jar:$JAVA_HOME&#x2F;lib&#x2F;tools.jar</span><br><span class="line">ENV CATALINA_HOME &#x2F;usr&#x2F;local&#x2F;apache-tomcat-9.0.39</span><br><span class="line">ENV CATALINA_BASH &#x2F;usr&#x2F;local&#x2F;apache-tomcat-9.0.39</span><br><span class="line">ENV PATH $PATH:$JAVA_HOME&#x2F;bin:$CATALINA_HOME&#x2F;lib:CATALINA_HOME&#x2F;bin</span><br><span class="line"></span><br><span class="line">EXPOSE 8080</span><br><span class="line"></span><br><span class="line">CMD &#x2F;usr&#x2F;local&#x2F;apache-tomcat-9.0.39&#x2F;bin&#x2F;startup.sh &amp;&amp; tail -F &#x2F;usr&#x2F;local&#x2F;apache-tomcat-9.0.39&#x2F;bin&#x2F;logs&#x2F;catalina.out</span><br></pre></td></tr></table></figure>

<p><strong>4. 通过dockerfile构建镜像</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker build -t mytomcat .</span><br></pre></td></tr></table></figure>

<p><strong>5. 创建并启动容器</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run -d -p 8001:8080 --name mytomcat01 \</span><br><span class="line">-v &#x2F;home&#x2F;dockerfile&#x2F;tomcat&#x2F;test:&#x2F;usr&#x2F;local&#x2F;apache-tomcat-9.0.39&#x2F;webapps&#x2F;test \</span><br><span class="line">-v &#x2F;home&#x2F;dockerfile&#x2F;tomcat&#x2F;tomcat.logs:&#x2F;usr&#x2F;local&#x2F;apache-tomcat-9.0.39&#x2F;logs \</span><br><span class="line">mytomcat</span><br></pre></td></tr></table></figure>

<p><strong>6. 访问测试</strong></p>
<p>浏览器访问：<a href="https://101.200.3.108:8001" target="_blank" rel="noopener">https://101.200.3.108:8001</a> ，将跳转到tomcat首页</p>
<p><strong>7. 发布项目</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd &#x2F;home&#x2F;dockerfile&#x2F;tomcat&#x2F;test</span><br><span class="line"></span><br><span class="line">mkdir WEB-INF</span><br><span class="line"></span><br><span class="line">cd WEB-INF</span><br><span class="line"></span><br><span class="line">vim web.xml</span><br><span class="line"></span><br><span class="line"># web.xml中添加如下内容</span><br><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;web-app version&#x3D;&quot;2.4&quot; </span><br><span class="line">    xmlns&#x3D;&quot;http:&#x2F;&#x2F;java.sun.com&#x2F;xml&#x2F;ns&#x2F;j2ee&quot; </span><br><span class="line">    xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">    xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;java.sun.com&#x2F;xml&#x2F;ns&#x2F;j2ee </span><br><span class="line">        http:&#x2F;&#x2F;java.sun.com&#x2F;xml&#x2F;ns&#x2F;j2ee&#x2F;web-app_2_4.xsd&quot;&gt;</span><br><span class="line">&lt;&#x2F;web-app&gt;</span><br><span class="line"></span><br><span class="line">cd &#x2F;home&#x2F;dockerfile&#x2F;tomcat&#x2F;test</span><br><span class="line"></span><br><span class="line">vim index.jsp</span><br><span class="line"></span><br><span class="line"># index.jsp中添加如下内容</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;&lt;title&gt;Hello World&lt;&#x2F;title&gt;&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">Hello World!&lt;br&#x2F;&gt;</span><br><span class="line">&lt;%</span><br><span class="line">out.println(&quot;----my test web logs------&quot;);</span><br><span class="line">%&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<h2 id="发布镜像"><a href="#发布镜像" class="headerlink" title="发布镜像"></a>发布镜像</h2><p><strong>方法一：发布镜像到 Docker Hub</strong></p>
<p>（0）拥有 Docker Hub 账号<br>Docker Hub网址：<a href="https://hub.docker.com/" target="_blank" rel="noopener">https://hub.docker.com/</a></p>
<p>（1）登陆 Docker Hub</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker login -u llunch</span><br></pre></td></tr></table></figure>

<p>（2）上传镜像</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 列举所有镜像，以确定要上传的镜像</span><br><span class="line">docker images</span><br><span class="line"></span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">mytomcat            latest              bf0a93c6e548        41 minutes ago      643MB</span><br><span class="line"></span><br><span class="line"># 给mytomcat加tag</span><br><span class="line">docker tag mytomcat llunch&#x2F;mytomcat:1.0 # llunch为登录用户名</span><br><span class="line"></span><br><span class="line"># 上传镜像</span><br><span class="line">docker push llunch&#x2F;mytomcat:1.0</span><br></pre></td></tr></table></figure>

<p><img src="/2020/11/18/Docker/22.png" alt="镜像上传步骤"></p>
<p><em>因为Docker Hub是外网，因此上传速度很慢</em></p>
<p><strong>方法二：发布到阿里云容器服务</strong></p>
<p>（1）登陆到阿里云</p>
<p>（2）找到容器服务</p>
<p><img src="/2020/11/18/Docker/23.png" alt="阿里云容器镜像服务"></p>
<p>（3）创建命名空间</p>
<p><img src="/2020/11/18/Docker/24.png" alt="创建命名空间"></p>
<p>（4）创建容器镜像</p>
<p>配置仓库信息<br><img src="/2020/11/18/Docker/25.png" alt="配置仓库信息"></p>
<p>设置代码源为本地仓库<br><img src="/2020/11/18/Docker/26.png" alt="创建命名空间"></p>
<p>根据操作指南进行操作<br><img src="/2020/11/18/Docker/27.png" alt="操作指南"></p>
<p>（5）操作指南</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 登陆阿里云的 Docker Registry</span><br><span class="line">docker login --username&#x3D;llunch registry.cn-beijing.aliyuncs.com</span><br><span class="line"></span><br><span class="line">2. 为镜像添加tag</span><br><span class="line">docker tag [ImageId] registry.cn-beijing.aliyuncs.com&#x2F;llunch4w&#x2F;repo_test:[镜像版本号]</span><br><span class="line"></span><br><span class="line">3. 将镜像推送到Registry</span><br><span class="line">docker push registry.cn-beijing.aliyuncs.com&#x2F;llunch4w&#x2F;repo_test:[镜像版本号]</span><br></pre></td></tr></table></figure>

<p><img src="/2020/11/18/Docker/28.png" alt="阿里云上传镜像步骤"></p>
<h2 id="部署Redis集群"><a href="#部署Redis集群" class="headerlink" title="部署Redis集群"></a>部署Redis集群</h2><p>待补充</p>
<h2 id="SpringBoot微服务打包成镜像"><a href="#SpringBoot微服务打包成镜像" class="headerlink" title="SpringBoot微服务打包成镜像"></a>SpringBoot微服务打包成镜像</h2><p>待补充</p>
<h1 id="Docker原理"><a href="#Docker原理" class="headerlink" title="Docker原理"></a>Docker原理</h1><h2 id="镜像加载原理"><a href="#镜像加载原理" class="headerlink" title="镜像加载原理"></a>镜像加载原理</h2><p><strong>UnionFS（联合文件系统）</strong></p>
<ul>
<li>UnionFS是一种分层的、轻量级、高性能的文件系统</li>
<li>他支持对文件的修改作为一次提交来一层层叠加，同时可以将不同目录挂载到同一虚拟文件系统下</li>
<li>UnionFS是docker镜像的基础：镜像可以通过分层来继承，基于基础镜像可以制作各种具体的应用镜像</li>
<li>特性：一次同时加载多个文件系统，但从外部看来只能看到一个文件系统。联合加载会将各层文件系统叠加起来，这样最终文件系统会包含所有的底层文件和目录。</li>
</ul>
<p><img src="/2020/11/18/Docker/7.png" alt="镜像加载原理"></p>
<ul>
<li><strong>bootfs</strong>：Boot File System，主要包含bootloader和kernel，bootloader主要是引导加载kernel。当Boot加载完成后，整个内核就在内存中了，此时内存的使用权由bootfs转交给内核，系统会卸载bootfs。</li>
<li><strong>rootfs</strong>：Root File System，包含典型Linux系统中的/dev,/proc,/bin,/etc等标准目录和文件。rootfs就是各种不同操作系统的发行版，比如ubuntu,centos等。</li>
</ul>
<p><strong>镜像特点</strong></p>
<ul>
<li>Docker镜像都是只读的，当容器启动时，一个新的可写层被加载到镜像的顶部</li>
<li>这个新的可写层被称为容器层，容器层之下的都叫镜像层</li>
</ul>
<p><img src="/2020/11/18/Docker/15.png" alt="分层镜像"></p>
<h2 id="容器数据卷"><a href="#容器数据卷" class="headerlink" title="容器数据卷"></a>容器数据卷</h2><p>容器数据卷是一种用于容器之间共享数据的技术，用于持久化保存数据，使得部分容器产生的数据（用户不希望随着容器关闭而随之消失的数据）可以保存下来</p>
<ul>
<li>数据卷可以在容器之间共享数据</li>
<li>Docker产生的数据，可以同步到本地</li>
<li>数据卷中的更改可以直接生效</li>
<li>数据卷的更改不会包含在镜像更新中</li>
<li>数据卷的生命周期一直持续到没有容器使用它为止</li>
</ul>
<h1 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h1><p><strong>构建步骤</strong></p>
<ol>
<li>编写一个dockerfile文件</li>
<li>docker build为一个镜像</li>
<li>docker run 运行镜像</li>
<li>docker push 发布镜像</li>
</ol>
<p><strong>查看官方centos的dockerfile文件</strong></p>
<p>进入 Docker Hub 搜索 CentOS，点击一个具体的版本就可以跳转到官方git下的该版本centos页面</p>
<p><img src="/2020/11/18/Docker/12.png" alt="查看官方centos的dockerfile文件"></p>
<h2 id="Dockerfile命令"><a href="#Dockerfile命令" class="headerlink" title="Dockerfile命令"></a>Dockerfile命令</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">FROM        # 基础镜像，一切从这里开始构建；通常为操作系统</span><br><span class="line">MAINTAINCER # 镜像是谁写的，姓名 + 邮箱</span><br><span class="line">RUN         # 镜像构建时需要运行的命令</span><br><span class="line">ADD         # 添加内容（如压缩包文件）</span><br><span class="line">WORKDIR     # 镜像的工作目录</span><br><span class="line">VOLUME      # 挂载的目录</span><br><span class="line">EXPOSE      # 暴露端口</span><br><span class="line">CMD         # 指定容器启动时要运行的命令，只有最后一个会生效，可被替代</span><br><span class="line">ENTRYPOINT  # 指定容器启动时要运行的命令，可以追加命令</span><br><span class="line">ONBUILD     # 当构建一个被继承的Dockerfile时，就会运行ONBUILD指令，触发指令</span><br><span class="line">COPY        # 类似ADD，将文件拷贝到镜像中</span><br><span class="line">ENV         # 构建的时候，设置环境变量</span><br></pre></td></tr></table></figure>

<p><img src="/2020/11/18/Docker/13.png" alt="Dockerfile命令"></p>
<p><img src="/2020/11/18/Docker/14.png" alt="Dockerfile命令"></p>
<h3 id="CMD和ENTRYPOINT"><a href="#CMD和ENTRYPOINT" class="headerlink" title="CMD和ENTRYPOINT"></a>CMD和ENTRYPOINT</h3><blockquote>
<p>编写程序验证CMD和ENTRYPOINT之间的差别</p>
</blockquote>
<p><strong>1.构建cmdtest镜像并创建启动容器</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim centos-cmd-test</span><br><span class="line"></span><br><span class="line"># centos-cmd-test 添加如下内容</span><br><span class="line">FROM centos</span><br><span class="line">MAINTAINER llunch4w&lt;1220296312@qq.com&gt;</span><br><span class="line"></span><br><span class="line">CMD [&quot;ls&quot;,&quot;-a&quot;]</span><br><span class="line"></span><br><span class="line"># 通过dockerfile文件构建镜像</span><br><span class="line">docker build -f centos-cmd-test -t cmdtest .</span><br><span class="line"></span><br><span class="line"># 创建并运行容器</span><br><span class="line">docker run cmdtest</span><br></pre></td></tr></table></figure>

<p><img src="/2020/11/18/Docker/16.png" alt="步骤1操作图"></p>
<p><strong>1.1 （扩展）追加一个命令 -l</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run cmdtest -l</span><br><span class="line"># 本希望效果是执行 ls -al，而实际上会报错</span><br></pre></td></tr></table></figure>

<p><img src="/2020/11/18/Docker/17.png" alt="步骤1追加命令时出现错误"></p>
<p><strong>2.构建centos_entrypoint_test镜像并创建启动容器</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim centos-entrypoint-test</span><br><span class="line"></span><br><span class="line"># centos-entrypoint-test 添加如下内容</span><br><span class="line">FROM centos</span><br><span class="line">MAINTAINER llunch4w&lt;1220296312@qq.com&gt;</span><br><span class="line"></span><br><span class="line">ENTRYPOINT [&quot;ls&quot;,&quot;-a&quot;]</span><br><span class="line"></span><br><span class="line"># 通过dockerfile文件构建镜像</span><br><span class="line">docker build -f centos-entrypoint-test -t entrypoint_test .</span><br><span class="line"></span><br><span class="line"># 创建并运行容器</span><br><span class="line">docker run entrypoint_test</span><br></pre></td></tr></table></figure>

<p><img src="/2020/11/18/Docker/18.png" alt="步骤2操作图"></p>
<p><strong>2.1 （扩展）追加一个命令 -l</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run entrypoint_test -l</span><br><span class="line"># 成功执行出 ls -al 的效果</span><br></pre></td></tr></table></figure>

<p><img src="/2020/11/18/Docker/19.png" alt="步骤2追加命令成功"></p>
<h1 id="Docker-网络"><a href="#Docker-网络" class="headerlink" title="Docker 网络"></a>Docker 网络</h1><p><em>清除原有的容器和镜像，保持一个干净的环境学习网络</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker rm -f $(docker ps -aq)</span><br><span class="line">docker rmi -f $(docker images -aq)</span><br></pre></td></tr></table></figure>

<p>干净的环境<br><img src="/2020/11/18/Docker/29.png" alt="干净的环境"></p>
<h2 id="案例初感知"><a href="#案例初感知" class="headerlink" title="案例初感知"></a>案例初感知</h2><p><strong>1. 查看网卡</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ip addr</span><br></pre></td></tr></table></figure>

<p><img src="/2020/11/18/Docker/30.png" alt="本机网卡"></p>
<p><strong>2. 容器外ping容器内测试</strong></p>
<p>（1）创建并运行一个容器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run -d -P --name tomcat01 tomcat</span><br></pre></td></tr></table></figure>

<p>（2）查看容器内部网络地址</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker exec -it tomcat01 ip addr</span><br></pre></td></tr></table></figure>

<p><img src="/2020/11/18/Docker/31.png" alt="网卡"></p>
<p>（3）尝试在主机端ping容器内部</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ping 172.17.0.2</span><br></pre></td></tr></table></figure>

<p><img src="/2020/11/18/Docker/32.png" alt="成功ping"></p>
<p><em>结论：主机和容器之间可以ping通</em></p>
<p><strong>3. 两个容器之间 ping 测试</strong></p>
<p>（1）创建并运行另一个容器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run -d -P --name tomcat02 tomcat</span><br></pre></td></tr></table></figure>

<p>（2）查看容器内部网络地址</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker exec -it tomcat02 ip addr</span><br></pre></td></tr></table></figure>

<p><img src="/2020/11/18/Docker/34.png" alt="网卡"></p>
<p>（3）尝试在tomcat01容器里pingtomcat容器内部</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 进入tomcat01</span><br><span class="line">docker exec -it tomcat01 &#x2F;bin&#x2F;bash</span><br><span class="line">ping 172.17.0.3</span><br></pre></td></tr></table></figure>

<p><img src="/2020/11/18/Docker/35.png" alt="成功ping"></p>
<p><em>结论：同一主机下创建的容器之间可以ping通</em></p>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><h3 id="主机与容器通信原理"><a href="#主机与容器通信原理" class="headerlink" title="主机与容器通信原理"></a>主机与容器通信原理</h3><ol>
<li>每启动一个docker容器，docker就会给docker容器分配一个ip。</li>
<li>只要安装了docker，就会有一个docker0。</li>
<li>使用的技术是 <code>evth-pair</code></li>
</ol>
<p><strong>evth-pair</strong></p>
<p>当创建一个新容器后，主机内就会多一块网卡，这个网卡与docker内部网卡是成对出现的<br><img src="/2020/11/18/Docker/33.png" alt="evth-pair"></p>
<ul>
<li>evth-pair 就是一对虚拟设备接口，它们都是成对出现的：一段连着协议，一段彼此相连</li>
<li>evth-pair 充当一个桥梁，连接各种虚拟网络设备</li>
</ul>
<h3 id="容器之间通信原理"><a href="#容器之间通信原理" class="headerlink" title="容器之间通信原理"></a>容器之间通信原理</h3><ul>
<li>容器之间通过 evth-pair 技术进行通信</li>
<li>容器共用一个路由器 <code>docker0</code> ，不过路由过程对于使用者来说是透明的，看起来就像两个容器之间通信一样</li>
<li>所有容器在不指定网络的情况下，都是docker0路由的。docker会给容器分配一个默认的可用ip。</li>
</ul>
<p><img src="/2020/11/18/Docker/36.png" alt="evth-pair"></p>
<h3 id="docker0与主机之间通信原理"><a href="#docker0与主机之间通信原理" class="headerlink" title="docker0与主机之间通信原理"></a>docker0与主机之间通信原理</h3><p><img src="/2020/11/18/Docker/37.png" alt="evth-pair"></p>
<ul>
<li>Docker使用的是Linux桥接。宿主机中是一个Docker容器的网桥docker0.</li>
<li>Docker中所有的网络接口都是虚拟的（转发效率高）</li>
</ul>
<h2 id="查看网络信息"><a href="#查看网络信息" class="headerlink" title="查看网络信息"></a>查看网络信息</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 列出所有网络</span><br><span class="line">docker network ls</span><br><span class="line"></span><br><span class="line"># 探查特定网络</span><br><span class="line">docker network inspect 网络ID</span><br></pre></td></tr></table></figure>

<p><img src="/2020/11/18/Docker/40.png" alt="探查网络"></p>
<p><img src="/2020/11/18/Docker/39.png" alt="网络配置"></p>
<h2 id="容器互联-–link"><a href="#容器互联-–link" class="headerlink" title="容器互联 –link"></a>容器互联 –link</h2><blockquote>
<p>对于这样一个场景：我们编写了一个微服务，database url=ip;假设数据库ip换掉了，如何在项目不重启的前提下使微服务能访问到正确的数据库地址</p>
</blockquote>
<p>答：在绑定ip时，不要使用具体的ip地址值，而是使用容器名</p>
<p><strong>直接使用容器名会报错</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker exec -it tomcat02 ping tomcat01</span><br></pre></td></tr></table></figure>

<p><strong>使用 –link成功</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run -d -P --name tomcat03 --link tomcat01 tomcat</span><br></pre></td></tr></table></figure>

<p><img src="/2020/11/18/Docker/38.png" alt="--link"></p>
<p><strong>–link的原理就是更改了某个容器的配置文件</strong></p>
<p><img src="/2020/11/18/Docker/41.png" alt="--link"></p>
<p>这也凸显出–link的一个弊端，即它的link不是双向的，在tomcat01的/etc/host中并不存在tomcat03的地址映射。也就是说，tomcat01 ping tomcat03 是无法 ping 通的。</p>
<p><img src="/2020/11/18/Docker/42.png" alt="单向映射"></p>
<p><strong>结论：</strong></p>
<ul>
<li>现在玩 Docker 已经不建议使用 –link 了</li>
<li>因为 docker0 具有不支持容器名连接访问的弊端</li>
<li>更优的解决方案是<code>自定义网络</code></li>
</ul>
<h2 id="容器互联-自定义网络"><a href="#容器互联-自定义网络" class="headerlink" title="容器互联 自定义网络"></a>容器互联 自定义网络</h2><p><em>清理所有容器和镜像，保持干净的测试环境</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker rm -f $(docker ps -aq)</span><br></pre></td></tr></table></figure>

<p><strong>网络模式</strong></p>
<ul>
<li>bridge：桥接，docker默认</li>
<li>none：不配置网络</li>
<li>host：和宿主机共享网络</li>
<li>container：容器连通（用的少，局限很大）</li>
</ul>
<p><strong>实例</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 启动一个tomcat容器并设置其网络模式为桥接</span><br><span class="line">docker run -d -P --name tomcat01 --net bridge tomcat</span><br></pre></td></tr></table></figure>

<h3 id="创建网络"><a href="#创建网络" class="headerlink" title="创建网络"></a>创建网络</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker network create --driver bridge --subnet 192.168.0.0&#x2F;16 \</span><br><span class="line">--gateway 192.168.0.1 mynet</span><br></pre></td></tr></table></figure>

<p><em>通过以上自定义网络实现容器互联</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 创建两个tomcat容器，均加入自定义网络</span><br><span class="line">docker run -d -P --name tomcat-net-01 --net mynet tomcat</span><br><span class="line">docker run -d -P --name tomcat-net-02 --net mynet tomcat</span><br><span class="line"></span><br><span class="line">2. 测试连通性</span><br><span class="line">docker exec -it tomcat-net-01 ping tomcat-net-02</span><br><span class="line">docker exec -it tomcat-net-02 ping tomcat-net-01</span><br></pre></td></tr></table></figure>

<p><img src="/2020/11/18/Docker/43.png" alt="容器连通再测试"></p>
<blockquote>
<p>不同的集群使用不同的网络，有利于保证集群是安全和健康的</p>
</blockquote>
<h2 id="网络连通"><a href="#网络连通" class="headerlink" title="网络连通"></a>网络连通</h2><blockquote>
<p>实现不同网段的容器之间通信</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker network connect 网络名称 容器名称&#x2F;ID</span><br></pre></td></tr></table></figure>

<p><strong>实战</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">目标：使docker0网络下的tomcat01可以与mynet网络下的tomcat-net-01通信</span><br><span class="line"></span><br><span class="line">1. 打通 tomcat01 - mynet</span><br><span class="line">docker network connect mynet tomcat01</span><br><span class="line"></span><br><span class="line">2. 测试网络连通性</span><br><span class="line">docker exec -it tomcat01 ping tomcat-net-01</span><br><span class="line">docker exec -it tomcat-net-01 ping tomcat01</span><br></pre></td></tr></table></figure>

<p><img src="/2020/11/18/Docker/44.png" alt="网络连通再测试"></p>
<p><strong>原理</strong></p>
<p><img src="/2020/11/18/Docker/45.png" alt="原理"></p>
<ul>
<li>连通的本质是将 tomcat01 放到了 mynet 网络下</li>
<li>tomcat01 实际上被分配了两个ip，一个是docker0为其分配的，一个是mynet为其分配的</li>
<li>也就是说，通过一个容器多个ip的方式实现了容器与多个网络互连的技术</li>
</ul>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Git</title>
    <url>/2020/11/16/Git/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote class="blockquote-center">
<p>^ _ ^ </p>

</blockquote>
<a id="more"></a>

<h1 id="Git配置"><a href="#Git配置" class="headerlink" title="Git配置"></a>Git配置</h1><ol>
<li>查看Git配置<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config [选项]</span><br></pre></td></tr></table></figure>

</li>
</ol>
<table>
<thead>
<tr>
<th>选项</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>-l</td>
<td>= –list 列出</td>
</tr>
<tr>
<td>–global</td>
<td>本地设置</td>
</tr>
<tr>
<td>–system</td>
<td>系统设置</td>
</tr>
</tbody></table>
<ol start="2">
<li><p>修改Git配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config [选项] 属性名 属性值</span><br><span class="line"></span><br><span class="line"># 例子：git config user.name &quot;llunch&quot;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Git配置的本质还是修改配置文件</p>
</li>
</ol>
<p><img src="/2020/11/16/Git/1.png" alt="Git配置文件"></p>
<p><img src="/2020/11/16/Git/2.png" alt="Git配置文件"></p>
<h1 id="Git工作原理"><a href="#Git工作原理" class="headerlink" title="Git工作原理"></a>Git工作原理</h1><p>Git可分为四个工作区：</p>
<ul>
<li>工作目录（Working Directory）：存放源代码</li>
<li>暂存区（Stage/Index）：临时存放改动信息；本质上是一个文件，保存即将提交到文件列表的信息</li>
<li>本地仓库（Repository）：安全存放数据的位置，保存用户提交到所有版本的数据</li>
<li>远程git仓库（Remote Directory）：托管代码的服务器</li>
</ul>
<p><img src="/2020/11/16/Git/3.png" alt="Git四大工作区"></p>
<h1 id="Git命令"><a href="#Git命令" class="headerlink" title="Git命令"></a>Git命令</h1><h2 id="创建或克隆仓库"><a href="#创建或克隆仓库" class="headerlink" title="创建或克隆仓库"></a>创建或克隆仓库</h2><ol>
<li><p>创建本地Git仓库</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure>
</li>
<li><p>克隆远程仓库</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone 远程仓库地址</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="Git文件操作"><a href="#Git文件操作" class="headerlink" title="Git文件操作"></a>Git文件操作</h2><p><strong>文件的4种状态</strong></p>
<ul>
<li><code>Untracked</code>：未跟踪；文件处于文件夹中，不参与版本控制<ul>
<li>通过<code>git add</code>状态变为<code>Staged</code></li>
</ul>
</li>
<li><code>Unmodify</code>：未修改；本库中的文件快照内容与文件夹中一致，不存在改动<ul>
<li>若它被修改，则变为<code>Modified</code>状态</li>
<li>若使用<code>git rm</code>移出版本库，则变为<code>Untracked</code>状态</li>
</ul>
</li>
<li><code>Modified</code>：已修改；仅仅是修改，没有进行其他操作<ul>
<li>通过<code>git add</code>可以进入<code>Staged</code>状态</li>
<li>执行<code>git checkout</code>则丢弃修改，返回<code>Unmodify</code>状态</li>
</ul>
</li>
<li><code>Staged</code>：暂存状态；<ul>
<li>执行<code>git commit</code>后，会将修改同步到库中；这时库中文件又变得和本地文件一致，成为<code>Unmodify</code>状态</li>
<li>执行<code>git reset HEAD filename</code>取消暂存，文件状态变为<code>Modified</code> </li>
</ul>
</li>
</ul>
<p><img src="/2020/11/16/Git/4.png" alt="Git命令"></p>
<ol>
<li><p>查看文件状态</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git status [filename]</span><br></pre></td></tr></table></figure>
</li>
<li><p>添加文件到暂存区</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git add . # 添加所有文件到暂存区</span><br></pre></td></tr></table></figure>
</li>
<li><p>提交暂存区内容到本地仓库</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git commit -m 提交信息</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="忽略文件"><a href="#忽略文件" class="headerlink" title="忽略文件"></a>忽略文件</h2><p>在项目主目录下建立<code>.gitignore</code>文件，此文件有如下规则：</p>
<ul>
<li>文件中的空行和以#号开始的行会被忽略</li>
<li>可以使用Linux通配符<ul>
<li>* : 任意多个字符</li>
<li>?  : 任意一个字符</li>
<li>[abc] : 可选字符范围</li>
<li>{String1,String2} : 可选字符串</li>
</ul>
</li>
<li>如果名称最前面有一个!号，表示例外规则，将不被忽略</li>
<li>如果名称的最前面是一个路径分隔符 / ，表示要忽略的文件在此目录下，而子目录中的文件不能被忽略</li>
<li>如果名称的最后面是一个路径分割符 / ，表示要忽略的是此目录下该名称的子目录，而非文件</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">*.txt       # 忽略所有txt结尾的文件</span><br><span class="line">!lib.txt    # 但lib.txt除外</span><br><span class="line">&#x2F;temp       # 仅忽略根目录下的TODO文件，不包括其他目录temp</span><br><span class="line">build&#x2F;      # 忽略build目录下的所有文件</span><br><span class="line">doc&#x2F;*.txt   # 会忽略doc&#x2F;notes.txt但不会忽略doc&#x2F;server&#x2F;notes.txt</span><br></pre></td></tr></table></figure>

<h1 id="生成SSH公钥"><a href="#生成SSH公钥" class="headerlink" title="生成SSH公钥"></a>生成SSH公钥</h1><ol>
<li>进入.ssh目录打开git</li>
</ol>
<p><img src="/2020/11/16/Git/5.png" alt="公钥目录"></p>
<ol start="2">
<li><p>生成密钥</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure>
</li>
<li><p>生成成功后目录中添加两个文件</p>
</li>
</ol>
<p><img src="/2020/11/16/Git/6.png" alt="密钥生成"></p>
<h1 id="Git分支"><a href="#Git分支" class="headerlink" title="Git分支"></a>Git分支</h1><ol>
<li><p>列出所有本地分支</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git branch</span><br></pre></td></tr></table></figure>
</li>
<li><p>列出所有远程分支</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git branch -r</span><br></pre></td></tr></table></figure>
</li>
<li><p>新建分支</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git branch 分支名称</span><br></pre></td></tr></table></figure>
</li>
<li><p>切换分支</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git checkout -b 分支名称</span><br></pre></td></tr></table></figure>
</li>
<li><p>合并分支到当前分支</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git merge 分支名称</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除分支</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git branch -d 分支名称</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除远程分支</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git push origin --delete 分支名称</span><br><span class="line">git branch -dr 分支名称</span><br></pre></td></tr></table></figure>

</li>
</ol>
]]></content>
      <categories>
        <category>软件使用</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Git Advance</title>
    <url>/2021/09/06/Git-Advance/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote class="blockquote-center">
<p>Use the git more advanced </p>

</blockquote>
<a id="more"></a>

<h1 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h1><p>Since I have started my graduate student life, I found there are some new needs to be proficiency with git. New needs as followed:</p>
<ul>
<li><strong>How to connect differenct remote repository</strong> : Both company and lab have requirements for code security and privacy. A lot of times, their codes is not allowed to open source. For this purpose, they build their own repository of code management. So the new demand for me is to how to push or pull my local git code to the differenct repository.</li>
<li><strong>Checkout/Merge</strong> : Thanks to HIT-SZ and Tuling-Robot Company, they assined me a new computer when I worked there. When I am in the company and lab, I would like to use the desktop computer to code some code. While I am in other place, like dormitory and classroom, I prefer to use my laptop computer. So I need a synchronization tool to synchronize my code which might be coded in different computer. Because of its’ own characteristic, git looks perfect. But only when I am on top of some advanced operation, like checkout and merge, I can use git to satisfy my new demand.</li>
<li><strong>How to use VSCode to git</strong> : VSCode is a really powerful software. Because of the lightweight, VSCode becomes my most commonly used software. And VSCode can extend git functionality by adding plug-in, it’s convenient.</li>
</ul>
<h1 id="How-to-connect-differenct-remote-repository"><a href="#How-to-connect-differenct-remote-repository" class="headerlink" title="How to connect differenct remote repository ?"></a>How to connect differenct remote repository ?</h1><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul>
<li><a href="https://blog.csdn.net/qq_41621362/article/details/112140343" target="_blank" rel="noopener">Git同时连接Github和Gitee(码云)</a></li>
<li><a href="https://blog.csdn.net/gozhuyinglong/article/details/113861993?utm_medium=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7ECTRLIST%7Edefault-1.no_search_link&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7ECTRLIST%7Edefault-1.no_search_link" target="_blank" rel="noopener">如何将代码同时提交到Github和码云Gitee上</a></li>
<li><a href="https://blog.csdn.net/sinat_39049092/article/details/113417142" target="_blank" rel="noopener">git 本地仓库关联到远程仓库</a></li>
<li><a href="https://stackoverflow.com/questions/65173291/git-push-error-src-refspec-main-does-not-match-any-on-linux" target="_blank" rel="noopener">git push error: src refspec main does not match any on linux</a></li>
<li><a href="https://blog.csdn.net/qq_37604802/article/details/116713861" target="_blank" rel="noopener">解决unable to access ‘https://github.com/xxx/xxx.git/‘: OpenSSL SSL_read: Connection was reset, errno</a></li>
</ul>
<h2 id="Clear-Mind"><a href="#Clear-Mind" class="headerlink" title="Clear Mind"></a>Clear Mind</h2><p>When people push code from local repository to remote repository or pull code from remote repository to local, they would say “I git my code”. In a way, we can think of git process as a data transfer between localhost and remote server. Essentially, git is a process of network communication. The communcation there is more like https rather than http, because https has a network layer called <code>SSL</code>, where it implements encryption algorithm.</p>
<p>Encryption algorithm can be divied into 2 classes, which is symmetic encrytion and asymmetic encrytion. For <code>symmetic encryption</code>, the same key is used for both encrytion and decryption. For <code>asymmetic encryption</code>, it uses public-private key encryption mechanism, which means the sender uses the private key for encryption while receiver uses the public key to decrypt.</p>
<p>Git communication process uses public-private key encryption mechanism. So when our local repository need to connect to different remote repository(etc. like n), we only need to generate n different public-private key pair.Meanwhile, the local repository need a ID to identify itself. In fact, the “ID” is <code>user.name</code> and <code>user.email</code>.</p>
<p><img src="/2021/09/06/Git-Advance/git%E9%80%9A%E4%BF%A1%E5%8E%9F%E7%90%86.png" alt></p>
<h2 id="Practice-01-–-SSH-with-code-hoster"><a href="#Practice-01-–-SSH-with-code-hoster" class="headerlink" title="Practice-01 – SSH with code-hoster"></a>Practice-01 – SSH with code-hoster</h2><h3 id="First-Config-your-local-ID"><a href="#First-Config-your-local-ID" class="headerlink" title="First : Config your local ID"></a>First : Config your local ID</h3><blockquote>
<p>If you have configed the local ID, you can skip this step</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># git config [option] field value</span></span><br><span class="line">git config --global user.name <span class="string">"your_name"</span></span><br><span class="line">git config --global user.email <span class="string">"your_email"</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>the change you make will save in the <code>C:\user\&lt;user_name&gt;</code>,you can modify the file to achieve the same purpose as the command line operation.</p>
</blockquote>
<h3 id="Second-Generate-differenct-public-key-for-different-remote-repository"><a href="#Second-Generate-differenct-public-key-for-different-remote-repository" class="headerlink" title="Second: Generate differenct public key for different remote repository"></a>Second: Generate differenct public key for different remote repository</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Suppose the 2 repositories are github and gitee</span></span><br><span class="line">ssh-keygen -t rsa -C <span class="string">'&lt;github email&gt;'</span> -f ~/.ssh/id_rsa_github</span><br><span class="line">ssh-keygen -t rsa -C <span class="string">'&lt;gitee email&gt;'</span> -f ~/.ssh/id_rsa_gitee</span><br><span class="line"><span class="comment"># In Win10, the "~" means "C:\Users\a"</span></span><br></pre></td></tr></table></figure>
<p><img src="/2021/09/06/Git-Advance/gen_rsa_key.jpg" alt></p>
<h3 id="Third-Add-public-key-to-the-website-interface-of-the-remote-repository"><a href="#Third-Add-public-key-to-the-website-interface-of-the-remote-repository" class="headerlink" title="Third: Add public key to the website interface of the remote repository"></a>Third: Add public key to the website interface of the remote repository</h3><p>In github, for example:<br><img src="/2021/09/06/Git-Advance/github_ssh_01.jpg" alt><br><img src="/2021/09/06/Git-Advance/github_ssh_02.jpg" alt></p>
<p>In gitee, for example:<br><img src="/2021/09/06/Git-Advance/gitee_ssh_01.jpg" alt></p>
<h3 id="Forth-Edit-config-file"><a href="#Forth-Edit-config-file" class="headerlink" title="Forth: Edit config file"></a>Forth: Edit config file</h3><p>The config file will guide the localhost choose a correct private key to connect with the remote repository.</p>
<blockquote>
<p>file path: <code>~/.ssh/config</code></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># gitee</span><br><span class="line">Host gitee.com</span><br><span class="line">  HostName gitee.com</span><br><span class="line">  PreferredAuthentications publickey</span><br><span class="line">  IdentityFile C:\Users\a\.ssh\id_rsa_gitee</span><br><span class="line">  </span><br><span class="line"># github</span><br><span class="line">Host github.com</span><br><span class="line">  HostName github.com</span><br><span class="line">  PreferredAuthentications publickey</span><br><span class="line">  IdentityFile C:\Users\a\.ssh\id_rsa_github</span><br></pre></td></tr></table></figure>

<p>validation effect:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com</span><br><span class="line">ssh -T git@gitee.com</span><br></pre></td></tr></table></figure>
<p><img src="/2021/09/06/Git-Advance/ssh_success.jpg" alt></p>
<h2 id="Practice-02-Host-a-project-to-a-different-repository"><a href="#Practice-02-Host-a-project-to-a-different-repository" class="headerlink" title="Practice-02: Host a project to a different repository"></a>Practice-02: Host a project to a different repository</h2><p>Suppose I have a local repository named TestGit with the following directories:<br><img src="/2021/09/06/Git-Advance/practice-02-01.jpg" alt></p>
<h3 id="Step1-Create-remote-repositories-on-different-hosting-platforms"><a href="#Step1-Create-remote-repositories-on-different-hosting-platforms" class="headerlink" title="Step1: Create remote repositories on different hosting platforms"></a>Step1: Create remote repositories on different hosting platforms</h3><p><img src="/2021/09/06/Git-Advance/practice-02-02.jpg" alt></p>
<h3 id="Step2-Create-local-repository-and-link-in-to-remote-repository"><a href="#Step2-Create-local-repository-and-link-in-to-remote-repository" class="headerlink" title="Step2: Create local repository and link in to remote repository"></a>Step2: Create local repository and link in to remote repository</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 0.precondition: cd the project direction</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.init local git repository</span></span><br><span class="line">git init</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.set remote repository address</span></span><br><span class="line"><span class="comment"># git remote add &lt;remote&gt; &lt;url&gt;</span></span><br><span class="line">git remote add origin git@github.com:Llunch4w/TestGit.git</span><br><span class="line">git remote add gitee git@gitee.com:llunch4w/<span class="built_in">test</span>-git.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.1 verify remote repository whether added successfully</span></span><br><span class="line">git remote -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.2 (optional) you can rename remote</span></span><br><span class="line"><span class="comment"># git remote rename &lt;old_remote_name&gt; &lt;new_remote_name&gt;</span></span><br><span class="line">git remote rename origin github</span><br></pre></td></tr></table></figure>

<p><img src="/2021/09/06/Git-Advance/practice-02-03.jpg" alt></p>
<h3 id="Step3-01-Push-local-code-to-remote-repository"><a href="#Step3-01-Push-local-code-to-remote-repository" class="headerlink" title="Step3-01: Push local code to remote repository"></a>Step3-01: Push local code to remote repository</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 0. If there are some files in the remote repository, the first thing is "pull"</span></span><br><span class="line"><span class="comment"># git pull &lt;remote_name&gt; &lt;branch_name&gt;</span></span><br><span class="line">git pull github main</span><br><span class="line"></span><br><span class="line"><span class="comment"># (optional) If you don't want to explicitly specify the brach every operation, you can set a link between remote and local</span></span><br><span class="line"><span class="comment"># git branch --set-upstream-to=&lt;remote_name&gt;/&lt;remote_branch&gt; &lt;local_branch&gt;</span></span><br><span class="line">git branch --<span class="built_in">set</span>-upstream-to=github/main main</span><br><span class="line"><span class="comment"># After the relevance, you can pull directly without explicitly specify the branch</span></span><br><span class="line"><span class="comment"># like: git pull &lt;remote_name&gt;</span></span><br><span class="line">git pull github</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. Submit all of the changes from workspace to the index</span></span><br><span class="line">git add .</span><br><span class="line"></span><br><span class="line"><span class="comment"># (optional) After every operation you made, you can use "git status" to check file state</span></span><br><span class="line"><span class="comment"># git status [&lt;filename&gt;](if you omit the arg,console will show all files which are needed to be committed)</span></span><br><span class="line">git status</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. Commit the content from index to local repository</span></span><br><span class="line">git commit -m <span class="string">"&lt;your comment about this commit&gt;"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. Push the content from local repository to remote repository</span></span><br><span class="line"><span class="comment"># git push &lt;remote_name&gt; [&lt;remote_branch&gt;](you can omit it when you finished the relevance)</span></span><br><span class="line">git push github main</span><br><span class="line"></span><br><span class="line"><span class="comment"># (optional) The default branch in local is "master", while github choose "main" as the default branch</span></span><br><span class="line"><span class="comment"># There might be some errors there. you can change the branch name in local to avoid the mistake.</span></span><br><span class="line">git branch -m master main </span><br><span class="line"></span><br><span class="line"><span class="comment"># (optional) If you don't want to link to a remote repository,you can remove the relevance</span></span><br><span class="line"><span class="comment"># git remote remove &lt;remote_name&gt;</span></span><br><span class="line">git remote remove github</span><br></pre></td></tr></table></figure>

<h1 id="Checkout-Merge"><a href="#Checkout-Merge" class="headerlink" title="Checkout/Merge"></a>Checkout/Merge</h1><p>Only a short while ago, I don’t think I will need to use git commands like <code>checkout</code> and <code>merge</code> someday.Therefore, I have been lack of motivation to study relevant knowledges. But today, I need.</p>
<p>There is a <a href="https://git-scm.com/docs" target="_blank" rel="noopener">Git Cheat Book</a> for you to find out how each command is used.</p>
<p>Despite the title of the section is checkout and merge, but we are not just talking about these 2 operations.</p>
<h2 id="References-1"><a href="#References-1" class="headerlink" title="References"></a>References</h2><ul>
<li><a href="https://zhuanlan.zhihu.com/p/94008510" target="_blank" rel="noopener">看完这篇还不会用Git，那我就哭了！</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/250493093" target="_blank" rel="noopener">血泪教训之请不要再轻视Git —— 我在工作中是如何使用 Git 的</a></li>
</ul>
<h2 id="Advanced-git-add"><a href="#Advanced-git-add" class="headerlink" title="Advanced git add"></a>Advanced git add</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Ususally use</span></span><br><span class="line"><span class="comment"># Add all the changed files in current folder</span></span><br><span class="line">git add .</span><br><span class="line"></span><br><span class="line"><span class="comment"># Add all files in current file</span></span><br><span class="line">git add -A</span><br><span class="line"></span><br><span class="line"><span class="comment"># Add sole file</span></span><br><span class="line">git add &lt;file_name&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># you can choose change or not when query</span></span><br><span class="line">git add -p</span><br></pre></td></tr></table></figure>

<h2 id="Checkout-Branch"><a href="#Checkout-Branch" class="headerlink" title="Checkout(Branch)"></a>Checkout(Branch)</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Create a local branch</span></span><br><span class="line">git checkout -b &lt;branch_name&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># change to another branch</span></span><br><span class="line">git checkout &lt;branch_name&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># push local branch to remote</span></span><br><span class="line">git push &lt;remote_name&gt; &lt;branch_name&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># delete local branch(fail will occurre when the branch is not merged)</span></span><br><span class="line">git branch -d &lt;branch_name&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># view all branches(including local branches and remote branches)</span></span><br><span class="line">git branch -a</span><br><span class="line"></span><br><span class="line"><span class="comment"># view branch optinal</span></span><br><span class="line">git branch -a [--merged/--no-merged]</span><br><span class="line"></span><br><span class="line"><span class="comment"># view local branches</span></span><br><span class="line">git branch</span><br><span class="line"></span><br><span class="line"><span class="comment"># view remote branches</span></span><br><span class="line">git branch -r</span><br></pre></td></tr></table></figure>

<h2 id="Merge"><a href="#Merge" class="headerlink" title="Merge"></a>Merge</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># merge &lt;branch_name&gt; to current branch</span></span><br><span class="line">git merge &lt;branch_name&gt;</span><br></pre></td></tr></table></figure>

<h2 id="Reback"><a href="#Reback" class="headerlink" title="Reback"></a>Reback</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># change to the newest code</span></span><br><span class="line">git reset HEAD</span><br><span class="line"><span class="comment"># change the specific file to the newest code</span></span><br><span class="line">git reset HEAD --&lt;file_name&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># change to the specific commit version</span></span><br><span class="line">git reset &lt;commit_ID&gt;</span><br><span class="line"><span class="comment"># change the specific file to the newest code</span></span><br><span class="line">git reset &lt;commit_ID&gt; --&lt;file_name&gt;</span><br></pre></td></tr></table></figure>

<h2 id="Log"><a href="#Log" class="headerlink" title="Log"></a>Log</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># log changes made by someone, -l will log the commit ID</span></span><br><span class="line">git blame &lt;file_name&gt; [-l]</span><br><span class="line"></span><br><span class="line"><span class="comment"># log all the commit</span></span><br><span class="line">git <span class="built_in">log</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># log the brief introduction of commit list</span></span><br><span class="line">git <span class="built_in">log</span> --oneline</span><br><span class="line"></span><br><span class="line"><span class="comment"># log with the time restriction</span></span><br><span class="line">git <span class="built_in">log</span> --since=yesterday</span><br></pre></td></tr></table></figure>

<h1 id="How-to-use-VSCode-to-git"><a href="#How-to-use-VSCode-to-git" class="headerlink" title="How to use VSCode to git"></a>How to use VSCode to git</h1><h2 id="References-2"><a href="#References-2" class="headerlink" title="References"></a>References</h2><ul>
<li><a href="https://blog.csdn.net/chujian0325/article/details/109536768" target="_blank" rel="noopener">在VsCode中如何使用Git</a></li>
</ul>
]]></content>
      <categories>
        <category>Software</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo中新建文章标题乱码解决</title>
    <url>/2020/11/15/Hexo%E4%B8%AD%E6%96%B0%E5%BB%BA%E6%96%87%E7%AB%A0%E6%A0%87%E9%A2%98%E4%B9%B1%E7%A0%81%E8%A7%A3%E5%86%B3/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote class="blockquote-center">
<p>^ _ ^ </p>

</blockquote>
<a id="more"></a>

<p><strong>问题</strong>：在hexo中新建文章时，如果文章名开头是英文，后面又跟着中文的话，就有可能出现中文乱码</p>
<p><img src="/2020/11/15/Hexo%E4%B8%AD%E6%96%B0%E5%BB%BA%E6%96%87%E7%AB%A0%E6%A0%87%E9%A2%98%E4%B9%B1%E7%A0%81%E8%A7%A3%E5%86%B3/1.png" alt="问题"></p>
<p><img src="/2020/11/15/Hexo%E4%B8%AD%E6%96%B0%E5%BB%BA%E6%96%87%E7%AB%A0%E6%A0%87%E9%A2%98%E4%B9%B1%E7%A0%81%E8%A7%A3%E5%86%B3/2.png" alt="问题"></p>
<p><strong>解决方案</strong></p>
<ol>
<li>首先，我的编辑器是VS Code，正确编码时其底部栏如下</li>
</ol>
<p>正确编码时的底部栏<br><img src="/2020/11/15/Hexo%E4%B8%AD%E6%96%B0%E5%BB%BA%E6%96%87%E7%AB%A0%E6%A0%87%E9%A2%98%E4%B9%B1%E7%A0%81%E8%A7%A3%E5%86%B3/3.png" alt="正确编码时的底部栏"></p>
<p>错误编码时的底部栏<br><img src="/2020/11/15/Hexo%E4%B8%AD%E6%96%B0%E5%BB%BA%E6%96%87%E7%AB%A0%E6%A0%87%E9%A2%98%E4%B9%B1%E7%A0%81%E8%A7%A3%E5%86%B3/4.png" alt="错误编码时的底部栏"></p>
<ol start="2">
<li>对于错误编码的底部栏，选择其编码项点击</li>
</ol>
<p><img src="/2020/11/15/Hexo%E4%B8%AD%E6%96%B0%E5%BB%BA%E6%96%87%E7%AB%A0%E6%A0%87%E9%A2%98%E4%B9%B1%E7%A0%81%E8%A7%A3%E5%86%B3/5.png" alt="错误编码时的底部栏"></p>
<ol start="3">
<li>在弹出框中选择【通过编码重新打开】</li>
</ol>
<p><img src="/2020/11/15/Hexo%E4%B8%AD%E6%96%B0%E5%BB%BA%E6%96%87%E7%AB%A0%E6%A0%87%E9%A2%98%E4%B9%B1%E7%A0%81%E8%A7%A3%E5%86%B3/6.png" alt="弹出框"></p>
<ol start="4">
<li>接着选择【UTF-8】</li>
</ol>
<p><img src="/2020/11/15/Hexo%E4%B8%AD%E6%96%B0%E5%BB%BA%E6%96%87%E7%AB%A0%E6%A0%87%E9%A2%98%E4%B9%B1%E7%A0%81%E8%A7%A3%E5%86%B3/7.png" alt="UTF-8"></p>
<ol start="5">
<li>恢复成功</li>
</ol>
<p><img src="/2020/11/15/Hexo%E4%B8%AD%E6%96%B0%E5%BB%BA%E6%96%87%E7%AB%A0%E6%A0%87%E9%A2%98%E4%B9%B1%E7%A0%81%E8%A7%A3%E5%86%B3/8.png" alt="恢复成功"></p>
]]></content>
      <categories>
        <category>hexo</category>
        <category>乱码</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>IDEA常用快捷键</title>
    <url>/2020/09/05/IDEA%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote class="blockquote-center">
<p>^ _ ^ </p>

</blockquote>
<a id="more"></a>

<table>
<thead>
<tr>
<th>id</th>
<th>功能</th>
<th>快捷键</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>执行</td>
<td>Alt + r</td>
</tr>
<tr>
<td>2</td>
<td>自动补全</td>
<td>Alt + /</td>
</tr>
<tr>
<td>3</td>
<td>单行注释</td>
<td>Ctrl + /</td>
</tr>
<tr>
<td>4</td>
<td>多行注释</td>
<td>Ctrl + Shift + /</td>
</tr>
<tr>
<td>5</td>
<td>向下复制一行</td>
<td>Ctrl + d</td>
</tr>
<tr>
<td>6</td>
<td>向上移动行</td>
<td>Shift + Alt + Up</td>
</tr>
<tr>
<td>7</td>
<td>向下移动行</td>
<td>Shift + Alt + Down</td>
</tr>
<tr>
<td>8</td>
<td>向下开启新的一行</td>
<td>Shift + Enter</td>
</tr>
<tr>
<td>9</td>
<td>转到源码</td>
<td>Ctrl + 点击</td>
</tr>
<tr>
<td>10</td>
<td>自动生成环绕性质代码</td>
<td>Ctrl + Alt + T</td>
</tr>
<tr>
<td>11</td>
<td>除去没有用到的包</td>
<td>Ctrl + Alt + O</td>
</tr>
<tr>
<td>12</td>
<td>大小写转换</td>
<td>Ctrl + Shift + U</td>
</tr>
<tr>
<td>13</td>
<td>收缩当前代码</td>
<td>Ctrl + -</td>
</tr>
<tr>
<td>14</td>
<td>展开当前代码</td>
<td>Ctlr + +</td>
</tr>
<tr>
<td>14</td>
<td>收缩当前所有函数代码</td>
<td>Ctrl + Shift + -</td>
</tr>
<tr>
<td>15</td>
<td>展开当前所有函数代码</td>
<td>Ctrl + Shift + +</td>
</tr>
<tr>
<td>16</td>
<td>提示函数参数类型</td>
<td>Ctrl + P</td>
</tr>
<tr>
<td>17</td>
<td>显示光标所示处类/方法说明</td>
<td>Ctrl + Q</td>
</tr>
<tr>
<td>18</td>
<td>查找类</td>
<td>Ctrl + N</td>
</tr>
<tr>
<td>19</td>
<td>显示类层级</td>
<td>Ctrl + H</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>软件使用</category>
      </categories>
      <tags>
        <tag>IDEA</tag>
      </tags>
  </entry>
  <entry>
    <title>JVM快速入门</title>
    <url>/2021/01/03/JVM%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote class="blockquote-center">
<p>^ _ ^ </p>

</blockquote>
<a id="more"></a>

<h1 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h1><p>B站狂神【JVM快速入门篇】视频 : <a href="https://www.bilibili.com/video/BV1iJ411d7jS" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1iJ411d7jS</a></p>
<h1 id="JVM体系结构"><a href="#JVM体系结构" class="headerlink" title="JVM体系结构"></a>JVM体系结构</h1><p><img src="/2021/01/03/JVM%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/1.png" alt></p>
<p><img src="/2021/01/03/JVM%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/2.png" alt></p>
<h1 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h1><p><img src="/2021/01/03/JVM%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/3.png" alt></p>
<h2 id="类加载器的类型"><a href="#类加载器的类型" class="headerlink" title="类加载器的类型"></a>类加载器的类型</h2><ol>
<li>虚拟机自带加载器</li>
<li>启动类（根）加载器</li>
<li>扩展类加载器</li>
<li>应用程序（系统类）加载器</li>
</ol>
<h2 id="双亲委派机制"><a href="#双亲委派机制" class="headerlink" title="双亲委派机制"></a>双亲委派机制</h2><ol>
<li>类加载器收到类加载请求</li>
<li>将这个请求向上委托给父类加载器去完成（一直向上委托，直到启动类加载器）</li>
<li>父类加载器检查是否能加载当前类<ul>
<li>能加载就结束</li>
<li>否则，抛出异常，通知子类加载器进行加载</li>
</ul>
</li>
<li>重复步骤3</li>
</ol>
<h2 id="沙箱安全机制"><a href="#沙箱安全机制" class="headerlink" title="沙箱安全机制"></a>沙箱安全机制</h2><p><strong>组成沙箱的基本组件</strong></p>
<ul>
<li>字节码校验器(bytecode verifier) : 确保Java类文件遵循Java语言规范。这样可以帮助Java程序实现内存保护。但并不是所有的类文件都会经过字节码校验，比如核心类</li>
<li>类加载器(class loader) : 在3个方面对沙箱起作用，采用双亲委派机制<ul>
<li>防止恶意代码去干涉善意代码</li>
<li>守护了被信任的类库边界</li>
<li>将代码归于保护域，确定了代码可以进行哪些操作</li>
</ul>
</li>
<li>存取控制器(access controller) : 控制核心API对操作系统的存取权限，控制策略可以由用户指定</li>
<li>安全管理器(security manager) : 是核心API与操作系统之间的主要接口。实现权限控制，比存取控制器优先级高</li>
<li>安全软件包(security pacage) : java.security下的类和扩展包(ext)的类，允许用户为自己的应用增加新的安全特性，包括：安全提供者、消息摘要、数字签名、加密、鉴别</li>
</ul>
<h1 id="Native"><a href="#Native" class="headerlink" title="Native"></a>Native</h1><ul>
<li>凡是带了native关键字的，说明java作用范围达不到了，会去调用底层c语言的库</li>
<li>会进入本地方法栈</li>
<li>调用本地方法接口 JNI ： JNI可以扩展Java的使用，融合不同的编程语言为Java所用</li>
<li>JVM在内存区域中专门开辟了一块标记区域：Native Method Stack，登记native方法</li>
<li>在最终执行时，通过JNI加载本地方法库中的方法</li>
</ul>
<p><strong>实例</strong></p>
<blockquote>
<p>Thread类的start0方法</p>
</blockquote>
<p><img src="/2021/01/03/JVM%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/4.png" alt></p>
<h1 id="PC寄存器"><a href="#PC寄存器" class="headerlink" title="PC寄存器"></a>PC寄存器</h1><blockquote>
<p>程序计数器 : Program Counter Register</p>
</blockquote>
<p>每个线程都有一个程序计数器，是线程私有的，就是一个指针，指向方法区中的方法字节码（用来存储指向一条指定的地址，该地址内存中存储着将要执行的指令代码），在执行引擎读取下一条指令。是一个非常小的内存空间，几乎可以忽略不计</p>
<h1 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h1><p>方法区被所有线程共享，所有字段和方法字节码，以及一些特殊方法（如构造函数、接口代码）也在此定义。简单说，所有定义的方法的信息都保存在该区域，此区域属于共享区间<br><strong>静态变量、常量、类信息（构造方法、接口定义）、运行时的常量池存在方法区中，但是实例变量存在堆内存中，与方法区无关</strong></p>
<h1 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h1><ul>
<li>栈内存，主管程序的运行，生命周期和线程同步</li>
<li>线程结束，栈内存释放，对于栈，不存在垃圾回收问题</li>
<li>栈中保存内容：8大基本数据类型 + 对象引用 + 实例的方法</li>
</ul>
<p><strong>栈运行原理</strong><br><img src="/2021/01/03/JVM%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/5.png" alt></p>
<p><strong>栈、堆、方法区交互关系</strong><br><img src="/2021/01/03/JVM%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/6.png" alt></p>
<h1 id="三种JVM"><a href="#三种JVM" class="headerlink" title="三种JVM"></a>三种JVM</h1><ul>
<li>Sun公司 HotSpot</li>
<li>BEA公司 JRockit </li>
<li>IBM公司 J9VM</li>
</ul>
<h1 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h1><p>Heap，一个JVM只有一个堆内存，堆内存的大小是可以调节的。</p>
<p><strong>堆内存的分区</strong><br>新生区、老年区、永久区<br><img src="/2021/01/03/JVM%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/7.png" alt></p>
<p><strong>分区结构</strong><br><img src="/2021/01/03/JVM%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/8.png" alt></p>
<blockquote>
<p>GC垃圾回收，主要是在伊甸园区和老年区<br>如果出现OOM(Out Of Memeory)异常，表示堆内存已经不够<br>JDK8后，永久存储区更名为元空间</p>
</blockquote>
<h2 id="新生区"><a href="#新生区" class="headerlink" title="新生区"></a>新生区</h2><blockquote>
<p>对象诞生、成长甚至死亡的地方</p>
</blockquote>
<ul>
<li>伊甸园(Eden Space)：所有的对象都是在伊甸园区new出来的</li>
<li>当Eden Space满了的时候，会触发一次轻GC，将不需要的对象清除，幸存的类放入幸存者区</li>
<li>幸存者区（0、1）是两位一体的，每一次轻GC，会清理伊甸园区和不为空的幸存者区，把两个区内的幸存对象放入另一个为空的幸存者区</li>
</ul>
<h2 id="永久区"><a href="#永久区" class="headerlink" title="永久区"></a>永久区</h2><blockquote>
<p>这个区域是常驻内存的，用来存放JDK自身携带的Class对象。Interface元数据，存储的是Java运行时的一些环境或类信息。这个区域不存在垃圾回收，关闭虚拟机时将释放这个区域的内存</p>
</blockquote>
<ul>
<li>jdk1.6前：常量池在方法区</li>
<li>jdk1.7：永久代慢慢退化了，去永久代，常量池在堆中</li>
<li>jdk1.8后：无永久代，常量池在元空间</li>
</ul>
<p><strong>永久区出现内存溢出的可能原因</strong></p>
<ul>
<li>一个启动类，加载了大量的第三方jar包</li>
<li>tomcat部署了太多的应用</li>
<li>大量动态生成的反射类，不断被加载</li>
</ul>
<h2 id="堆内存调优"><a href="#堆内存调优" class="headerlink" title="堆内存调优"></a>堆内存调优</h2><p><strong>查看堆内存</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 返回虚拟机试图使用的最大内存</span></span><br><span class="line"><span class="keyword">long</span> maxMemory = Runtime.getRuntime().maxMemory();</span><br><span class="line"><span class="comment">// 返回jvm的初始化总内存</span></span><br><span class="line"><span class="keyword">long</span> initMemory = Runtime.getRuntime().totalMemory();</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"maxMemory = "</span> + maxMemory/(<span class="keyword">double</span>)(<span class="number">1024</span>*<span class="number">1024</span>) + <span class="string">"(MB);initMemory = "</span> +</span><br><span class="line">        initMemory/(<span class="keyword">double</span>)(<span class="number">1024</span>*<span class="number">1024</span>) + <span class="string">"(MB)"</span>);</span><br></pre></td></tr></table></figure>

<p><strong>调整堆大小</strong></p>
<ol>
<li>打开运行时配置窗口<br><img src="/2021/01/03/JVM%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/9.png" alt></li>
<li>配置虚拟机参数<br><img src="/2021/01/03/JVM%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/10.png" alt></li>
<li>再次运行程序<br><img src="/2021/01/03/JVM%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/11.png" alt></li>
</ol>
<h2 id="JProfile"><a href="#JProfile" class="headerlink" title="JProfile"></a>JProfile</h2><blockquote>
<p>用于分析堆内存的插件</p>
</blockquote>
<p><strong>安装方式</strong></p>
<ol>
<li>IDEA打开 File -&gt; Setting -&gt; Plugins -&gt; 搜索JProfile<br><img src="/2021/01/03/JVM%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/12.png" alt></li>
<li>下载JProfiler查看工具安装包<ul>
<li>下载网址：<a href="https://www.ej-technologies.com/download/jprofiler/files" target="_blank" rel="noopener">https://www.ej-technologies.com/download/jprofiler/files</a></li>
<li>我的选择<br><img src="/2021/01/03/JVM%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/13.png" alt></li>
</ul>
</li>
<li>安装JProfiler查看工具<ul>
<li>安装路径不应该包含中文和空格</li>
</ul>
</li>
<li>填写注册码（这一步未完成，选择了试用10天）</li>
<li>安装成功<br><img src="/2021/01/03/JVM%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/14.png" alt><br><img src="/2021/01/03/JVM%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/15.png" alt></li>
</ol>
<p><strong>使用实例</strong></p>
<ol>
<li><p>编写一个会产生OOM错误的程序</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OomDemo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Byte[] array = <span class="keyword">new</span> Byte[<span class="number">1024</span>*<span class="number">1024</span>];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;OomDemo&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">                count += <span class="number">1</span>;</span><br><span class="line">                list.add(<span class="keyword">new</span> OomDemo());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Error e)&#123;</span><br><span class="line">            System.out.println(<span class="string">"count = "</span> + count);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置虚拟机堆内存大小<br><img src="/2021/01/03/JVM%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/16.png" alt></p>
</li>
<li><p>运行结果查看</p>
<ul>
<li>控制台输出<br><img src="/2021/01/03/JVM%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/17.png" alt></li>
<li>hprof文件<br><img src="/2021/01/03/JVM%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/18.png" alt></li>
</ul>
</li>
<li><p>JProfiler中hprof文件查看<br><img src="/2021/01/03/JVM%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/19.png" alt><br><img src="/2021/01/03/JVM%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/20.png" alt><br><img src="/2021/01/03/JVM%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/21.png" alt></p>
</li>
</ol>
<h2 id="GC"><a href="#GC" class="headerlink" title="GC"></a>GC</h2><blockquote>
<p>垃圾回收机制</p>
</blockquote>
<h3 id="GC分类"><a href="#GC分类" class="headerlink" title="GC分类"></a>GC分类</h3><ul>
<li>轻GC：普通的GC（JVM在进行清除时，并不是对新生代、老年代进行统一回收，大部分时候，回收的都是新生代）</li>
<li>重GC：全局GC</li>
</ul>
<h3 id="GC常用算法"><a href="#GC常用算法" class="headerlink" title="GC常用算法"></a>GC常用算法</h3><p><strong>复制算法</strong><br><img src="/2021/01/03/JVM%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/22.png" alt></p>
<ul>
<li>优点：没有内存碎片</li>
<li>缺点：浪费了内存空间</li>
</ul>
<p><strong>标记清除</strong><br><img src="/2021/01/03/JVM%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/23.png" alt></p>
<ul>
<li>优点：不需要额外空间</li>
<li>缺点：两次扫描，严重浪费时间；会产生内存碎片</li>
</ul>
<p><strong>标记整理(压缩)</strong><br><img src="/2021/01/03/JVM%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/24.png" alt></p>
<p><strong>引用计数器</strong><br>对每个对象设定一个计数器，记录引用该对象的对象个数。当GC发生时，清除掉那些计数为0的对象</p>
<p><strong>算法比较</strong></p>
<ul>
<li>内存效率（时间复杂度）：复制算法 &gt; 标记清除算法 &gt; 标记整理算法</li>
<li>内存整齐度：复制算法 = 标记整理算法 &gt; 标记清除算法</li>
<li>内存利用率：标记整理算法 = 标记清除算法 &gt; 复制算法</li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>JVM</tag>
      </tags>
  </entry>
  <entry>
    <title>Java Lambda</title>
    <url>/2021/05/30/Java-Lambda/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote class="blockquote-center">
<p>^ _ ^ </p>

</blockquote>
<a id="more"></a>

<h1 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h1><h2 id="为什么需要lambda表达式？"><a href="#为什么需要lambda表达式？" class="headerlink" title="为什么需要lambda表达式？"></a>为什么需要lambda表达式？</h2><p>当我们实现只定义了一个方法的接口时，使用匿名类可能会看起来比较笨重。如下段代码所示，匿名类需要6行代码实现的功能，使用lambda表达式后只需要一行代码。所以，Lambda表达式是为了简化只有一个方法接口的实现而提出的特性。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnonymousVersusLambda</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">invokeInterface</span><span class="params">(InterfaceWithOneMethod myInterface)</span></span>&#123;</span><br><span class="line">        myInterface.func();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        AnonymousVersusLambda test = <span class="keyword">new</span> AnonymousVersusLambda();</span><br><span class="line">        test.invokeInterface(<span class="keyword">new</span> InterfaceWithOneMethod()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"匿名类重写的func"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        test.invokeInterface(()-&gt;&#123;System.out.println(<span class="string">"Lambda重写的func"</span>);&#125;);</span><br><span class="line">        test.invokeInterface(()-&gt;System.out.println(<span class="string">"简化版的Lambda重写func"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">InterfaceWithOneMethod</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Lambda表达式如何使用"><a href="#Lambda表达式如何使用" class="headerlink" title="Lambda表达式如何使用"></a>Lambda表达式如何使用</h2><ol>
<li>定义只有一个方法的接口，不妨设为<code>返回值 方法名(参数列表)</code></li>
<li>通过lambda表达式定义该接口方法的实现：<code>接口 = (参数列表)-&gt;{实现代码}</code></li>
</ol>
<p>实现一个泛型接口为例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericLambda</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        GenericInterface&lt;String,Boolean,Double&gt; interface1 = (Boolean a,Double b)-&gt;&#123;</span><br><span class="line">            System.out.println(<span class="string">""</span> + a + b);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">        &#125;;</span><br><span class="line">        System.out.println(interface1.printObj(<span class="keyword">true</span>, <span class="number">2.51</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">GenericInterface</span>&lt;<span class="title">T</span>,<span class="title">E</span>,<span class="title">U</span>&gt;</span>&#123;</span><br><span class="line">    <span class="function">T <span class="title">printObj</span><span class="params">(E Obj1,U Obj2)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="函数式接口"><a href="#函数式接口" class="headerlink" title="函数式接口"></a>函数式接口</h1><p>函数式接口指只定义了一个方法的接口。Jdk1.8在<code>java.util.function</code>包中提供了大量函数式接口。我们可以在特定情况下联合使用这些接口和lambda表达式，这样就不需要自己定义接口了。<br>所有的函数式接口都用<code>@FunctionalInterface</code>进行注解。</p>
<p><strong>1. Consumer接口</strong></p>
<blockquote>
<p>消费型接口，拥有一个输入参数，无返回值。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Consumer&lt;Person&gt; myConsumer = (p)-&gt;&#123;</span><br><span class="line">    System.out.println(p);</span><br><span class="line">&#125;;</span><br><span class="line">myConsumer.accept(person);</span><br></pre></td></tr></table></figure>

<p><strong>2. Supplier接口</strong></p>
<blockquote>
<p>生产型接口，无输入参数，有一个返回值。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> Person <span class="title">createPerson</span><span class="params">()</span></span>&#123;</span><br><span class="line">    String[] familys = &#123;<span class="string">"Carmelon"</span>, <span class="string">"Lily"</span>, <span class="string">"Michael"</span>, <span class="string">"Jay"</span>, <span class="string">"Many"</span>, <span class="string">"Goloria"</span>, <span class="string">"Joy"</span>,</span><br><span class="line">        <span class="string">"Bufy"</span>, <span class="string">"Alex"</span>, <span class="string">"Hairy"</span>, <span class="string">"Luke"</span>, <span class="string">"Calair"</span>&#125;;</span><br><span class="line">    Sex[] sexes = &#123;Sex.MALE, Sex.FEMALE&#125;;</span><br><span class="line">    <span class="keyword">int</span>[] ages = &#123;<span class="number">40</span>, <span class="number">5</span>, <span class="number">40</span>, <span class="number">65</span>, <span class="number">14</span>, <span class="number">35</span>, <span class="number">1</span>, <span class="number">42</span>, <span class="number">16</span>, <span class="number">18</span>, <span class="number">14</span>, <span class="number">40</span>&#125;;</span><br><span class="line"></span><br><span class="line">    Supplier&lt;Person&gt; mySupplier = ()-&gt;&#123;</span><br><span class="line">        Random random = <span class="keyword">new</span> Random();</span><br><span class="line">        <span class="keyword">int</span> index = random.nextInt(familys.length);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Person(familys[index], sexes[random.nextInt(<span class="number">2</span>)], ages[index], familys[index] + <span class="string">"@yahoo.com"</span>);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> mySupplier.get();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>3. Predicate接口</strong></p>
<blockquote>
<p>检测型接口，拥有一个输入参数，返回值为布尔类型。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Predicate&lt;Person&gt; myPredicate = (p)-&gt;&#123;</span><br><span class="line">    <span class="keyword">return</span> p.age &gt; <span class="number">10</span> &amp;&amp; p.age &lt; <span class="number">20</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">for</span>(Person person: persons)&#123;</span><br><span class="line">    <span class="keyword">if</span>(myPredicate.test(person))&#123;</span><br><span class="line">        System.out.println(person);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>4. Function接口</strong></p>
<blockquote>
<p>函数型接口，拥有一个输入参数，一个返回值。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Function&lt;Person,Integer&gt; myFunction = (p)-&gt;&#123;</span><br><span class="line">    p.age = p.age + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> p.age;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">int</span> newAge = myFunction.apply(person);</span><br></pre></td></tr></table></figure>

<h1 id="流式编程"><a href="#流式编程" class="headerlink" title="流式编程"></a>流式编程</h1><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>Java Tutorial : <a href="https://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html" target="_blank" rel="noopener">https://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html</a></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java8 Lambda</tag>
      </tags>
  </entry>
  <entry>
    <title>Java基础</title>
    <url>/2021/06/17/Java%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote class="blockquote-center">
<p>^ _ ^ </p>

</blockquote>
<a id="more"></a>

<h1 id="Java反射"><a href="#Java反射" class="headerlink" title="Java反射"></a>Java反射</h1><h2 id="什么是Java反射"><a href="#什么是Java反射" class="headerlink" title="什么是Java反射"></a>什么是Java反射</h2><p>Java反射就是通过Java类名获取该类Java字节码的机制。获取到字节码后可将字节码中的方法、变量、构造函数映射为相应的<code>Method</code>,<code>Field</code>,<code>Constructor</code>等类，这些类提供了丰富的方法供我们使用。</p>
<h2 id="获取字节码的三种方法"><a href="#获取字节码的三种方法" class="headerlink" title="获取字节码的三种方法"></a>获取字节码的三种方法</h2><ol>
<li><code>Class.forName(className)</code></li>
<li><code>类名.class</code></li>
<li><code>this.getClass()</code></li>
</ol>
<h1 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h1><h2 id="写一个-ArrayList-的动态代理类"><a href="#写一个-ArrayList-的动态代理类" class="headerlink" title="写一个 ArrayList 的动态代理类"></a>写一个 ArrayList 的动态代理类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">    List&lt;String&gt; proxyInstance = (List&lt;String&gt;) Proxy.newProxyInstance(list.getClass().getClassLoader(), list.getClass().getInterfaces(),</span><br><span class="line">            <span class="keyword">new</span> InvocationHandler() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> method.invoke(list, args);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">        proxyInstance.add(<span class="string">"你好"</span>);</span><br><span class="line">        System.out.println(list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="写一个静态代理和动态代理的对比例子"><a href="#写一个静态代理和动态代理的对比例子" class="headerlink" title="写一个静态代理和动态代理的对比例子"></a>写一个静态代理和动态代理的对比例子</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义一个公共接口</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">AInterface</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个实现接口的客户类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AClient</span> <span class="keyword">implements</span> <span class="title">AInterface</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"客户吃饭"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个实现接口的静态代理类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StaticProxy</span> <span class="keyword">implements</span> <span class="title">AInterface</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> AInterface client;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StaticProxy</span><span class="params">(AClient client)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.client = client;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"代理买饭"</span>);</span><br><span class="line">        client.doSomething();</span><br><span class="line">        System.out.println(<span class="string">"代理洗碗"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 动态代理类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DynamicProxy</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Object obj;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DynamicProxy</span><span class="params">(Object obj)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.obj = obj;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getProxy</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Proxy.newProxyInstance(obj.getClass().getClassLoader(), obj.getClass().getInterfaces(), (proxy, method, args)-&gt;&#123;</span><br><span class="line">            System.out.println(<span class="string">"代理买饭"</span>);</span><br><span class="line">            Object result = method.invoke(obj, args);</span><br><span class="line">            System.out.println(<span class="string">"代理洗碗"</span>);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">        AInterface proxy = <span class="keyword">new</span> StaticProxy(<span class="keyword">new</span> AClient());</span><br><span class="line">        proxy.doSomething();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span></span>&#123;</span><br><span class="line">        DynamicProxy dynamicProxy = <span class="keyword">new</span> DynamicProxy(<span class="keyword">new</span> AClient());</span><br><span class="line">        AInterface proxy = (AInterface)dynamicProxy.getProxy();</span><br><span class="line">        proxy.doSomething();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="动静态代理的区别，什么场景使用？"><a href="#动静态代理的区别，什么场景使用？" class="headerlink" title="动静态代理的区别，什么场景使用？"></a>动静态代理的区别，什么场景使用？</h2><p>静态代理：由程序员创建或特定工具自动生成源代码，再对其编译。在程序运行前，代理类的.class文件就已经存在了。动态代理：在程序运行时，运用反射机制动态创建而成。因此，静态代理事先知道要代理的是什么，而动态代理不知道要代理什么东西，只有在运行时才知道。</p>
<p>AOP 编程就是基于动态代理实现的，比如著名的 Spring 框架、Hibernate 框架等等都是动态代理的使用例子。</p>
<h2 id="动态代理的手段"><a href="#动态代理的手段" class="headerlink" title="动态代理的手段"></a>动态代理的手段</h2><ol>
<li>实现 JDK 里的 <code>InvocationHandler</code> 接口的 <code>invoke</code> 方法，但注意的是代理的是接口，也就是你的业务类必须要<strong>实现接口</strong>，通过 <code>Proxy</code> 里的 <code>newProxyInstance</code> 得到代理对象。</li>
<li>还有一种动态代理 <code>CGLIB</code> ，代理的是类，不需要业务类继承接口，通过派生的子类来实现代理。通过在运行时，动态修改字节码达到修改类的目的。</li>
</ol>
<h1 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h1><p>按<strong>目的</strong>划分设计模式可分为三大类：</p>
<ol>
<li><strong>创建型模式</strong>：用于描述“怎样创建对象”，它的主要特点是“将对象的创建与使用分离”，共5种：工厂方法模式、抽象工厂模式、建造者模式、单例模式、原型模式。</li>
<li><strong>行为型模式</strong>：用于描述类或对象之间怎样相互协作共同完成单个对象都无法单独完成的任务，以及怎样分配职责。共11种：策略模式、模板方法模式、观察者模式、迭代子模式、责任链模式、命令模式、备忘录模式、状态模式、访问者模式、中介者模式、解释器模式。</li>
<li><strong>结构型模式</strong>：用于描述如何将类或对象按某种布局组成更大的结构，共7种：适配器模式、装饰器模式、代理模式、外观模式、桥接模式、组合模式、享元模式。</li>
</ol>
<p>按<strong>作用范围</strong>划分设计模式可分为两大类：</p>
<ol>
<li><strong>类模式</strong>：用于处理类与子类之间的关系，这些关系通过继承来建立，是静态的，在编译时刻便确定下来了。共4种：工厂方法、（类）适配器、模板方法、解释器。</li>
<li><strong>对象模式</strong>：用于处理对象之间的关系，这些关系可以通过组合或聚合来实现，在运行时刻是可以变化的，更具动态性。除了以上 4 种，其他的都是对象模式。</li>
</ol>
<h2 id="设计模式七大原则"><a href="#设计模式七大原则" class="headerlink" title="设计模式七大原则"></a>设计模式七大原则</h2><p><img src="/2021/06/17/Java%E5%9F%BA%E7%A1%80/1.jpg" alt></p>
<h2 id="创建型模式"><a href="#创建型模式" class="headerlink" title="创建型模式"></a>创建型模式</h2><h3 id="抽象工厂"><a href="#抽象工厂" class="headerlink" title="抽象工厂"></a>抽象工厂</h3><p>一个工厂下有一个产品族，比如一个电脑工厂下有键盘、鼠标、显示器这些产品组成的产品族。工厂也会有很多类型，如华硕、惠普、小米等。抽象工厂模式包含两层抽象：</p>
<ol>
<li>产品的抽象，例如键盘接口下有各品牌键盘的实现类；</li>
<li>工厂的抽象，例如工厂接口下有各品牌工厂。工厂接口中包含<strong>生产键盘</strong>，<strong>生产鼠标</strong>等函数定义，其实现类实现该函数时创建对应品牌该类产品。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 鼠标</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Mouse</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">introduce</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// MAC鼠标</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MACMouse</span> <span class="keyword">implements</span> <span class="title">Mouse</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String DESCRIPTION = <span class="string">"This is MAC mouse."</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">introduce</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(DESCRIPTION);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// HP鼠标</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HPMouse</span> <span class="keyword">implements</span> <span class="title">Mouse</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String DESCRIPTION = <span class="string">"This is HP mouse."</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">introduce</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(DESCRIPTION);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生产键盘</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Keyboard</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">introduce</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// MAC键盘</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MACKeyboard</span> <span class="keyword">implements</span> <span class="title">Keyboard</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String DESCRIPTION = <span class="string">"This is MAC Keyboard."</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">introduce</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(DESCRIPTION);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// HP键盘</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HPKeyboard</span> <span class="keyword">implements</span> <span class="title">Keyboard</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String DESCRIPTION = <span class="string">"This is HP Keyboard."</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">introduce</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(DESCRIPTION);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 抽象工厂</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Factory</span></span>&#123;</span><br><span class="line">    <span class="function">Mouse <span class="title">createMouse</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">Keyboard <span class="title">createKeyboard</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体工厂 -- MAC工厂</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MACFactory</span> <span class="keyword">implements</span> <span class="title">Factory</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Mouse <span class="title">createMouse</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MACMouse();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Keyboard <span class="title">createKeyboard</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MACKeyboard();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体工厂 -- HP工厂</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HPFactory</span> <span class="keyword">implements</span> <span class="title">Factory</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Mouse <span class="title">createMouse</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> HPMouse();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Keyboard <span class="title">createKeyboard</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> HPKeyboard();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 制造工厂</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FactoryMaker</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">enum</span> PCType&#123;</span><br><span class="line">        MAC,HP</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Factory <span class="title">makeFactory</span><span class="params">(PCType pcType)</span></span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (pcType)&#123;</span><br><span class="line">            <span class="keyword">case</span> HP:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> HPFactory();</span><br><span class="line">            <span class="keyword">case</span> MAC:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> MACFactory();</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"PCType not supported."</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">        FactoryMaker factoryMaker = <span class="keyword">new</span> FactoryMaker();</span><br><span class="line"></span><br><span class="line">        Factory macFactory = factoryMaker.makeFactory(FactoryMaker.PCType.MAC);</span><br><span class="line">        macFactory.createMouse().introduce();</span><br><span class="line">        macFactory.createKeyboard().introduce();</span><br><span class="line"></span><br><span class="line">        Factory hpFactory = factoryMaker.makeFactory(FactoryMaker.PCType.HP);</span><br><span class="line">        macFactory.createMouse().introduce();</span><br><span class="line">        macFactory.createKeyboard().introduce();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><p>指一个类只有一个实例。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> Singleton&#123;</span><br><span class="line">    INSTANCE</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java基本数据类型</title>
    <url>/2020/08/19/Java%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote class="blockquote-center">
<p>^ _ ^ </p>

</blockquote>
<a id="more"></a>

<h1 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q &amp; A"></a>Q &amp; A</h1><blockquote>
<p><strong>JAVA中的几种基本数据类型是什么，各自占用多少字节？</strong></p>
</blockquote>
<p><img src="/2020/08/19/Java%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/1.jpg" alt></p>
<h1 id="编程获取方式"><a href="#编程获取方式" class="headerlink" title="编程获取方式"></a>编程获取方式</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">System.out.printf(&quot;%s\t%s\n&quot;,&quot;类型&quot;,&quot;大小（字节）&quot;);</span><br><span class="line">System.out.printf(&quot;%s\t%d\n&quot;,&quot;byte&quot;,Byte.SIZE&#x2F;8);</span><br><span class="line">System.out.printf(&quot;%s\t%d\n&quot;,&quot;short&quot;,Short.SIZE&#x2F;8);</span><br><span class="line">System.out.printf(&quot;%s\t%d\n&quot;,&quot;int&quot;,Integer.SIZE&#x2F;8);</span><br><span class="line">System.out.printf(&quot;%s\t%d\n&quot;,&quot;long&quot;,Long.SIZE&#x2F;8);</span><br><span class="line">System.out.printf(&quot;%s\t%d\n&quot;,&quot;float&quot;,Float.SIZE&#x2F;8);</span><br><span class="line">System.out.printf(&quot;%s\t%d\n&quot;,&quot;double&quot;,Double.SIZE&#x2F;8);</span><br><span class="line">System.out.printf(&quot;%s\t%d\n&quot;,&quot;char&quot;,Character.SIZE&#x2F;8);</span><br><span class="line">&#x2F;&#x2F; Boolean并没有SIZE属性，Boolean.SIZE会出现编译错误</span><br><span class="line">&#x2F;&#x2F; System.out.printf(&quot;%s\t%d&quot;,&quot;boolean&quot;,Boolean.SIZE&#x2F;8);</span><br></pre></td></tr></table></figure>

<p>值得注意的一点是Boolean没有SIZE属性，其原因在于boolean类型本身就没有给出具体的占用字节数。对虚拟机来说并不存在boolean这个类型，boolean类型的数据存储时实际上是转换成了另一种基础类型储存。但一般是认为Boolean类型占用一个字节。</p>
<p><strong><a href="https://blog.csdn.net/qq_36763419/article/details/91392297" target="_blank" rel="noopener">关于boolean占用内存大小的更多解释</a></strong></p>
]]></content>
      <categories>
        <category>Java面试</category>
      </categories>
      <tags>
        <tag>Java基础</tag>
      </tags>
  </entry>
  <entry>
    <title>AndrewNg的机器学习课-线性回归</title>
    <url>/2021/06/02/AndrewNg%E7%9A%84%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%AF%BE-%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote class="blockquote-center">
<p>^_^ </p>

</blockquote>
<a id="more"></a>

<h1 id="单变量线性回归"><a href="#单变量线性回归" class="headerlink" title="单变量线性回归"></a>单变量线性回归</h1><h2 id="模型表示"><a href="#模型表示" class="headerlink" title="模型表示"></a>模型表示</h2><p>以房价预测为例，我们拥有一个数据集，数据集包含一系列住房的面积和对应的房价。这个数据集被称为<strong>训练集（Traning Set）</strong><br><img src="/2021/06/02/AndrewNg%E7%9A%84%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%AF%BE-%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92/1.jpg" alt></p>
<p>我们将要用来描述这个回归问题的标记如下:</p>
<ul>
<li>$m$代表训练集中实例的数量；</li>
<li>$x$代表特征/输入变量；</li>
<li>$y$代表目标变量/输出变量；</li>
<li>$(x,y)$代表训练集中的实例；</li>
<li>$(x^{(i)},y^{i})$代表第 i 个观察实例。</li>
<li>$h$代表学习算法的解决方案或函数也称为假设（<strong>hypothesis</strong>）</li>
</ul>
<p>在预测房价的例子中，$h$表示一个函数，输入是房屋尺寸大小，输出是估计房屋价格。$h$是一个从房屋大小到房屋售价的映射。要解决房价预测问题，我们实际上是要将训练集“喂”给我们的学习算法，进而学习得到一个假设，然后将我们要预测的房屋的尺寸作为输入变量输入给$h$，预测出该房屋的交易价格作为输出变量输出为结果。</p>
<p><img src="/2021/06/02/AndrewNg%E7%9A%84%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%AF%BE-%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92/2.jpg" alt></p>
<p>一种可能的表达方式为：$h_\theta(x) = \theta_0 + \theta_1x$，因为只含有一个特征/输入变量，因此这样的问题叫作<strong>单变量线性回归</strong>问题。</p>
<h2 id="代价函数"><a href="#代价函数" class="headerlink" title="代价函数"></a>代价函数</h2><p>现在要做的便是为我们的模型选择合适的<strong>参数（parameters）</strong>$\theta_0$和$\theta_1$。我们选择的参数决定了我们得到的预测相对于我们的训练集的准确程度，模型所预测的值与训练集中实际值之间的差距就是<strong>建模误差（modeling error）</strong>。</p>
<p>我们的目标便是选择出可以使得建模误差的平方和能够最小的模型参数。即使得代价函数$J(\theta_0,\theta_1)=\frac{1}{2m}\sum_{i=1}^m(h_\theta(x^{(i)})-y^{(i)})^2$最小。</p>
<h2 id="梯度下降"><a href="#梯度下降" class="headerlink" title="梯度下降"></a>梯度下降</h2><p>梯度下降是一个用来求函数最小值的算法，我们将使用梯度下降算法来求出代价函数$J(\theta_0,\theta_1)$的最小值。</p>
<p><img src="/2021/06/02/AndrewNg%E7%9A%84%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%AF%BE-%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92/3.jpg" alt></p>
<p>想象一下你正站立在山的这一点上，站立在你想象的公园这座红色山上，在梯度下降算法中，我们要做的就是旋转360度，看看我们的周围，并问自己要在某个方向上，用小碎步尽快下山。这些小碎步需要朝什么方向？如果我们站在山坡上的这一点，你看一下周围，你会发现最佳的下山方向，你再看看周围，然后再一次想想，我应该从什么方向迈着小碎步下山？然后你按照自己的判断又迈出一步，重复上面的步骤，从这个新的点，你环顾四周，并决定从什么方向将会最快下山，然后又迈进了一小步，并依此类推，直到你接近局部最低点的位置。</p>
<p>批量梯度下降（<strong>batch gradient descent</strong>）算法的公式为：<br><img src="/2021/06/02/AndrewNg%E7%9A%84%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%AF%BE-%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92/4.png" alt><br>其中$\alpha$是学习率（learning rate），它决定了我们沿着能让代价函数下降程度最大的方向向下迈出的步子有多大。</p>
<p>注意，所有的$\theta_i$需要进行同步更新，所以这个更新过程应该是这样的：<br><img src="/2021/06/02/AndrewNg%E7%9A%84%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%AF%BE-%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92/5.png" alt></p>
<p><strong>关于$\alpha$的选取</strong>：</p>
<ul>
<li>如果$\alpha$太小的话，可能会很慢，因为它会一点点挪动，它会需要很多步才能到达全局最低点。</li>
<li>如果$\alpha$太大的话，那么梯度下降法可能会越过最低点，甚至可能无法收敛。</li>
<li>在梯度下降法中，当我们接近局部最低点时，梯度下降法会自动采取更小的幅度，这是因为当我们接近局部最低点时，很显然在局部最低时导数等于零，所以当我们接近局部最低时，导数值会自动变得越来越小，所以梯度下降将自动采取较小的幅度，这就是梯度下降的做法。所以实际上没有必要再另外减小$\alpha$。</li>
</ul>
<p>这就是梯度下降算法，你可以用它来最小化任何代价函数$J$，不只是线性回归中的代价函数$J$。</p>
<h2 id="梯度下降的线性回归"><a href="#梯度下降的线性回归" class="headerlink" title="梯度下降的线性回归"></a>梯度下降的线性回归</h2><p>我们要将梯度下降应用于具体的拟合直线的线性回归算法里。</p>
<p>梯度下降算法和线性回归算法比较如图：<br><img src="/2021/06/02/AndrewNg%E7%9A%84%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%AF%BE-%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92/6.png" alt></p>
<p>对我们之前的线性回归问题运用梯度下降法，关键在于求出代价函数的导数，即：<br><img src="/2021/06/02/AndrewNg%E7%9A%84%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%AF%BE-%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92/7.jpg" alt></p>
<p>则算法改写成：<br><img src="/2021/06/02/AndrewNg%E7%9A%84%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%AF%BE-%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92/8.jpg" alt></p>
<p>我们刚刚使用的算法，有时也称为批量梯度下降。实际上，在机器学习中，通常不太会给算法起名字，但这个名字”批量梯度下降”，指的是在梯度下降的每一步中，我们都用到了所有的训练样本。</p>
<h1 id="多变量线性回归"><a href="#多变量线性回归" class="headerlink" title="多变量线性回归"></a>多变量线性回归</h1><h2 id="多变量回归模型"><a href="#多变量回归模型" class="headerlink" title="多变量回归模型"></a>多变量回归模型</h2><p>目前为止，我们探讨了单变量/特征的回归模型。以房价预测为例。现在我们对房价模型增加更多的特征，例如房间数楼层等，构成一个含有多个变量的模型，模型中的特征为$(x_1,x_2,\cdots,x_n)$。<br><img src="/2021/06/02/AndrewNg%E7%9A%84%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%AF%BE-%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92/9.jpg" alt></p>
<p>增添更多特征后，我们引入一系列新的注释：</p>
<ul>
<li>$n$代表特征的数量；</li>
<li>$x_j^{(i)}$代表特征矩阵中第$i$行的第$j$个特征，也就是第$i$个训练实例的第$j$个特征；</li>
<li>支持多变量的假设$h$表示为：$h_\theta(x) = \theta_0 + \theta_1x_1 + \theta_2x_2 + \cdots + \theta_nx_n$，这个公式中包含$n+1$个参数和$n$个变量，为了简化公式，引入$x_0=1$，则公式转换为$h_\theta(x) = \theta_0x_0 + \theta_1x_1 + \theta_2x_2 + \cdots + \theta_nx_n$；</li>
<li>特征矩阵$X$的维度是$m \times (n+1)$， 因此公式可以简化为：$h_\theta(x) = \theta^TX$</li>
</ul>
<h2 id="多变量梯度下降"><a href="#多变量梯度下降" class="headerlink" title="多变量梯度下降"></a>多变量梯度下降</h2><p>与单变量线性回归类似，在多变量线性回归中，我们也构建一个代价函数，则这个代价函数是所有建模误差的平方和，即：$J(\theta_0,\theta_1,\cdots,\theta_n)=\frac{1}{2m}\sum_{i=1}^m(h_\theta(x^{(i)})-y^{(i)})^2$</p>
<p>我们的目标和单变量线性回归问题中一样，是要找出使得代价函数最小的一系列参数。 多变量线性回归的批量梯度下降算法为：<br><img src="/2021/06/02/AndrewNg%E7%9A%84%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%AF%BE-%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92/10.png" alt></p>
<p>求导数后得到：<br><img src="/2021/06/02/AndrewNg%E7%9A%84%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%AF%BE-%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92/11.png" alt></p>
<h2 id="特征缩放"><a href="#特征缩放" class="headerlink" title="特征缩放"></a>特征缩放</h2><p>在我们面对多维特征问题的时候，我们要保证这些特征都具有相近的尺度，这将帮助梯度下降算法更快地收敛。</p>
<p>以房价问题为例，假设我们使用两个特征，房屋的尺寸和房间的数量，尺寸的值为 0-2000平方英尺，而房间数量的值则是0-5，以两个参数分别为横纵坐标，绘制代价函数的等高线图能，看出图像会显得很扁，梯度下降算法需要非常多次的迭代才能收敛。</p>
<p>解决的方法是尝试将所有特征的尺度都尽量缩放到-1到1之间。<br><img src="/2021/06/02/AndrewNg%E7%9A%84%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%AF%BE-%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92/12.png" alt></p>
<p>最简单的方法是令：$x_n = \frac{x_n-\mu_n}{s_n}$，$\mu_n$是平均值，$s_n$是标准差。</p>
<h2 id="学习率"><a href="#学习率" class="headerlink" title="学习率"></a>学习率</h2><p>梯度下降算法收敛所需要的迭代次数根据模型的不同而不同，我们不能提前预知，我们可以绘制迭代次数和代价函数的图表来观测算法在何时趋于收敛。</p>
<p>也有一些自动测试是否收敛的方法，例如将代价函数的变化值与某个阀值（例如0.001）进行比较，但通常绘制图表更好。</p>
<p>通常可以考虑尝试些学习率：$\alpha = 0.01,0.03,0.1,0.3,1,3,10$</p>
<h2 id="特征和多项式回归"><a href="#特征和多项式回归" class="headerlink" title="特征和多项式回归"></a>特征和多项式回归</h2><p>线性回归并不适用于所有数据，有时我们需要曲线来适应我们的数据，比如一个二次方模型或者三次方模型，通常我们需要先观察数据然后再决定准备尝试怎样的模型。 另外，我们可以令某变量的n次方用另一个1次变量进行替代，从而将模型转化为线性回归模型。</p>
<p>注：如果我们采用多项式回归模型，在运行梯度下降算法前，特征缩放非常有必要。</p>
<h2 id="正规方程"><a href="#正规方程" class="headerlink" title="正规方程"></a>正规方程</h2><p>正规方程是通过求解下面的方程来找出使得代价函数最小的参数的：$\frac{\partial}{\partial \theta_j}J(\partial_j) = 0$。假设我们的训练集特征矩阵为$X$（包含了$x_0=1$）,并且我们的训练集结果为向量$y$，则利用正规方程解出向量$\theta = (X^TX)^{-1}X^Ty$</p>
<p>如果特征数量n较大则运算代价大，因为矩阵逆的计算时间复杂度为$O(n^3)$，通常来说当n小于10000 时还是可以接受的。正规方程法只适用于线性模型，不适合逻辑回归模型等其他模型。</p>
]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>AndrewNg 机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Java求解TopK问题</title>
    <url>/2021/06/11/Java%E6%B1%82%E8%A7%A3TopK%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote class="blockquote-center">
<p>^ _ ^ </p>

</blockquote>
<a id="more"></a>

<h1 id="TopK-问题"><a href="#TopK-问题" class="headerlink" title="TopK 问题"></a>TopK 问题</h1><p>10亿个数中如何高效地找到最大的一个数以及最大的K个数</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li>参考1：<a href="https://github.com/weitingyuk/LeetCode-Notes-Waiting/blob/main/2021-02-17/TopK.md" target="_blank" rel="noopener">https://github.com/weitingyuk/LeetCode-Notes-Waiting/blob/main/2021-02-17/TopK.md</a></li>
<li>参考2：<a href="https://zhuanlan.zhihu.com/p/72164039" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/72164039</a></li>
</ol>
<h1 id="方法一：全部排序"><a href="#方法一：全部排序" class="headerlink" title="方法一：全部排序"></a>方法一：全部排序</h1><ul>
<li><strong>思路</strong>：将n个数进行排序后取前k个</li>
<li><strong>时间复杂度</strong>：快排时间复杂度为<code>O(nlogn)</code>。</li>
<li><strong>空间</strong>：在32位机器上，float类型占用4Byte，$10^9$个数需要占用越4GB的存储空间。</li>
<li><strong>缺点</strong>：全部排序需要将数据全部载入内存，如果电脑内存小于4GB，则无法使用该方法。另一方面，该方法对于内存大于4GB的电脑也不高效，因为问题要求只是找到TopK，而排序将所有元素都排序了，做了很多无用功。</li>
</ul>
<h2 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h2><p><strong>实验目的</strong>：生成一个$10^6$个数，用快速排序对其运行时间进行测试。</p>
<p><strong>代码</strong>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @ Author LuckyQ</span></span><br><span class="line"><span class="comment"> * @ Date   2021-05-22 13:59</span></span><br><span class="line"><span class="comment"> * @ Description 快速排序</span></span><br><span class="line"><span class="comment"> * @ 时间复杂度 O(nlogn)</span></span><br><span class="line"><span class="comment"> * @ 空间复杂度 O(n)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">import</span> java.util.Random;</span><br><span class="line"> <span class="keyword">import</span> java.lang.Math;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuickSort</span></span>&#123;</span><br><span class="line">    <span class="comment">// Return the index of nums[0] should be</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">partion</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> num = nums[left];</span><br><span class="line">        <span class="keyword">int</span> i = left + <span class="number">1</span>, j = right;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Divide nums by num to this situation --&gt; | &lt;= num | num | &gt; num |</span></span><br><span class="line">        <span class="keyword">while</span>(i &lt;= j)&#123;</span><br><span class="line">            <span class="keyword">while</span>(i &lt;= j &amp;&amp; nums[i] &gt;= num)&#123;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span>(i &lt;= j &amp;&amp; nums[j] &lt; num)&#123;</span><br><span class="line">                j--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(i &lt; j)&#123;</span><br><span class="line">                <span class="keyword">int</span> temp = nums[j];</span><br><span class="line">                nums[j] = nums[i];</span><br><span class="line">                nums[i] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> temp = nums[j];</span><br><span class="line">        nums[j] = num;</span><br><span class="line">        nums[left] = temp;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> j;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(right &lt;= left)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> mid = QuickSort.partion(nums, left, right);</span><br><span class="line">        sort(nums, left, mid - <span class="number">1</span>);</span><br><span class="line">        sort(nums, mid + <span class="number">1</span>, right);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] generateNums(<span class="keyword">int</span> N, <span class="keyword">int</span> highBound)&#123;</span><br><span class="line">        <span class="keyword">int</span>[] nums = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line">        Random random = <span class="keyword">new</span> Random();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)&#123;</span><br><span class="line">            nums[i] = random.nextInt(highBound);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nums;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printArray</span><span class="params">(<span class="keyword">int</span>[] nums)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"-----------------------------------\n"</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++)&#123;</span><br><span class="line">            System.out.print(nums[i]);</span><br><span class="line">            <span class="keyword">if</span>((i + <span class="number">1</span>) % <span class="number">10</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                System.out.print(<span class="string">"\t"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"\n-----------------------------------"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// N is the number of experience</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">experience</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> k, <span class="keyword">int</span> N)</span></span>&#123;</span><br><span class="line">        <span class="keyword">double</span> time = <span class="number">0.0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; N; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span>[] container = <span class="keyword">new</span> <span class="keyword">int</span>[k];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line">            QuickSort.sort(nums, <span class="number">0</span>, nums.length - <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j &lt; k; j++)&#123;</span><br><span class="line">                container[j] = nums[j];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">long</span> endTime = System.currentTimeMillis();</span><br><span class="line">            <span class="comment">// if(i == 0)&#123;</span></span><br><span class="line">            <span class="comment">//     AdvancedQuickSort.printArray(container);</span></span><br><span class="line">            <span class="comment">// &#125;</span></span><br><span class="line">            time += (endTime - startTime) / <span class="number">1000.0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> time / N;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] nums = QuickSort.generateNums(<span class="number">1000000</span>, <span class="number">101</span>);</span><br><span class="line">        <span class="comment">// QuickSort.printArray(nums);</span></span><br><span class="line">        <span class="keyword">double</span> averageTime = QuickSort.experience(nums, <span class="number">100</span>, <span class="number">10</span>);</span><br><span class="line">        System.out.println(<span class="string">"程序运行平均时间："</span> + Math.round(averageTime * <span class="number">1000</span>) + <span class="string">"ms"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p><strong>实验结果</strong>：<br><img src="/2021/06/11/Java%E6%B1%82%E8%A7%A3TopK%E9%97%AE%E9%A2%98/1.jpg" alt></p>
<h1 id="方法二：快排的改进算法"><a href="#方法二：快排的改进算法" class="headerlink" title="方法二：快排的改进算法"></a>方法二：快排的改进算法</h1><ul>
<li><strong>思路</strong>：本质上是运用了快排中分治思想。首先对数组第一个元素对数组进行一个划分，划分后使其左边的元素都不小于该元素，右边的元素都大于该元素。不妨将划分元素归为左部分。如果左边部分元素的数目等于K，则代表找到前K个数；如果左边部分元素的数目大于K，则继续对左部分数组进行划分；如果左边部分元素的数目小于K，则继续对右部元素做(K-左部元素个数)划分。</li>
<li><strong>时间复杂度</strong>：<code>O(nlogn)</code>（不确定）</li>
<li><strong>空间复杂度</strong>：4n Byte</li>
<li><strong>缺点</strong>：数据也要全部载入内存，但是速度会比普通的快排快。</li>
</ul>
<h2 id="实验-1"><a href="#实验-1" class="headerlink" title="实验"></a>实验</h2><p><strong>实验目的</strong>：生成一个$10^6$个数，用快速排序对其运行时间进行测试。</p>
<p><strong>代码</strong>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @ Author LuckyQ</span></span><br><span class="line"><span class="comment"> * @ Date   2021-05-22 22:16</span></span><br><span class="line"><span class="comment"> * @ Description 改进版快速排序</span></span><br><span class="line"><span class="comment"> * @ 时间复杂度 O(nlogn)</span></span><br><span class="line"><span class="comment"> * @ 空间复杂度 O(n)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">import</span> java.util.Random;</span><br><span class="line"> <span class="keyword">import</span> java.lang.Math;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AdvancedQuickSort</span></span>&#123;</span><br><span class="line">    <span class="comment">// Return the index of nums[0] should be</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">partion</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> num = nums[left];</span><br><span class="line">        <span class="keyword">int</span> i = left + <span class="number">1</span>, j = right;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Divide nums by num to this situation --&gt; | &lt;= num | num | &gt; num |</span></span><br><span class="line">        <span class="keyword">while</span>(i &lt;= j)&#123;</span><br><span class="line">            <span class="keyword">while</span>(i &lt;= j &amp;&amp; nums[i] &gt;= num)&#123;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span>(i &lt;= j &amp;&amp; nums[j] &lt; num)&#123;</span><br><span class="line">                j--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(i &lt; j)&#123;</span><br><span class="line">                <span class="keyword">int</span> temp = nums[j];</span><br><span class="line">                nums[j] = nums[i];</span><br><span class="line">                nums[i] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> temp = nums[j];</span><br><span class="line">        nums[j] = num;</span><br><span class="line">        nums[left] = temp;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> j;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> left, <span class="keyword">int</span> right, <span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(right &lt;= left)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> mid = AdvancedQuickSort.partion(nums, left, right);</span><br><span class="line">        <span class="keyword">int</span> num = mid - left + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(num == k)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(num &gt; k)&#123;</span><br><span class="line">            AdvancedQuickSort.sort(nums, left, mid - <span class="number">1</span>, k);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            AdvancedQuickSort.sort(nums, mid + <span class="number">1</span>, right, k - num);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] generateNums(<span class="keyword">int</span> N, <span class="keyword">int</span> highBound)&#123;</span><br><span class="line">        <span class="keyword">int</span>[] nums = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line">        Random random = <span class="keyword">new</span> Random();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)&#123;</span><br><span class="line">            nums[i] = random.nextInt(highBound);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nums;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printArray</span><span class="params">(<span class="keyword">int</span>[] nums)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"-----------------------------------\n"</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++)&#123;</span><br><span class="line">            System.out.print(nums[i]);</span><br><span class="line">            <span class="keyword">if</span>((i + <span class="number">1</span>) % <span class="number">10</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                System.out.print(<span class="string">"\t"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"\n-----------------------------------"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// N is the number of experience</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">experience</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> k, <span class="keyword">int</span> N)</span></span>&#123;</span><br><span class="line">        <span class="keyword">double</span> time = <span class="number">0.0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; N; i++)&#123;</span><br><span class="line">            <span class="keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line">            <span class="keyword">int</span>[] container = <span class="keyword">new</span> <span class="keyword">int</span>[k];</span><br><span class="line">            AdvancedQuickSort.sort(nums, <span class="number">0</span>, nums.length - <span class="number">1</span>, k);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j &lt; k; j++)&#123;</span><br><span class="line">                container[j] = nums[j];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">long</span> endTime = System.currentTimeMillis();</span><br><span class="line">            <span class="comment">// if(i == 0)&#123;</span></span><br><span class="line">            <span class="comment">//     AdvancedQuickSort.printArray(container);</span></span><br><span class="line">            <span class="comment">// &#125;</span></span><br><span class="line">            time += (endTime - startTime) / <span class="number">1000.0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> time / N;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] nums = AdvancedQuickSort.generateNums(<span class="number">1000000</span>, <span class="number">101</span>);</span><br><span class="line">        <span class="comment">// AdvancedQuickSort.printArray(nums);</span></span><br><span class="line">        <span class="keyword">double</span> averageTime = AdvancedQuickSort.experience(nums, <span class="number">100</span>, <span class="number">10</span>);</span><br><span class="line">        System.out.println(<span class="string">"程序运行平均时间："</span> + Math.round(averageTime * <span class="number">1000</span>) + <span class="string">"ms"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p><strong>实验结果</strong>：<br><img src="/2021/06/11/Java%E6%B1%82%E8%A7%A3TopK%E9%97%AE%E9%A2%98/2.jpg" alt></p>
<h1 id="方法三：局部淘汰法"><a href="#方法三：局部淘汰法" class="headerlink" title="方法三：局部淘汰法"></a>方法三：局部淘汰法</h1><ul>
<li><strong>思路</strong>：用一个容器保存前K个数，然后将剩余的所有数字一一与容器内的最小数字相比，如果某一后续元素比容器内最小数字大，则删掉容器内最小元素，并将该元素插入容器。</li>
<li><strong>时间复杂度</strong>：<code>O(Kn)</code></li>
<li><strong>空间</strong>：只用容器是一定要保存在内存中的，所以需要的空间为$4m$Byte，m为容器大小。</li>
<li><strong>缺点</strong>：时间复杂度较高</li>
</ul>
<h2 id="实验-2"><a href="#实验-2" class="headerlink" title="实验"></a>实验</h2><p><strong>实验目的</strong>：生成一个$10^6$个数，用局部淘汰法对其运行时间进行测试，其中K值为100。</p>
<p><strong>代码</strong>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @ Author LuckyQ</span></span><br><span class="line"><span class="comment"> * @ Date   2021-05-22 21:11</span></span><br><span class="line"><span class="comment"> * @ Description 局部淘汰法</span></span><br><span class="line"><span class="comment"> * @ 时间复杂度 O(nk)</span></span><br><span class="line"><span class="comment"> * @ 空间复杂度 O(k)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">import</span> java.util.Random;</span><br><span class="line"> <span class="keyword">import</span> java.lang.Math;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PartialElimination</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] partialElimination(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> k)&#123;</span><br><span class="line">        <span class="keyword">int</span>[] container = <span class="keyword">new</span> <span class="keyword">int</span>[k];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; i++)&#123;</span><br><span class="line">            container[i] = nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = k; i &lt; nums.length; i++)&#123;</span><br><span class="line">            <span class="comment">// is there any item lower than nums[i] in container,if the answer is yes then index != -1</span></span><br><span class="line">            <span class="keyword">int</span> index = -<span class="number">1</span>, minNum = nums[i];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; k; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(container[j] &lt; minNum)&#123;</span><br><span class="line">                    index = j;</span><br><span class="line">                    minNum = container[j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(index != -<span class="number">1</span>)&#123;</span><br><span class="line">                container[index] = nums[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> container;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] generateNums(<span class="keyword">int</span> N, <span class="keyword">int</span> highBound)&#123;</span><br><span class="line">        <span class="keyword">int</span>[] nums = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line">        Random random = <span class="keyword">new</span> Random();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)&#123;</span><br><span class="line">            nums[i] = random.nextInt(highBound);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nums;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printArray</span><span class="params">(<span class="keyword">int</span>[] nums)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"-----------------------------------\n"</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++)&#123;</span><br><span class="line">            System.out.print(nums[i]);</span><br><span class="line">            <span class="keyword">if</span>((i + <span class="number">1</span>) % <span class="number">10</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                System.out.print(<span class="string">"\t"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"\n-----------------------------------"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// k is the number of target, N is the number of experience</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">experience</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> k, <span class="keyword">int</span> N)</span></span>&#123;</span><br><span class="line">        <span class="keyword">double</span> time = <span class="number">0.0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; N; i++)&#123;</span><br><span class="line">            <span class="keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line">            <span class="keyword">int</span>[] container = PartialElimination.partialElimination(nums, k);</span><br><span class="line">            <span class="keyword">long</span> endTime = System.currentTimeMillis();</span><br><span class="line">            <span class="comment">// PartialElimination.printArray(container);</span></span><br><span class="line">            time += (endTime - startTime) / <span class="number">1000.0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> time / N;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] nums = PartialElimination.generateNums(<span class="number">1000000</span>, <span class="number">101</span>);</span><br><span class="line">        <span class="comment">// PartialElimination.printArray(nums);</span></span><br><span class="line">        <span class="keyword">double</span> averageTime = PartialElimination.experience(nums, <span class="number">100</span>, <span class="number">10</span>);</span><br><span class="line">        System.out.println(<span class="string">"程序运行平均时间："</span> + Math.round(averageTime * <span class="number">1000</span>) + <span class="string">"ms"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p><strong>实验结果</strong>：<img src="/2021/06/11/Java%E6%B1%82%E8%A7%A3TopK%E9%97%AE%E9%A2%98/3.jpg" alt></p>
<h1 id="方法四：分治法"><a href="#方法四：分治法" class="headerlink" title="方法四：分治法"></a>方法四：分治法</h1><ul>
<li><strong>思路</strong>：将n个数据分为m份，每份$\frac{n}{m}$个数据，找到每份数据中最大的K个，最后在得到的mk个数据中找出最大的k个。m份数据可以分别在m台计算机中同时进行计算。</li>
<li><strong>时间复杂度</strong>：<code>O(nlog(n/m))</code></li>
<li><strong>空间</strong>：4 * max(n/m, mk) Byte</li>
<li><strong>缺点</strong>：分布式的部署和通信比较复杂</li>
</ul>
<h2 id="实验-3"><a href="#实验-3" class="headerlink" title="实验"></a>实验</h2><p><strong>实验目的</strong>：生成一个$10^6$个数，用一个线程模拟一台计算机，共设置了10台计算机。用分治法对其运行时间进行测试，其中K值为100。</p>
<p><strong>代码</strong>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @ Author LuckyQ</span></span><br><span class="line"><span class="comment"> * @ Date   2021-05-22 23:00</span></span><br><span class="line"><span class="comment"> * @ Description 分治思想求TopK</span></span><br><span class="line"><span class="comment"> * @ 时间复杂度 O(nlog(n/m))</span></span><br><span class="line"><span class="comment"> * @ 空间复杂度 O(max(n/m, mk))</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Callable;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Future;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">import</span> java.lang.Math;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DivideConquer</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">partion</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> num = nums[left];</span><br><span class="line">        <span class="keyword">int</span> i = left + <span class="number">1</span>, j = right;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Divide nums by num to this situation --&gt; | &lt;= num | num | &gt; num |</span></span><br><span class="line">        <span class="keyword">while</span>(i &lt;= j)&#123;</span><br><span class="line">            <span class="keyword">while</span>(i &lt;= j &amp;&amp; nums[i] &gt;= num)&#123;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span>(i &lt;= j &amp;&amp; nums[j] &lt; num)&#123;</span><br><span class="line">                j--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(i &lt; j)&#123;</span><br><span class="line">                <span class="keyword">int</span> temp = nums[j];</span><br><span class="line">                nums[j] = nums[i];</span><br><span class="line">                nums[i] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> temp = nums[j];</span><br><span class="line">        nums[j] = num;</span><br><span class="line">        nums[left] = temp;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> j;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> left, <span class="keyword">int</span> right, <span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(right &lt;= left)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> mid = DivideConquer.partion(nums, left, right);</span><br><span class="line">        <span class="keyword">int</span> num = mid - left + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(num == k)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(num &gt; k)&#123;</span><br><span class="line">            DivideConquer.sort(nums, left, mid - <span class="number">1</span>, k);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            DivideConquer.sort(nums, mid + <span class="number">1</span>, right, k - num);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] divideConquer(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> m, <span class="keyword">int</span> k)&#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums.length / m;</span><br><span class="line"></span><br><span class="line">        ExecutorService executor = Executors.newFixedThreadPool(m);</span><br><span class="line">        List&lt;Future&lt;<span class="keyword">int</span>[]&gt;&gt; futureList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span>[] partNums = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++)&#123;</span><br><span class="line">                partNums[j] = nums[i * n + j];</span><br><span class="line">            &#125;</span><br><span class="line">            futureList.add(executor.submit(<span class="keyword">new</span> ProcessThread(partNums, k)));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        executor.shutdown();</span><br><span class="line">        <span class="keyword">int</span>[] topkMerge = <span class="keyword">new</span> <span class="keyword">int</span>[m * k];</span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(Future&lt;<span class="keyword">int</span>[]&gt; future: futureList)&#123;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                <span class="keyword">int</span>[] container = future.get();</span><br><span class="line">                <span class="comment">// DivideConquer.printArray(container, "computer[" + (index + 1) + "]");</span></span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; container.length; i++)&#123;</span><br><span class="line">                    topkMerge[index * k + i] = container[i];</span><br><span class="line">                &#125;</span><br><span class="line">                index += <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// DivideConquer.printArray(topkMerge, "merge");</span></span><br><span class="line">        DivideConquer.sort(topkMerge, <span class="number">0</span>, topkMerge.length - <span class="number">1</span>, k);</span><br><span class="line">        <span class="keyword">int</span>[] res = <span class="keyword">new</span> <span class="keyword">int</span>[k];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; k; j++)&#123;</span><br><span class="line">            res[j] = topkMerge[j];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] generateNums(<span class="keyword">int</span> N, <span class="keyword">int</span> highBound)&#123;</span><br><span class="line">        <span class="keyword">int</span>[] nums = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line">        Random random = <span class="keyword">new</span> Random();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)&#123;</span><br><span class="line">            nums[i] = random.nextInt(highBound);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nums;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printArray</span><span class="params">(<span class="keyword">int</span>[] nums, String title)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"------------"</span> + title + <span class="string">"-----------------------\n"</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++)&#123;</span><br><span class="line">            System.out.print(nums[i]);</span><br><span class="line">            <span class="keyword">if</span>((i + <span class="number">1</span>) % <span class="number">10</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                System.out.print(<span class="string">"\t"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"\n-----------------------------------"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// N is the number of experience</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">experience</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> m, <span class="keyword">int</span> k, <span class="keyword">int</span> N)</span></span>&#123;</span><br><span class="line">        <span class="keyword">double</span> time = <span class="number">0.0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> epoch = <span class="number">0</span>; epoch &lt; N; epoch++)&#123;</span><br><span class="line">            <span class="keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line">            <span class="keyword">int</span>[] result = DivideConquer.divideConquer(nums, m, k);</span><br><span class="line">            <span class="keyword">long</span> endTime = System.currentTimeMillis();</span><br><span class="line">            <span class="comment">// if(epoch == 0)&#123;</span></span><br><span class="line">            <span class="comment">//     DivideConquer.printArray(result,"result");</span></span><br><span class="line">            <span class="comment">// &#125;</span></span><br><span class="line">            time += (endTime - startTime) / <span class="number">1000.0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> time / N;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] nums = DivideConquer.generateNums(<span class="number">1000000</span>, <span class="number">101</span>);</span><br><span class="line">        <span class="comment">// DivideConquer.printArray(nums,"origin");</span></span><br><span class="line">        <span class="keyword">double</span> averageTime = DivideConquer.experience(nums, <span class="number">10</span>, <span class="number">100</span>, <span class="number">10</span>);</span><br><span class="line">        System.out.println(<span class="string">"程序运行平均时间："</span> + Math.round(averageTime * <span class="number">1000</span>) + <span class="string">"ms"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class ProcessThread implements Callable&lt;int[]&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] nums;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> k;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ProcessThread</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.nums = nums;</span><br><span class="line">        <span class="keyword">this</span>.k = k;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// AdvancedQuickSort</span></span><br><span class="line">    <span class="comment">// Return the index of nums[0] should be</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">partion</span><span class="params">(<span class="keyword">int</span> left, <span class="keyword">int</span> right)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> num = nums[left];</span><br><span class="line">        <span class="keyword">int</span> i = left + <span class="number">1</span>, j = right;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Divide nums by num to this situation --&gt; | &lt;= num | num | &gt; num |</span></span><br><span class="line">        <span class="keyword">while</span>(i &lt;= j)&#123;</span><br><span class="line">            <span class="keyword">while</span>(i &lt;= j &amp;&amp; nums[i] &gt;= num)&#123;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span>(i &lt;= j &amp;&amp; nums[j] &lt; num)&#123;</span><br><span class="line">                j--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(i &lt; j)&#123;</span><br><span class="line">                <span class="keyword">int</span> temp = nums[j];</span><br><span class="line">                nums[j] = nums[i];</span><br><span class="line">                nums[i] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> temp = nums[j];</span><br><span class="line">        nums[j] = num;</span><br><span class="line">        nums[left] = temp;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> j;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// AdvancedQuickSort</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span> left, <span class="keyword">int</span> right)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(right &lt;= left)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> mid = partion(left, right);</span><br><span class="line">        <span class="keyword">int</span> num = mid - left + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(num == k)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(num &gt; k)&#123;</span><br><span class="line">            sort(left, mid - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            sort(mid + <span class="number">1</span>, right);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] call()&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            sort(<span class="number">0</span>, nums.length - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span>[] container = <span class="keyword">new</span> <span class="keyword">int</span>[k];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; i++)&#123;</span><br><span class="line">                container[i] = nums[i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> container;</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>实验结果</strong>：<img src="/2021/06/11/Java%E6%B1%82%E8%A7%A3TopK%E9%97%AE%E9%A2%98/4.jpg" alt></p>
<h1 id="方法五：Hash法"><a href="#方法五：Hash法" class="headerlink" title="方法五：Hash法"></a>方法五：Hash法</h1><p><strong>思路</strong>：先通过Hash法，对数据集进行去重复。这样如果重复率很高的话，会减少很大的内存用量，从而缩小运算空间，然后通过分治法或最小堆法查找最大的K个数。</p>
<blockquote>
<p>关于这个方法我有一个疑惑，前K个数不是包含相等的数吗，去重之后不就少数了吗？比如，生成了100万个取值范围在[0,100]的数，希望找到最大的1000个数。这样去重后最大K个数最多也才100个啊…</p>
</blockquote>
<h1 id="方法六：小顶堆"><a href="#方法六：小顶堆" class="headerlink" title="方法六：小顶堆"></a>方法六：小顶堆</h1><ul>
<li><strong>思路</strong>：首先读入前K个数来创建大小为K的小顶堆，建堆的时间复杂度为O(K)，然后遍历后续的数字，并于堆顶（最小）数字进行比较。如果比最小的数小，则继续读取后续数字；如果比堆顶数字大，则替换堆顶元素并重新调整堆为最小堆。</li>
<li><strong>时间复杂度</strong>：<code>O(NlogK)</code></li>
<li><strong>空间</strong>：$2^K - 1$</li>
</ul>
<h2 id="实验1"><a href="#实验1" class="headerlink" title="实验1"></a>实验1</h2><p><strong>实验目的</strong>：生成一个$10^6$个数，用小顶堆法对其运行时间进行测试，其中K值为100。</p>
<p><strong>代码</strong>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @ Author LuckyQ</span></span><br><span class="line"><span class="comment"> * @ Date   2021-06-08 9:27</span></span><br><span class="line"><span class="comment"> * @ Description 小顶堆实现topK</span></span><br><span class="line"><span class="comment"> * @ 时间复杂度 O(nlogk)</span></span><br><span class="line"><span class="comment"> * @ 空间复杂度 O(2^k-1)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">import</span> java.lang.Math;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SmallHeap</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] getTopK(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> N, <span class="keyword">int</span> K)&#123;</span><br><span class="line">        <span class="comment">// res是结果数组</span></span><br><span class="line">        <span class="keyword">int</span>[] res = <span class="keyword">new</span> <span class="keyword">int</span>[K];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; K; i++)&#123;</span><br><span class="line">            res[i] = nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 建立一个大小为 K 的小顶堆，设堆顶为0</span></span><br><span class="line">        buildHeap(res, K);</span><br><span class="line">        <span class="comment">// 对于剩余 N-K 个数字，逐个判断是否能加入小顶堆</span></span><br><span class="line">        <span class="comment">// 若大于小顶堆的堆顶（最小值），则将其替换最小堆堆顶并调准堆。</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = K; i &lt; N; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i] &gt; res[<span class="number">0</span>])&#123;</span><br><span class="line">                res[<span class="number">0</span>] = nums[i];</span><br><span class="line">                shiftDown(res, K, <span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 建堆</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">buildHeap</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> size)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 最小的树即最后一个叶子的根，它的坐标为（size - 1） 其父亲结点坐标为(size - 1 - 1) / 2 </span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = (size - <span class="number">2</span>) / <span class="number">2</span>; i &gt;= <span class="number">0</span>; i--)&#123;</span><br><span class="line">            shiftDown(nums, size, i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 向下调准</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">shiftDown</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> size, <span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">2</span> * index + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(left &lt; size)&#123;</span><br><span class="line">            <span class="keyword">int</span> min = left;</span><br><span class="line">            <span class="keyword">int</span> right = left + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(right &lt; size &amp;&amp; nums[right] &lt; nums[left])&#123;</span><br><span class="line">                min = right;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(nums[index] &lt; nums[min])&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> tmp = nums[min];</span><br><span class="line">            nums[min] = nums[index];</span><br><span class="line">            nums[index] = tmp;</span><br><span class="line">            <span class="comment">// 更新 left, index</span></span><br><span class="line">            index = min;</span><br><span class="line">            left = <span class="number">2</span> * index + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] generateNums(<span class="keyword">int</span> N, <span class="keyword">int</span> highBound)&#123;</span><br><span class="line">        <span class="keyword">int</span>[] nums = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line">        Random random = <span class="keyword">new</span> Random();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)&#123;</span><br><span class="line">            nums[i] = random.nextInt(highBound);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nums;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printArray</span><span class="params">(<span class="keyword">int</span>[] nums)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"-----------------------------------\n"</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++)&#123;</span><br><span class="line">            System.out.print(nums[i]);</span><br><span class="line">            <span class="keyword">if</span>((i + <span class="number">1</span>) % <span class="number">10</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                System.out.print(<span class="string">"\t"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"\n-----------------------------------"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// N is the number of experience</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">experience</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> k, <span class="keyword">int</span> N)</span></span>&#123;</span><br><span class="line">        <span class="keyword">double</span> time = <span class="number">0.0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; N; i++)&#123;</span><br><span class="line">            <span class="keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line">            <span class="keyword">int</span>[] container = SmallHeap.getTopK(nums, nums.length, k);</span><br><span class="line">            <span class="keyword">long</span> endTime = System.currentTimeMillis();</span><br><span class="line">            <span class="comment">// if(i == 0)&#123;</span></span><br><span class="line">            <span class="comment">//     SmallHeap.printArray(container);</span></span><br><span class="line">            <span class="comment">// &#125;</span></span><br><span class="line">            time += (endTime - startTime) / <span class="number">1000.0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> time / N;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] nums = SmallHeap.generateNums(<span class="number">1000000</span>, <span class="number">101</span>);</span><br><span class="line">        <span class="comment">// SmallHeap.printArray(nums);</span></span><br><span class="line">        <span class="keyword">double</span> averageTime = SmallHeap.experience(nums, <span class="number">100</span>, <span class="number">10</span>);</span><br><span class="line">        System.out.println(<span class="string">"程序运行平均时间："</span> + Math.round(averageTime * <span class="number">1000</span>) + <span class="string">"ms"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>实验结果</strong>：<img src="/2021/06/11/Java%E6%B1%82%E8%A7%A3TopK%E9%97%AE%E9%A2%98/5.jpg" alt></p>
<h2 id="实验2"><a href="#实验2" class="headerlink" title="实验2"></a>实验2</h2><p>实验1代码中手动实现了小顶堆，其实还可以使用 Java 中的优先队列 <code>PriorityQueue</code> 进行实现。</p>
<p><strong>实验目的</strong>：重复上述实验，只是将小顶堆使用优先队列进行实现。</p>
<p><strong>代码</strong>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @ Author LuckyQ</span></span><br><span class="line"><span class="comment"> * @ Date   2021-06-10 13:42</span></span><br><span class="line"><span class="comment"> * @ Description 队列实现小顶堆的topK</span></span><br><span class="line"><span class="comment"> * @ 时间复杂度 O(nlogk)</span></span><br><span class="line"><span class="comment"> * @ 空间复杂度 O(2^k-1)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"><span class="keyword">import</span> java.util.Queue;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">import</span> java.lang.Math;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PriorityHeap</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] getTopK(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> N, <span class="keyword">int</span> K)&#123;</span><br><span class="line">        <span class="comment">// 初始化优先队列，默认情况下是小顶堆</span></span><br><span class="line">        Queue&lt;Integer&gt; queue = <span class="keyword">new</span> PriorityQueue&lt;&gt;();</span><br><span class="line">        <span class="comment">// 将前 K 个元素放入优先队列</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; K; i++)&#123;</span><br><span class="line">            queue.add(nums[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 对于剩余 N-K 个数字，逐个判断是否能加入小顶堆</span></span><br><span class="line">        <span class="comment">// 若大于小顶堆的堆顶（最小值），则将其替换最小堆堆顶并调准堆。</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = K; i &lt; N; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i] &gt; queue.peek())&#123;</span><br><span class="line">                queue.poll();</span><br><span class="line">                queue.add(nums[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// res是结果数组</span></span><br><span class="line">        <span class="keyword">int</span>[] res = <span class="keyword">new</span> <span class="keyword">int</span>[K];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; K; i++)&#123;</span><br><span class="line">            res[i] = queue.poll();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] generateNums(<span class="keyword">int</span> N, <span class="keyword">int</span> highBound)&#123;</span><br><span class="line">        <span class="keyword">int</span>[] nums = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line">        Random random = <span class="keyword">new</span> Random();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)&#123;</span><br><span class="line">            nums[i] = random.nextInt(highBound);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nums;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printArray</span><span class="params">(<span class="keyword">int</span>[] nums)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"-----------------------------------\n"</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++)&#123;</span><br><span class="line">            System.out.print(nums[i]);</span><br><span class="line">            <span class="keyword">if</span>((i + <span class="number">1</span>) % <span class="number">10</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                System.out.print(<span class="string">"\t"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"\n-----------------------------------"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// N is the number of experience</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">experience</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> k, <span class="keyword">int</span> N)</span></span>&#123;</span><br><span class="line">        <span class="keyword">double</span> time = <span class="number">0.0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; N; i++)&#123;</span><br><span class="line">            <span class="keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line">            <span class="keyword">int</span>[] container = PriorityHeap.getTopK(nums, nums.length, k);</span><br><span class="line">            <span class="keyword">long</span> endTime = System.currentTimeMillis();</span><br><span class="line">            <span class="comment">// if(i == 0)&#123;</span></span><br><span class="line">            <span class="comment">//     PriorityHeap.printArray(container);</span></span><br><span class="line">            <span class="comment">// &#125;</span></span><br><span class="line">            time += (endTime - startTime) / <span class="number">1000.0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> time / N;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] nums = SmallHeap.generateNums(<span class="number">1000000</span>, <span class="number">101</span>);</span><br><span class="line">        <span class="comment">// PriorityHeap.printArray(nums);</span></span><br><span class="line">        <span class="keyword">double</span> averageTime = PriorityHeap.experience(nums, <span class="number">100</span>, <span class="number">10</span>);</span><br><span class="line">        System.out.println(<span class="string">"程序运行平均时间："</span> + Math.round(averageTime * <span class="number">1000</span>) + <span class="string">"ms"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>实验结果：<img src="/2021/06/11/Java%E6%B1%82%E8%A7%A3TopK%E9%97%AE%E9%A2%98/6.jpg" alt></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>算法 Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Map</title>
    <url>/2020/08/22/Map/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote class="blockquote-center">
<p>^ _ ^ </p>

</blockquote>
<a id="more"></a>

<h1 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q &amp; A"></a>Q &amp; A</h1><blockquote>
<p><strong>Java中有哪些Map类，都有些什么区别？</strong></p>
</blockquote>
<ul>
<li><strong>HashMap</strong>：<ul>
<li>它根据键的hashCode值存储数据，大多数情况下可以直接定位到它的值，因而具有很快的访问速度，但遍历顺序却是不确定的；</li>
<li>HashMap最多只允许一条记录的键为null，允许多条记录的值为null；</li>
<li>HashMap非线程安全，即任一时刻可以有多个线程同时写HashMap，可能会导致数据的不一致；</li>
</ul>
</li>
<li><strong>LinkedHashMap</strong>：<ul>
<li>LinkedHashMap是HashMap的一个子类，保存了记录的插入顺序，在用Iterator遍历LinkedHashMap时，先得到的记录肯定是先插入的；</li>
<li>也可以在构造时带参数，按照访问次序排序（LRU）；</li>
</ul>
</li>
<li><strong>TreeMap</strong>：<ul>
<li>TreeMap实现SortedMap接口，能够把它保存的记录根据键排序，默认是按键值的升序排序，也可以指定排序的比较器，当用Iterator遍历TreeMap时，得到的记录是排过序的；</li>
<li>在使用TreeMap时，key必须实现Comparable接口或者在构造TreeMap传入自定义的Comparator，否则会在运行时抛出java.lang.ClassCastException类型的异常；</li>
</ul>
</li>
<li><strong>ConcurrentHashMap</strong>：<ul>
<li>ConcurrentHashMap引入了分段锁；</li>
<li>是线程安全的，并发性优于Hashtable。</li>
</ul>
</li>
</ul>
<blockquote>
<p><strong>HashMap的实现原理是什么？</strong></p>
</blockquote>
<ul>
<li><strong>储存结构</strong>：<ul>
<li>数组+链表+红黑树（JDK1.8增加了红黑树部分，即当链表长度超过8时转换为红黑树）；</li>
<li>Java中HashMap采用了链地址法。链地址法，简单来说，就是数组加链表的结合。在每个数组元素上都一个链表结构，当数据被Hash后，得到数组下标，把数据放在对应下标元素的链表上；</li>
<li>存储的数据元实现了Map.Entry接口，本质是就是一个映射(键值对)。</li>
</ul>
</li>
<li><strong>功能实现</strong>：<ul>
<li>确定哈希桶数组索引位置：取key的hashCode值、高位运算、取模运算</li>
<li>put方法：将一个键值对插入hash表中</li>
<li>扩容机制：当hash表中元素总数超过阈值（threshold = 容量 * 负载因子）时进行扩容，一般是扩容为原来的一倍。扩容后需要重新计算各个元素在hash表中的位置。</li>
</ul>
</li>
</ul>
<p><img src="/2020/08/22/Map/1.png" alt></p>
<blockquote>
<p><strong>HashMap在多线程下的安全问题是如何解决的？</strong></p>
</blockquote>
<p>用以下几种支持并发的类来代替HashMap：</p>
<ul>
<li>使用Collections.SynchronizedMap(Map)创建线程安全的map集合；</li>
<li>Hashtable</li>
<li>ConcurrentHashMap</li>
</ul>
<blockquote>
<p><strong>SynchronizedMap、HashTable、ConcurrentHashMap实现原理</strong></p>
</blockquote>
<ul>
<li><strong>SynchronizedMap</strong>：内部维护了一个普通对象Map，还有排斥锁mutex，每次执行操作时，通过<code>synchronized(mutex)</code>上锁</li>
<li><strong>HashTable</strong>：对数据操作的方法都用synchronized进行修饰；</li>
<li><strong>ConcurrentHashMap</strong>：在jdk1.7中是通过分段锁进行实现，在jdk1.8中通过CAS + synchronized来实现。</li>
</ul>
<blockquote>
<p><strong>HashTable和HashMap的不同</strong></p>
</blockquote>
<ul>
<li><strong>实现方式不同</strong>：Hashtable 继承了 Dictionary类，而 HashMap 继承的是 AbstractMap 类。<br>Dictionary 是 JDK 1.0 添加的，貌似没人用过这个，我也没用过。</li>
<li><strong>初始化容量不同</strong>：HashMap 的初始容量为：16，Hashtable 初始容量为：11，两者的负载因子默认都是：0.75。</li>
<li><strong>扩容机制不同</strong>：当现有容量大于总容量 * 负载因子时，HashMap 扩容规则为当前容量翻倍，Hashtable 扩容规则为当前容量翻倍 + 1。</li>
<li><strong>迭代器不同</strong>：HashMap 中的 Iterator 迭代器是 fail-fast 的，而 Hashtable 的 Enumerator 不是 fail-fast 的。</li>
</ul>
<blockquote>
<p><strong>JAVA8的ConcurrentHashMap为什么放弃了分段锁？</strong></p>
</blockquote>
<h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="https://zhuanlan.zhihu.com/p/21673805" target="_blank" rel="noopener">Map分类</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/97902016" target="_blank" rel="noopener">HashMap-HashTable-ConcurrentHashMap</a></p>
]]></content>
      <categories>
        <category>Java面试</category>
      </categories>
      <tags>
        <tag>Java基础</tag>
        <tag>容器类</tag>
      </tags>
  </entry>
  <entry>
    <title>Java正则表达式</title>
    <url>/2021/06/24/Java%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote class="blockquote-center">
<p>^ _ ^ </p>

</blockquote>
<a id="more"></a>


<h1 id="什么是正则表达式"><a href="#什么是正则表达式" class="headerlink" title="什么是正则表达式"></a>什么是正则表达式</h1><p>正则表达式定义了一种<strong>字符串模式</strong>，用这个模式对字符串进行搜索，可以找到所有符合该模式的<strong>子字符串</strong>。</p>
<h1 id="正则表达式的使用"><a href="#正则表达式的使用" class="headerlink" title="正则表达式的使用"></a>正则表达式的使用</h1><p>Java中正则表达式相关类定义在 <code>java.util.regex</code> 包中，主要包括以下三类：</p>
<ul>
<li><code>Pattern</code> : Pattern 对象是一个正则表达式的编译表示。</li>
<li><code>Matcher</code> : Matcher 对象是对输入字符串进行匹配的引擎。</li>
<li><code>PatternSyntaxException</code> : PatternSyntaxException 是一个非强制异常类，它表示一个正则表达式模式中的语法错误。</li>
</ul>
<p><strong>基本使用</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">    String regex = <span class="string">""</span>;      <span class="comment">// 正则表达式</span></span><br><span class="line">    String content = <span class="string">""</span>;    <span class="comment">// 输入字符串</span></span><br><span class="line">    Pattern pattern = Pattern.compile(regex);</span><br><span class="line">    Matcher mathcer = pattern.matcher(content);</span><br><span class="line">    <span class="keyword">while</span>(matcher.find())&#123;</span><br><span class="line">        System.out.println(matcher.group(<span class="number">0</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="反斜杠"><a href="#反斜杠" class="headerlink" title="反斜杠"></a>反斜杠</h2><p>正则表达式中有一些特殊符号，如<code>\d</code>,<code>\w</code>等，在其他语言（如JavaScript）可以直接这样写。但是 Java 有些不一样，因为 Java 的转义符号是 <code>\\</code> 而不是 <code>\</code>。</p>
<h2 id="特殊字符"><a href="#特殊字符" class="headerlink" title="特殊字符"></a>特殊字符</h2><table>
<thead>
<tr>
<th>字符</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>\</td>
<td>将下一字符标记为特殊字符、文本、反向引用或八进制转义符。</td>
</tr>
<tr>
<td>^</td>
<td>匹配输入字符串开始的位置。</td>
</tr>
<tr>
<td>$</td>
<td>匹配输入字符串结尾的位置。</td>
</tr>
<tr>
<td>*</td>
<td>零次或多次匹配前面的字符或子表达式。</td>
</tr>
<tr>
<td>+</td>
<td>一次或多次匹配前面的字符或子表达式。</td>
</tr>
<tr>
<td>?</td>
<td>零次或一次匹配前面的字符或子表达式。</td>
</tr>
<tr>
<td>{n}</td>
<td>正好匹配 n 次。</td>
</tr>
<tr>
<td>{n,}</td>
<td>至少匹配 n 次。</td>
</tr>
<tr>
<td>{n,m}</td>
<td>匹配至少 n 次，至多 m 次。</td>
</tr>
<tr>
<td>?</td>
<td>当此字符紧随任何其他限定符（*、+、?、{n}、{n,}、{n,m}）之后时，匹配模式是”非贪心的”。</td>
</tr>
<tr>
<td>.</td>
<td>匹配除”\r\n”之外的任何单个字符。</td>
</tr>
<tr>
<td>(pattern)</td>
<td>匹配 pattern 并捕获该匹配的子表达式。</td>
</tr>
<tr>
<td>(?:pattern)</td>
<td>匹配 pattern 但不捕获该匹配的子表达式。</td>
</tr>
<tr>
<td>(?=pattern)</td>
<td>例如，’Windows (?=95</td>
</tr>
<tr>
<td>(?!pattern)</td>
<td>例如，’Windows (?!95</td>
</tr>
<tr>
<td>x|y</td>
<td>匹配 x 或 y。</td>
</tr>
<tr>
<td>[xyz]</td>
<td>字符集。匹配包含的任一字符。</td>
</tr>
<tr>
<td>[^xyz]</td>
<td>反向字符集。匹配未包含的任何字符。</td>
</tr>
<tr>
<td>[a-z]</td>
<td>字符范围。匹配指定范围内的任何字符。</td>
</tr>
<tr>
<td>[^a-z]</td>
<td>反向范围字符。</td>
</tr>
<tr>
<td>\b</td>
<td>匹配一个字边界，即字与空格间的位置。</td>
</tr>
<tr>
<td>\B</td>
<td>非字边界匹配。</td>
</tr>
<tr>
<td>\cx</td>
<td>匹配 x 指示的控制字符。例如，\cM 匹配 Control-M 或回车符。</td>
</tr>
<tr>
<td>\d</td>
<td>数字字符匹配。</td>
</tr>
<tr>
<td>\D</td>
<td>非数字字符匹配。</td>
</tr>
<tr>
<td>\s</td>
<td>匹配任何空白字符。</td>
</tr>
<tr>
<td>\S</td>
<td>匹配任何非空白字符。</td>
</tr>
<tr>
<td>\w</td>
<td>匹配任何字类字符，包括下划线。</td>
</tr>
<tr>
<td>\W</td>
<td>与任何非单词字符匹配。</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java 正则表达式</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo博客部署到服务器</title>
    <url>/2020/11/16/Hexo%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote class="blockquote-center">
<p>^ _ ^ </p>

</blockquote>
<a id="more"></a>

<h1 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a>安装nginx</h1><p><strong>方法一</strong>：通过宝塔面板安装（安装成功，但却不能访问到nginx的welcome页面，遂卸载）<br><img src="/2020/11/16/Hexo%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8/3.png" alt="错误1"></p>
<p><strong>方法二</strong>：yum安装（仍然出现错误）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install -y nginx</span><br></pre></td></tr></table></figure>
<p><img src="/2020/11/16/Hexo%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8/2.png" alt="错误2"></p>
<p><strong>方法三</strong>： 解压缩安装</p>
<p><strong>1. 进入官网下载nginx压缩包及相关依赖</strong></p>
<p>nginx下载页面：<a href="http://nginx.org/en/download.html" target="_blank" rel="noopener">http://nginx.org/en/download.html</a></p>
<p><img src="/2020/11/16/Hexo%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8/1.png" alt="nginx下载页面"></p>
<p><strong>2. 安装nginx依赖pcre</strong></p>
<p>pcre下载页面：<a href="https://ftp.pcre.org/pub/pcre/" target="_blank" rel="noopener">https://ftp.pcre.org/pub/pcre/</a></p>
<p><img src="/2020/11/16/Hexo%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8/4.png" alt="pcre下载页面"></p>
<p><strong>3. 将nginx和pcre的压缩包均通过XFtp传输到服务器上</strong></p>
<p><img src="/2020/11/16/Hexo%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8/5.png" alt="nginx和pcre"></p>
<p><strong>4. 安装pcre</strong></p>
<p>（1）解压pcre压缩包</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tar -zxvf pcre压缩包名称</span><br></pre></td></tr></table></figure>

<p>（2）进入pcre目录，执行configure文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;configure</span><br></pre></td></tr></table></figure>

<p>（3）在pcre目录下执行以下命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>

<p>（4）检查安装是否成功</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pcre-config --version</span><br></pre></td></tr></table></figure>

<p><strong>5. 通过yum安装openssl和zlib依赖</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum -y install make zlib zlib-devel gcc-c++ libtool openssl openssl-devel</span><br></pre></td></tr></table></figure>

<p><strong>6. 安装nginx</strong></p>
<p>（1）解压缩nginx</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tar -zxvf nginx压缩包名称</span><br></pre></td></tr></table></figure>

<p>（2）进入nginx目录执行configure文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;configure</span><br></pre></td></tr></table></figure>

<p><img src="/2020/11/16/Hexo%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8/6.png" alt="配置完成页面"></p>
<p>（3）在nginx目录执行命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>

<p><strong>7. nginx安装成功后目录为/usr/local/</strong></p>
<p>其执行文件路径为/usr/local/sbin</p>
<p><strong>8. 配置nginx环境变量</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. vim &#x2F;etc&#x2F;profile</span><br><span class="line"></span><br><span class="line">2. 添加NGINX_HOME</span><br><span class="line">NGINX_HOME&#x3D;&#x2F;usr&#x2F;local&#x2F;nginx</span><br><span class="line"># PATH中添加 $NGINX_HOME&#x2F;sbin</span><br><span class="line">export $PATH&#x3D;&quot;$PATH:$NGINX_HOME&#x2F;sbin&quot;</span><br><span class="line"></span><br><span class="line">3. 保存文件并退出</span><br><span class="line"></span><br><span class="line">4. source &#x2F;etc&#x2F;profile 使文件生效</span><br><span class="line"></span><br><span class="line">5. 在非&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin目录下执行nginx -v验证是否配置环境成功</span><br></pre></td></tr></table></figure>

<p><strong>9. 启动nginx并访问</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nginx # 启动</span><br><span class="line">ps -ef | grep nginx # 查看nginx进程证明其确实启动</span><br><span class="line">浏览器中访问：http:&#x2F;&#x2F;101.200.3.108:80</span><br></pre></td></tr></table></figure>

<p><img src="/2020/11/16/Hexo%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8/7.png" alt="成功页面"></p>
<p><strong>10. 修改nginx配置文件</strong></p>
<blockquote>
<p>这一步在配置完成git仓库后再进行</p>
</blockquote>
<p><em>配置文件地址：/usr/local/nginx/conf/nginx.conf</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;conf&#x2F;nginx.conf</span><br><span class="line"></span><br><span class="line">1.将location &#x2F; 下的root值更换为git工作目录 &#x2F;home&#x2F;www&#x2F;website</span><br><span class="line">2.将location &#x2F;50x.html下的root值更换为git工作目录 &#x2F;home&#x2F;www&#x2F;website</span><br></pre></td></tr></table></figure>

<p><img src="/2020/11/16/Hexo%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8/14.png" alt="nginx配置文件"></p>
<h2 id="常用nginx命令"><a href="#常用nginx命令" class="headerlink" title="常用nginx命令"></a>常用nginx命令</h2><p>若是宝塔面板安装，则nginx安装目录为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;www&#x2F;server&#x2F;nginx</span><br><span class="line"># 配置文件路径为：&#x2F;www&#x2F;server&#x2F;nginx&#x2F;conf&#x2F;nginx.conf</span><br></pre></td></tr></table></figure>

<p>若是解压缩安装，则nginx安装目录为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;usr&#x2F;local&#x2F;nginx</span><br><span class="line"># 配置文件路径为：&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;conf&#x2F;nginx.conf</span><br></pre></td></tr></table></figure>
<p>解压缩安装的nginx必须在其安装目录执行nginx命令才有效，若想在任何地方都有效则需要配置环境变量</p>
<ol>
<li><p>启动</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nginx</span><br></pre></td></tr></table></figure>
</li>
<li><p>重启</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure>
</li>
<li><p>停止</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nginx -s stop</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看nginx配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nginx -t</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h1 id="安装nodejs"><a href="#安装nodejs" class="headerlink" title="安装nodejs"></a>安装nodejs</h1><p><strong>安装命令</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install -y nodejs</span><br></pre></td></tr></table></figure>

<p><strong>检测是否安装成功</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure>

<h1 id="安装Git并配置仓库"><a href="#安装Git并配置仓库" class="headerlink" title="安装Git并配置仓库"></a>安装Git并配置仓库</h1><p><strong>1. 安装git</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum -y install git</span><br></pre></td></tr></table></figure>

<p><strong>2. 新建git用户</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adduser git</span><br></pre></td></tr></table></figure>

<p><strong>3. 为git用户添加权限</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chmod 740 &#x2F;etc&#x2F;sudoers</span><br><span class="line"></span><br><span class="line">vim &#x2F;etc&#x2F;sudoers</span><br><span class="line"></span><br><span class="line">添加 git All&#x3D;(ALL) ALL  # 为git账户添加权限</span><br><span class="line"></span><br><span class="line">chmod 400 &#x2F;etc&#x2F;sudoers</span><br><span class="line"></span><br><span class="line">passwd git # 为git用户设置密码</span><br></pre></td></tr></table></figure>

<p><img src="/2020/11/16/Hexo%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8/8.png" alt="为git用户添加权限语句"></p>
<p><img src="/2020/11/16/Hexo%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8/9.png" alt="为git用户添加权限语句"></p>
<p><strong>4. 以git用户身份登录</strong></p>
<p><img src="/2020/11/16/Hexo%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8/10.png" alt="以git用户身份登录"></p>
<p><img src="/2020/11/16/Hexo%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8/11.png" alt="以git用户身份登录"></p>
<p><strong>5. 在git用户目录下创建ssh密钥</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd ~</span><br><span class="line"></span><br><span class="line">mkdir .ssh</span><br><span class="line"></span><br><span class="line">cd .ssh</span><br><span class="line"></span><br><span class="line">vim authorized_keys</span><br><span class="line"></span><br><span class="line">添加本地Windows下已生成的密钥：位置如下图</span><br><span class="line"></span><br><span class="line">chmod 600 ~&#x2F;.ssh&#x2F;authorized_keys</span><br><span class="line"></span><br><span class="line">chmod 700 ~&#x2F;.ssh</span><br></pre></td></tr></table></figure>

<p><img src="/2020/11/16/Hexo%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8/12.png" alt="密钥地址"></p>
<p><strong>6. 创建git仓库</strong></p>
<p>（1）使用root用户登录，创建git的工作文件夹</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd &#x2F;home</span><br><span class="line">mkdir -p www&#x2F;website</span><br></pre></td></tr></table></figure>

<p>（2）使用git用户登录，初始化仓库设置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd ~</span><br><span class="line"></span><br><span class="line">git init --bare blog.git</span><br><span class="line"></span><br><span class="line">vim ~&#x2F;blog.git&#x2F;hooks&#x2F;post-receive</span><br><span class="line"></span><br><span class="line">添加 git --work-tree&#x3D;&#x2F;home&#x2F;www&#x2F;website --git-dir&#x3D;&#x2F;home&#x2F;git&#x2F;blog.git checkout -f</span><br><span class="line"></span><br><span class="line">chmod +x ~&#x2F;blog.git&#x2F;hooks&#x2F;post-receive</span><br></pre></td></tr></table></figure>

<p><strong>7. Windows主机ssh连接服务器</strong></p>
<p>（1）打开命令行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh -v git@服务器IP地址</span><br></pre></td></tr></table></figure>

<p><img src="/2020/11/16/Hexo%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8/13.png" alt="连接成功"></p>
<p>（2）前往nginx步骤第10步配置一下nginx的配置文件</p>
<h1 id="将本地hexo博客上传到服务器"><a href="#将本地hexo博客上传到服务器" class="headerlink" title="将本地hexo博客上传到服务器"></a>将本地hexo博客上传到服务器</h1><p><strong>1. 更改本地hexo配置文件</strong></p>
<p><img src="/2020/11/16/Hexo%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8/15.png" alt="更改本地hexo配置文件"></p>
<p><strong>2. 执行命令重新部署hexo</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo g -d</span><br></pre></td></tr></table></figure>

<p><img src="/2020/11/16/Hexo%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8/16.png" alt="重新部署hexo"></p>
<p><strong>3. 服务器重启nginx服务</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure>

<p><strong>4. 浏览器访问</strong></p>
<p>输入服务器地址 <a href="http://101.200.3.108" target="_blank" rel="noopener">http://101.200.3.108</a> 即可访问博客<br><img src="/2020/11/16/Hexo%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8/17.png" alt="输入服务器地址即可访问博客"></p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Maven详解</title>
    <url>/2020/12/13/Maven%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote class="blockquote-center">
<p>^ _ ^ </p>

</blockquote>
<a id="more"></a>

<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><blockquote>
<p>Maven 是一个项目管理工具，可以对 Java 项目进行构建、依赖管理<br>核心：约定大于配置</p>
</blockquote>
<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p><strong>1. 在Apache官网下下载Maven并解压</strong></p>
<p>下载地址：<a href="https://maven.apache.org/download.cgi" target="_blank" rel="noopener">https://maven.apache.org/download.cgi</a></p>
<p><img src="/2020/12/13/Maven%E8%AF%A6%E8%A7%A3/1.png" alt></p>
<p>解压到一个目录下<br><img src="/2020/12/13/Maven%E8%AF%A6%E8%A7%A3/2.png" alt></p>
<p><strong>2. 配置环境变量</strong></p>
<p><img src="/2020/12/13/Maven%E8%AF%A6%E8%A7%A3/3.png" alt></p>
<p><img src="/2020/12/13/Maven%E8%AF%A6%E8%A7%A3/4.png" alt></p>
<p>在控制台验证maven是否安装配置成功<br><img src="/2020/12/13/Maven%E8%AF%A6%E8%A7%A3/5.png" alt></p>
<p><strong>3. 配置镜像加速</strong><br>在 <strong>D:\java\apache-maven-3.6.3\conf</strong> 路径下的 <strong>settings.xml</strong> 中添加镜像地址</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirrors</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- ... --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus-aliyun<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>Nexus aliyun<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirrors</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>4. 建立本地仓库</strong><br>(1) 在 <strong>D:\java\apache-maven-3.6.3</strong> 路径下添加本地仓库文件夹 <strong>maven-repo</strong><br>(2) 在 <strong>D:\java\apache-maven-3.6.3\conf</strong> 路径下的 <strong>settings.xml</strong> 中添加本地仓库地址</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>D:\java\apache-maven-3.6.3\maven-repo<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="在IDEA中使用"><a href="#在IDEA中使用" class="headerlink" title="在IDEA中使用"></a>在IDEA中使用</h1><p><img src="/2020/12/13/Maven%E8%AF%A6%E8%A7%A3/6.png" alt></p>
<p><img src="/2020/12/13/Maven%E8%AF%A6%E8%A7%A3/7.png" alt></p>
<p><img src="/2020/12/13/Maven%E8%AF%A6%E8%A7%A3/8.png" alt></p>
<p>然后，IDEA会自动下载依赖包<br><img src="/2020/12/13/Maven%E8%AF%A6%E8%A7%A3/9.png" alt></p>
<p><strong>为项目添加文件夹</strong></p>
<blockquote>
<p>这些文件夹在普通Maven项目中会自动创建</p>
</blockquote>
<p>初始文件结构<br><img src="/2020/12/13/Maven%E8%AF%A6%E8%A7%A3/12.png" alt></p>
<p>为文件夹添加类型（可以按照下图所示方式，也可以在文件夹处右键，在弹出菜单中’Mark Directory As’中选择该文件夹的类型）<br><img src="/2020/12/13/Maven%E8%AF%A6%E8%A7%A3/13.png" alt></p>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ol>
<li><p>在IDEA中，项目创建完成后，MavenHome可能会使用IDEA默认，如果发现了这个问题，建议手动修改<br><img src="/2020/12/13/Maven%E8%AF%A6%E8%A7%A3/10.png" alt></p>
</li>
<li><p>勾选<code>Sources</code>，可以在下载jar包时同时下载它的源码，希望学习源码时可以勾选此项。<br><img src="/2020/12/13/Maven%E8%AF%A6%E8%A7%A3/11.png" alt></p>
</li>
<li><p>建议不要使用Maven-Web模板创建Web项目，直接使用普通Maven创建项目更好</p>
</li>
</ol>
<h1 id="pom标签"><a href="#pom标签" class="headerlink" title="pom标签"></a>pom标签</h1><h2 id="project"><a href="#project" class="headerlink" title="project"></a>project</h2><blockquote>
<p>maven project声明，其他标签均包含在此标签下</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0http://maven.apache.org/maven-v4_0_0.xsd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="parent"><a href="#parent" class="headerlink" title="parent"></a>parent</h2><blockquote>
<p>父项目的坐标。如果项目中没有规定某个元素的值，那么父项目中的对应值即为项目的默认值。 坐标包括group ID，artifact ID和 version</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--被继承的父项目的构件标识符 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--被继承的父项目的全球唯一标识符 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--被继承的父项目的版本 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 父项目的pom.xml文件的相对路径。相对路径允许你选择一个不同的路径。默认值是../pom.xml。Maven首先在构建当前项目的地方寻找父项 </span></span><br><span class="line"><span class="comment">        目的pom，其次在文件系统的这个位置（relativePath位置），然后在本地仓库，最后在远程仓库寻找父项目的pom。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="modelVersion"><a href="#modelVersion" class="headerlink" title="modelVersion"></a>modelVersion</h2><blockquote>
<p>声明项目描述符遵循哪一个POM模型版本。模型本身的版本很少改变，虽然如此，但它仍然是必不可少的，这是为了当Maven引入了新的特性或者其他模型变更的时候，确保稳定性。</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="groupId"><a href="#groupId" class="headerlink" title="groupId"></a>groupId</h2><blockquote>
<p>项目的全球唯一标识符，通常使用全限定的包名区分该项目和其他项目。并且构建时生成的路径也是由此生成， 如com.mycompany.app生成的相对路径为：/com/mycompany/app</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>asia.banseon<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="artifactId"><a href="#artifactId" class="headerlink" title="artifactId"></a>artifactId</h2><blockquote>
<p>构件的标识符，它和group ID一起唯一标识一个构件。换句话说，你不能有两个不同的项目拥有同样的artifact ID和groupID；在某个特定的group ID下，artifact ID也必须是唯一的。构件是项目产生的或使用的一个东西，Maven为项目产生的构件包括：JARs，源 码，二进制发布和WARs等</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>banseon-maven2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="packaging"><a href="#packaging" class="headerlink" title="packaging"></a>packaging</h2><blockquote>
<p>项目产生的构件类型，例如jar、war、ear、pom。插件可以创建他们自己的构件类型，所以前面列的不是全部构件类型</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="version"><a href="#version" class="headerlink" title="version"></a>version</h2><blockquote>
<p>项目当前版本，格式为:主版本.次版本.增量版本-限定版本号</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="name"><a href="#name" class="headerlink" title="name"></a>name</h2><blockquote>
<p>项目的名称, Maven产生的文档用</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>banseon-maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="url"><a href="#url" class="headerlink" title="url"></a>url</h2><blockquote>
<p>项目主页的URL, Maven产生的文档用</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">http://www.baidu.com/banseon</span><br></pre></td></tr></table></figure>

<h2 id="description"><a href="#description" class="headerlink" title="description"></a>description</h2><blockquote>
<p>项目的详细描述, Maven 产生的文档用。 当这个元素能够用HTML格式描述时（例如，CDATA中的文本会被解析器忽略，就可以包含HTML标签），不鼓励使用纯文本描述。如果你需要修改产生的web站点的索引页面，你应该修改你自己的索引页文件，而不是调整这里的文档。</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">description</span>&gt;</span>A maven project to study maven.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="prerequisites"><a href="#prerequisites" class="headerlink" title="prerequisites"></a>prerequisites</h2><blockquote>
<p>描述了这个项目构建环境中的前提条件</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">prerequisites</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--构建该项目或使用该插件所需要的Maven的最低版本 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">prerequisites</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="issueManagement"><a href="#issueManagement" class="headerlink" title="issueManagement"></a>issueManagement</h2><blockquote>
<p>项目的问题管理系统(Bugzilla, Jira, Scarab,或任何你喜欢的问题管理系统)的名称和URL，本例为 jira</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">issueManagement</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--问题管理系统（例如jira）的名字， --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">system</span>&gt;</span>jira<span class="tag">&lt;/<span class="name">system</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--该项目使用的问题管理系统的URL --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://jira.baidu.com/banseon<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">issueManagement</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="ciManagement"><a href="#ciManagement" class="headerlink" title="ciManagement"></a>ciManagement</h2><blockquote>
<p>项目持续集成信息</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ciManagement</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--持续集成系统的名字，例如continuum --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">system</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--该项目使用的持续集成系统的URL（如果持续集成系统有web接口的话）。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--构建完成时，需要通知的开发者/用户的配置项。包括被通知者信息和通知条件（错误，失败，成功，警告） --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">notifiers</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置一种方式，当构建中断时，以该方式通知用户/开发者 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">notifier</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--传送通知的途径 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span> /&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--发生错误时是否通知 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">sendOnError</span> /&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--构建失败时是否通知 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">sendOnFailure</span> /&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--构建成功时是否通知 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">sendOnSuccess</span> /&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--发生警告时是否通知 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">sendOnWarning</span> /&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--不赞成使用。通知发送到哪里 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">address</span> /&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--扩展配置项 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">notifier</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">notifiers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ciManagement</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="inceptionYear"><a href="#inceptionYear" class="headerlink" title="inceptionYear"></a>inceptionYear</h2><blockquote>
<p>项目创建年份，4位数字。当产生版权信息时需要使用这个值。</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">inceptionYear</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="mailingLists"><a href="#mailingLists" class="headerlink" title="mailingLists"></a>mailingLists</h2><blockquote>
<p>项目相关邮件列表信息</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mailingLists</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--该元素描述了项目相关的所有邮件列表。自动产生的网站引用这些信息。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mailingList</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--邮件的名称 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>Demo<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--发送邮件的地址或链接，如果是邮件地址，创建文档时，mailto: 链接会被自动创建 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">post</span>&gt;</span>banseon@126.com<span class="tag">&lt;/<span class="name">post</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--订阅邮件的地址或链接，如果是邮件地址，创建文档时，mailto: 链接会被自动创建 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">subscribe</span>&gt;</span>banseon@126.com<span class="tag">&lt;/<span class="name">subscribe</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--取消订阅邮件的地址或链接，如果是邮件地址，创建文档时，mailto: 链接会被自动创建 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">unsubscribe</span>&gt;</span>banseon@126.com<span class="tag">&lt;/<span class="name">unsubscribe</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--你可以浏览邮件信息的URL --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">archive</span>&gt;</span>http:/hi.baidu.com/banseon/demo/dev/<span class="tag">&lt;/<span class="name">archive</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mailingList</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mailingLists</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="developers"><a href="#developers" class="headerlink" title="developers"></a>developers</h2><blockquote>
<p>项目开发者列表</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">developers</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--某个项目开发者的信息 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">developer</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--SCM里项目开发者的唯一标识符 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>HELLO WORLD<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--项目开发者的全名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>banseon<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--项目开发者的email --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">email</span>&gt;</span>banseon@126.com<span class="tag">&lt;/<span class="name">email</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--项目开发者的主页的URL --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--项目开发者在项目中扮演的角色，角色元素描述了各种角色 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">roles</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">role</span>&gt;</span>Project Manager<span class="tag">&lt;/<span class="name">role</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">role</span>&gt;</span>Architect<span class="tag">&lt;/<span class="name">role</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">roles</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--项目开发者所属组织 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">organization</span>&gt;</span>demo<span class="tag">&lt;/<span class="name">organization</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--项目开发者所属组织的URL --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">organizationUrl</span>&gt;</span>http://hi.baidu.com/banseon<span class="tag">&lt;/<span class="name">organizationUrl</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--项目开发者属性，如即时消息如何处理等 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dept</span>&gt;</span>No<span class="tag">&lt;/<span class="name">dept</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--项目开发者所在时区， -11到12范围内的整数。 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">timezone</span>&gt;</span>-5<span class="tag">&lt;/<span class="name">timezone</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">developer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">developers</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="contributors"><a href="#contributors" class="headerlink" title="contributors"></a>contributors</h2><blockquote>
<p>项目的其他贡献者列表</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">contributors</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--项目的其他贡献者。参见developers/developer元素 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">contributor</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">email</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">organization</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">organizationUrl</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">roles</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">timezone</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">properties</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">contributor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">contributors</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="licenses"><a href="#licenses" class="headerlink" title="licenses"></a>licenses</h2><blockquote>
<p>该元素描述了项目所有License列表。 应该只列出该项目的license列表，不要列出依赖项目的 license列表。如果列出多个license，用户可以选择它们中的一个而不是接受所有license</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">licenses</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--描述了项目的license，用于生成项目的web站点的license页面，其他一些报表和validation也会用到该元素。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">license</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--license用于法律上的名称 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>Apache 2<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--官方的license正文页面的URL --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://www.baidu.com/banseon/LICENSE-2.0.txt<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--项目分发的主要方式：repo，可以从Maven库下载 manual，用户必须手动下载和安装依赖 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">distribution</span>&gt;</span>repo<span class="tag">&lt;/<span class="name">distribution</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--关于license的补充信息 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">comments</span>&gt;</span>A business-friendly OSS license<span class="tag">&lt;/<span class="name">comments</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">license</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">licenses</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="scm"><a href="#scm" class="headerlink" title="scm"></a>scm</h2><blockquote>
<p>SCM(Source Control Management)标签允许你配置你的代码库，供Maven web站点和其它插件使用。</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">scm</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--SCM的URL,该URL描述了版本库和如何连接到版本库。欲知详情，请看SCMs提供的URL格式和列表。该连接只读。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">connection</span>&gt;</span></span><br><span class="line">        scm:svn:http://svn.baidu.com/banseon/maven/banseon/banseon-maven2-trunk(dao-trunk)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">connection</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--给开发者使用的，类似connection元素。即该连接不仅仅只读 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">developerConnection</span>&gt;</span></span><br><span class="line">        scm:svn:http://svn.baidu.com/banseon/maven/banseon/dao-trunk</span><br><span class="line">    <span class="tag">&lt;/<span class="name">developerConnection</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--当前代码的标签，在开发阶段默认为HEAD --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tag</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--指向项目的可浏览SCM库（例如ViewVC或者Fisheye）的URL。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://svn.baidu.com/banseon<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">scm</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="organization"><a href="#organization" class="headerlink" title="organization"></a>organization</h2><blockquote>
<p>描述项目所属组织的各种属性。Maven产生的文档用</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">organization</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--组织的全名 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>demo<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--组织主页的URL --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://www.baidu.com/banseon<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">organization</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="build"><a href="#build" class="headerlink" title="build"></a>build</h2><blockquote>
<p>构建项目需要的信息</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--该元素设置了项目源码目录，当构建项目的时候，构建系统会编译目录里的源码。该路径是相对于pom.xml的相对路径。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sourceDirectory</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--该元素设置了项目脚本源码目录，该目录和源码目录不同：绝大多数情况下，该目录下的内容 会被拷贝到输出目录(因为脚本是被解释的，而不是被编译的)。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scriptSourceDirectory</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--该元素设置了项目单元测试使用的源码目录，当测试项目的时候，构建系统会编译目录里的源码。该路径是相对于pom.xml的相对路径。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">testSourceDirectory</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--被编译过的应用程序class文件存放的目录。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">outputDirectory</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--被编译过的测试class文件存放的目录。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">testOutputDirectory</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--使用来自该项目的一系列构建扩展 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">extensions</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--描述使用到的构建扩展。 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">extension</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--构建扩展的groupId --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span> /&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--构建扩展的artifactId --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span> /&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--构建扩展的版本 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">extension</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">extensions</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--当项目没有规定目标（Maven2 叫做阶段）时的默认值 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">defaultGoal</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--这个元素描述了项目相关的所有资源路径列表，例如和项目相关的属性文件，这些资源被包含在最终的打包文件里。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--这个元素描述了项目相关或测试相关的所有资源路径 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 描述了资源的目标路径。该路径相对target/classes目录（例如$&#123;project.build.outputDirectory&#125;）。举个例子，如果你想资源在特定的包里(org.apache.maven.messages)，你就必须该元素设置为org/apache/maven/messages。然而，如果你只是想把资源放到源码目录结构里，就不需要该配置。 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">targetPath</span> /&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--是否使用参数值代替参数名。参数值取自properties元素或者文件里配置的属性，文件在filters元素里列出。 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span> /&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--描述存放资源的目录，该路径相对POM路径 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span> /&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--包含的模式列表，例如**/*.xml. --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span> /&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--排除的模式列表，例如**/*.xml --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">excludes</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--这个元素描述了单元测试相关的所有资源路径，例如和单元测试相关的属性文件。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">testResources</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--这个元素描述了测试相关的所有资源路径，参见build/resources/resource元素的说明 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">testResource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">targetPath</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">excludes</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">testResource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">testResources</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--构建产生的所有文件存放的目录 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">directory</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--产生的构件的文件名，默认值是$&#123;artifactId&#125;-$&#123;version&#125;。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">finalName</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--当filtering开关打开时，使用到的过滤器属性文件列表 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filters</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--子项目可以引用的默认插件信息。该插件配置项直到被引用时才会被解析或绑定到生命周期。给定插件的任何本地配置都会覆盖这里的配置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--使用的插件列表 。 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--plugin元素包含描述插件所需要的信息。 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--插件在仓库里的group ID --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span> /&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--插件在仓库里的artifact ID --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span> /&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--被使用的插件的版本（或版本范围） --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span> /&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--是否从该插件下载Maven扩展（例如打包和类型处理器），由于性能原因，只有在真需要下载时，该元素才被设置成enabled。 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">extensions</span> /&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--在构建生命周期中执行一组目标的配置。每个目标可能有不同的配置。 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--execution元素包含了插件执行需要的信息 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!--执行目标的标识符，用于标识构建过程中的目标，或者匹配继承过程中需要合并的执行目标 --&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">id</span> /&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!--绑定了目标的构建生命周期阶段，如果省略，目标会被绑定到源数据里配置的默认阶段 --&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">phase</span> /&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!--配置的执行目标 --&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goals</span> /&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!--配置是否被传播到子POM --&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">inherited</span> /&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!--作为DOM对象的配置 --&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">configuration</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--项目引入插件所需要的额外依赖 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--参见dependencies/dependency元素 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                        ......</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--任何配置是否被传播到子项目 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">inherited</span> /&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--作为DOM对象的配置 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--使用的插件列表 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--参见build/pluginManagement/plugins/plugin元素 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">extensions</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">id</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">phase</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">goals</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">inherited</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">configuration</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--参见dependencies/dependency元素 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                    ......</span><br><span class="line">                <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">goals</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">inherited</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="profiles"><a href="#profiles" class="headerlink" title="profiles"></a>profiles</h2><blockquote>
<p>在列的项目构建profile，如果被激活，会修改构建处理</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--根据环境参数或命令行参数激活某个构建处理 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--构建配置的唯一标识符。即用于命令行激活，也用于在继承时合并具有相同标识符的profile。 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--自动触发profile的条件逻辑。Activation是profile的开启钥匙。profile的力量来自于它 能够在某些特定的环境中自动使用某些特定的值；这些环境通过activation元素指定。activation元素并不是激活profile的唯一方式。 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--profile默认是否激活的标志 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">activeByDefault</span> /&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--当匹配的jdk被检测到，profile被激活。例如，1.4激活JDK1.4，1.4.0_2，而!1.4激活所有版本不是以1.4开头的JDK。 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">jdk</span> /&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--当匹配的操作系统属性被检测到，profile被激活。os元素可以定义一些操作系统相关的属性。 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">os</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--激活profile的操作系统的名字 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">name</span>&gt;</span>Windows XP<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--激活profile的操作系统所属家族(如 'windows') --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">family</span>&gt;</span>Windows<span class="tag">&lt;/<span class="name">family</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--激活profile的操作系统体系结构 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">arch</span>&gt;</span>x86<span class="tag">&lt;/<span class="name">arch</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--激活profile的操作系统版本 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.2600<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">os</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--如果Maven检测到某一个属性（其值可以在POM中通过$&#123;名称&#125;引用），其拥有对应的名称和值，Profile就会被激活。如果值 字段是空的，那么存在属性名称字段就会激活profile，否则按区分大小写方式匹配属性值字段 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--激活profile的属性的名称 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">name</span>&gt;</span>mavenVersion<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--激活profile的属性的值 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>2.0.3<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--提供一个文件名，通过检测该文件的存在或不存在来激活profile。missing检查文件是否存在，如果不存在则激活 profile。另一方面，exists则会检查文件是否存在，如果存在则激活profile。 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">file</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--如果指定的文件存在，则激活profile。 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exists</span>&gt;</span>/usr/local/hudson/hudson-home/jobs/maven-guide-zh-to-production/workspace/</span><br><span class="line">                <span class="tag">&lt;/<span class="name">exists</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--如果指定的文件不存在，则激活profile。 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">missing</span>&gt;</span>/usr/local/hudson/hudson-home/jobs/maven-guide-zh-to-production/workspace/</span><br><span class="line">                <span class="tag">&lt;/<span class="name">missing</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--构建项目所需要的信息。参见build元素 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">defaultGoal</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">targetPath</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">filtering</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">directory</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">includes</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">excludes</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">testResources</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">testResource</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">targetPath</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">filtering</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">directory</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">includes</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">excludes</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">testResource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">testResources</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">finalName</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filters</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--参见build/pluginManagement/plugins/plugin元素 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">groupId</span> /&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">artifactId</span> /&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">version</span> /&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">extensions</span> /&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">id</span> /&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">phase</span> /&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">goals</span> /&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">inherited</span> /&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">configuration</span> /&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">                            <span class="comment">&lt;!--参见dependencies/dependency元素 --&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                                ......</span><br><span class="line">                            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goals</span> /&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">inherited</span> /&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">configuration</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--参见build/pluginManagement/plugins/plugin元素 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">version</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">extensions</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">id</span> /&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">phase</span> /&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goals</span> /&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">inherited</span> /&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">configuration</span> /&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!--参见dependencies/dependency元素 --&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                            ......</span><br><span class="line">                        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">goals</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">inherited</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">configuration</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--模块（有时称作子项目） 被构建成项目的一部分。列出的每个模块元素是指向该模块的目录的相对路径 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">modules</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--发现依赖和扩展的远程仓库列表。 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--参见repositories/repository元素 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">releases</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">enabled</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">updatePolicy</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">checksumPolicy</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">enabled</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">updatePolicy</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">checksumPolicy</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">id</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">name</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">url</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">layout</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--发现插件的远程仓库列表，这些插件用于构建和报表 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--包含需要连接到远程插件仓库的信息.参见repositories/repository元素 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">releases</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">enabled</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">updatePolicy</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">checksumPolicy</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">enabled</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">updatePolicy</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">checksumPolicy</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">id</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">name</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">url</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">layout</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--该元素描述了项目相关的所有依赖。 这些依赖组成了项目构建过程中的一个个环节。它们自动从项目定义的仓库中下载。要获取更多信息，请看项目依赖机制。 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--参见dependencies/dependency元素 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                ......</span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--不赞成使用. 现在Maven忽略该元素. --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">reports</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--该元素包括使用报表插件产生报表的规范。当用户执行"mvn site"，这些报表就会运行。 在页面导航栏能看到所有报表的链接。参见reporting元素 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">reporting</span>&gt;</span></span><br><span class="line">            ......</span><br><span class="line">        <span class="tag">&lt;/<span class="name">reporting</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--参见dependencyManagement元素 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--参见dependencies/dependency元素 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                    ......</span><br><span class="line">                <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--参见distributionManagement元素 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">distributionManagement</span>&gt;</span></span><br><span class="line">            ......</span><br><span class="line">        <span class="tag">&lt;/<span class="name">distributionManagement</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--参见properties元素 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">properties</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="modules"><a href="#modules" class="headerlink" title="modules"></a>modules</h2><blockquote>
<p>模块（有时称作子项目） 被构建成项目的一部分。列出的每个模块元素是指向该模块的目录的相对路径</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">modules</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="repositories"><a href="#repositories" class="headerlink" title="repositories"></a>repositories</h2><blockquote>
<p>发现依赖和扩展的远程仓库列表</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--包含需要连接到远程仓库的信息 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--如何处理远程仓库里发布版本的下载 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">releases</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--true或者false表示该仓库是否为下载某种类型构件（发布版，快照版）开启。 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">enabled</span> /&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--该元素指定更新发生的频率。Maven会比较本地POM和远程POM的时间戳。这里的选项是：always（一直），daily（默认，每日），interval：X（这里X是以分钟为单位的时间间隔），或者never（从不）。 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">updatePolicy</span> /&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--当Maven验证构件校验文件失败时该怎么做：ignore（忽略），fail（失败），或者warn（警告）。 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">checksumPolicy</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 如何处理远程仓库里快照版本的下载。有了releases和snapshots这两组配置，POM就可以在每个单独的仓库中，为每种类型的构件采取不同的 </span></span><br><span class="line"><span class="comment">            策略。例如，可能有人会决定只为开发目的开启对快照版本下载的支持。参见repositories/repository/releases元素 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">enabled</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">updatePolicy</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">checksumPolicy</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--远程仓库唯一标识符。可以用来匹配在settings.xml文件里配置的远程仓库 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>banseon-repository-proxy<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--远程仓库名称 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>banseon-repository-proxy<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--远程仓库URL，按protocol://hostname/path形式 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://192.168.1.169:9999/repository/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 用于定位和排序构件的仓库布局类型-可以是default（默认）或者legacy（遗留）。Maven 2为其仓库提供了一个默认的布局；然 </span></span><br><span class="line"><span class="comment">            而，Maven 1.x有一种不同的布局。我们可以使用该元素指定布局是default（默认）还是legacy（遗留）。 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">layout</span>&gt;</span>default<span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="pluginRepositories"><a href="#pluginRepositories" class="headerlink" title="pluginRepositories"></a>pluginRepositories</h2><blockquote>
<p>发现插件的远程仓库列表，这些插件用于构建和报表</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--包含需要连接到远程插件仓库的信息.参见repositories/repository元素 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">        ......</span><br><span class="line">    <span class="tag">&lt;/<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">pluginRepositories</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="dependencies"><a href="#dependencies" class="headerlink" title="dependencies"></a>dependencies</h2><blockquote>
<p>该元素描述了项目相关的所有依赖。 这些依赖组成了项目构建过程中的一个个环节。它们自动从项目定义的仓库中下载。</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--依赖的group ID --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--依赖的artifact ID --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-artifact<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--依赖的版本号。 在Maven 2里, 也可以配置成版本号的范围。 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 依赖类型，默认类型是jar。它通常表示依赖的文件的扩展名，但也有例外。一个类型可以被映射成另外一个扩展名或分类器。类型经常和使用的打包方式对应， </span></span><br><span class="line"><span class="comment">            尽管这也有例外。一些类型的例子：jar，war，ejb-client和test-jar。如果设置extensions为 true，就可以在 plugin里定义新的类型。所以前面的类型的例子不完整。 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">type</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 依赖的分类器。分类器可以区分属于同一个POM，但不同构建方式的构件。分类器名被附加到文件名的版本号后面。例如，如果你想要构建两个单独的构件成 </span></span><br><span class="line"><span class="comment">            JAR，一个使用Java 1.4编译器，另一个使用Java 6编译器，你就可以使用分类器来生成两个单独的JAR构件。 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">classifier</span>&gt;</span><span class="tag">&lt;/<span class="name">classifier</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--依赖范围。在项目发布过程中，帮助决定哪些构件被包括进来。欲知详情请参考依赖机制。 - compile ：默认范围，用于编译 - provided：类似于编译，但支持你期待jdk或者容器提供，类似于classpath </span></span><br><span class="line"><span class="comment">            - runtime: 在执行时需要使用 - test: 用于test任务时使用 - system: 需要外在提供相应的元素。通过systemPath来取得 </span></span><br><span class="line"><span class="comment">            - systemPath: 仅用于范围为system。提供相应的路径 - optional: 当项目自身被依赖时，标注依赖是否传递。用于连续依赖时使用 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--仅供system范围使用。注意，不鼓励使用这个元素，并且在新的版本中该元素可能被覆盖掉。该元素为依赖规定了文件系统上的路径。需要绝对路径而不是相对路径。推荐使用属性匹配绝对路径，例如$&#123;java.home&#125;。 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">systemPath</span>&gt;</span><span class="tag">&lt;/<span class="name">systemPath</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--当计算传递依赖时， 从依赖构件列表里，列出被排除的依赖构件集。即告诉maven你只依赖指定的项目，不依赖项目的依赖。此元素主要用于解决版本冲突问题 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--可选依赖，如果你在项目B中把C依赖声明为可选，你就需要在依赖于B的项目（例如项目A）中显式的引用对C的依赖。可选依赖阻断依赖的传递性。 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="reporting"><a href="#reporting" class="headerlink" title="reporting"></a>reporting</h2><blockquote>
<p>该元素描述使用报表插件产生报表的规范。当用户执行”mvn site”，这些报表就会运行。 在页面导航栏能看到所有报表的链接。</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">reporting</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--true，则，网站不包括默认的报表。这包括"项目信息"菜单中的报表。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">excludeDefaults</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--所有产生的报表存放到哪里。默认值是$&#123;project.build.directory&#125;/site。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">outputDirectory</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--使用的报表插件和他们的配置。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--plugin元素包含描述报表插件需要的信息 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--报表插件在仓库里的group ID --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span> /&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--报表插件在仓库里的artifact ID --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span> /&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--被使用的报表插件的版本（或版本范围） --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span> /&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--任何配置是否被传播到子项目 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">inherited</span> /&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--报表插件的配置 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span> /&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--一组报表的多重规范，每个规范可能有不同的配置。一个规范（报表集）对应一个执行目标 。例如，有1，2，3，4，5，6，7，8，9个报表。1，2，5构成A报表集，对应一个执行目标。2，5，8构成B报表集，对应另一个执行目标 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">reportSets</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--表示报表的一个集合，以及产生该集合的配置 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">reportSet</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--报表集合的唯一标识符，POM继承时用到 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">id</span> /&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--产生报表集合时，被使用的报表的配置 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">configuration</span> /&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--配置是否被继承到子POMs --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">inherited</span> /&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--这个集合里使用到哪些报表 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">reports</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">reportSet</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">reportSets</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">reporting</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="dependencyManagement"><a href="#dependencyManagement" class="headerlink" title="dependencyManagement"></a>dependencyManagement</h2><blockquote>
<p>继承自该项目的所有子项目的默认依赖信息。这部分的依赖信息不会被立即解析,而是当子项目声明一个依赖（必须描述group ID和 artifact ID信息），如果group ID和artifact ID以外的一些信息没有描述，则通过group ID和artifact ID 匹配到这里的依赖，并使用这里的依赖信息。</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--参见dependencies/dependency元素 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            ......</span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="distributionManagement"><a href="#distributionManagement" class="headerlink" title="distributionManagement"></a>distributionManagement</h2><blockquote>
<p>项目分发信息，在执行mvn deploy后表示要发布的位置。有了这些信息就可以把网站部署到远程服务器或者把构件部署到远程仓库。</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">distributionManagement</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--部署项目产生的构件到远程仓库需要的信息 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--是分配给快照一个唯一的版本号（由时间戳和构建流水号）？还是每次都使用相同的版本号？参见repositories/repository元素 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">uniqueVersion</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>banseon-maven2<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>banseon maven2<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>file://$&#123;basedir&#125;/target/deploy<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">layout</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--构件的快照部署到哪里？如果没有配置该元素，默认部署到repository元素配置的仓库，参见distributionManagement/repository元素 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">snapshotRepository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">uniqueVersion</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>banseon-maven2<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>Banseon-maven2 Snapshot Repository<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>scp://svn.baidu.com/banseon:/usr/local/maven-snapshot<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">layout</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">snapshotRepository</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--部署项目的网站需要的信息 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">site</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--部署位置的唯一标识符，用来匹配站点和settings.xml文件里的配置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>banseon-site<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--部署位置的名称 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>business api website<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--部署位置的URL，按protocol://hostname/path形式 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span></span><br><span class="line">            scp://svn.baidu.com/banseon:/var/www/localhost/banseon-web</span><br><span class="line">        <span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">site</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--项目下载页面的URL。如果没有该元素，用户应该参考主页。使用该元素的原因是：帮助定位那些不在仓库里的构件（由于license限制）。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">downloadUrl</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--如果构件有了新的group ID和artifact ID（构件移到了新的位置），这里列出构件的重定位信息。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relocation</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--构件新的group ID --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--构件新的artifact ID --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--构件新的版本号 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--显示给用户的，关于移动的额外信息，例如原因。 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">message</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">relocation</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 给出该构件在远程仓库的状态。不得在本地项目中设置该元素，因为这是工具自动更新的。有效的值有：none（默认），converted（仓库管理员从 </span></span><br><span class="line"><span class="comment">        Maven 1 POM转换过来），partner（直接从伙伴Maven 2仓库同步过来），deployed（从Maven 2实例部 署），verified（被核实时正确的和最终的）。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">status</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">distributionManagement</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="properties"><a href="#properties" class="headerlink" title="properties"></a>properties</h2><blockquote>
<p>以值替代名称，Properties可以在整个POM中使用，也可以作为触发条件（见settings.xml配置文件里activation元素的说明）。格式是&lt;name&gt;value&lt;/name&gt;</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h1><p>Maven 有以下三个标准的生命周期：</p>
<ul>
<li><strong>clean</strong>：项目清理的处理</li>
<li>default(或 <strong>build</strong>)：项目部署的处理</li>
<li><strong>site</strong>：项目站点文档创建的处理</li>
</ul>
<blockquote>
<p>在一个生命周期中，运行某个阶段的时候，它之前的所有阶段都会被运行</p>
</blockquote>
<h2 id="clean"><a href="#clean" class="headerlink" title="clean"></a>clean</h2><p>Maven 调用 clean 生命周期，它包含以下阶段：<br><strong>pre-clean</strong>：执行一些需要在clean之前完成的工作<br><strong>clean</strong>：移除所有上一次构建生成的文件<br><strong>post-clean</strong>：执行一些需要在clean之后立刻完成的工作</p>
<h2 id="build-1"><a href="#build-1" class="headerlink" title="build"></a>build</h2><table>
<thead>
<tr>
<th>生命周期阶段</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>validate（校验）</td>
<td>校验项目是否正确并且所有必要的信息可以完成项目的构建过程。</td>
</tr>
<tr>
<td>initialize（初始化）</td>
<td>初始化构建状态，比如设置属性值。</td>
</tr>
<tr>
<td>generate-sources（生成源代码）</td>
<td>生成包含在编译阶段中的任何源代码。</td>
</tr>
<tr>
<td>process-sources（处理源代码）</td>
<td>处理源代码，比如说，过滤任意值。</td>
</tr>
<tr>
<td>generate-resources（生成资源文件）</td>
<td>生成将会包含在项目包中的资源文件。</td>
</tr>
<tr>
<td>process-resources （处理资源文件）</td>
<td>复制和处理资源到目标目录，为打包阶段最好准备。</td>
</tr>
<tr>
<td>compile（编译）</td>
<td>编译项目的源代码。</td>
</tr>
<tr>
<td>process-classes（处理类文件）</td>
<td>处理编译生成的文件，比如说对Java class文件做字节码改善优化。</td>
</tr>
<tr>
<td>generate-test-sources（生成测试源代码）</td>
<td>生成包含在编译阶段中的任何测试源代码。</td>
</tr>
<tr>
<td>process-test-sources（处理测试源代码）</td>
<td>处理测试源代码，比如说，过滤任意值。</td>
</tr>
<tr>
<td>generate-test-resources（生成测试资源文件）</td>
<td>为测试创建资源文件。</td>
</tr>
<tr>
<td>process-test-resources（处理测试资源文件）</td>
<td>复制和处理测试资源到目标目录。</td>
</tr>
<tr>
<td>test-compile（编译测试源码）</td>
<td>编译测试源代码到测试目标目录.</td>
</tr>
<tr>
<td>process-test-classes（处理测试类文件）</td>
<td>处理测试源码编译生成的文件。</td>
</tr>
<tr>
<td>test（测试）</td>
<td>使用合适的单元测试框架运行测试（Juint是其中之一）。</td>
</tr>
<tr>
<td>prepare-package（准备打包）</td>
<td>在实际打包之前，执行任何的必要的操作为打包做准备。</td>
</tr>
<tr>
<td>package（打包）</td>
<td>将编译后的代码打包成可分发格式的文件，比如JAR、WAR或者EAR文件。</td>
</tr>
<tr>
<td>pre-integration-test（集成测试前）</td>
<td>在执行集成测试前进行必要的动作。比如说，搭建需要的环境。</td>
</tr>
<tr>
<td>integration-test（集成测试）</td>
<td>处理和部署项目到可以运行集成测试环境中。</td>
</tr>
<tr>
<td>post-integration-test（集成测试后）</td>
<td>在执行集成测试完成后进行必要的动作。比如说，清理集成测试环境。</td>
</tr>
<tr>
<td>verify （验证）</td>
<td>运行任意的检查来验证项目包有效且达到质量标准。</td>
</tr>
<tr>
<td>install（安装）</td>
<td>安装项目包到本地仓库，这样项目包可以用作其他本地项目的依赖。</td>
</tr>
<tr>
<td>deploy（部署）</td>
<td>将最终的项目包复制到远程仓库中与其他开发者和项目共享。</td>
</tr>
</tbody></table>
<p><img src="/2020/12/13/Maven%E8%AF%A6%E8%A7%A3/14.png" alt></p>
<h2 id="site"><a href="#site" class="headerlink" title="site"></a>site</h2><p>Maven Site 插件一般用来创建新的报告文档、部署站点等。</p>
<ul>
<li><strong>pre-site</strong>：执行一些需要在生成站点文档之前完成的工作</li>
<li><strong>site</strong>：生成项目的站点文档</li>
<li><strong>post-site</strong>： 执行一些需要在生成站点文档之后完成的工作，并且为部署做准备</li>
<li><strong>site-deploy</strong>：将生成的站点文档部署到特定的服务器上</li>
</ul>
<h1 id="仓库"><a href="#仓库" class="headerlink" title="仓库"></a>仓库</h1><p>Maven 仓库是项目中依赖的第三方库，这个库所在的位置叫做仓库。Maven 仓库能帮助我们管理构件（主要是JAR），它就是放置所有JAR文件（WAR，ZIP，POM等等）的地方。Maven 仓库有三种类型：</p>
<ul>
<li>本地（local）</li>
<li>中央（central）</li>
<li>远程（remote）</li>
</ul>
<h2 id="本地仓库"><a href="#本地仓库" class="headerlink" title="本地仓库"></a>本地仓库</h2><ul>
<li>Maven 的本地仓库，在安装 Maven 后并不会创建，它是在第一次执行 maven 命令的时候才被创建。</li>
<li>默认情况下，maven 本地仓库被创建在 %USER_HOME% 目录下，每个用户在自己的用户目录下都有一个路径名为 .m2/respository/ 的仓库目录</li>
<li>要修改默认位置，在 %M2_HOME%\conf 目录中的 Maven 的 settings.xml 文件中定义另一个路径，标签为<code>localRepository</code></li>
</ul>
<h2 id="中央仓库"><a href="#中央仓库" class="headerlink" title="中央仓库"></a>中央仓库</h2><ul>
<li>Maven 中央仓库是由 Maven 社区提供的仓库，其中包含了大量常用的库。</li>
<li>中央仓库包含了绝大多数流行的开源Java构件，以及源码、作者信息、SCM、信息、许可证信息等。一般来说，简单的Java项目依赖的构件都可以在这里下载到。</li>
<li>这个仓库由 Maven 社区管理，不需要配置，但需要通过网络才能访问</li>
</ul>
<h2 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h2><blockquote>
<p>它是开发人员自己定制仓库，包含了所需要的代码库或者其他工程中用到的 jar 文</p>
</blockquote>
<p><strong>示例</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>companyname.lib1<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://download.companyname.org/maven2/lib1<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>companyname.lib2<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://download.companyname.org/maven2/lib2<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="Maven-依赖搜索顺序"><a href="#Maven-依赖搜索顺序" class="headerlink" title="Maven 依赖搜索顺序"></a>Maven 依赖搜索顺序</h2><ul>
<li><strong>步骤 1</strong> － 在本地仓库中搜索，如果找不到，执行步骤 2，如果找到了则执行其他操作。</li>
<li><strong>步骤 2</strong> － 在中央仓库中搜索，如果找不到，并且有一个或多个远程仓库已经设置，则执行步骤 4，如果找到了则下载到本地仓库中以备将来引用。</li>
<li><strong>步骤 3</strong> － 如果远程仓库没有被设置，Maven 将简单的停滞处理并抛出错误（无法找到依赖的文件）。</li>
<li><strong>步骤 4</strong> － 在一个或多个远程仓库中搜索依赖的文件，如果找到则下载到本地仓库以备将来引用，否则 Maven 将停止处理并抛出错误（无法找到依赖的文件）。</li>
</ul>
<h1 id="引入外部依赖"><a href="#引入外部依赖" class="headerlink" title="引入外部依赖"></a>引入外部依赖</h1><blockquote>
<p>如果我们需要引入第三库文件到项目，该怎么操作呢？<br>      – pom.xml 的 dependencies 列表列出了我们的项目需要构建的所有外部依赖项</p>
</blockquote>
<p><strong>1. 要添加依赖项，我们一般是先在 src 文件夹下添加 lib 文件夹，然后将你工程需要的 jar 文件复制到 lib 文件夹下</strong><br><img src="/2020/12/13/Maven%E8%AF%A6%E8%A7%A3/15.png" alt></p>
<p><strong>2. 然后添加以下依赖到 pom.xml 文件中</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 在这里添加你的依赖 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ldapjdk<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  <span class="comment">&lt;!-- 库名称，也可以自定义 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ldapjdk<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>    <span class="comment">&lt;!--库名称，也可以自定义--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span> <span class="comment">&lt;!--版本号--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>system<span class="tag">&lt;/<span class="name">scope</span>&gt;</span> <span class="comment">&lt;!--作用域--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">systemPath</span>&gt;</span>$&#123;basedir&#125;\src\lib\ldapjdk.jar<span class="tag">&lt;/<span class="name">systemPath</span>&gt;</span> <span class="comment">&lt;!--项目根目录下的lib文件夹下--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="快照-SNAPSHOT"><a href="#快照-SNAPSHOT" class="headerlink" title="快照(SNAPSHOT)"></a>快照(SNAPSHOT)</h1><ul>
<li>对于版本，如果 Maven 以前下载过指定的版本文件，Maven 将不会再从仓库下载新的可用的 1.0 文件。若要下载更新的代码，除非版本升级到1.1。</li>
<li>快照的情况下，每次构建项目时，Maven 将自动获取最新的快照。</li>
</ul>
<h1 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h1><p>菜鸟教程：<a href="https://www.runoob.com/maven/maven-tutorial.html" target="_blank" rel="noopener">https://www.runoob.com/maven/maven-tutorial.html</a></p>
]]></content>
      <categories>
        <category>JavaEE</category>
      </categories>
      <tags>
        <tag>Maven</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux命令</title>
    <url>/2020/11/15/Linux%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote class="blockquote-center">
<p>^ _ ^ </p>

</blockquote>
<a id="more"></a>

<h1 id="文件管理"><a href="#文件管理" class="headerlink" title="文件管理"></a>文件管理</h1><h2 id="文件基本属性"><a href="#文件基本属性" class="headerlink" title="文件基本属性"></a>文件基本属性</h2><p><strong>属性组成</strong></p>
<p>| 文件类型 | 文件权限 | 所属组权限 | 其他用户权限 | </p>
<h3 id="基本文件类型"><a href="#基本文件类型" class="headerlink" title="基本文件类型"></a>基本文件类型</h3><ul>
<li>d：目录</li>
<li>-：普通文件</li>
<li>l：链接文件</li>
<li>b：block，块设备</li>
<li>c：char，字符型设备</li>
</ul>
<h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><p><strong>更改文件属组</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chgrp [-R] 属组名 文件名</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chown [-R] 属组名 文件名</span><br></pre></td></tr></table></figure>

<p><strong>更改文件属性</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chmod [-R] xyz 文件或目录</span><br><span class="line"># xyz是数字，r-4,w-2,x-1</span><br></pre></td></tr></table></figure>

<h2 id="普通文件和目录文件管理"><a href="#普通文件和目录文件管理" class="headerlink" title="普通文件和目录文件管理"></a>普通文件和目录文件管理</h2><h3 id="创建目录"><a href="#创建目录" class="headerlink" title="创建目录"></a>创建目录</h3><p><strong>创建目录 mkdir</strong></p>
<table>
<thead>
<tr>
<th>常用选项</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>-m</td>
<td>配置目录权限</td>
</tr>
<tr>
<td>-p</td>
<td>递归创建目录</td>
</tr>
</tbody></table>
<h3 id="创建文件"><a href="#创建文件" class="headerlink" title="创建文件"></a>创建文件</h3><p><strong>创建文件 touch</strong></p>
<h3 id="删除目录和文件"><a href="#删除目录和文件" class="headerlink" title="删除目录和文件"></a>删除目录和文件</h3><p><strong>删除空目录 rmdir</strong></p>
<table>
<thead>
<tr>
<th>常用选项</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>-p</td>
<td>递归删除目录</td>
</tr>
</tbody></table>
<p><strong>删除非空目录和文件 rm</strong></p>
<table>
<thead>
<tr>
<th>常用选项</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>-p</td>
<td>递归删除目录</td>
</tr>
<tr>
<td>-i</td>
<td>删除文件前进行询问</td>
</tr>
<tr>
<td>-f</td>
<td>与 -i 相对，删除前不进行询问直接删除</td>
</tr>
</tbody></table>
<h3 id="查看目录"><a href="#查看目录" class="headerlink" title="查看目录"></a>查看目录</h3><p><strong>列出目录 ls</strong></p>
<table>
<thead>
<tr>
<th>常用选项</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>-a</td>
<td>全部文件</td>
</tr>
<tr>
<td>-l</td>
<td>长数据串列出</td>
</tr>
</tbody></table>
<p><strong>显示当前目录 pwd</strong></p>
<table>
<thead>
<tr>
<th>常用选项</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>-p</td>
<td>如果是链接的话，显示真实地址</td>
</tr>
</tbody></table>
<h3 id="查看文件"><a href="#查看文件" class="headerlink" title="查看文件"></a>查看文件</h3><p><strong>1.全文显示 cat</strong></p>
<p><strong>2.全文行倒序显示 tac</strong></p>
<p><strong>3.全文显示（附行号） nl</strong></p>
<p><strong>4.按页显示（可向后翻动） more</strong></p>
<p><strong>5.按页显示（可前后翻动） less</strong></p>
<p><strong>6.显示头几行 head</strong></p>
<p><strong>7.显示尾几行 tail</strong></p>
<h3 id="修改目录和文件"><a href="#修改目录和文件" class="headerlink" title="修改目录和文件"></a>修改目录和文件</h3><p><strong>复制目录和文件 cp</strong></p>
<table>
<thead>
<tr>
<th>常用选项</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>-p</td>
<td>连同文件属性一起复制</td>
</tr>
<tr>
<td>-r</td>
<td>递归复制</td>
</tr>
<tr>
<td>-i</td>
<td>目标档已存在时，询问用户意愿</td>
</tr>
<tr>
<td>-f</td>
<td>与 -i 相对：目标档已存在时，不询问用户直接覆盖已有目标档</td>
</tr>
<tr>
<td>-d</td>
<td>若来源档为 link file，则复制链接而不是文档本身</td>
</tr>
<tr>
<td>-l</td>
<td>进行硬链接创建，而非复制文件本身</td>
</tr>
<tr>
<td>-s</td>
<td>复制称为符号链接档</td>
</tr>
</tbody></table>
<p><strong>移动目录和文件（或修改名称） mv</strong></p>
<table>
<thead>
<tr>
<th>常用选项</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>-i</td>
<td>目标文件已存在时，询问用户下一步操作</td>
</tr>
<tr>
<td>-f</td>
<td>与 -i 相对：目标文件已存在时，不询问用户而是直接覆盖</td>
</tr>
</tbody></table>
<h1 id="Vim"><a href="#Vim" class="headerlink" title="Vim"></a>Vim</h1><p>Vim的三种模式：</p>
<ul>
<li>命令模式：一般用于移动光标、删除复制数据</li>
<li>插入模式：编写文档时的模式</li>
<li>指令行模式：输入命令会在底部栏显示，编写时通常先输入一个：</li>
</ul>
<h2 id="移动光标"><a href="#移动光标" class="headerlink" title="移动光标"></a>移动光标</h2><table>
<thead>
<tr>
<th>键</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>上下左右箭头</td>
<td>光标上下左右移动</td>
</tr>
<tr>
<td>h</td>
<td>左</td>
</tr>
<tr>
<td>j</td>
<td>下</td>
</tr>
<tr>
<td>k</td>
<td>右</td>
</tr>
<tr>
<td>l</td>
<td>上</td>
</tr>
<tr>
<td>+</td>
<td>移动到非空格符的下一行</td>
</tr>
<tr>
<td>-</td>
<td>移动到非空格符的上一行</td>
</tr>
<tr>
<td>n &lt;space&gt;</td>
<td>n为具体数字，&lt;space&gt;为空格；光标向右移动n个字符</td>
</tr>
<tr>
<td>0</td>
<td>移动到行首</td>
</tr>
<tr>
<td>$</td>
<td>移动到行尾</td>
</tr>
<tr>
<td>H</td>
<td>移动到屏幕最上方一行的首字母</td>
</tr>
<tr>
<td>M</td>
<td>移动到屏幕中央一行的首字母</td>
</tr>
<tr>
<td>L</td>
<td>移动到屏幕最下方一行的首字母</td>
</tr>
<tr>
<td>G</td>
<td>移动都文档最后一行</td>
</tr>
<tr>
<td>nG</td>
<td>n为具体数字；移动到文档的第一行</td>
</tr>
<tr>
<td>gg</td>
<td>移动到文档的第一行</td>
</tr>
<tr>
<td>n &lt;Enter&gt;</td>
<td>n为具体数字；向下移动n行</td>
</tr>
</tbody></table>
<h2 id="文档修改"><a href="#文档修改" class="headerlink" title="文档修改"></a>文档修改</h2><table>
<thead>
<tr>
<th>键</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>x</td>
<td>向后删除一个字符</td>
</tr>
<tr>
<td>nx</td>
<td>向后删除n个字符</td>
</tr>
<tr>
<td>dd</td>
<td>删除光标所在行</td>
</tr>
<tr>
<td>ndd</td>
<td>删除光标所在的向下n行</td>
</tr>
<tr>
<td>d1G</td>
<td>删除光标所在到第一行之间的所有数据</td>
</tr>
<tr>
<td>dG</td>
<td>删除光标所在到最后一行的所有数据</td>
</tr>
<tr>
<td>d$</td>
<td>删除光标所在到该行最后一个字符</td>
</tr>
<tr>
<td>d0</td>
<td>删除光标所在到该行的第一个字符</td>
</tr>
<tr>
<td>yy</td>
<td>复制光标所在行</td>
</tr>
<tr>
<td>nyy</td>
<td>复制光标向下n行</td>
</tr>
<tr>
<td>y1G</td>
<td>复制光标所在到第一行之间的所有数据</td>
</tr>
<tr>
<td>yG</td>
<td>复制光标所在到最后一行的所有数据</td>
</tr>
<tr>
<td>y$</td>
<td>复制光标所在到该行最后一个字符</td>
</tr>
<tr>
<td>y0</td>
<td>复制光标所在到该行的第一个字符</td>
</tr>
<tr>
<td>p</td>
<td>将剪贴板的数据粘贴到光标所在下一行</td>
</tr>
<tr>
<td>J</td>
<td>将光标所在行与下一行数据结合成同一行</td>
</tr>
<tr>
<td>u</td>
<td>复原前一个动作</td>
</tr>
<tr>
<td>[Ctrl] + r</td>
<td>重复上一个动作</td>
</tr>
</tbody></table>
<h2 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h2><table>
<thead>
<tr>
<th>键</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>/word</td>
<td>向下查找word</td>
</tr>
<tr>
<td>?word</td>
<td>向上查找word</td>
</tr>
<tr>
<td>n</td>
<td>继续向下查找</td>
</tr>
<tr>
<td>N</td>
<td>继续向上查找</td>
</tr>
</tbody></table>
<h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><table>
<thead>
<tr>
<th>命令</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>i</td>
<td>从光标处开始插入</td>
</tr>
<tr>
<td>I</td>
<td>从目前行的第一个非空格符处开始插入</td>
</tr>
<tr>
<td>a</td>
<td>从光标的下一个字符开始输入</td>
</tr>
<tr>
<td>A</td>
<td>从光标所在行最后一个字符处开始输入</td>
</tr>
<tr>
<td>o</td>
<td>从光标所在的下一行输入新的一行</td>
</tr>
<tr>
<td>O</td>
<td>从光标所在行的上一行输入新的一行</td>
</tr>
<tr>
<td>r</td>
<td>进入取代模式，取代一个字符</td>
</tr>
<tr>
<td>R</td>
<td>进入取代模式，一直取代，直到输入Esc键</td>
</tr>
</tbody></table>
<h2 id="指令行模式命令"><a href="#指令行模式命令" class="headerlink" title="指令行模式命令"></a>指令行模式命令</h2><table>
<thead>
<tr>
<th>指令</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>:w</td>
<td>保存</td>
</tr>
<tr>
<td>:q</td>
<td>退出</td>
</tr>
<tr>
<td>:wq!</td>
<td>保存并退出（强制）</td>
</tr>
<tr>
<td>:w filename</td>
<td>将编辑后的数据存储为另一个文档</td>
</tr>
<tr>
<td>:r filename</td>
<td>将另一个文档的数据读入本文档</td>
</tr>
<tr>
<td>:n1,n2 w filename</td>
<td>将n1到n2行存储为另一个文档</td>
</tr>
<tr>
<td>:! command</td>
<td>command是系统命令，比如 ls /home</td>
</tr>
<tr>
<td>:set nu</td>
<td>显示行号</td>
</tr>
<tr>
<td>:set nonu</td>
<td>不显示行号</td>
</tr>
</tbody></table>
<h1 id="账号管理及账号组管理"><a href="#账号管理及账号组管理" class="headerlink" title="账号管理及账号组管理"></a>账号管理及账号组管理</h1><p><strong>相关文件</strong></p>
<ul>
<li>保存账号信息的文件：/etc/passwd</li>
<li>保存账号组信息的文件：/etc/group</li>
<li>保存账号密码的文件：/etc/shadow</li>
</ul>
<h2 id="添加账号"><a href="#添加账号" class="headerlink" title="添加账号"></a>添加账号</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">useradd [选项] 用户名</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>选项</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>-c</td>
<td>添加注释性描述</td>
</tr>
<tr>
<td>-d</td>
<td>指定用户主目录</td>
</tr>
<tr>
<td>-m</td>
<td>用户主目录不存在则自动创建</td>
</tr>
<tr>
<td>-s</td>
<td>指定用户登录Shell</td>
</tr>
<tr>
<td>-g</td>
<td>指令用户所属用户组</td>
</tr>
<tr>
<td>-u</td>
<td>指定用户号</td>
</tr>
</tbody></table>
<h2 id="切换账号"><a href="#切换账号" class="headerlink" title="切换账号"></a>切换账号</h2><ol>
<li><p>切换到普通用户</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">su username</span><br></pre></td></tr></table></figure>
</li>
<li><p>切换到root用户</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo su</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="删除用户账号"><a href="#删除用户账号" class="headerlink" title="删除用户账号"></a>删除用户账号</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">userdel [选项] 用户名</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>选项</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>-r</td>
<td>把用户主目录一起删除</td>
</tr>
</tbody></table>
<h2 id="修改账号"><a href="#修改账号" class="headerlink" title="修改账号"></a>修改账号</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">usermod [选项] 用户名</span><br></pre></td></tr></table></figure>

<p>选项与useradd中的一致</p>
<h2 id="用户口令"><a href="#用户口令" class="headerlink" title="用户口令"></a>用户口令</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">passwd [选项] 用户名</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>选项</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>-l</td>
<td>锁定口令，禁用账号</td>
</tr>
<tr>
<td>-u</td>
<td>口令解锁</td>
</tr>
<tr>
<td>-d</td>
<td>使账号无口令，仍是一种禁用手段</td>
</tr>
<tr>
<td>-f</td>
<td>强迫用户下次登录时修改口令</td>
</tr>
</tbody></table>
<h2 id="添加用户组"><a href="#添加用户组" class="headerlink" title="添加用户组"></a>添加用户组</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">groupadd [选项] 用户组</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>选项</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>-g</td>
<td>指令用户组的组标识号</td>
</tr>
<tr>
<td>-o</td>
<td>与 -g 同时使用，表示新用户组的GID与系统已有用户组的GID相同</td>
</tr>
</tbody></table>
<h2 id="删除用户组"><a href="#删除用户组" class="headerlink" title="删除用户组"></a>删除用户组</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">groupdel [选项] 用户组</span><br></pre></td></tr></table></figure>

<h2 id="修改用户组"><a href="#修改用户组" class="headerlink" title="修改用户组"></a>修改用户组</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">groupmod [选项] 用户组</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>选项</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>-g</td>
<td>指令用户组的组标识号</td>
</tr>
<tr>
<td>-o</td>
<td>与 -g 同时使用，表示新用户组的GID与系统已有用户组的GID相同</td>
</tr>
<tr>
<td>-n</td>
<td>将用户组的名字改为新名字</td>
</tr>
</tbody></table>
<h2 id="切换组"><a href="#切换组" class="headerlink" title="切换组"></a>切换组</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">newgrp root</span><br></pre></td></tr></table></figure>

<h1 id="磁盘管理"><a href="#磁盘管理" class="headerlink" title="磁盘管理"></a>磁盘管理</h1><h2 id="文件系统"><a href="#文件系统" class="headerlink" title="文件系统"></a>文件系统</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">df [选项]</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>选项</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>-a</td>
<td>列出所有文件系统</td>
</tr>
<tr>
<td>-k</td>
<td>以 KB 的形式显示容量</td>
</tr>
<tr>
<td>-m</td>
<td>以 MB 的形式显示容量</td>
</tr>
<tr>
<td>-h</td>
<td>以人们容易阅读的格式（KB,MB,GB）自行显示</td>
</tr>
<tr>
<td>-H</td>
<td>以 M = 1000K 代替 M = 1024K 显示</td>
</tr>
<tr>
<td>-T</td>
<td>显示文件系统类型</td>
</tr>
<tr>
<td>-i</td>
<td>不用硬盘容量，而以inode的数量来显示</td>
</tr>
</tbody></table>
<h2 id="磁盘空间"><a href="#磁盘空间" class="headerlink" title="磁盘空间"></a>磁盘空间</h2><p><strong>磁盘空间查看</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">du [选项]</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>选项</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>-a</td>
<td>列出所有文件和目录容量，默认时仅统计目录底下的文件量</td>
</tr>
<tr>
<td>-k</td>
<td>以 KB 的形式显示容量</td>
</tr>
<tr>
<td>-m</td>
<td>以 MB 的形式显示容量</td>
</tr>
<tr>
<td>-h</td>
<td>以人们容易阅读的容量格式显示</td>
</tr>
<tr>
<td>-s</td>
<td>只列出总容量</td>
</tr>
<tr>
<td>-S</td>
<td>不包括子目录下的总计</td>
</tr>
</tbody></table>
<p><strong>磁盘挂载</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mount 装置文件名 挂载点</span><br></pre></td></tr></table></figure>

<p><strong>磁盘卸载</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">unmount 装置名称或挂载点</span><br></pre></td></tr></table></figure>

<h1 id="线程管理"><a href="#线程管理" class="headerlink" title="线程管理"></a>线程管理</h1><p><strong>查看当前运行的进程</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ps [选项]</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>选项</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>-a</td>
<td>显示当前终端运行的所有进程信息</td>
</tr>
<tr>
<td>-u</td>
<td>以用户信息显示进程</td>
</tr>
<tr>
<td>-x</td>
<td>显示后台运行进程的参数</td>
</tr>
</tbody></table>
<p><strong>查看父进程</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ps -ef</span><br></pre></td></tr></table></figure>

<p><strong>查看进程树</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pstree [选项]</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>选项</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>-p</td>
<td>显示父id</td>
</tr>
<tr>
<td>-u</td>
<td>显示用户组</td>
</tr>
</tbody></table>
<p><strong>结束进程</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kill -9 进程id</span><br></pre></td></tr></table></figure>

<h1 id="系统信息"><a href="#系统信息" class="headerlink" title="系统信息"></a>系统信息</h1><ol>
<li><p>查看处理器版本</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">uname -p</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看内核版本</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">uname -r</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看主机名</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">uname -n</span><br><span class="line">hostname</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看语言字符集</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo $LANG</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看服务器开机时长</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">uptime</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看CPU信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">grep &#39;model name&#39; &#x2F;proc&#x2F;cpuinfo|awk -F: &#39;&#123;print $2&#125;&#39;|uniq</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看CPU位数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">getconf LONG_BIT</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看内存信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sed -n &#39;&#x2F;MemTotal\|MemFree&#x2F;p&#39; &#x2F;proc&#x2F;meminfo</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看交换区</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sed -n &#39;&#x2F;SwapTotal\|SwapFree&#x2F;p&#39; &#x2F;proc&#x2F;meminfo</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看服务器IP地址</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ifconfig|grep &#39;inet&#39;|grep -v &#39;127.0.0.1&#39;|awk &#39;&#123;print $2&#125;&#39;</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看防火墙开启的端口</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">firewall-cmd --list-ports</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看linux网关</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">route | grep default</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看linux端口</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">netstat -lntp # 查看所有监听端口</span><br><span class="line">netstat -antp # 查看所有建立的TCP连接</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看服务器DNS配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat &#x2F;etc&#x2F;resolv.conf</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看防火墙规则</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">iptables -L</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看路由表</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">route -n</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看网络统计信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">netstat -s</span><br></pre></td></tr></table></figure>

</li>
</ol>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Netty</title>
    <url>/2020/11/03/Netty/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote class="blockquote-center">
<p>^ _ ^ </p>

</blockquote>

<a id="more"></a>

<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Netty是JBoss提供的一个Java开源框架，主要针对在TCP协议下，面向Client端的高并发应用，或者点对点场景下的大量数据持续的传输。Netty本质上是一个NIO框架，封装了进行NIO的一系列操作。</p>
<p><img src="/2020/11/03/Netty/1.png" alt="IO封装层次"></p>
<p><strong>Netty的实际应用</strong></p>
<ul>
<li>大数据领域：Apache-Flink、Apache-Spark</li>
<li>游戏领域：联机游戏</li>
<li>互联网领域：分布式系统中结点之间的远程调用，如Dubbo</li>
</ul>
<p>一般来说，需要用到高并发网络通信的地方都需要用到Netty</p>
<p><strong>推荐书籍</strong><br>Netty实战、Netty权威指南</p>
<h1 id="Java-IO模型"><a href="#Java-IO模型" class="headerlink" title="Java IO模型"></a>Java IO模型</h1><p>Java支持三种网络IO模型，分别是BIO（阻塞IO）,NIO（非阻塞IO）,AIO（异步非阻塞IO，但只在windows系统上适用）</p>
<h2 id="BIO模型"><a href="#BIO模型" class="headerlink" title="BIO模型"></a>BIO模型</h2><p><img src="/2020/11/03/Netty/2.png" alt="BIO工作机制"></p>
<p>工作机制：</p>
<ol>
<li>Server启动一个监听线程监听Client请求</li>
<li>对于每一个可接收的Client请求，Server将创建一个线程与客户端进行通信</li>
</ol>
<p>弊端：</p>
<ol>
<li>每个通信线程都是阻塞式的，如果和客户端交流并不频繁，则CPU浪费率很大</li>
<li>对于每一个客户端都需要新建一个线程，当客户端很多是，系统负荷太大</li>
</ol>
<p>应用场景：连接数目较小且固定的场景</p>
<h2 id="NIO模型"><a href="#NIO模型" class="headerlink" title="NIO模型"></a>NIO模型</h2><p><img src="/2020/11/03/Netty/3.png" alt="NIO工作机制"></p>
<p>工作机制：</p>
<ol>
<li>Server启动一个Channel Manager作为所有通信通道的管理者</li>
<li>每个Client若希望与Server进行网络IO通信，则它会将希望进行的操作（如读、写、建立连接等）在Channel Manager处注册一个Channel</li>
<li>Channel Manager会不断轮询所有注册在册的Channel，若这个Channel中有事件发生，则对这个事件进行处理</li>
<li>处理事件的线程既可以是Channel Manager所处线程，也可以是从线程池中取一个线程来进行处理（通常这种方式更高效）</li>
</ol>
<p>Channel Manager通常被称作<code>Selector</code>，除此之外，NIO的核心组件还包括<code>Buffer</code>,<code>Channel</code>。<br>Buffer在上图中未表现，它实际上是Channel和Socket之间的缓冲区。</p>
<p>应用场景：连接数目较多且连接比较短的场景，如聊天服务器、弹幕系统、服务器之间的通讯等</p>
<h3 id="Buffer"><a href="#Buffer" class="headerlink" title="Buffer"></a>Buffer</h3><p>Buffer是缓冲区，正是因为NIO模型具有Buffer，因此它是基于块的读写，相比于BIO基于流的读写更有效率。Buffer类派生了IntBuffer,ByteBuffer等子类，所有Buffer类保存数据的底层结构都是数组。</p>
<p><strong>Buffer类的核心属性</strong></p>
<table>
<thead>
<tr>
<th>属性</th>
<th>描述</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>capacity</td>
<td>容量</td>
<td>可容纳的最大数据量，在缓冲区创建时设定，设定后不可改变</td>
</tr>
<tr>
<td>limit</td>
<td>缓冲区当前终点</td>
<td>不能对缓冲区中超过limit的位置进行读写，limit是可以修改的</td>
</tr>
<tr>
<td>position</td>
<td>位置</td>
<td>下一个读/写元素的索引</td>
</tr>
<tr>
<td>mark</td>
<td>标记</td>
<td>可以在某些位置设置一些标记以方便用户操作</td>
</tr>
</tbody></table>
<h3 id="Channel"><a href="#Channel" class="headerlink" title="Channel"></a>Channel</h3><p>相比于流只能单向操作（读或者写），而通道支持同时读写。在NIO中，Channel从Buffer中读数据（write(ByteBuffer src)），写数据到Buffer中(read(ByteBuffer dst))。<br>Channel是NIO中的一个接口，常用的Channel类如下：</p>
<ul>
<li>ServerSocketChannel：对应服务器监听客户请求Socket</li>
<li>SocketChannel：对应Server-Client通信Socket</li>
<li>DatagramChannel：对应UDP数据报通信</li>
<li>FileChannel：对应文件读写</li>
</ul>
<h3 id="Selector"><a href="#Selector" class="headerlink" title="Selector"></a>Selector</h3><p>在NIO模型中充当一个管理者的角色，将不断轮询所有在它这注册过的channel，当channel处有事件发生时，通知相应程序来处理事件。这种机制使得服务器一个线程可以负责与多个客户端之间的通信，其中每个线程对应一个Selector。</p>
<p><strong>Selector常见操作</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 创建一个Selector</span><br><span class="line">Selector selector &#x3D; Selector.open();</span><br><span class="line">&#x2F;&#x2F; 将一个channel注册到selector上</span><br><span class="line">channel.register(selector,SelectorKey.OP_XXXX,[Buffer]);</span><br><span class="line">&#x2F;&#x2F; selector进行轮询</span><br><span class="line">selector.select([time(ms)]);</span><br><span class="line">&#x2F;&#x2F; 获取Selector上所有有事件发生的SelectionKey（每个SelectionKey与一个注册事件相关联）</span><br><span class="line">Set&lt;SelectionKey&gt; selectionKeys &#x3D; selector.selectedKeys();</span><br><span class="line">&#x2F;&#x2F; 获取Selector上所有注册的SelectionKey</span><br><span class="line">Set&lt;SelectionKey&gt; selectionKeys &#x3D; selector.keys();</span><br><span class="line">&#x2F;&#x2F; 根据SelectionKey获取关联的Channel</span><br><span class="line">channel &#x3D; key.channel();</span><br><span class="line">&#x2F;&#x2F; 根据key获取关联channel的buffer</span><br><span class="line">buffer &#x3D; key.attachment();</span><br></pre></td></tr></table></figure>

<h3 id="NIO与零拷贝"><a href="#NIO与零拷贝" class="headerlink" title="NIO与零拷贝"></a>NIO与零拷贝</h3><blockquote>
<p>零拷贝并不意味着拷贝数目为0，而意味着CPU拷贝次数为0</p>
</blockquote>
<p><strong>传统网络通信IO过程</strong></p>
<p><img src="/2020/11/03/Netty/4.png" alt="传统IO"></p>
<ol>
<li>数据一开始是存在于硬件驱动（<code>Hard Driver</code>）中的</li>
<li>通过DMA将硬件中的数据传输到操作系统的内核空间里的缓冲区（<code>Kernel Buffer</code>）</li>
<li>通过CPU总线将内核空间中的数据复制到用户空间里的缓冲区（<code>User Buffer</code>）</li>
<li>通过CPU总线将用户空间的数据复制到内核空间中的套接字缓冲区（<code>Socket Buffer</code>）中</li>
<li>套接字缓冲区再将数据复制到协议栈引擎（<code>Protocol Engine</code>）中</li>
</ol>
<p>传统IO过程经历了4次复制，3次（用户态和内核态的）上下文切换</p>
<p><strong>mmap优化</strong></p>
<p><img src="/2020/11/03/Netty/5.png" alt="mmap优化"></p>
<p>mmap通过内存映射，将文件映射到内核缓冲区。同时，用户空间可以共享内核空间的数据。这样，在网络传输过程中，就可以减少一次内核空间到用户空间的拷贝。<br>mmap优化后网络通信过程经历了3次复制，3次上下文切换</p>
<p><strong>sendFile优化</strong></p>
<p><img src="/2020/11/03/Netty/6.png" alt="sendFile优化"></p>
<p>Linux2.1提供了sendFile函数，使得内核缓冲区中的数据可以不经过用户态直接拷贝到socket缓冲区内。<br>sendFile优化后网络通信过程经历了3次复制，2次上下文切换</p>
<p><strong>零拷贝</strong></p>
<p><img src="/2020/11/03/Netty/7.png" alt="零拷贝"></p>
<p>Linux2.4对sendFile函数做了优化，避免了从内核缓冲区将数据拷贝到socket缓冲区的操作，直接将内核缓冲区中的数据拷贝到了协议栈。这里其实有一次cpu拷贝（kernel buffer–&gt;socket buffer），但拷贝的信息很少（如length,offset），消耗低，可以忽略。<br>这种方式可以近似经历了2次复制，2次上下文切换</p>
<h2 id="AIO模型"><a href="#AIO模型" class="headerlink" title="AIO模型"></a>AIO模型</h2><p>AIO引入了异步通道的概念，采用Proactor模式，简化了程序编写：有效的请求才启动线程，它的特点是先由操作系统完成后才通知服务端启动线程去处理。</p>
<p>应用场景：连接数目比较多且连接比较长的场景，如相册服务器</p>
<h1 id="Reactor模式"><a href="#Reactor模式" class="headerlink" title="Reactor模式"></a>Reactor模式</h1><p>Reactor模式是一种设计模式，它是基于事件驱动的，可以并发的处理多个服务请求，当请求抵达后，依据多路复用策略，同步的派发这些请求至相关的请求处理程序。</p>
<p><img src="/2020/11/03/Netty/9.png" alt="Reactor模式"></p>
<ul>
<li><strong>Handle</strong>：操作系统的一种资源，用于表示一个事件（在网络编程中可以是连接事件、写事件、读事件）</li>
<li><strong>Synchronous Event Demultiplexer</strong>：本质上是一个系统调用，用于等待事件的发生。调用方在调用它是会阻塞，直到同步事件分离器上有事件发生</li>
<li><strong>Initiation Dispatcher</strong>：定义了一些控制事件的调度规范，提供事件管理。</li>
<li><strong>Event Handler</strong>：事件处理器的接口</li>
<li><strong>Concrete Event Handler</strong>：事件处理器的实现</li>
</ul>
<p><strong>Reactor模式的工作流程</strong></p>
<ol>
<li>初始化Initiation Dispatcher，若干个Concret Event Handler注册到Dispatcher中（希望Dispatcher会在注册的事件发生时通知自己）</li>
<li>Initiation Dispatcher会要求每个Handler向其传递内部Handle，操作系统可以通过Handle标识对应的Handler</li>
<li>当所有Concret Event Handler注册完毕，Initiation Dispatcher将启动循环，使用Synchronous Event Demultiplexer等待事件的发生</li>
<li>当某个Handle发生时，Synchronous Event Demultiplexer会通知Initiation Dispatcher</li>
<li>Initiation Dispatcher再调用相应的Handler回调方法处理这个事件</li>
</ol>
<h2 id="单Reactor单线程"><a href="#单Reactor单线程" class="headerlink" title="单Reactor单线程"></a>单Reactor单线程</h2><p><img src="/2020/11/03/Netty/8.png" alt="单Reactor单线程"></p>
<p><strong>工作机制</strong></p>
<ol>
<li>Reactor通过select监听客户端请求事件，当有事件发生时，调用dispatcher进行分发</li>
<li>如果是建立连接请求事件，则Acceptor通过accept处理连接请求事件，然后创建一个Handler对象处理完成连接后的各种事件</li>
<li>如果不是连接请求，则由Reactor分发调用对应的Handler进行处理</li>
</ol>
<p>Reactor和Handler都在同一线程中，说明当Handler在处理时，Reactor是不能工作的，那么此时到来的客户端请求就会被阻塞。</p>
<h2 id="单Reactor多线程"><a href="#单Reactor多线程" class="headerlink" title="单Reactor多线程"></a>单Reactor多线程</h2><p><img src="/2020/11/03/Netty/10.png" alt="单Reactor多线程"></p>
<p><strong>工作机制</strong></p>
<ol>
<li>Reactor通过select监听客户端请求事件，当有事件发生时，调用dispatcher进行分发</li>
<li>如果是建立连接请求事件，则Acceptor通过accept处理连接请求事件，然后创建一个Handler对象处理完成连接后的各种事件</li>
<li>如果不是连接请求，则由Reactor分发调用对应的Handler进行处理</li>
<li>Handler只负责响应事件，不做具体的业务处理。响应事件的Handler，会在读完数据后，分发给工作线程池中的某个线程处理具体的业务逻辑</li>
<li>工作线程池会分配独立线程完成真正的业务，并将结果返回给Handler</li>
<li>Handler收到响应后，通过send方法将结果返回给客户端</li>
</ol>
<h2 id="主从Reactor多线程"><a href="#主从Reactor多线程" class="headerlink" title="主从Reactor多线程"></a>主从Reactor多线程</h2><p><img src="/2020/11/03/Netty/11.png" alt="主从Reactor多线程"></p>
<p><strong>工作机制</strong></p>
<ol>
<li>Reactor主线程MainReactor对象通过select监听事件，收到连接事件后，通过Acceptor处理</li>
<li>当Acceptor处理完连接事件后，MainReactor将连接分配给SubReactor</li>
<li>SubReactor将连接放入连接队列中进行监听，并创建Handler进行各种事件处理</li>
<li>当有事件发生时，SubReactor就会调用对应的Handler进行处理</li>
<li>Handler通过read读取事件，然后分发给工作线程处理</li>
<li>工作线程池分配独立的工作线程进行业务处理，返回结果给Handler</li>
<li>Handler收到响应的结果后，再通过send方法将结果返回给Client</li>
</ol>
<p>MainReactor可以关联多个SubReactor</p>
<h1 id="Netty模型"><a href="#Netty模型" class="headerlink" title="Netty模型"></a>Netty模型</h1><p><img src="/2020/11/03/Netty/12.png" alt="Netty模型"></p>
<ul>
<li>Netty抽象出两组线程池<ul>
<li>BossGroup专门负责处理与客户端之间的连接；</li>
<li>WorkGroup专门负责网络读写</li>
<li>BossGroup和WorkGroup类型都是NioEventLoopGroup</li>
</ul>
</li>
<li>NioEventLoopGroup相当于一个事件循环组，这个组中包含多个事件循环，每个循环都是一个NioEventLoop</li>
<li>NioEventLoop表示一个不断循环的执行处理任务的线程，每个NioEventLoop上都有一个Selector，用于绑定在其上的socket网络通信</li>
<li>NioEventLoopGroup可以有多个线程，即可以含有多个NioEventLoop</li>
<li>每个Work NioEventLoop处理业务时，会使用PipeLine（管道），PipeLine中包含了Channel（即可以通过PipeLine获取对应的Channel），同时管道中维护了很多Handler（处理器）</li>
</ul>
<p><strong>数量关系</strong></p>
<ul>
<li>NioEventLoopGroup下包含多个NioEventLoop</li>
<li>每个NioEventLoop包含一个Selector，一个TaskQueue</li>
<li>每个Selector上可以注册多个NioChannel</li>
<li>每个NioChannel只会绑定在唯一的Selector上</li>
<li>每个NioChannel都绑定一个自己的ChannelPipeLine</li>
</ul>
<p><strong>Boss NioEventLoop执行步骤</strong></p>
<ol>
<li>轮询accept事件</li>
<li>处理accept事件，与Client建立连接，生成NioSocketChannel，并将其注册到某个Work NioEventLoop上的Selector</li>
<li>处理任务队列的任务，即runAllTasks</li>
</ol>
<p><strong>Work NioEventLoop执行步骤</strong></p>
<ol>
<li>轮询read/write事件</li>
<li>处理IO事件（即read/write事件），在对应的NioSocketChannel上进行处理</li>
<li>处理任务队列的其他任务，即runAllTasks</li>
</ol>
<h1 id="Netty核心组件"><a href="#Netty核心组件" class="headerlink" title="Netty核心组件"></a>Netty核心组件</h1><h2 id="EventLoopGroup"><a href="#EventLoopGroup" class="headerlink" title="EventLoopGroup"></a>EventLoopGroup</h2><p>EventLoopGroup是一个接口，常用实现类为NioEventLoopGroup。</p>
<ul>
<li>BossGroup和WorkerGroup都属于NioEventLoopGroup类，一个EventLoopGroup中可以包含多个EventLoop，具体数目默认为8，也可在创建时由程序员配置</li>
<li>一般将BossGroup配置1个EventLoop，对应着一个Selector，一个ServerSocketChannel，处理来自客户端的连接事件</li>
<li>如果连接结果是OP_ACCEPT，则交由Acceptor进行处理，否则则交给WorkerGroup处理后续I/O操作</li>
<li>WorkerGroup对应多个EventLoop，每个EventLoop对应着一个Selector，每个Selector轮询注册到此EventLoop上的所有Channel</li>
<li>EventLoopGroup具有next方法，返回下一个EventLoop</li>
</ul>
<p><img src="/2020/11/03/Netty/15.png" alt="EventLoopGroup"></p>
<p><strong>创建方法</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; nThread默认个数为8</span><br><span class="line">NioEventLoopGroup bossGroup &#x3D; new NioEventLoopGroup(1);</span><br><span class="line">NioEventLoopGroup workerGroup &#x3D; new NioEventLoopGroup();</span><br></pre></td></tr></table></figure>

<p><strong>关闭方法</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">group.shutdownGracefully();</span><br></pre></td></tr></table></figure>

<h2 id="Bootstrap"><a href="#Bootstrap" class="headerlink" title="Bootstrap"></a>Bootstrap</h2><p>Bootstrap的意思是引导，Netty程序通常是从一个Bootstrap开始，用作配置整个Netty程序。其中，服务端程序使用的是ServerBootstrap，客户端使用的是Bootstrap。</p>
<p><strong>常见方法</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; Server端使用ServerBootstrap配置两个EventLoopGroup</span><br><span class="line">serverBootstrap.group(bossGroup,workerGroup);</span><br><span class="line">&#x2F;&#x2F; 客户端使用Bootstrap配置一个EventLoopGroup</span><br><span class="line">boostrap.group(workerGroup);</span><br><span class="line">&#x2F;&#x2F; 配置一个通道实现</span><br><span class="line">channel(Class channelClass)</span><br><span class="line">&#x2F;&#x2F; 用来给ServerChannel添加配置</span><br><span class="line">option(ChannelOption&lt;T&gt; option,T value)</span><br><span class="line">&#x2F;&#x2F; 用来给接收到的通道添加配置</span><br><span class="line">childOption(ChannelOption&lt;T&gt; option,T value)</span><br><span class="line">&#x2F;&#x2F; 为bossGroup中的事件添加业务处理类</span><br><span class="line">handler(ChannelHandler handler)</span><br><span class="line">&#x2F;&#x2F; 为workerGroup中的事件添加业务处理类</span><br><span class="line">childHandler(ChannelHandler handler)</span><br><span class="line">&#x2F;&#x2F; 用于服务器端，占用端口号</span><br><span class="line">ChannelFuture bind(int inetPort)</span><br><span class="line">&#x2F;&#x2F; 用于客户端，连接服务器</span><br><span class="line">ChannelFuture connect(String inetHost,int inetPort)</span><br></pre></td></tr></table></figure>

<h2 id="ChannelOption"><a href="#ChannelOption" class="headerlink" title="ChannelOption"></a>ChannelOption</h2><p><strong>SO_BACKLOG</strong><br>对应TCP/IP协议中的listen函数的backlog参数，用来初始化服务器可连接队列大小。服务端对客户端的请求是顺序处理的，且在同一时间只能处理一个客户端的连接请求。当服务端正在处理连接请求时，有新的连接请求到来则会被放入可连接队列中等待。</p>
<p><strong>SO_KEEPALIVE</strong><br>设置为true的话则代表一直保持连接状态</p>
<h2 id="ChannelFuture"><a href="#ChannelFuture" class="headerlink" title="ChannelFuture"></a>ChannelFuture</h2><p>Netty中所有的IO操作的异步的，若想知道消息是否被正确处理，就需要通过ChannelFuture注册一个监听，当操作完成时监听会自动触发注册的监听事件。</p>
<p><strong>异步机制</strong><br>当异步执行某个操作时，当前线程不需要等待操作完成。当前线程调用此操作会立即得到一个返回的Future接口，然后此操作（任务）会在其他线程中执行。通过调用Future接口中的一系列方法此可以知道任务异步执行的情况，同时也可以通过添加监听器的方式来指示任务异步完成后自动执行的回调函数。</p>
<p><strong>Future-Listener机制</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 绑定一个端口并且同步</span><br><span class="line">ChannelFuture channelFuture &#x3D; bootstrap.bind(6668).sync();</span><br><span class="line">&#x2F;&#x2F; 注册监听函数执行完成后的操作</span><br><span class="line">channelFuture.addListener(new ChannelFutureListener() &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void operationComplete(ChannelFuture channelFuture) throws Exception &#123;</span><br><span class="line">        if(channelFuture.isSuccess())&#123;</span><br><span class="line">            System.out.println(&quot;服务器绑定端口成功&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            System.out.println(&quot;服务器绑定端口失败&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="ChannelHandler"><a href="#ChannelHandler" class="headerlink" title="ChannelHandler"></a>ChannelHandler</h2><p>ChannelHandler是一个接口，处理或拦截I/O事件，并将其转发到ChannelPipeLine（业务处理链）中的下一个处理程序</p>
<p><img src="/2020/11/03/Netty/13.png" alt="接口和类一览图"></p>
<p>以客户端为例：</p>
<ul>
<li>出站：如果事件的运动方向是从客户端到服务端，则称这些事件为出站</li>
<li>入站：如果事件的运动方向是从服务端到客户端，则称这些事件为入站</li>
</ul>
<h2 id="ChannelPipeline"><a href="#ChannelPipeline" class="headerlink" title="ChannelPipeline"></a>ChannelPipeline</h2><p><img src="/2020/11/03/Netty/14.png" alt="ChannelPipeline结构"></p>
<p>入站和出站事件在一个双向链表中：</p>
<ul>
<li>入站事件会从链表head往后传递到最后一个入站的handler；</li>
<li>出站事件会从链表tail往前传递到最前一个出站的handler。</li>
<li>两种类型的handler互不影响，因为入站handler和出站handler分别保存在两条不同的双向链表中<ul>
<li>入站handler实现ChannelInboundHandler&lt;C&gt;接口，如解码器</li>
<li>出站handler实现ChannelOutboundHandler&lt;C&gt;接口，如编码器</li>
<li>C代表通道类型，在网络通信中一般是SocketChannel</li>
</ul>
</li>
</ul>
<h2 id="TaskQueue"><a href="#TaskQueue" class="headerlink" title="TaskQueue"></a>TaskQueue</h2><p>任务队列保存某些了耗时长的业务操作，TaskQueue中的任务会异步执行。在Netty模型中，TaskQueue有一个线程，它会不断从队头取一个任务进行执行。</p>
<p><strong>将任务加入TaskQueue的方法</strong></p>
<p>方案1：用户程序自定义普通任务</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ctx.channel().eventLoop().excute(new Runnable()&#123;</span><br><span class="line">  @Override</span><br><span class="line">  public void run()&#123;</span><br><span class="line">    &#x2F;&#x2F; 耗时长的业务操作</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>方案2：用户自定义定时任务</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 该任务是提交到scheduleTaskQueue</span><br><span class="line">ctx.channel().eventLoop().schedule(new Runnable()&#123;</span><br><span class="line">  @Override</span><br><span class="line">  public void run()&#123;</span><br><span class="line">    &#x2F;&#x2F; 耗时长的业务操作</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,5,TimeUnit,SECONDS);</span><br></pre></td></tr></table></figure>

<p>方案3：非当前Reactor线程调用Channel中的各种方法<br>一般是用在推送系统中。做法是用一个集合类保存需要推送消息的Channel，在需要推送时，遍历这个集合，获取每个Channel，然后调用eventLoop()函数获得他们所在的NioEventLoop，在对应的TaskQueue或ScheduleTaskQueue中加入任务。</p>
<h2 id="Unpooled"><a href="#Unpooled" class="headerlink" title="Unpooled"></a>Unpooled</h2><p>Unpooled类是Netty提供的一个专门用来操纵缓冲区的工具类</p>
<p>ByteBuf底层是一个数组，因此创建时可以指定其大小</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ByteBuf buf &#x3D; Unpooled.buffer(10);</span><br></pre></td></tr></table></figure>

<p>在Netty中，ByteBuf不需要flip进行反转。Netty底层通过维护readIndex,writeIndex,capacity三个变量来控制读写区域。其中[0,readIndex)表示已读取区域； [readIndex,writeIndex)表示可读区域； [writeIndex,capacity)表示可写区域。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">buf.writeByte(i); &#x2F;&#x2F; 写入数据</span><br><span class="line">buf.readByte();   &#x2F;&#x2F; 读取数据</span><br></pre></td></tr></table></figure>

<h1 id="Netty编码解码"><a href="#Netty编码解码" class="headerlink" title="Netty编码解码"></a>Netty编码解码</h1><p>在编写网络应用程序时，由于数据在网络中都是以二进制形式进行传输，因此在发送数据时就需要将业务数据编码成字节码，在接收数据后就需要将字节码解码成业务数据。<br>codec（编解码器）由两部分组成，分别是：decoder(解码器);encoder(编码器)</p>
<p><img src="/2020/11/03/Netty/16.png" alt="数据传输过程"></p>
<p><strong>Netty自身编码解码机制和问题</strong></p>
<ol>
<li>Netty自身提供了一些codec<ul>
<li>StringEncoder、StringDecoder：字符串编码、解码器</li>
<li>ObjectEncoder、ObjectDecoder：Java对象编码、解码器</li>
</ul>
</li>
<li>Netty本身自带的Java对象编码、解码器底层使用的是序列化技术，此技术存在一些问题<ul>
<li>Java序列化技术效率不高</li>
<li>无法跨语言</li>
<li>序列化后体积太大，是二进制编码的5倍多</li>
</ul>
</li>
<li>新的解决方案是Google的Protobuf</li>
</ol>
<h2 id="Protobuf"><a href="#Protobuf" class="headerlink" title="Protobuf"></a>Protobuf</h2><p>Protobuf是谷歌发布的开源项目，全称Google Protocol Buffers，是一种轻便高效的结构化数据存储格式，可以用于结构化数据串行化（序列化）。<br>它很适合做数据存储或者RPC(Remote Procedure Call)数据交换格式。目前很多公司都从http+json的方式转换到tcp+protobuf的方式。</p>
<p><strong>ProtoBuf在java中的使用原理</strong></p>
<ul>
<li>将类的定义通过.proto文件进行描述</li>
<li>然后通过protoc.exe编译器根据.proto自动生成.java文件</li>
</ul>
<p><strong>ProtoBuf在IDEA中使用步骤</strong></p>
<ol>
<li><p>在pom.xml中添加protobuf-java依赖</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.google.protobuf&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;protobuf-java&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.13.0&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>编写.proto文件</p>
</li>
<li><p>在pom.xml文件中添加编译插件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;build&gt;</span><br><span class="line">    &lt;plugins&gt;</span><br><span class="line">        &lt;plugin&gt;</span><br><span class="line">            &lt;groupId&gt;org.xolstice.maven.plugins&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;protobuf-maven-plugin&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;version&gt;0.6.1&lt;&#x2F;version&gt;</span><br><span class="line"></span><br><span class="line">            &lt;configuration&gt;</span><br><span class="line">                &lt;protocExecutable&gt;</span><br><span class="line">                    D:\protoc-3.13.0\bin\protoc.exe  &lt;!-- 刚刚环境变量配置的位置 --&gt;</span><br><span class="line">                &lt;&#x2F;protocExecutable&gt;</span><br><span class="line">                &lt;pluginId&gt;protoc-java&lt;&#x2F;pluginId&gt;</span><br><span class="line">                &lt;!-- proto文件放置的目录 --&gt;</span><br><span class="line">                &lt;protoSourceRoot&gt;$&#123;project.basedir&#125;&#x2F;src&#x2F;main&#x2F;java&#x2F;com&#x2F;dynner&#x2F;netty&#x2F;codec2&lt;&#x2F;protoSourceRoot&gt;</span><br><span class="line">                &lt;!-- 生成文件的目录 --&gt;</span><br><span class="line">                &lt;outputDirectory&gt;$&#123;project.basedir&#125;&#x2F;src&#x2F;main&#x2F;java&#x2F;com&#x2F;dynner&#x2F;netty&#x2F;codec2&lt;&#x2F;outputDirectory&gt;</span><br><span class="line">                &lt;!-- 生成文件前是否把目标目录清空，这个最好设置为false，以免误删项目文件 --&gt;</span><br><span class="line">                &lt;clearOutputDirectory&gt;false&lt;&#x2F;clearOutputDirectory&gt;</span><br><span class="line">            &lt;&#x2F;configuration&gt;</span><br><span class="line">            &lt;executions&gt;</span><br><span class="line">                &lt;execution&gt;</span><br><span class="line">                    &lt;goals&gt;</span><br><span class="line">                        &lt;goal&gt;compile&lt;&#x2F;goal&gt;</span><br><span class="line">                    &lt;&#x2F;goals&gt;</span><br><span class="line">                &lt;&#x2F;execution&gt;</span><br><span class="line">            &lt;&#x2F;executions&gt;</span><br><span class="line">        &lt;&#x2F;plugin&gt;</span><br><span class="line">    &lt;&#x2F;plugins&gt;</span><br><span class="line">&lt;&#x2F;build&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>利用Maven项目编译</p>
</li>
</ol>
<p><img src="/2020/11/03/Netty/17.png" alt="利用proto文件生成java文件"></p>
<h2 id="ByteToMessageDecoder"><a href="#ByteToMessageDecoder" class="headerlink" title="ByteToMessageDecoder"></a>ByteToMessageDecoder</h2><p><img src="/2020/11/03/Netty/18.png" alt="ByteToMessageDecoder继承关系"></p>
<p>由于不知道远程节点是否会一次性发送一个完整消息，TCP可能会出现粘包拆包问题。这个类会对入站数据进行缓冲，知道它准备好被处理。</p>
<h2 id="handler链中的解码编码handler"><a href="#handler链中的解码编码handler" class="headerlink" title="handler链中的解码编码handler"></a>handler链中的解码编码handler</h2><ul>
<li>不论解码handler还是编码handler，接收的消息必须与待处理的消息类型一致，否则handler不会被执行</li>
<li>在解码器进行解码时，需要判断缓存（ByteBuf）的数据是否足够，否则接收到的结果可能会与期望的结果不一致</li>
</ul>
<h2 id="Netty其他常用编码、解码器"><a href="#Netty其他常用编码、解码器" class="headerlink" title="Netty其他常用编码、解码器"></a>Netty其他常用编码、解码器</h2><p><strong>ReplayingDecoder</strong><br>ReplayingDecoder&lt;S&gt; 扩展了ByteToMessageDecoder类</p>
<ul>
<li>优点<ul>
<li>不必调用readableBytes方法人工判定缓存中数据量是否足够做转换</li>
<li>参数S指定了用户状态管理类型（void表示不需要状态管理）</li>
</ul>
</li>
<li>缺点<ul>
<li>并不是所有ByteBuf操作都支持</li>
<li>某些情况下速度比ByteToMessageDecoder慢</li>
</ul>
</li>
</ul>
<p><strong>LineBasedFrameDecoder</strong><br>使用行尾控制符（\n或\r\n）作为分隔符来解析数据</p>
<p><strong>DelimiterBasedFrameDecoder</strong><br>使用自定义的特殊字符作为消息的分隔符</p>
<p><strong>HttpObjectDecoder</strong><br>一个Http数据的解码器</p>
<p><strong>LengthFieldBasedFrameDecoder</strong><br>通过指定长度来标识整包消息，这样就可以自动的处理粘包和半包消息</p>
<h1 id="TCP粘包和拆包"><a href="#TCP粘包和拆包" class="headerlink" title="TCP粘包和拆包"></a>TCP粘包和拆包</h1><p>TCP是面向连接、面向流的，提供高可靠性服务。消息收发两端都要有一个成对的socket。发送端为了更高效的将包发送给接收方，使用了优化方法（Nagle算法），将多次间隔较小且数据量小的数据，合成一个大的数据块，然后进行封包。这样做虽然提高的效率，但接收端就难以分辨出完整的数据包了。因为面向流的通信是无消息保护边界的。由于TCP无消息保护边界，需要在接收端处理消息边界问题。</p>
<p><strong>案例说明</strong></p>
<p><img src="/2020/11/03/Netty/19.png" alt="粘包拆包问题案例说明"></p>
<ol>
<li>前提：客户端发送了两个数据包 D1 和 D2 给服务端</li>
<li>情况1：服务端分两次读取到两个独立数据包 D1 和 D2。没有粘包和拆包</li>
<li>情况2：服务端一次接收到了两个数据包，D1 和 D2 粘合在一起。称之为TCP粘包</li>
<li>情况3：服务端分两次读取到了数据包：第一次读取到完整的 D1 包和 D2 包部分内容；第二次读取到 D2 包剩余内容。称之为 TCP拆包</li>
<li>情况4：服务端分两次读取到了数据包：第一次读取到了 D1 包的部分内容；第二次读取到了 D1 包的剩余内容和 D2 包。</li>
</ol>
<h1 id="来源"><a href="#来源" class="headerlink" title="来源"></a>来源</h1><p><a href="https://www.bilibili.com/video/BV1DJ411m7NR?from=search&seid=2689171580875062493" target="_blank" rel="noopener">尚硅谷韩顺平Netty教学</a></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java框架</tag>
        <tag>NIO</tag>
      </tags>
  </entry>
  <entry>
    <title>Python API</title>
    <url>/2022/01/18/Python-API/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote class="blockquote-center">
<p>^ _ ^ </p>

</blockquote>
<a id="more"></a>

<h1 id="Gradient-Clip"><a href="#Gradient-Clip" class="headerlink" title="Gradient Clip"></a>Gradient Clip</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">'''To avoid graidient exploration</span></span><br><span class="line"><span class="string">    @parameters: parameters needed to clip</span></span><br><span class="line"><span class="string">    @max_norm: the highest boundary of the gradient of params</span></span><br><span class="line"><span class="string">    @norm_type: the type of norm</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment"># torch.nn.utils.clip_grad_norm_</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">clip_grad_norm_</span><span class="params">(parameters, max_norm, norm_type=<span class="number">2</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> isinstance(parameters, torch.Tensor):</span><br><span class="line">        parameters = [parameters]</span><br><span class="line">    parameters = list(filter(<span class="keyword">lambda</span> p: p.grad <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>, parameters))</span><br><span class="line">    max_norm = float(max_norm)</span><br><span class="line">    norm_type = float(norm_type)</span><br><span class="line">    <span class="keyword">if</span> norm_type == inf:</span><br><span class="line">        total_norm = max(p.grad.data.abs().max() <span class="keyword">for</span> p <span class="keyword">in</span> parameters)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        total_norm = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> p <span class="keyword">in</span> parameters:</span><br><span class="line">            param_norm = p.grad.data.norm(norm_type)</span><br><span class="line">            total_norm += param_norm.item() ** norm_type</span><br><span class="line">        total_norm = total_norm ** (<span class="number">1.</span> / norm_type)</span><br><span class="line">    clip_coef = max_norm / (total_norm + <span class="number">1e-6</span>)</span><br><span class="line">    <span class="keyword">if</span> clip_coef &lt; <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">for</span> p <span class="keyword">in</span> parameters:</span><br><span class="line">            p.grad.data.mul_(clip_coef)</span><br><span class="line">    <span class="keyword">return</span> total_norm</span><br></pre></td></tr></table></figure>

<h1 id="TransformerEncoderLayer"><a href="#TransformerEncoderLayer" class="headerlink" title="TransformerEncoderLayer"></a>TransformerEncoderLayer</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">'''torch.nn.TransformerEncoderLayer</span></span><br><span class="line"><span class="string">    @param d_model – the number of expected features in the input (required).</span></span><br><span class="line"><span class="string">    @param nhead – the number of heads in the multiheadattention models (required).</span></span><br><span class="line"><span class="string">    @param dim_feedforward – the dimension of the feedforward network model (default=2048).</span></span><br><span class="line"><span class="string">    @param dropout – the dropout value (default=0.1).</span></span><br><span class="line"><span class="string">    @param activation – the activation function of the intermediate layer, can be a string (“relu” or “gelu”) or a unary callable. Default: relu</span></span><br><span class="line"><span class="string">    @param layer_norm_eps – the eps value in layer normalization components (default=1e-5).</span></span><br><span class="line"><span class="string">    @param batch_first – If True, then the input and output tensors are provided as (batch, seq, feature). Default: False.</span></span><br><span class="line"><span class="string">    @param norm_first – if True, layer norm is done prior to attention and feedforward operations, respectivaly. Otherwise it’s done after. Default: False (after). </span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure>

<h1 id="torch-expand"><a href="#torch-expand" class="headerlink" title="torch.expand"></a>torch.expand</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">torch.arange(<span class="number">5</span>).expand(<span class="number">3</span>, <span class="number">5</span>)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">tensor([[0, 1, 2, 3, 4],</span></span><br><span class="line"><span class="string">        [0, 1, 2, 3, 4],</span></span><br><span class="line"><span class="string">        [0, 1, 2, 3, 4]])</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>PaddleHub</title>
    <url>/2021/06/08/PaddleHub/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote class="blockquote-center">
<p>Look Look 开源项目 PaddleHub ^ _ ^ </p>

</blockquote>
<a id="more"></a>

<h1 id="PaddleHub简介"><a href="#PaddleHub简介" class="headerlink" title="PaddleHub简介"></a>PaddleHub简介</h1><p>PaddleHub旨在为开发者提供丰富的、高质量的、直接可用的预训练模型。其中涵盖CV、NLP、Audio、Video、工业应用主流五大品类的 300+ 预训练模型，全部开源下载，离线可运行。</p>
<p>项目地址：<a href="https://github.com/PaddlePaddle/PaddleHub" target="_blank" rel="noopener">https://github.com/PaddlePaddle/PaddleHub</a></p>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="环境依赖"><a href="#环境依赖" class="headerlink" title="环境依赖"></a>环境依赖</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装gpu版本的PaddlePaddle</span></span><br><span class="line">pip install paddlepaddle-gpu -U</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或者安装cpu版本的paddlepaddle</span></span><br><span class="line"><span class="comment"># pip install paddlepaddle -U</span></span><br></pre></td></tr></table></figure>

<h2 id="安装命令"><a href="#安装命令" class="headerlink" title="安装命令"></a>安装命令</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pip install paddlehub==2.1.0</span><br></pre></td></tr></table></figure>

<p>除上述依赖外，PaddleHub的预训练模型和预置数据集需要连接服务端进行下载，请确保机器可以正常访问网络。若本地已存在相关的数据集和预训练模型，则可以离线运行PaddleHub。</p>
<blockquote>
<p>使用PaddleHub下载数据集、预训练模型等，要求机器可以访问外网。可以使用<code>server_check()</code>可以检查本地与远端PaddleHub-Server的连接状态，使用方法如下：</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> paddlehub</span><br><span class="line">paddlehub.server_check()</span><br><span class="line"><span class="comment"># 如果可以连接远端PaddleHub-Server，则显示Request Hub-Server successfully。</span></span><br><span class="line"><span class="comment"># 如果无法连接远端PaddleHub-Server，则显示Request Hub-Server unsuccessfully。</span></span><br></pre></td></tr></table></figure>

<h1 id="快速体验"><a href="#快速体验" class="headerlink" title="快速体验"></a>快速体验</h1><p>在PaddleHub中，Module代表一个可执行模块，一般来讲就是一个可以端到端预测的预训练模型（例如目标检测模型、中文词法分析模型），又或者是一个需要根据下游任务进一步微调（迁移学习）的模型，例如BERT/ERNIE。</p>
<p>PaddleHub采用模型即软件的设计理念，所有的预训练模型与Python软件包类似，具备版本的概念。</p>
<h2 id="人像分割"><a href="#人像分割" class="headerlink" title="人像分割"></a>人像分割</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> paddlehub <span class="keyword">as</span> hub</span><br><span class="line"><span class="comment"># module = hub.Module(name="humanseg_lite", version="1.1.1")</span></span><br><span class="line">module = hub.Module(name=<span class="string">"humanseg_lite"</span>)</span><br><span class="line"></span><br><span class="line">res = module.segmentation(</span><br><span class="line">    paths = [<span class="string">"./test_image.jpg"</span>],</span><br><span class="line">    visualization=<span class="literal">True</span>,</span><br><span class="line">    output_dir=<span class="string">'humanseg_output'</span>)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Github</category>
      </categories>
      <tags>
        <tag>Github 机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx</title>
    <url>/2020/11/17/Nginx/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote class="blockquote-center">
<p>^ _ ^ </p>

</blockquote>
<a id="more"></a>

<h1 id="Nginx简介"><a href="#Nginx简介" class="headerlink" title="Nginx简介"></a>Nginx简介</h1><p>Nginx是一个高性能反向代理服务器，其特点包括 <em>占用内存少</em> ，<em>并发能力强</em> 。Nginx专门为性能优化而开发，能经受住高负载的考验。</p>
<h2 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h2><p><strong>正向代理</strong>：客户端通过代理服务器访问因特网，正向代理中客户端需要配置代理服务器。客户端对服务端来说是透明的，即服务端并不知道客户端的地址，知道的是代理服务器的地址。</p>
<p><strong>反向代理</strong>：客户端仍是通过代理服务器访问因特网，但反向代理中客户端对代理无感知，不需要任何配置就可以访问。而反向代理服务器会从服务器集群中选择一个服务器获取数据返回。服务端和反向代理服务器对于客户端来说是一个整体。暴露的是代理服务器的地址，隐藏了真实服务器的IP地址。</p>
<h2 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h2><p>代理服务器将接收到的客户端请求分发到服务器集群中的某个服务器上，使得单个服务器上的负载压力减小。</p>
<h2 id="动静分离"><a href="#动静分离" class="headerlink" title="动静分离"></a>动静分离</h2><p>将动态资源（jsp、servlet等)与静态资源（html、css、js、image等）分开部署</p>
<h2 id="高可用"><a href="#高可用" class="headerlink" title="高可用"></a>高可用</h2><p>可以保持 7*24 不间断运行</p>
<h1 id="Nginx安装"><a href="#Nginx安装" class="headerlink" title="Nginx安装"></a>Nginx安装</h1><p>Hexo博客部署到服务器文章中已写过，这篇文章中略</p>
<p><a href="http://localhost:4000/2020/11/16/Hexo%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8/" target="_blank" rel="noopener">跳转到Hexo博客部署博文</a></p>
<h1 id="Nginx配置"><a href="#Nginx配置" class="headerlink" title="Nginx配置"></a>Nginx配置</h1><h2 id="Nginx配置文件"><a href="#Nginx配置文件" class="headerlink" title="Nginx配置文件"></a>Nginx配置文件</h2><h3 id="配置文件地址"><a href="#配置文件地址" class="headerlink" title="配置文件地址"></a>配置文件地址</h3><p>/usr/local/nginx/conf/nginx.conf</p>
<h3 id="配置文件组成"><a href="#配置文件组成" class="headerlink" title="配置文件组成"></a>配置文件组成</h3><p><strong>1.全局块</strong></p>
<ul>
<li>不在大括号里的内容</li>
<li>设置nginx服务器整体运行的配置指令<ul>
<li>运行Nginx服务器的用户（组）</li>
<li>允许生成的 worker process 数</li>
<li>进程 PID 存放路径</li>
<li>日志存放路径和类型</li>
<li>其他配置文件的引入</li>
</ul>
</li>
</ul>
<p><strong>2.events块</strong></p>
<ul>
<li>影响Nginx服务器和用户网络之间的连接<ul>
<li>是否开启对多 work process 下的网络连接序列化</li>
<li>是否允许同时接受多个网络连接</li>
<li>选取哪种事件驱动模型来处理连接请求</li>
<li>每个 work process 可以同时支持的最大连接数</li>
</ul>
</li>
</ul>
<p><strong>3.http块</strong></p>
<ul>
<li>包含http全局块和server块</li>
<li>http全局块配置的指令包括<ul>
<li>文件引入</li>
<li>MIME-TYPE定义</li>
<li>日志自定义</li>
<li>连接超时间</li>
<li>单链接请求数上限</li>
</ul>
</li>
<li>server块包含全局server块和location块<ul>
<li>一个server可配置多个location</li>
<li>全局server最常见的配置：<ul>
<li>监听配置</li>
<li>主机名称</li>
<li>主机IP配置</li>
</ul>
</li>
<li>location块的作用是：<ul>
<li>基于Nginx服务器接收到的请求字符串，对主机名称（或IP别名）之外的字符串进行匹配，对特定请求进行处理</li>
<li>地址定向</li>
<li>数据缓存</li>
<li>第三方模块</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="Nginx配置实例"><a href="#Nginx配置实例" class="headerlink" title="Nginx配置实例"></a>Nginx配置实例</h2><h3 id="反向代理配置实例"><a href="#反向代理配置实例" class="headerlink" title="反向代理配置实例"></a>反向代理配置实例</h3><p><strong>前提条件</strong><br>已安装好tomcat服务器<br><a href="http://localhost:4000/2020/11/16/CentOS%E4%B8%8A%E7%9A%84%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/" target="_blank" rel="noopener">跳转到安装教程</a></p>
<h4 id="实例1"><a href="#实例1" class="headerlink" title="实例1"></a>实例1</h4><p><strong>实现目标</strong><br>在本机Windows浏览器上访问网址 <a href="http://www.123.com:8080" target="_blank" rel="noopener">www.123.com</a>，跳转到tomcat主页</p>
<p><strong>前提条件</strong><br>拥有并启动一个Tomcat服务器</p>
<p><strong>1. 修改Windows下的HOST文件，添加地址映射</strong></p>
<p><img src="/2020/11/17/Nginx/1.png" alt="修改HOST文件"></p>
<p><strong>检测</strong><br>浏览器端访问 <a href="https://www.123.com:8080" target="_blank" rel="noopener">https://www.123.com:8080</a> ，将跳转到tomcat页面</p>
<p><strong>2. 对nginx进行请求转发配置（反向代理配置）</strong></p>
<p><img src="/2020/11/17/Nginx/2.png" alt="修改Nginx配置文件"></p>
<h4 id="实例2"><a href="#实例2" class="headerlink" title="实例2"></a>实例2</h4><p><strong>实现目标</strong></p>
<ol>
<li>访问 <a href="http://101.200.3.108:9001/edu" target="_blank" rel="noopener">http://101.200.3.108:9001/edu</a> 直接跳转到 127.0.0.1:8080</li>
<li>访问 <a href="http://101.200.3.108:9001/vod" target="_blank" rel="noopener">http://101.200.3.108:9001/vod</a> 直接跳转到127.0.0.1:8080</li>
</ol>
<p><strong>前提条件</strong><br>拥有并启动两个Tomcat服务器</p>
<h3 id="负载均衡配置实例"><a href="#负载均衡配置实例" class="headerlink" title="负载均衡配置实例"></a>负载均衡配置实例</h3><h3 id="动静分离配置实例"><a href="#动静分离配置实例" class="headerlink" title="动静分离配置实例"></a>动静分离配置实例</h3><h3 id="高可用配置实例"><a href="#高可用配置实例" class="headerlink" title="高可用配置实例"></a>高可用配置实例</h3>]]></content>
      <categories>
        <category>分布式</category>
      </categories>
      <tags>
        <tag>JavaEE 分布式</tag>
      </tags>
  </entry>
  <entry>
    <title>Python绝技</title>
    <url>/2020/12/09/Python%E7%BB%9D%E6%8A%80/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote class="blockquote-center">
<p>^ _ ^ </p>

</blockquote>
<a id="more"></a>

<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>《Python绝技–运用Python称为顶级黑客》是 TJ.O’Connor 编著的一本利用 Python 进行网络攻防的书籍。一次偶然路过还书车看到这本书，觉得可以深入了解一下，于是就拿来看了。看了一章后，决定开启这篇博客，以便在之后的日子里一边阅读一边记录。做这个决定的原因有这么几个：</p>
<ol>
<li>正所谓‘好记性不如烂键盘’，记录大概有利于当前理解与日后查阅</li>
<li>在看完书中的第一章后，大概发现书中使用的 python 版本是 2.7，而我 Windows 主机上安装的 python 是3.6版本的。而且不知是不是系统的原因，书中 linux 系统下 python 自带的 crypt 库在 Windows 下的 python 中似乎不是自带的，我恐怕之后还会有这样因为环境不统一而产生的诸多问题。我不希望在环境统一上耗费太多的心力，于是决定将使用平台从本机上的命令行迁移到实验楼中。因为不配本机环境，所以代码自然不必要以文件形式存在本机上了，不能运行的代码并无太大价值。所以将在实验楼中写下的代码都存在本篇博客的代码段中，实验结果以图片的形式存在本篇博客的图片中，</li>
<li>最后立一个Flag：希望我不要鸽，好好读书记笔记。也希望这本书不要让我失望，是一本值得坚持的书。</li>
</ol>
<h1 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h1><h2 id="程序1：Unix口令破解机"><a href="#程序1：Unix口令破解机" class="headerlink" title="程序1：Unix口令破解机"></a>程序1：Unix口令破解机</h2><p>这个程序是一款二十年前的Unix破解程序，对于今天的Unix系统已经不适用，但是其思想在今天仍然有一定的借鉴意义。</p>
<p><strong>曾经的Unix系统的 /etc/passwd 文件样例</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># UserName:PassWord:UserID:GroupID:User Info:User Directory:Command/Shell</span></span><br><span class="line">victim:HX9LLTdc/jiDE:503:100:Iama Victim:/home/victim:/bin/sh</span><br><span class="line">root:DFNFxgW7C05fo:504:100:Markus Hess:/root:/bin/bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># 但今天的 Unix 系统中，/etc/passwd中密码字段均用 x 字符代替，真正的密文存储在 /etc/shalow 中</span></span><br><span class="line"><span class="comment"># 另外，今天的 Unix 系统能使用更多安全的hash算法，比如SHA-512</span></span><br></pre></td></tr></table></figure>

<p>但是对于20年前 Unix 系统中用于加密密码的hash算法，可以使用 python 中的crypt库进行模拟，这个库中只有一个函数，就是crypt，用法如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">crypt(word,salt) -&gt; string</span><br><span class="line"><span class="comment"># word ：需要加密的明文</span></span><br><span class="line"><span class="comment"># salt : 长度为2的字符串</span></span><br></pre></td></tr></table></figure>

<p><strong>准备文件</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># password.txt</span><br><span class="line">victim:HX9LLTdc&#x2F;jiDE:503:100:Iama Victim:&#x2F;home&#x2F;victim:&#x2F;bin&#x2F;sh</span><br><span class="line">root:DFNFxgW7C05fo:504:100:Markus Hess:&#x2F;root:&#x2F;bin&#x2F;bash</span><br><span class="line"></span><br><span class="line"># dictionary.txt，包含一个字符串：egg</span><br></pre></td></tr></table></figure>

<p><strong>Unix密码破解原理</strong></p>
<ul>
<li>dictionary.txt中包含常见密码的明文</li>
<li>对于password.txt中每个用户的密码密文<ul>
<li>使 salt = 密文的头两个字符</li>
<li>使 word 依次 = dictionary.txt 中每个字符串</li>
<li>如果 crypt(word,salt) 得到的值和密码密文相同，则说明破解成功，word 字段就是密码明文</li>
</ul>
</li>
</ul>
<p><strong>程序源码</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> crypt</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">testPass</span><span class="params">(cryptPass)</span>:</span></span><br><span class="line">	salt = cryptPass[<span class="number">0</span>:<span class="number">2</span>]</span><br><span class="line">	dictFile = open(<span class="string">'dictionary.txt'</span>,<span class="string">'r'</span>)</span><br><span class="line">	<span class="keyword">for</span> word <span class="keyword">in</span> dictFile.readlines():</span><br><span class="line">		word = word.strip(<span class="string">'\n'</span>)</span><br><span class="line">		cryptWord = crypt.crypt(word,salt)</span><br><span class="line">		<span class="keyword">if</span>(cryptWord == cryptPass):</span><br><span class="line">			<span class="keyword">print</span> <span class="string">"[+] Found password :"</span> + word + <span class="string">"\n"</span></span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">		<span class="keyword">print</span> <span class="string">"[-] password not found.\n"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">	passFile = open(<span class="string">'passwords.txt'</span>)</span><br><span class="line">	<span class="keyword">for</span> line <span class="keyword">in</span> passFile.readlines():</span><br><span class="line">		<span class="keyword">if</span> <span class="string">":"</span> <span class="keyword">in</span> line:</span><br><span class="line">			print(line)</span><br><span class="line">			user = line.split(<span class="string">':'</span>)[<span class="number">0</span>]</span><br><span class="line">			cryptPass = line.split(<span class="string">':'</span>)[<span class="number">1</span>].strip()</span><br><span class="line">			<span class="keyword">print</span> <span class="string">"[*] Cracking password for: "</span> + user</span><br><span class="line">			testPass(cryptPass)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">	main()</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>Python Hack</tag>
      </tags>
  </entry>
  <entry>
    <title>Python语法</title>
    <url>/2021/01/13/Python%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote class="blockquote-center">
<p>^ _ ^ </p>

</blockquote>
<a id="more"></a>

<h1 id="函数参数传递"><a href="#函数参数传递" class="headerlink" title="函数参数传递"></a>函数参数传递</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span><span class="params">(a)</span>:</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"func_in"</span>,id(a)   <span class="comment"># func_in 41322472</span></span><br><span class="line">    a = <span class="number">2</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"re-point"</span>,id(a), id(<span class="number">2</span>)   <span class="comment"># re-point 41322448 41322448</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"func_out"</span>,id(a), id(<span class="number">1</span>)  <span class="comment"># func_out 41322472 41322472</span></span><br><span class="line">fun(a)</span><br><span class="line"><span class="keyword">print</span> a  <span class="comment"># 1</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = []</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span><span class="params">(a)</span>:</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"func_in"</span>,id(a)  <span class="comment"># func_in 53629256</span></span><br><span class="line">    a.append(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">print</span> <span class="string">"func_out"</span>,id(a)     <span class="comment"># func_out 53629256</span></span><br><span class="line">fun(a)</span><br><span class="line"><span class="keyword">print</span> a  <span class="comment"># [1]</span></span><br></pre></td></tr></table></figure>

<p><strong>原因解释</strong></p>
<ul>
<li>Python中包含6大数据类型，其中list、set、dict为可变对象，number、tuple、string为不可变对象</li>
<li>Python函数传参时，传的是对象的地址</li>
<li>对于可变对象，会根据传来的对象地址直接在内存中修改对象</li>
<li>而对于不可变对象，当需要对其进行修改时，会分配一块新的内存区域（并复制原值到该区域），对这块新分配的内存区域进行操作</li>
</ul>
<h1 id="元类-metaclass"><a href="#元类-metaclass" class="headerlink" title="元类(metaclass)"></a>元类(metaclass)</h1><p>解释：<a href="https://www.liaoxuefeng.com/wiki/1016959663602400/1017592449371072" target="_blank" rel="noopener">https://www.liaoxuefeng.com/wiki/1016959663602400/1017592449371072</a></p>
<h1 id="静态方法、类方法、实例方法"><a href="#静态方法、类方法、实例方法" class="headerlink" title="静态方法、类方法、实例方法"></a>静态方法、类方法、实例方法</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="comment"># 实例方法</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(self,x)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"executing foo(%s,%s)"</span>%(self,x)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 类方法</span></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">class_foo</span><span class="params">(cls,x)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"executing class_foo(%s,%s)"</span>%(cls,x)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 静态方法</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">static_foo</span><span class="params">(x)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"executing static_foo(%s)"</span>%x</span><br></pre></td></tr></table></figure>

<h1 id="类变量和实例变量"><a href="#类变量和实例变量" class="headerlink" title="类变量和实例变量"></a>类变量和实例变量</h1><ul>
<li>类变量被多个实例对象共享</li>
<li>实例变量为实例对象本身私有</li>
</ul>
<p><strong>普通例子</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span><span class="params">(object)</span>:</span>  </span><br><span class="line">    num_of_instance = <span class="number">0</span>  </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span>  </span><br><span class="line">        self.name = name  </span><br><span class="line">        Test.num_of_instance += <span class="number">1</span>  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:  </span><br><span class="line">    <span class="keyword">print</span> Test.num_of_instance   <span class="comment"># 0</span></span><br><span class="line">    t1 = Test(<span class="string">'jack'</span>)  </span><br><span class="line">    <span class="keyword">print</span> Test.num_of_instance   <span class="comment"># 1</span></span><br><span class="line">    t2 = Test(<span class="string">'lucy'</span>)  </span><br><span class="line">    <span class="keyword">print</span> t1.name , t1.num_of_instance  <span class="comment"># jack 2</span></span><br><span class="line">    <span class="keyword">print</span> t2.name , t2.num_of_instance  <span class="comment"># lucy 2</span></span><br></pre></td></tr></table></figure>

<p><strong>补充例子</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">    name=<span class="string">"aaa"</span></span><br><span class="line"></span><br><span class="line">p1=Person()</span><br><span class="line">p2=Person()</span><br><span class="line">p1.name=<span class="string">"bbb"</span></span><br><span class="line"><span class="keyword">print</span> p1.name  <span class="comment"># bbb</span></span><br><span class="line"><span class="keyword">print</span> p2.name  <span class="comment"># aaa</span></span><br><span class="line"><span class="keyword">print</span> Person.name  <span class="comment"># aaa</span></span><br></pre></td></tr></table></figure>
<ul>
<li>本质上是函数传参的问题</li>
<li>这里p1.name=”bbb”是实例调用了类变量，p1.name一开始是指向的类变量name=”aaa”,但是在实例的作用域里把类变量的引用改变了,就变成了一个实例变量,self.name不再引用Person的类变量name了。</li>
</ul>
<h1 id="自省"><a href="#自省" class="headerlink" title="自省"></a>自省</h1><p>自省就是面向对象的语言所写的程序在运行时,所能知道对象的类型.简单一句就是运行时能够获得对象的类型。<br>例如：type(),dir(),getattr(),hasattr(),isinstance().</p>
<h1 id="字典推导式"><a href="#字典推导式" class="headerlink" title="字典推导式"></a>字典推导式</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d = &#123;key: value <span class="keyword">for</span> (key, value) <span class="keyword">in</span> iterable&#125;</span><br></pre></td></tr></table></figure>

<h1 id="单下划线和双下划线"><a href="#单下划线和双下划线" class="headerlink" title="单下划线和双下划线"></a>单下划线和双下划线</h1><ul>
<li><code>__foo__</code>：python内部名字</li>
<li><code>_foo</code>：变量私有</li>
<li><code>__foo</code>：解析器用_classname__foo来代替这个名字,以区别和其他类相同的命名,它无法直接像公有成员一样随便访问,通过对象名._类名__xxx这样的方式可以访问.</li>
</ul>
<h1 id="迭代器和生成器"><a href="#迭代器和生成器" class="headerlink" title="迭代器和生成器"></a>迭代器和生成器</h1><h1 id="args-and-kwargs"><a href="#args-and-kwargs" class="headerlink" title="*args and **kwargs"></a>*args and **kwargs</h1><h1 id="AOP和装饰器"><a href="#AOP和装饰器" class="headerlink" title="AOP和装饰器"></a>AOP和装饰器</h1><p>解释：<a href="https://www.cnblogs.com/huxi/archive/2011/03/01/1967600.html" target="_blank" rel="noopener">https://www.cnblogs.com/huxi/archive/2011/03/01/1967600.html</a></p>
<h1 id="鸭子类型"><a href="#鸭子类型" class="headerlink" title="鸭子类型"></a>鸭子类型</h1><p><img src="/2021/01/13/Python%E8%AF%AD%E6%B3%95/1.png" alt><br>1</p>
<h1 id="重载"><a href="#重载" class="headerlink" title="重载"></a>重载</h1><p>函数重载主要是为了解决两个问题：</p>
<ol>
<li>可变参数类型：对于这种情况，Python中函数传参本来也不需要指明参数类型</li>
<li>可变参数个数：对于这种情况，Python中可使用缺省参数</li>
</ol>
<p>因此，Python中不需要重载</p>
<h1 id="新式类和旧式类"><a href="#新式类和旧式类" class="headerlink" title="新式类和旧式类"></a>新式类和旧式类</h1>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python基础</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis详解</title>
    <url>/2020/12/13/MyBatis%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote class="blockquote-center">
<p>^ _ ^ </p>

</blockquote>
<a id="more"></a>

<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><blockquote>
<p>MyBatis是一款持久层框架</p>
</blockquote>
<p><strong>MyBatis特性</strong></p>
<ul>
<li>支持自定义SQL、存储过程以及高级映射</li>
<li>免除了几乎所有的JDBC代码以及设置参数和获取结果集的工作</li>
<li>可以通过简单的XML或者注解来配置和映射原型、接口和Java POJO为数据库中的记录</li>
</ul>
<h2 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h2><ul>
<li><strong>maven仓库</strong>：<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><strong>Github</strong>：<a href="https://github.com/mybatis/mybatis-3" target="_blank" rel="noopener">https://github.com/mybatis/mybatis-3</a></li>
<li><strong>中文文档</strong>：<a href="https://mybatis.org/mybatis-3/zh/index.html" target="_blank" rel="noopener">https://mybatis.org/mybatis-3/zh/index.html</a></li>
</ul>
]]></content>
      <categories>
        <category>JavaEE</category>
      </categories>
      <tags>
        <tag>MyBatis</tag>
      </tags>
  </entry>
  <entry>
    <title>Python菜鸟教程基础练习题</title>
    <url>/2020/12/24/Python%E8%8F%9C%E9%B8%9F%E6%95%99%E7%A8%8B%E5%9F%BA%E7%A1%80%E7%BB%83%E4%B9%A0%E9%A2%98/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote class="blockquote-center">
<p>^ _ ^ </p>

</blockquote>
<a id="more"></a>

<h1 id="题目网址"><a href="#题目网址" class="headerlink" title="题目网址"></a>题目网址</h1><p>菜鸟教程：<a href="https://www.runoob.com/python3/python3-examples.html" target="_blank" rel="noopener">https://www.runoob.com/python3/python3-examples.html</a></p>
<h1 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World!"></a>Hello World!</h1><blockquote>
<p>在屏幕输出 Hello World!</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Filename : helloworld.py</span></span><br><span class="line"><span class="comment"># author by : llunch4w</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">helloWorld</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"Hello World!"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    helloWorld()</span><br></pre></td></tr></table></figure>

<h1 id="数字求和"><a href="#数字求和" class="headerlink" title="数字求和"></a>数字求和</h1><blockquote>
<p>通过用户输入两个数字，并计算两个数字之和</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">()</span>:</span></span><br><span class="line">    a = input()</span><br><span class="line">    b = input()</span><br><span class="line">    c = float(a) + float(b)</span><br><span class="line">    print(<span class="string">f'<span class="subst">&#123;a&#125;</span> + <span class="subst">&#123;b&#125;</span> = <span class="subst">&#123;c&#125;</span>'</span>)</span><br></pre></td></tr></table></figure>

<h1 id="平方根"><a href="#平方根" class="headerlink" title="平方根"></a>平方根</h1><blockquote>
<p>通过用户输入一个数字，并计算这个数字的平方根</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cmath</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sqrt</span><span class="params">()</span>:</span></span><br><span class="line">    a = input()</span><br><span class="line">    res = cmath.sqrt(float(a))</span><br><span class="line">    print(<span class="string">f'sqrt(<span class="subst">&#123;a&#125;</span>)= <span class="subst">&#123;res&#125;</span>'</span>)</span><br></pre></td></tr></table></figure>

<h1 id="二次方程"><a href="#二次方程" class="headerlink" title="二次方程"></a>二次方程</h1><blockquote>
<p>通过用户输入数字，并计算二次方程<br>二次方程式 ax**2 + bx + c = 0<br>a、b、c 用户提供，为实数，a ≠ 0</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cmath</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solv</span><span class="params">()</span>:</span></span><br><span class="line">    a,b,c = [int(x) <span class="keyword">for</span> x <span class="keyword">in</span> input().split(<span class="string">' '</span>)]</span><br><span class="line">    d = cmath.sqrt(b**<span class="number">2</span> - <span class="number">4</span>*a*c)</span><br><span class="line">    res1 = (-b + d)/(<span class="number">2</span>*a)</span><br><span class="line">    res2 = (-b - d)/(<span class="number">2</span>*a)</span><br><span class="line"></span><br><span class="line">    print(<span class="string">f'x1 = <span class="subst">&#123;res1&#125;</span>,x2 = <span class="subst">&#123;res2&#125;</span>'</span>)</span><br></pre></td></tr></table></figure>

<h1 id="计算三角形的面积"><a href="#计算三角形的面积" class="headerlink" title="计算三角形的面积"></a>计算三角形的面积</h1><blockquote>
<p>通过用户输入三角形三边长度，并计算三角形的面积，保留2位小数</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solv</span><span class="params">()</span>:</span></span><br><span class="line">    a,b,c = [float(x) <span class="keyword">for</span> x <span class="keyword">in</span> input().split(<span class="string">' '</span>)]</span><br><span class="line">    s = (a + b + c)/<span class="number">2</span></span><br><span class="line">    area = (s*(s-a)*(s-b)*(s-c))**<span class="number">0.5</span></span><br><span class="line">    print(<span class="string">f"area = <span class="subst">&#123;area:<span class="number">.2</span>f&#125;</span>"</span>)</span><br></pre></td></tr></table></figure>

<h1 id="计算圆的面积"><a href="#计算圆的面积" class="headerlink" title="计算圆的面积"></a>计算圆的面积</h1><blockquote>
<p>用户输入圆的半径，求圆的面积，保留6位小数</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solv</span><span class="params">()</span>:</span></span><br><span class="line">    r = float(input())</span><br><span class="line">    area = cmath.pi*(r**<span class="number">2</span>)</span><br><span class="line">    print(<span class="string">f'area = <span class="subst">&#123;area:<span class="number">.6</span>f&#125;</span>'</span>)</span><br></pre></td></tr></table></figure>

<h1 id="随机数生成"><a href="#随机数生成" class="headerlink" title="随机数生成"></a>随机数生成</h1><blockquote>
<p>生成 0 ~ 9 之间的随机数</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solv</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">while</span> input():</span><br><span class="line">        print(<span class="string">f'generated num = <span class="subst">&#123;random.randint(<span class="number">0</span>,<span class="number">9</span>)&#125;</span>'</span>)</span><br></pre></td></tr></table></figure>

<h1 id="摄氏温度转华氏温度"><a href="#摄氏温度转华氏温度" class="headerlink" title="摄氏温度转华氏温度"></a>摄氏温度转华氏温度</h1><blockquote>
<p>用户输入摄氏温度，计算华氏温度，保留1位小数</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solv</span><span class="params">()</span>:</span></span><br><span class="line">    cels = float(input())</span><br><span class="line">    huas = (cels * <span class="number">1.8</span>) + <span class="number">32</span></span><br><span class="line">    print(<span class="string">f'摄氏温度 = <span class="subst">&#123;cels&#125;</span>时，华式温度约为<span class="subst">&#123;huas:<span class="number">.1</span>f&#125;</span>'</span>)</span><br></pre></td></tr></table></figure>

<h1 id="交换变量"><a href="#交换变量" class="headerlink" title="交换变量"></a>交换变量</h1><blockquote>
<p>通过用户输入两个变量，并相互交换</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solv</span><span class="params">()</span>:</span></span><br><span class="line">    a,b = [int(x) <span class="keyword">for</span> x <span class="keyword">in</span> input().split(<span class="string">' '</span>)]</span><br><span class="line">    print(<span class="string">f'交换前：a = <span class="subst">&#123;a&#125;</span>,b = <span class="subst">&#123;b&#125;</span>'</span>)</span><br><span class="line">    a,b = b,a</span><br><span class="line">    print(<span class="string">f'交换后：a = <span class="subst">&#123;a&#125;</span>,b = <span class="subst">&#123;b&#125;</span>'</span>)</span><br></pre></td></tr></table></figure>

<h1 id="if-语句"><a href="#if-语句" class="headerlink" title="if 语句"></a>if 语句</h1><blockquote>
<p>使用 if…elif…else 语句判断数字是正数、负数或零</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solv</span><span class="params">()</span>:</span></span><br><span class="line">    num = float(input())</span><br><span class="line">    <span class="keyword">if</span> num &gt; <span class="number">0</span> :</span><br><span class="line">        print(<span class="string">f'<span class="subst">&#123;num&#125;</span> 是正数'</span>)</span><br><span class="line">    <span class="keyword">elif</span> num &lt; <span class="number">0</span>:</span><br><span class="line">        print(<span class="string">f'<span class="subst">&#123;num&#125;</span> 是负数'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">f'<span class="subst">&#123;num&#125;</span> 是零'</span>)</span><br></pre></td></tr></table></figure>

<h1 id="判断字符串是否为数字"><a href="#判断字符串是否为数字" class="headerlink" title="判断字符串是否为数字"></a>判断字符串是否为数字</h1><blockquote>
<p>通过创建自定义函数 is_number() 方法来判断字符串是否为数字</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_number</span><span class="params">(s)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        float(s)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">except</span> Exception:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">import</span> unicodedata</span><br><span class="line">        unicodedata.numeric(s)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">except</span> Exception:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solv</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        s = input()</span><br><span class="line">        <span class="keyword">if</span> is_number(s):</span><br><span class="line">            print(<span class="string">f'<span class="subst">&#123;s&#125;</span> 是数字字符串'</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">f'<span class="subst">&#123;s&#125;</span> 不是数字字符串'</span>)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：如果使用 str.isdigit() 和 str.isnumeric() 的话，是判断字符串中所有字符都是数字，而不能判断字符串的含义是否为数字。以上两种方式甚至不能判断小数和负数</p>
</blockquote>
<h1 id="判断奇数偶数"><a href="#判断奇数偶数" class="headerlink" title="判断奇数偶数"></a>判断奇数偶数</h1><blockquote>
<p>判断一个数字是否为奇数或偶数</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solv</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        s = input()</span><br><span class="line">        <span class="keyword">if</span> s.isdigit():</span><br><span class="line">            num = int(s)</span><br><span class="line">            print(<span class="string">f'<span class="subst">&#123;s&#125;</span> 是'</span> + (<span class="string">'偶数'</span> <span class="keyword">if</span> num%<span class="number">2</span> == <span class="number">0</span> <span class="keyword">else</span> <span class="string">'奇数'</span>))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">f'<span class="subst">&#123;s&#125;</span> 不是整数'</span>)</span><br></pre></td></tr></table></figure>

<h1 id="判断闰年"><a href="#判断闰年" class="headerlink" title="判断闰年"></a>判断闰年</h1><blockquote>
<p>判断用户输入的年份是否为闰年<br>非整百年:能被4整除的为闰年<br>整百年:能被400整除的是闰年</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solv</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        year = int(input())</span><br><span class="line">        <span class="keyword">if</span> year % <span class="number">100</span> == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">if</span> year % <span class="number">400</span> == <span class="number">0</span>:</span><br><span class="line">                print(<span class="string">f'<span class="subst">&#123;year&#125;</span>是闰年'</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(<span class="string">f'<span class="subst">&#123;year&#125;</span>不是闰年'</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> year % <span class="number">4</span> == <span class="number">0</span>:</span><br><span class="line">                print(<span class="string">f'<span class="subst">&#123;year&#125;</span>是闰年'</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(<span class="string">f'<span class="subst">&#123;year&#125;</span>不是闰年'</span>)</span><br></pre></td></tr></table></figure>

<h1 id="获取最大值函数"><a href="#获取最大值函数" class="headerlink" title="获取最大值函数"></a>获取最大值函数</h1><blockquote>
<p>使用max()方法求最大值</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solv</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        numList = [float(x) <span class="keyword">for</span> x <span class="keyword">in</span> input().split(<span class="string">' '</span>)]</span><br><span class="line">        print(<span class="string">f'The max num of <span class="subst">&#123;numList&#125;</span> is <span class="subst">&#123;max(numList)&#125;</span>'</span>)</span><br></pre></td></tr></table></figure>

<h1 id="质数判断"><a href="#质数判断" class="headerlink" title="质数判断"></a>质数判断</h1><blockquote>
<p>一个大于1的自然数，除了1和它本身外，不能被其他自然数（质数）整除（2, 3, 5, 7等），换句话说就是该数除了1和它本身以外不再有其他的因数</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">isPrime</span><span class="params">(num)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> num &lt; <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    n = int(num**<span class="number">0.5</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>,n+<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> num % i == <span class="number">0</span>:</span><br><span class="line">            print(<span class="string">f'<span class="subst">&#123;num//i&#125;</span> * <span class="subst">&#123;i&#125;</span> = <span class="subst">&#123;num&#125;</span>'</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solv</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        num = int(input())</span><br><span class="line">        <span class="keyword">if</span> isPrime(num):</span><br><span class="line">            print(<span class="string">f'<span class="subst">&#123;num&#125;</span>是质数'</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">f'<span class="subst">&#123;num&#125;</span>不是质数'</span>)</span><br></pre></td></tr></table></figure>

<h1 id="输出指定范围内的素数"><a href="#输出指定范围内的素数" class="headerlink" title="输出指定范围内的素数"></a>输出指定范围内的素数</h1><blockquote>
<p>素数（prime number）又称质数，有无限个。除了1和它本身以外不再被其他的除数整除<br>用户输入范围，计算该范围内包含的所有素数</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 利用筛法判断[0,highBound]之间的数是否为素数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate</span><span class="params">(highBound)</span>:</span></span><br><span class="line">    resList = [<span class="literal">True</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(highBound+<span class="number">1</span>)]</span><br><span class="line">    resList[<span class="number">0</span>:<span class="number">2</span>] = [<span class="literal">False</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>)]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>,int(highBound**<span class="number">0.5</span>)+<span class="number">1</span>):</span><br><span class="line">        <span class="comment"># 如果素数，采用筛法：筛去该数的所有倍数</span></span><br><span class="line">        <span class="keyword">if</span> resList[i]:</span><br><span class="line">            num = <span class="number">2</span> * i</span><br><span class="line">            <span class="keyword">while</span> num &lt;= highBound:</span><br><span class="line">                resList[num] = <span class="literal">False</span></span><br><span class="line">                num += i</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">return</span> resList</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solv</span><span class="params">()</span>:</span></span><br><span class="line">    curHighBound = <span class="number">1000</span></span><br><span class="line">    primsTillHighBound = generate(curHighBound)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        lowBound,highBound = [int(x) <span class="keyword">for</span> x <span class="keyword">in</span> input().split(<span class="string">' '</span>)]</span><br><span class="line">        <span class="keyword">if</span> highBound &gt; curHighBound:</span><br><span class="line">            curHighBound = highBound</span><br><span class="line">            primsTillHighBound = generate(curHighBound)</span><br><span class="line">        res = [i <span class="keyword">for</span> i <span class="keyword">in</span> range(lowBound,highBound+<span class="number">1</span>) <span class="keyword">if</span> primsTillHighBound[i]]</span><br><span class="line">        print(<span class="string">f'<span class="subst">&#123;lowBound&#125;</span>-<span class="subst">&#123;highBound&#125;</span>间的素数集合：<span class="subst">&#123;res&#125;</span>'</span>)</span><br></pre></td></tr></table></figure>

<h1 id="阶乘实例"><a href="#阶乘实例" class="headerlink" title="阶乘实例"></a>阶乘实例</h1><blockquote>
<p>整数的阶乘（英语：factorial）是所有小于及等于该数的正整数的积，0的阶乘为1。即：n!=1×2×3×…×n</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solv</span><span class="params">()</span>:</span></span><br><span class="line">    num = int(input())</span><br><span class="line">    res = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>,num+<span class="number">1</span>):</span><br><span class="line">        res *= i</span><br><span class="line">    print(<span class="string">f'<span class="subst">&#123;num&#125;</span>! = <span class="subst">&#123;res&#125;</span>'</span>)</span><br></pre></td></tr></table></figure>

<h1 id="九九乘法表"><a href="#九九乘法表" class="headerlink" title="九九乘法表"></a>九九乘法表</h1><blockquote>
<p>打印九九乘法表</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solv</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">10</span>):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,j+<span class="number">1</span>):</span><br><span class="line">            print(<span class="string">f'<span class="subst">&#123;i&#125;</span>x<span class="subst">&#123;j&#125;</span>=<span class="subst">&#123;i*j&#125;</span>'</span>,end=<span class="string">'\t'</span>)</span><br><span class="line">        print()</span><br></pre></td></tr></table></figure>

<h1 id="斐波那契数列"><a href="#斐波那契数列" class="headerlink" title="斐波那契数列"></a>斐波那契数列</h1><blockquote>
<p>斐波那契数列指的是这样一个数列 0, 1, 1, 2, 3, 5, 8, 13,特别指出：第0项是0，第1项是第一个1。从第三项开始，每一项都等于前两项之和<br>用户输入需要输出的斐波拉契数列项数，程序进行输出</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solv</span><span class="params">()</span>:</span></span><br><span class="line">    count = int(input())</span><br><span class="line">    <span class="keyword">if</span> count &gt;= <span class="number">1</span>:</span><br><span class="line">        print(<span class="string">'0'</span>,end=<span class="string">''</span>)</span><br><span class="line">    a,b = <span class="number">0</span>,<span class="number">1</span></span><br><span class="line">    curCount = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> curCount &lt; count:</span><br><span class="line">        print(<span class="string">f',<span class="subst">&#123;b&#125;</span>'</span>,end=<span class="string">''</span>)</span><br><span class="line">        a,b = b,a+b</span><br><span class="line">        curCount += <span class="number">1</span></span><br></pre></td></tr></table></figure>

<h1 id="阿姆斯特朗数"><a href="#阿姆斯特朗数" class="headerlink" title="阿姆斯特朗数"></a>阿姆斯特朗数</h1><blockquote>
<p>如果一个n位正整数等于其各位数字的n次方之和,则称该数为阿姆斯特朗数。 例如1^3 + 5^3 + 3^3 = 153<br>编写代码检测用户输入的数字是否为阿姆斯特朗数</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solv</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        originNum = int(input())</span><br><span class="line">        num = originNum</span><br><span class="line">        n = len(str(num))</span><br><span class="line">        res = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> num != <span class="number">0</span>:</span><br><span class="line">            res += pow(num%<span class="number">10</span>,n)</span><br><span class="line">            num //= <span class="number">10</span></span><br><span class="line">        <span class="keyword">if</span> originNum == res:</span><br><span class="line">            print(<span class="string">f'<span class="subst">&#123;originNum&#125;</span>是阿姆斯特朗数'</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">f'<span class="subst">&#123;originNum&#125;</span>不是阿姆斯特朗数'</span>)</span><br></pre></td></tr></table></figure>

<h1 id="十进制转二进制、八进制、十六进制"><a href="#十进制转二进制、八进制、十六进制" class="headerlink" title="十进制转二进制、八进制、十六进制"></a>十进制转二进制、八进制、十六进制</h1><blockquote>
<p>实现十进制转二进制、八进制、十六进制</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solv</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        dec = int(input())</span><br><span class="line">        print(<span class="string">f'十进制数：<span class="subst">&#123;dec&#125;</span>；二进制：<span class="subst">&#123;bin(dec)&#125;</span>；八进制：<span class="subst">&#123;oct(dec)&#125;</span>；十六进制：<span class="subst">&#123;hex(dec)&#125;</span>'</span>)</span><br></pre></td></tr></table></figure>

<h1 id="ASCII码与字符相互转换"><a href="#ASCII码与字符相互转换" class="headerlink" title="ASCII码与字符相互转换"></a>ASCII码与字符相互转换</h1><blockquote>
<p>实现ASCII码与字符相互转换</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solv</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        print(<span class="string">f'1.字符转ASCII码\n2.ASCII码转字符'</span>)</span><br><span class="line">        choice = int(input())</span><br><span class="line">        <span class="keyword">if</span> choice == <span class="number">1</span>:</span><br><span class="line">            c = input()</span><br><span class="line">            print(<span class="string">f'字符：<span class="subst">&#123;c&#125;</span> =&gt; ASCII码 = <span class="subst">&#123;ord(c)&#125;</span>'</span>)</span><br><span class="line">        <span class="keyword">elif</span> choice == <span class="number">2</span>:</span><br><span class="line">            num = int(input())</span><br><span class="line">            print(<span class="string">f'ASCII码：<span class="subst">&#123;num&#125;</span> =&gt; 字符 = <span class="subst">&#123;chr(num)&#125;</span>'</span>)</span><br></pre></td></tr></table></figure>

<h1 id="最大公约数"><a href="#最大公约数" class="headerlink" title="最大公约数"></a>最大公约数</h1><blockquote>
<p>用户输入两个数，返回这两个数的最大公约数</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gcd</span><span class="params">(a,b)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> b <span class="keyword">if</span> a%b == <span class="number">0</span> <span class="keyword">else</span> gcd(b,a%b)</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solv</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        a,b = [int(x) <span class="keyword">for</span> x <span class="keyword">in</span> input().split(<span class="string">' '</span>)]</span><br><span class="line">        print(<span class="string">f'<span class="subst">&#123;a&#125;</span>和<span class="subst">&#123;b&#125;</span>的最大公约数为：<span class="subst">&#123;gcd(a,b)&#125;</span>'</span>)</span><br></pre></td></tr></table></figure>

<h1 id="最小公倍数算法"><a href="#最小公倍数算法" class="headerlink" title="最小公倍数算法"></a>最小公倍数算法</h1><blockquote>
<p>用户输入两个数，返回这两个数的最大公倍数</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gcd</span><span class="params">(a,b)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> b <span class="keyword">if</span> a%b == <span class="number">0</span> <span class="keyword">else</span> gcd(b,a%b)</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solv</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        a,b = [int(x) <span class="keyword">for</span> x <span class="keyword">in</span> input().split(<span class="string">' '</span>)]</span><br><span class="line">        print(<span class="string">f'<span class="subst">&#123;a&#125;</span>和<span class="subst">&#123;b&#125;</span>的最大公约数为：<span class="subst">&#123;a*b//gcd(a,b)&#125;</span>'</span>)</span><br></pre></td></tr></table></figure>

<h1 id="简单计算器实现"><a href="#简单计算器实现" class="headerlink" title="简单计算器实现"></a>简单计算器实现</h1><blockquote>
<p>用户输入表达式，程序计算结果</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solv</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        expression = input().strip()</span><br><span class="line">        charSta = []</span><br><span class="line">        numSta = []</span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> i &lt; len(expression):</span><br><span class="line">            <span class="keyword">if</span> expression[i] <span class="keyword">in</span> [<span class="string">'+'</span>,<span class="string">'-'</span>,<span class="string">'*'</span>,<span class="string">'/'</span>,<span class="string">'('</span>,<span class="string">')'</span>]:</span><br><span class="line">                <span class="keyword">if</span> len(charSta) == <span class="number">0</span>:</span><br><span class="line">                    <span class="keyword">pass</span></span><br><span class="line">                <span class="keyword">elif</span> charSta[<span class="number">-1</span>] == <span class="string">')'</span>:</span><br><span class="line">                    charSta.pop()</span><br><span class="line">                    <span class="keyword">while</span> len(charSta) &gt; <span class="number">0</span>:</span><br><span class="line">                        token = charSta.pop()</span><br><span class="line">                        <span class="keyword">if</span> token == <span class="string">'('</span>:</span><br><span class="line">                            <span class="keyword">break</span></span><br><span class="line">                        num1,num2 = numSta[<span class="number">-2</span>:]</span><br><span class="line">                        <span class="keyword">del</span> numSta[<span class="number">-2</span>:]</span><br><span class="line">                        numSta.append(eval(str(num1) + token + str(num2)))</span><br><span class="line">                <span class="keyword">elif</span> charSta[<span class="number">-1</span>] <span class="keyword">in</span> [<span class="string">'*'</span>,<span class="string">'/'</span>]:</span><br><span class="line">                    <span class="keyword">while</span> len(charSta) &gt; <span class="number">0</span> <span class="keyword">and</span> charSta[<span class="number">-1</span>] <span class="keyword">in</span> [<span class="string">'*'</span>,<span class="string">'/'</span>]:</span><br><span class="line">                        token = charSta.pop()</span><br><span class="line">                        num1,num2 = numSta[<span class="number">-2</span>:]</span><br><span class="line">                        <span class="keyword">del</span> numSta[<span class="number">-2</span>:]</span><br><span class="line">                        numSta.append(eval(str(num1) + token + str(num2)))</span><br><span class="line">                </span><br><span class="line">                charSta.append(expression[i])</span><br><span class="line">            <span class="keyword">elif</span> expression[i].isdigit():</span><br><span class="line">                num = <span class="number">0</span></span><br><span class="line">                frac = <span class="number">0</span></span><br><span class="line">                count = <span class="number">0</span></span><br><span class="line">                <span class="keyword">while</span> i &lt; len(expression) <span class="keyword">and</span> expression[i].isdigit():</span><br><span class="line">                    num = num*<span class="number">10</span> + int(expression[i])</span><br><span class="line">                    i += <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> i &lt; len(expression) <span class="keyword">and</span> expression[i] == <span class="string">'.'</span>:</span><br><span class="line">                    i += <span class="number">1</span></span><br><span class="line">                    <span class="keyword">while</span> i &lt; len(expression) <span class="keyword">and</span> expression[i].isdigit():</span><br><span class="line">                        frac = frac*<span class="number">10</span> + int(expression[i])</span><br><span class="line">                        count += <span class="number">1</span></span><br><span class="line">                        i += <span class="number">1</span></span><br><span class="line">                num += frac/pow(<span class="number">10</span>,count)</span><br><span class="line">                numSta.append(num)</span><br><span class="line">                i -= <span class="number">1</span></span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> len(charSta) != <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">if</span> charSta[<span class="number">-1</span>] == <span class="string">')'</span>:</span><br><span class="line">                charSta.pop()</span><br><span class="line">                <span class="keyword">while</span> len(charSta) &gt; <span class="number">0</span>:</span><br><span class="line">                    token = charSta.pop()</span><br><span class="line">                    <span class="keyword">if</span> token == <span class="string">'('</span>:</span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">                    num1,num2 = numSta[<span class="number">-2</span>:]</span><br><span class="line">                    <span class="keyword">del</span> numSta[<span class="number">-2</span>:]</span><br><span class="line">                    numSta.append(eval(str(num1) + token + str(num2)))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                token = charSta.pop()</span><br><span class="line">                num1,num2 = numSta[<span class="number">-2</span>:]</span><br><span class="line">                <span class="keyword">del</span> numSta[<span class="number">-2</span>:]</span><br><span class="line">                numSta.append(eval(str(num1) + token + str(num2)))</span><br><span class="line">        </span><br><span class="line">        print(<span class="string">f'<span class="subst">&#123;expression&#125;</span> = <span class="subst">&#123;numSta[<span class="number">-1</span>]&#125;</span>'</span>)</span><br></pre></td></tr></table></figure>

<h1 id="生成日历"><a href="#生成日历" class="headerlink" title="生成日历"></a>生成日历</h1><blockquote>
<p>生成指定日期（月份和年份）的日历</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> calendar</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solv</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        yy = int(input())</span><br><span class="line">        mm = int(input())</span><br><span class="line">        print(calendar.month(yy,mm))</span><br></pre></td></tr></table></figure>

<h1 id="使用递归斐波那契数列"><a href="#使用递归斐波那契数列" class="headerlink" title="使用递归斐波那契数列"></a>使用递归斐波那契数列</h1><blockquote>
<p>使用递归的方式来生成斐波那契数列</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> n &lt;= <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> n</span><br><span class="line">    <span class="keyword">return</span> fib(n<span class="number">-1</span>) + fib(n<span class="number">-2</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solv</span><span class="params">()</span>:</span></span><br><span class="line">    count = int(input())</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(count):</span><br><span class="line">        print(fib(i),end=<span class="string">' '</span>)</span><br></pre></td></tr></table></figure>

<h1 id="文件-IO"><a href="#文件-IO" class="headerlink" title="文件 IO"></a>文件 IO</h1><blockquote>
<p>演示Python基本的文件操作，包括 open，read，write</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solv</span><span class="params">()</span>:</span></span><br><span class="line">    file = input(<span class="string">"请输入您要写入的文件名："</span>)</span><br><span class="line">    <span class="keyword">with</span> open(file,<span class="string">'wt'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            s = input(<span class="string">"请输入要写入的内容："</span>)</span><br><span class="line">            <span class="keyword">if</span> len(s) &gt; <span class="number">0</span>:</span><br><span class="line">                f.write(s)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        print(<span class="string">'写入完成！'</span>)</span><br><span class="line"></span><br><span class="line">    print(<span class="string">'读取文件：'</span>)</span><br><span class="line">    <span class="keyword">with</span> open(file,<span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():</span><br><span class="line">            print(line)</span><br></pre></td></tr></table></figure>

<h1 id="约瑟夫生者死者小游戏"><a href="#约瑟夫生者死者小游戏" class="headerlink" title="约瑟夫生者死者小游戏"></a>约瑟夫生者死者小游戏</h1><blockquote>
<p>30 个人在一条船上，超载，需要 15 人下船。于是人们排成一队，排队的位置即为他们的编号。报数，从 1 开始，数到 9 的人下船。如此循环，直到船上仅剩 15 人为止，问都有哪些编号的人下船了呢？</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solv</span><span class="params">()</span>:</span></span><br><span class="line">    peopleNum = <span class="number">30</span></span><br><span class="line">    peoples = [<span class="literal">True</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(peopleNum)]</span><br><span class="line">    index = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> peopleNum &gt; <span class="number">15</span>:</span><br><span class="line">        count = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">if</span> peoples[index]:</span><br><span class="line">                count += <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> count == <span class="number">9</span>:<span class="keyword">break</span></span><br><span class="line">            index = (index+<span class="number">1</span>)%<span class="number">30</span></span><br><span class="line">        peoples[index] = <span class="literal">False</span></span><br><span class="line">        print(<span class="string">f'<span class="subst">&#123;index+<span class="number">1</span>&#125;</span>号下船了'</span>)</span><br><span class="line">        peopleNum -= <span class="number">1</span></span><br></pre></td></tr></table></figure>

<h1 id="五人分鱼"><a href="#五人分鱼" class="headerlink" title="五人分鱼"></a>五人分鱼</h1><blockquote>
<p>A、B、C、D、E 五人在某天夜里合伙去捕鱼，到第二天凌晨时都疲惫不堪，于是各自找地方睡觉。<br>日上三杆，A 第一个醒来，他将鱼分为五份，把多余的一条鱼扔掉，拿走自己的一份。<br>B 第二个醒来，也将鱼分为五份，把多余的一条鱼扔掉拿走自己的一份。<br>C、D、E依次醒来，也按同样的方法拿鱼。<br>问他们至少捕了多少条鱼?</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solv</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># finalFish是最后一个人分到的鱼数目</span></span><br><span class="line">    finalFish,fish = <span class="number">1</span>,<span class="number">1</span></span><br><span class="line">    flag = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> flag:</span><br><span class="line">        flag = <span class="literal">True</span></span><br><span class="line">        fish = finalFish</span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">            <span class="keyword">if</span> fish % <span class="number">4</span> == <span class="number">0</span>:</span><br><span class="line">                fish = fish // <span class="number">4</span> * <span class="number">5</span> + <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                flag = <span class="literal">False</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        finalFish += <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">f'至少捕鱼<span class="subst">&#123;fish&#125;</span>条'</span>)</span><br></pre></td></tr></table></figure>

<h1 id="实现秒表功能"><a href="#实现秒表功能" class="headerlink" title="实现秒表功能"></a>实现秒表功能</h1><blockquote>
<p>使用 time 模块来实现秒表功能</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solv</span><span class="params">()</span>:</span></span><br><span class="line">    input()</span><br><span class="line">    starttime = time.time()</span><br><span class="line">    print(<span class="string">"开始"</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            print(<span class="string">f"计时：<span class="subst">&#123;round(time.time()-starttime,<span class="number">0</span>)&#125;</span>s"</span>)</span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">        print(<span class="string">"结束"</span>)</span><br><span class="line">        print(<span class="string">f'总时间：<span class="subst">&#123;round(time.time()-starttime,<span class="number">2</span>)&#125;</span>s'</span>)</span><br></pre></td></tr></table></figure>

<h1 id="数组翻转指定个数的元素"><a href="#数组翻转指定个数的元素" class="headerlink" title="数组翻转指定个数的元素"></a>数组翻转指定个数的元素</h1><blockquote>
<p>定义一个整型数组，并将指定个数的元素翻转到数组的尾部。<br>例如：(ar[], d, n) 将长度为 n 的 数组 arr 的前面 d 个元素翻转到数组尾部。</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solv</span><span class="params">()</span>:</span></span><br><span class="line">    n = int(input(<span class="string">"请输入数组大小："</span>))</span><br><span class="line">    arr = list(range(<span class="number">1</span>,n+<span class="number">1</span>))</span><br><span class="line">    print(<span class="string">f'已为您自动生成数组<span class="subst">&#123;arr&#125;</span>'</span>)</span><br><span class="line">    d = int(input(<span class="string">"请输入翻转个数："</span>))</span><br><span class="line">    arr.extend(arr[:d])</span><br><span class="line">    <span class="keyword">del</span> arr[:d]</span><br><span class="line">    print(<span class="string">f'翻转后数组为：<span class="subst">&#123;arr&#125;</span>'</span>)</span><br></pre></td></tr></table></figure>

<h1 id="提取字符串中的-URL"><a href="#提取字符串中的-URL" class="headerlink" title="提取字符串中的 URL"></a>提取字符串中的 URL</h1><blockquote>
<p>给定一个字符串，里面包含 URL 地址，需要我们使用正则表达式来获取字符串的 URL</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solv</span><span class="params">()</span>:</span></span><br><span class="line">    pattern = re.compile(<span class="string">r'https?://(?:[-./\w]|(?:%[\da-zA-Z]&#123;2&#125;))+'</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        s = input()</span><br><span class="line">        urls = pattern.findall(s)</span><br><span class="line">        print(<span class="string">f'urls:<span class="subst">&#123;urls&#125;</span>'</span>)</span><br></pre></td></tr></table></figure>

<h1 id="将字符串作为代码执行"><a href="#将字符串作为代码执行" class="headerlink" title="将字符串作为代码执行"></a>将字符串作为代码执行</h1><blockquote>
<p>给定一个字符串代码，然后使用 exec() 来执行字符串代码。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def factorial(num): </span><br><span class="line">    fact&#x3D;1 </span><br><span class="line">    for i in range(1,num+1): </span><br><span class="line">        fact &#x3D; fact*i </span><br><span class="line">    return fact </span><br><span class="line">print(factorial(5))</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solv</span><span class="params">()</span>:</span></span><br><span class="line">    code = <span class="string">'''</span></span><br><span class="line"><span class="string">def factorial(num): </span></span><br><span class="line"><span class="string">    fact=1 </span></span><br><span class="line"><span class="string">    for i in range(1,num+1): </span></span><br><span class="line"><span class="string">        fact = fact*i </span></span><br><span class="line"><span class="string">    return fact </span></span><br><span class="line"><span class="string">print(factorial(5))</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    exec(code)</span><br></pre></td></tr></table></figure>

<h1 id="按格式输出当前时间"><a href="#按格式输出当前时间" class="headerlink" title="按格式输出当前时间"></a>按格式输出当前时间</h1><blockquote>
<p>按yyyy-mm-dd HH:MM:SS的格式输出当前时间</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solv</span><span class="params">()</span>:</span></span><br><span class="line">    timeStamp = time.time()</span><br><span class="line">    timeArray = time.localtime(timeStamp)</span><br><span class="line">    timeStr = time.strftime(<span class="string">"%Y-%m-%d %H:%M:%S"</span>,timeArray)</span><br><span class="line">    print(<span class="string">f'当前时间为 <span class="subst">&#123;timeStr&#125;</span>'</span>)</span><br></pre></td></tr></table></figure>

<h1 id="获取几天前的时间"><a href="#获取几天前的时间" class="headerlink" title="获取几天前的时间"></a>获取几天前的时间</h1><blockquote>
<p>计算几天前并转换为指定格式</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solv</span><span class="params">()</span>:</span></span><br><span class="line">    threeDaysAgo = datetime.datetime.now() - datetime.timedelta(days=<span class="number">3</span>)</span><br><span class="line">    timeArray = threeDaysAgo.timetuple()</span><br><span class="line">    timeStr = time.strftime(<span class="string">"%Y-%m-%d %H:%M:%S"</span>,timeArray)</span><br><span class="line">    print(<span class="string">f'当前时间为 <span class="subst">&#123;timeStr&#125;</span>'</span>)</span><br></pre></td></tr></table></figure>

<h1 id="转换时间显示格式"><a href="#转换时间显示格式" class="headerlink" title="转换时间显示格式"></a>转换时间显示格式</h1><blockquote>
<p>给定一个字符串的时间，让其以另一种时间显示格式显示</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solv</span><span class="params">()</span>:</span></span><br><span class="line">    timeStr = <span class="string">"2019-5-10 23:40:00"</span></span><br><span class="line">    timeArray = time.strptime(timeStr,<span class="string">"%Y-%m-%d %H:%M:%S"</span>)</span><br><span class="line">    timeStr2 = time.strftime(<span class="string">"%Y/%m/%d %H:%M:%S"</span>,timeArray)</span><br><span class="line">    print(<span class="string">f'转换前时间字符串为：<span class="subst">&#123;timeStr&#125;</span>\n转换后时间字符串为：<span class="subst">&#123;timeStr2&#125;</span>'</span>)</span><br></pre></td></tr></table></figure>

<h1 id="将字符串时间转换为时间戳"><a href="#将字符串时间转换为时间戳" class="headerlink" title="将字符串时间转换为时间戳"></a>将字符串时间转换为时间戳</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solv</span><span class="params">()</span>:</span></span><br><span class="line">    timeStr = <span class="string">"2019-5-10 23:40:00"</span></span><br><span class="line">    timeArray = time.strptime(timeStr,<span class="string">"%Y-%m-%d %H:%M:%S"</span>)</span><br><span class="line">    timeStamp = time.mktime(timeArray)</span><br><span class="line">    print(<span class="string">f'转换前时间字符串为：<span class="subst">&#123;timeStr&#125;</span>\n转换为时间戳为：<span class="subst">&#123;timeStamp&#125;</span>'</span>)</span><br></pre></td></tr></table></figure>

<h1 id="对字典进行排序"><a href="#对字典进行排序" class="headerlink" title="对字典进行排序"></a>对字典进行排序</h1><blockquote>
<p>根据key进行升序排列</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solv</span><span class="params">()</span>:</span></span><br><span class="line">    dictDemo = &#123;<span class="number">1</span>:<span class="number">9</span>,<span class="number">2</span>:<span class="number">-4</span>,<span class="number">3</span>:<span class="number">7</span>,<span class="number">4</span>:<span class="number">6</span>,<span class="number">-3</span>:<span class="number">9</span>&#125;</span><br><span class="line">    print(<span class="string">f'排序前：dictDemo=<span class="subst">&#123;dictDemo&#125;</span>'</span>)</span><br><span class="line">    sortedDict = dict(sorted(dictDemo.items(),key=<span class="keyword">lambda</span> kv:(kv[<span class="number">0</span>],kv[<span class="number">1</span>]),reverse=<span class="literal">False</span>))</span><br><span class="line">    print(<span class="string">f'排序后：dictDemo=<span class="subst">&#123;sortedDict&#125;</span>'</span>)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>根据value进行降序排列</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solv</span><span class="params">()</span>:</span></span><br><span class="line">    dictDemo = &#123;<span class="number">1</span>:<span class="number">9</span>,<span class="number">2</span>:<span class="number">-4</span>,<span class="number">3</span>:<span class="number">7</span>,<span class="number">4</span>:<span class="number">6</span>,<span class="number">-3</span>:<span class="number">9</span>&#125;</span><br><span class="line">    print(<span class="string">f'排序前：dictDemo=<span class="subst">&#123;dictDemo&#125;</span>'</span>)</span><br><span class="line">    sortedDict = dict(sorted(dictDemo.items(),key=<span class="keyword">lambda</span> kv:(kv[<span class="number">1</span>],kv[<span class="number">0</span>]),reverse=<span class="literal">True</span>))</span><br><span class="line">    print(<span class="string">f'排序后：dictDemo=<span class="subst">&#123;sortedDict&#125;</span>'</span>)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>字典列表排序</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solv</span><span class="params">()</span>:</span></span><br><span class="line">    lis = [&#123; <span class="string">"name"</span> : <span class="string">"Taobao"</span>, <span class="string">"age"</span> : <span class="number">100</span>&#125;,  </span><br><span class="line">            &#123; <span class="string">"name"</span> : <span class="string">"Runoob"</span>, <span class="string">"age"</span> : <span class="number">7</span> &#125;, </span><br><span class="line">            &#123; <span class="string">"name"</span> : <span class="string">"Google"</span>, <span class="string">"age"</span> : <span class="number">100</span> &#125;, </span><br><span class="line">            &#123; <span class="string">"name"</span> : <span class="string">"Wiki"</span> , <span class="string">"age"</span> : <span class="number">200</span> &#125;] </span><br><span class="line">    <span class="comment"># 先按 age 排序，再按 name 排序</span></span><br><span class="line">    sortedList = sorted(lis,key=<span class="keyword">lambda</span> d:(d[<span class="string">'age'</span>],d[<span class="string">'name'</span>]))</span><br><span class="line">    print(<span class="string">f'排序后的list：<span class="subst">&#123;sortedList&#125;</span>'</span>)</span><br></pre></td></tr></table></figure>

<h1 id="二分查找和顺序查找"><a href="#二分查找和顺序查找" class="headerlink" title="二分查找和顺序查找"></a>二分查找和顺序查找</h1><blockquote>
<p>生成随机序列，利用二分查找和顺序查找两种方式对元素进行查找</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Filename : search.py</span></span><br><span class="line"><span class="comment"># author by : llunch4w</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">binarySearch</span><span class="params">(arr,left,right,key)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> left &lt;= right:</span><br><span class="line">        mid = left + (right-left)//<span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> arr[mid] == key:</span><br><span class="line">            <span class="keyword">return</span> mid</span><br><span class="line">        <span class="keyword">elif</span> arr[mid] &gt; key:</span><br><span class="line">            right = mid - <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            left = mid + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">testBinarySearch</span><span class="params">()</span>:</span></span><br><span class="line">    code = \</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">nums = list(range(1000))</span></span><br><span class="line"><span class="string">key = random.randint(0,1000)</span></span><br><span class="line"><span class="string">binarySearch(nums,0,len(nums)-1,key)</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">    <span class="keyword">return</span> code</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">seqSearch</span><span class="params">(arr,left,right,key)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(left,right):</span><br><span class="line">        <span class="keyword">if</span> arr[i] == key:</span><br><span class="line">            <span class="keyword">return</span> i</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">testSeqSearch</span><span class="params">()</span>:</span></span><br><span class="line">    code = \</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">nums = list(range(1000))</span></span><br><span class="line"><span class="string">random.shuffle(nums)</span></span><br><span class="line"><span class="string">key = random.randint(0,1000)</span></span><br><span class="line"><span class="string">seqSearch(nums,0,len(nums)-1,key)</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">    <span class="keyword">return</span> code</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(code)</span>:</span></span><br><span class="line">    <span class="comment"># 将code执行1000次计算时间</span></span><br><span class="line">    startTime = time.time()</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">1000</span>):</span><br><span class="line">        exec(code)</span><br><span class="line">    endTime = time.time()</span><br><span class="line">    print(<span class="string">f'耗时：<span class="subst">&#123;(endTime-startTime)/<span class="number">1000</span>&#125;</span>s'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solv</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 生成0~999并将其打乱</span></span><br><span class="line">    nums = list(range(<span class="number">1000</span>))</span><br><span class="line">    random.shuffle(nums)</span><br><span class="line">    print(<span class="string">f'生成随机数组：<span class="subst">&#123;nums&#125;</span>'</span>)</span><br><span class="line"></span><br><span class="line">    key = int(input(<span class="string">"输入要查询的数："</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 二分搜索测试</span></span><br><span class="line">    res = binarySearch(sorted(nums),<span class="number">0</span>,len(nums)<span class="number">-1</span>,key)</span><br><span class="line">    print(<span class="string">f'找到元素<span class="subst">&#123;key&#125;</span>位于第<span class="subst">&#123;res+<span class="number">1</span>&#125;</span>位'</span>) <span class="keyword">if</span> res != <span class="number">-1</span> <span class="keyword">else</span> \</span><br><span class="line">    print(<span class="string">f'未找到元素<span class="subst">&#123;key&#125;</span>'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 顺序查找测试</span></span><br><span class="line">    startTime = time.time()</span><br><span class="line">    res = seqSearch(nums,<span class="number">0</span>,len(nums)<span class="number">-1</span>,key)</span><br><span class="line">    endTime = time.time()</span><br><span class="line">    print(<span class="string">f'找到元素<span class="subst">&#123;key&#125;</span>位于第<span class="subst">&#123;res+<span class="number">1</span>&#125;</span>位'</span>) <span class="keyword">if</span> res != <span class="number">-1</span> <span class="keyword">else</span> \</span><br><span class="line">    print(<span class="string">f'未找到元素<span class="subst">&#123;key&#125;</span>'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 耗时测试</span></span><br><span class="line">    print(<span class="string">'二分查找耗时测试：'</span>)</span><br><span class="line">    test(testBinarySearch())</span><br><span class="line">    print(<span class="string">'顺序查找耗时测试：'</span>)</span><br><span class="line">    test(testSeqSearch())</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    solv()</span><br></pre></td></tr></table></figure>

<h1 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h1><blockquote>
<p>实现插入排序、快速排序、选择排序、冒泡排序、归并排序、堆排序、计数排序、希尔排序、拓扑排序9种排序方法</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 插入排序</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">insertSort</span><span class="params">(arr)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,len(arr)):</span><br><span class="line">        j = i - <span class="number">1</span></span><br><span class="line">        num = arr[i]</span><br><span class="line">        <span class="keyword">while</span> j &gt;= <span class="number">0</span> <span class="keyword">and</span> arr[j] &gt; num:</span><br><span class="line">            arr[j+<span class="number">1</span>] = arr[j]</span><br><span class="line">            j -= <span class="number">1</span></span><br><span class="line">        arr[j+<span class="number">1</span>] = num</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 快速排序</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">partion</span><span class="params">(arr,left,right)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> right-left &lt; <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    i,j = left+<span class="number">1</span>,right</span><br><span class="line">    <span class="keyword">while</span> i &lt;= j:</span><br><span class="line">        <span class="keyword">while</span> i &lt;= j <span class="keyword">and</span> arr[j] &gt; arr[left]:</span><br><span class="line">            j -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> i &gt; j:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">while</span> i &lt;= j <span class="keyword">and</span> arr[i] &lt; arr[left]:</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> i &gt; j:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        arr[i],arr[j] = arr[j],arr[i]</span><br><span class="line">    arr[left],arr[j] = arr[j],arr[left]</span><br><span class="line">    partion(arr,left,j<span class="number">-1</span>)</span><br><span class="line">    partion(arr,j+<span class="number">1</span>,right)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">quickSort</span><span class="params">(arr)</span>:</span></span><br><span class="line">    partion(arr,<span class="number">0</span>,len(arr)<span class="number">-1</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 选择排序</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">chooseSort</span><span class="params">(arr)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(arr)):</span><br><span class="line">        index = i</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(i+<span class="number">1</span>,len(arr)):</span><br><span class="line">            <span class="keyword">if</span> arr[j] &lt; arr[index]:</span><br><span class="line">                index = j</span><br><span class="line">        arr[i],arr[index] = arr[index],arr[i]</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 冒泡排序</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bubbleSort</span><span class="params">(arr)</span>:</span></span><br><span class="line">    flag = <span class="literal">False</span></span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> flag:</span><br><span class="line">        flag = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,len(arr)<span class="number">-1</span>-count):</span><br><span class="line">            <span class="keyword">if</span> arr[i] &gt; arr[i+<span class="number">1</span>]:</span><br><span class="line">                arr[i],arr[i+<span class="number">1</span>] = arr[i+<span class="number">1</span>],arr[i]</span><br><span class="line">                flag = <span class="literal">False</span></span><br><span class="line">        count += <span class="number">1</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 归并排序</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">merge</span><span class="params">(arr,left,right)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> left == right:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    res = []</span><br><span class="line">    s1,s2 = left,left + (right-left)//<span class="number">2</span></span><br><span class="line">    merge(arr,left,s2)</span><br><span class="line">    merge(arr,s2+<span class="number">1</span>,right)</span><br><span class="line">    i,j = s1,s2+<span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> i &lt;= s2 <span class="keyword">and</span> j &lt;= right:</span><br><span class="line">        <span class="keyword">if</span> arr[i] &lt;= arr[j]:</span><br><span class="line">            res.append(arr[i])</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            res.append(arr[j])</span><br><span class="line">            j += <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    res.extend(arr[i:s2+<span class="number">1</span>]) <span class="keyword">if</span> i &lt;= s2 <span class="keyword">else</span> res.extend(arr[j:right+<span class="number">1</span>])</span><br><span class="line">    arr[left:right+<span class="number">1</span>] = res[:]</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 堆排序</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">adjust</span><span class="params">(arr,i,n)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> i &lt; n:</span><br><span class="line">        leftNode = <span class="number">2</span> * i + <span class="number">1</span></span><br><span class="line">        rightNode = <span class="number">2</span> * i + <span class="number">2</span></span><br><span class="line">        largestIndex = i</span><br><span class="line">        <span class="keyword">if</span> leftNode &lt; n <span class="keyword">and</span> arr[leftNode] &gt; arr[largestIndex]:</span><br><span class="line">            largestIndex = leftNode</span><br><span class="line">        <span class="keyword">if</span> rightNode &lt; n <span class="keyword">and</span> arr[rightNode] &gt; arr[largestIndex]:</span><br><span class="line">            largestIndex = rightNode</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> largestIndex != i:</span><br><span class="line">            arr[i],arr[largestIndex] = arr[largestIndex],arr[i]</span><br><span class="line">            <span class="comment"># 继续向下调整</span></span><br><span class="line">            i = largestIndex</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">break</span>           </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">heapSort</span><span class="params">(arr)</span>:</span></span><br><span class="line">    <span class="comment"># 建立一个大根堆</span></span><br><span class="line">    <span class="comment"># unNodeIndex是第一个非叶子结点的下标</span></span><br><span class="line">    unNodeIndex = (len(arr)<span class="number">-1</span>)//<span class="number">2</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(unNodeIndex,<span class="number">-1</span>,<span class="number">-1</span>):</span><br><span class="line">        adjust(arr,i,len(arr))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(arr)<span class="number">-1</span>,<span class="number">0</span>,<span class="number">-1</span>):</span><br><span class="line">        <span class="comment"># 将最大的元素（根元素）放入最后一个，然后调整剩余元素组成的堆，得到新的大根堆</span></span><br><span class="line">        arr[i],arr[<span class="number">0</span>] = arr[<span class="number">0</span>],arr[i]</span><br><span class="line">        adjust(arr,<span class="number">0</span>,i)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 希尔排序</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">shellSort</span><span class="params">(arr)</span>:</span></span><br><span class="line">    n = len(arr)</span><br><span class="line">    gap = n // <span class="number">2</span></span><br><span class="line">    <span class="keyword">while</span> gap &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(gap,n):</span><br><span class="line">            j = i - gap</span><br><span class="line">            num = arr[i]</span><br><span class="line">            <span class="keyword">while</span> j &gt;= <span class="number">0</span> <span class="keyword">and</span> arr[j] &gt; num:</span><br><span class="line">                arr[j+gap] = arr[j]</span><br><span class="line">                j -= gap</span><br><span class="line">            arr[j+gap] = num</span><br><span class="line">        gap //= <span class="number">2</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 计数排序</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">countSort</span><span class="params">(arr)</span>:</span></span><br><span class="line">    s,e = min(arr),max(arr)</span><br><span class="line">    countList = [<span class="number">0</span>] * (e - s + <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> arr:</span><br><span class="line">        countList[item] += <span class="number">1</span></span><br><span class="line">    ans = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(countList)):</span><br><span class="line">        <span class="keyword">while</span> countList[i] &gt; <span class="number">0</span>:</span><br><span class="line">            ans.append(i)</span><br><span class="line">            countList[i] -= <span class="number">1</span></span><br><span class="line">    arr[:] = ans[:]</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>菜鸟教程 Python基础</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis</title>
    <url>/2020/11/20/Redis/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote class="blockquote-center">
<p>^ _ ^ </p>

</blockquote>
<a id="more"></a>

<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Redis：Remote Dictory Servicce，远程字典服务，是一个基于key-value方式的高性能存储系统。</p>
<p><strong>特点</strong></p>
<ul>
<li>Redis支持数据的持久化，可以将内存中的数据保存在磁盘中，重启的时候可以再次加载进行使用。</li>
<li>Redis不仅仅支持简单的key-value类型的数据，同时还提供list，set，zset，hash等数据结构的存储。</li>
<li>Redis支持数据的备份，即master-slave模式的数据备份。</li>
</ul>
<p><strong>应用</strong></p>
<ul>
<li>内存存储，持久化(rdb,aof)</li>
<li>高速缓存</li>
<li>发布订阅系统</li>
<li>地图信息分析</li>
<li>计时器、计数器（浏览量）</li>
</ul>
<h1 id="安装和配置"><a href="#安装和配置" class="headerlink" title="安装和配置"></a>安装和配置</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><strong>1. 下载Redis安装包</strong></p>
<p>Redis下载地址：<a href="https://redis.io/" target="_blank" rel="noopener">https://redis.io/</a></p>
<p><strong>2. 将安装包通过Xftp传输到服务器中</strong></p>
<p><img src="/2020/11/20/Redis/1.png" alt="传输安装包"></p>
<p><strong>3. 解压缩压缩包</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># tar -zxvf redis压缩包名称</span><br><span class="line">tar -zxvf redis-6.0.9.tar.gz</span><br><span class="line"># 将解压得到的redis文件夹移动到&#x2F;etc&#x2F;opt目录（仅仅因为这个目录通常用来存放用户安装文件）</span><br><span class="line">mv redis-6.0.9 &#x2F;etc&#x2F;opt</span><br></pre></td></tr></table></figure>

<p><strong>4. （根据电脑环境选择）</strong></p>
<p>Redis是根据 ANSI C 语言编写的，所以编译需要c++环境，如果环境下没有的话，需要先安装c++</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum -y install gcc-c++</span><br></pre></td></tr></table></figure>

<p><strong>5. 执行make命令</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 进入redis文件夹</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>

<blockquote>
<p>make命令执行后发生了错误，发现是因为gcc版本过低，需要升级版本</p>
</blockquote>
<p><img src="/2020/11/20/Redis/2.png" alt="make错误"></p>
<p>解决方法1：使用redis6以下的版本进行安装</p>
<p>redis5安装地址：<a href="https://redis.io/download" target="_blank" rel="noopener">https://redis.io/download</a></p>
<p>解决方案2：放弃解压缩安装方式，直接使用docker一键安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull redis <span class="comment"># 从远程仓库拉取redis镜像</span></span><br><span class="line"></span><br><span class="line">docker run --name redis01 -d -P redis <span class="comment"># 通过镜像创建并启动一个容器命名为redis01</span></span><br><span class="line"></span><br><span class="line">docker <span class="built_in">exec</span> -it redis01 /bin/bash <span class="comment"># 以交互方式进入容器</span></span><br><span class="line"></span><br><span class="line">redis-cli <span class="comment"># redis命令：进入redis客户端</span></span><br></pre></td></tr></table></figure>

<h2 id="Redis目录"><a href="#Redis目录" class="headerlink" title="Redis目录"></a>Redis目录</h2><p>/usr/local/bin</p>
<p><img src="/2020/11/20/Redis/3.png" alt="Redis目录"></p>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p><em>将/etc/opt/redis-5.0.10/下的配置文件移动到/usr/local/bin/kconfig下，修改kconfig下的配置文件来控制redis的启动</em></p>
<ol>
<li>进入/usr/local/bin</li>
<li>创建配置文件目录kconfig</li>
<li>将/etc/opt/redis-5.0.10/下的redis.conf文件复制到kconfig文件夹下</li>
</ol>
<p><img src="/2020/11/20/Redis/4.png" alt="Redis配置文件"></p>
<ol start="4">
<li>redis默认不是后台启动的，修改配置文件中<code>daemonsize</code>的值为<code>yes</code></li>
</ol>
<h2 id="启动测试"><a href="#启动测试" class="headerlink" title="启动测试"></a>启动测试</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/bin</span><br><span class="line"></span><br><span class="line">redis-server kconfig/redis.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 连接</span></span><br><span class="line">redis-cli -p 6379 </span><br><span class="line">ping</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭连接（可选）</span></span><br><span class="line">shutdown</span><br><span class="line"><span class="comment"># 退出</span></span><br><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure>

<h1 id="Redis命令"><a href="#Redis命令" class="headerlink" title="Redis命令"></a>Redis命令</h1><h2 id="切换数据库"><a href="#切换数据库" class="headerlink" title="切换数据库"></a>切换数据库</h2><ul>
<li>redix默认有16个数据库，在配置文件中通过<code>databases</code>配置</li>
<li>默认进入的是0号数据库，可通过<code>select</code>命令进行切换</li>
<li>可使用<code>dbsize</code>命令查看当前数据库大小</li>
<li>可使用<code>flushdb</code>清空当前数据库</li>
<li>可使用<code>flushall</code>清空所有数据库</li>
</ul>
<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="Redis-Key"><a href="#Redis-Key" class="headerlink" title="Redis-Key"></a>Redis-Key</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; keys *          <span class="comment"># 查看当前数据库中所有key</span></span><br><span class="line">(empty list or <span class="built_in">set</span>)</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> name llunch <span class="comment"># 设置键值</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> age 21</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get name        <span class="comment"># 根据键获取值</span></span><br><span class="line"><span class="string">"llunch"</span></span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">type</span> name       <span class="comment"># 键的类型</span></span><br><span class="line">string</span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) <span class="string">"age"</span></span><br><span class="line">2) <span class="string">"name"</span></span><br><span class="line">127.0.0.1:6379&gt; exists name     <span class="comment"># 当前数据库是否存在某键</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; exists name0</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; move name 1     <span class="comment"># 将当前数据库中某键值移动到指定数据库中</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) <span class="string">"age"</span></span><br><span class="line">127.0.0.1:6379&gt; select 1        <span class="comment"># 切换数据库</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379[1]&gt; keys *</span><br><span class="line">1) <span class="string">"name"</span></span><br><span class="line">127.0.0.1:6379[1]&gt; select 0</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; expire age 10   <span class="comment"># 设置过期时间</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; ttl age         <span class="comment"># 查看过期时间</span></span><br><span class="line">(<span class="built_in">integer</span>) 8</span><br><span class="line">127.0.0.1:6379&gt; ttl age</span><br><span class="line">(<span class="built_in">integer</span>) 5</span><br></pre></td></tr></table></figure>

<h4 id="String"><a href="#String" class="headerlink" title="String"></a>String</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#####################################################</span></span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> key1 <span class="string">"hello"</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get key1</span><br><span class="line"><span class="string">"hello"</span></span><br><span class="line">127.0.0.1:6379&gt; append key1 <span class="string">",llunch"</span>   <span class="comment"># 追加字符串</span></span><br><span class="line">(<span class="built_in">integer</span>) 12</span><br><span class="line">127.0.0.1:6379&gt; get key1</span><br><span class="line"><span class="string">"hello,llunch"</span></span><br><span class="line">127.0.0.1:6379&gt; strlen key1             <span class="comment"># 查看字符串长度</span></span><br><span class="line">(<span class="built_in">integer</span>) 12</span><br><span class="line"><span class="comment">#####################################################</span></span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> view 0</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; incr view               <span class="comment"># 自增1</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; incrby view 10          <span class="comment"># 指定步长自增</span></span><br><span class="line">(<span class="built_in">integer</span>) 11</span><br><span class="line">127.0.0.1:6379&gt; incr view</span><br><span class="line">(<span class="built_in">integer</span>) 12</span><br><span class="line">127.0.0.1:6379&gt; decr view               <span class="comment"># 自减1</span></span><br><span class="line">(<span class="built_in">integer</span>) 11</span><br><span class="line">127.0.0.1:6379&gt; decrby view 20          <span class="comment"># 指定步长自减</span></span><br><span class="line">(<span class="built_in">integer</span>) -9</span><br><span class="line"><span class="comment">#####################################################</span></span><br><span class="line">127.0.0.1:6379&gt; get key1</span><br><span class="line"><span class="string">"hello,llunch"</span></span><br><span class="line">127.0.0.1:6379&gt; getrange key1 0 3       <span class="comment"># 指定范围查看字符串</span></span><br><span class="line"><span class="string">"hell"</span></span><br><span class="line">127.0.0.1:6379&gt; getrange key1 0 -1</span><br><span class="line"><span class="string">"hello,llunch"</span></span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> key2 abcdef</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; setrange key2 1 xx      <span class="comment"># 指定偏移位置替换字符串</span></span><br><span class="line">(<span class="built_in">integer</span>) 6</span><br><span class="line">127.0.0.1:6379&gt; get key2</span><br><span class="line"><span class="string">"axxdef"</span></span><br><span class="line"><span class="comment">#####################################################</span></span><br><span class="line">127.0.0.1:6379&gt; setex key3 30 <span class="string">"setex test"</span>  <span class="comment"># set with expire</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; ttl key3</span><br><span class="line">(<span class="built_in">integer</span>) 26</span><br><span class="line">127.0.0.1:6379&gt; setnx mykey <span class="string">"redis"</span>         <span class="comment"># set if not exists</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; get mykey</span><br><span class="line"><span class="string">"redis"</span></span><br><span class="line">127.0.0.1:6379&gt; setnx mykey <span class="string">"mongoDB"</span></span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; get mykey</span><br><span class="line"><span class="string">"redis"</span></span><br><span class="line">127.0.0.1:6379&gt; get key3</span><br><span class="line">(nil)</span><br><span class="line"><span class="comment">#####################################################</span></span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">(empty list or <span class="built_in">set</span>)</span><br><span class="line">127.0.0.1:6379&gt; mset k1 v1 k2 v2 k3 v3  <span class="comment"># 批量添加</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; mget k1 k3              <span class="comment"># 批量获取</span></span><br><span class="line">1) <span class="string">"v1"</span></span><br><span class="line">2) <span class="string">"v3"</span></span><br><span class="line">127.0.0.1:6379&gt; msetnx k1 c1 k4 c4      <span class="comment"># 批量 set if not exists，原子操作（一个失败整体失败）</span></span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; mget k1 k2 k3 k4</span><br><span class="line">1) <span class="string">"v1"</span></span><br><span class="line">2) <span class="string">"v2"</span></span><br><span class="line">3) <span class="string">"v3"</span></span><br><span class="line">4) (nil)</span><br><span class="line">127.0.0.1:6379&gt; msetnx k5 c5 k6 c6</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) <span class="string">"k2"</span></span><br><span class="line">2) <span class="string">"k5"</span></span><br><span class="line">3) <span class="string">"k1"</span></span><br><span class="line">4) <span class="string">"k3"</span></span><br><span class="line">5) <span class="string">"k6"</span></span><br><span class="line"><span class="comment">#####################################################</span></span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> user:a &#123;name:llunch,age:20&#125;         <span class="comment"># 设置json字符串来保存对象</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get user:a</span><br><span class="line"><span class="string">"&#123;name:llunch,age:20&#125;"</span></span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; mset user:1:name llunch4w user:1:age 21 <span class="comment"># 通过&#123;obj&#125;:&#123;id&#125;:&#123;field&#125;来保存对象</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) <span class="string">"user:1:name"</span></span><br><span class="line">2) <span class="string">"user:1:age"</span></span><br><span class="line">3) <span class="string">"user:a"</span></span><br><span class="line">127.0.0.1:6379&gt; mget user:1:name user:1:age</span><br><span class="line">1) <span class="string">"llunch4w"</span></span><br><span class="line">2) <span class="string">"21"</span></span><br><span class="line"><span class="comment">#####################################################</span></span><br><span class="line">127.0.0.1:6379&gt; getset db redis     <span class="comment"># 先get再set，返回值是原值</span></span><br><span class="line">(nil)</span><br><span class="line">127.0.0.1:6379&gt; get db</span><br><span class="line"><span class="string">"redis"</span></span><br><span class="line">127.0.0.1:6379&gt; getset db mysql</span><br><span class="line"><span class="string">"redis"</span></span><br><span class="line">127.0.0.1:6379&gt; get db</span><br><span class="line"><span class="string">"mysql"</span></span><br></pre></td></tr></table></figure>

<h4 id="List"><a href="#List" class="headerlink" title="List"></a>List</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#####################################################</span></span><br><span class="line">127.0.0.1:6379&gt; lpush list v1 v2 v3     <span class="comment"># 添加列表元素（头插）</span></span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6379&gt; lrange list 0 1         <span class="comment"># 指定范围显示列表元素</span></span><br><span class="line">1) <span class="string">"v3"</span></span><br><span class="line">2) <span class="string">"v2"</span></span><br><span class="line">127.0.0.1:6379&gt; lrange list 0 -1        <span class="comment"># 显示全部列表元素</span></span><br><span class="line">1) <span class="string">"v3"</span></span><br><span class="line">2) <span class="string">"v2"</span></span><br><span class="line">3) <span class="string">"v1"</span></span><br><span class="line">127.0.0.1:6379&gt; lpush list v4</span><br><span class="line">(<span class="built_in">integer</span>) 4</span><br><span class="line">127.0.0.1:6379&gt; rpush list right        <span class="comment"># 添加列表元素（尾插）</span></span><br><span class="line">(<span class="built_in">integer</span>) 5</span><br><span class="line"><span class="comment">#####################################################</span></span><br><span class="line">127.0.0.1:6379&gt; lrange list 0 -1</span><br><span class="line">1) <span class="string">"v4"</span></span><br><span class="line">2) <span class="string">"v3"</span></span><br><span class="line">3) <span class="string">"v2"</span></span><br><span class="line">4) <span class="string">"v1"</span></span><br><span class="line">5) <span class="string">"right"</span></span><br><span class="line">127.0.0.1:6379&gt; lpop list               <span class="comment"># 移除列表的第一个元素</span></span><br><span class="line"><span class="string">"v4"</span>    </span><br><span class="line">127.0.0.1:6379&gt; rpop list               <span class="comment"># 移除列表的最后一个元素</span></span><br><span class="line"><span class="string">"right"</span></span><br><span class="line"><span class="comment">#####################################################</span></span><br><span class="line">127.0.0.1:6379&gt; lrange list 0 -1</span><br><span class="line">1) <span class="string">"v3"</span></span><br><span class="line">2) <span class="string">"v2"</span></span><br><span class="line">3) <span class="string">"v1"</span></span><br><span class="line">127.0.0.1:6379&gt; lindex list 1           <span class="comment"># 获取列表的1号元素</span></span><br><span class="line"><span class="string">"v2"</span></span><br><span class="line"><span class="comment">#####################################################</span></span><br><span class="line">127.0.0.1:6379&gt; llen list               <span class="comment"># 获取列表长度</span></span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line"><span class="comment">#####################################################</span></span><br><span class="line">127.0.0.1:6379&gt; lrange list 0 -1</span><br><span class="line">1) <span class="string">"v3"</span></span><br><span class="line">2) <span class="string">"v2"</span></span><br><span class="line">3) <span class="string">"v1"</span></span><br><span class="line">127.0.0.1:6379&gt; lrem list 1 v3          <span class="comment"># 删除指定个数列表元素</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; lrem list 2 v2</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; lrange list 0 -1</span><br><span class="line">1) <span class="string">"v1"</span></span><br><span class="line">127.0.0.1:6379&gt; lpush list v1</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; lrange list 0 -1</span><br><span class="line">1) <span class="string">"v1"</span></span><br><span class="line">2) <span class="string">"v1"</span></span><br><span class="line">127.0.0.1:6379&gt; lrem list 2 v1</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; lrange list 0 -1</span><br><span class="line">(empty list or <span class="built_in">set</span>)</span><br><span class="line"><span class="comment">#####################################################</span></span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">(empty list or <span class="built_in">set</span>)</span><br><span class="line">127.0.0.1:6379&gt; rpush list v0 v1 v2 v3</span><br><span class="line">(<span class="built_in">integer</span>) 4</span><br><span class="line">127.0.0.1:6379&gt; lrange list 0 -1</span><br><span class="line">1) <span class="string">"v0"</span></span><br><span class="line">2) <span class="string">"v1"</span></span><br><span class="line">3) <span class="string">"v2"</span></span><br><span class="line">4) <span class="string">"v3"</span></span><br><span class="line">127.0.0.1:6379&gt; ltrim list 1 2              <span class="comment"># 截取部分列表</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; lrange list 0 -1</span><br><span class="line">1) <span class="string">"v1"</span></span><br><span class="line">2) <span class="string">"v2"</span></span><br><span class="line"><span class="comment">#####################################################</span></span><br><span class="line">127.0.0.1:6379&gt; rpoplpush list otherlist    <span class="comment"># 弹出一个列表中的最后一个元素放入另一个列表头部</span></span><br><span class="line"><span class="string">"v2"</span></span><br><span class="line">127.0.0.1:6379&gt; lrange list 0 -1</span><br><span class="line">1) <span class="string">"v1"</span></span><br><span class="line">127.0.0.1:6379&gt; lrange otherlist 0 -1</span><br><span class="line">1) <span class="string">"v2"</span></span><br><span class="line"><span class="comment">#####################################################</span></span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">(empty list or <span class="built_in">set</span>)</span><br><span class="line">127.0.0.1:6379&gt; rpush list abcd , world</span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6379&gt; lrange list 0 -1</span><br><span class="line">1) <span class="string">"abcd"</span></span><br><span class="line">2) <span class="string">","</span></span><br><span class="line">3) <span class="string">"world"</span></span><br><span class="line">127.0.0.1:6379&gt; lset list 0 hello                   <span class="comment"># 指定下标设置列表元素值</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; lrange list 0 0</span><br><span class="line">1) <span class="string">"hello"</span></span><br><span class="line">127.0.0.1:6379&gt; linsert list before world <span class="string">"redis "</span>  <span class="comment"># 指定位置向前插入元素</span></span><br><span class="line">(<span class="built_in">integer</span>) 4</span><br><span class="line">127.0.0.1:6379&gt; linsert list after world <span class="string">"!"</span>        <span class="comment"># 指定位置向后插入元素</span></span><br><span class="line">(<span class="built_in">integer</span>) 5</span><br><span class="line">127.0.0.1:6379&gt; lrange list 0 -1</span><br><span class="line">1) <span class="string">"hello"</span></span><br><span class="line">2) <span class="string">","</span></span><br><span class="line">3) <span class="string">"redis "</span></span><br><span class="line">4) <span class="string">"world"</span></span><br><span class="line">5) <span class="string">"!"</span></span><br></pre></td></tr></table></figure>

<h4 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#####################################################</span></span><br><span class="line">127.0.0.1:6379&gt; sadd <span class="built_in">set</span> s1 s2 s3   <span class="comment"># set中添加元素</span></span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6379&gt; smembers <span class="built_in">set</span>        <span class="comment"># 显示set中所有成员</span></span><br><span class="line">1) <span class="string">"s2"</span></span><br><span class="line">2) <span class="string">"s1"</span></span><br><span class="line">3) <span class="string">"s3"</span></span><br><span class="line">127.0.0.1:6379&gt; sismember <span class="built_in">set</span> s1    <span class="comment"># 判断某元素是否在set中</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; sismember <span class="built_in">set</span> s4</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line"><span class="comment">#####################################################</span></span><br><span class="line">127.0.0.1:6379&gt; scard <span class="built_in">set</span>           <span class="comment"># 查看set中元素个数</span></span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line"><span class="comment">#####################################################</span></span><br><span class="line">127.0.0.1:6379&gt; srem <span class="built_in">set</span> s1         <span class="comment"># 删除set中元素</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; smembers <span class="built_in">set</span></span><br><span class="line">1) <span class="string">"s2"</span></span><br><span class="line">2) <span class="string">"s3"</span></span><br><span class="line"><span class="comment">#####################################################</span></span><br><span class="line">127.0.0.1:6379&gt; sadd <span class="built_in">set</span> s4 s5 s6 s7 s8 s9</span><br><span class="line">(<span class="built_in">integer</span>) 6</span><br><span class="line">127.0.0.1:6379&gt; srandmember <span class="built_in">set</span> 3   <span class="comment"># 从set中随机抽取指定个数元素</span></span><br><span class="line">1) <span class="string">"s5"</span></span><br><span class="line">2) <span class="string">"s4"</span></span><br><span class="line">3) <span class="string">"s6"</span></span><br><span class="line">127.0.0.1:6379&gt; srandmember <span class="built_in">set</span> 3</span><br><span class="line">1) <span class="string">"s2"</span></span><br><span class="line">2) <span class="string">"s3"</span></span><br><span class="line">3) <span class="string">"s6"</span></span><br><span class="line"><span class="comment">#####################################################</span></span><br><span class="line">127.0.0.1:6379&gt; spop <span class="built_in">set</span>        <span class="comment"># 随机移除一个元素</span></span><br><span class="line"><span class="string">"s4"</span></span><br><span class="line"><span class="comment">#####################################################</span></span><br><span class="line">127.0.0.1:6379&gt; sadd set01 a b c d</span><br><span class="line">(<span class="built_in">integer</span>) 4</span><br><span class="line">127.0.0.1:6379&gt; sadd set02 e f a d k o</span><br><span class="line">(<span class="built_in">integer</span>) 6</span><br><span class="line">127.0.0.1:6379&gt; smove set02 set01 k        <span class="comment"># 将一个集合中的指定元素移动到另一集合中</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; smembers set01</span><br><span class="line">1) <span class="string">"d"</span></span><br><span class="line">2) <span class="string">"b"</span></span><br><span class="line">3) <span class="string">"c"</span></span><br><span class="line">4) <span class="string">"a"</span></span><br><span class="line">5) <span class="string">"k"</span></span><br><span class="line">127.0.0.1:6379&gt; smembers set02</span><br><span class="line">1) <span class="string">"a"</span></span><br><span class="line">2) <span class="string">"e"</span></span><br><span class="line">3) <span class="string">"f"</span></span><br><span class="line">4) <span class="string">"o"</span></span><br><span class="line">5) <span class="string">"d"</span></span><br><span class="line">127.0.0.1:6379&gt; sdiff set01 set02           <span class="comment"># 集合差集 set01-set02</span></span><br><span class="line">1) <span class="string">"k"</span></span><br><span class="line">2) <span class="string">"b"</span></span><br><span class="line">3) <span class="string">"c"</span></span><br><span class="line">127.0.0.1:6379&gt; sdiff set02 set01           <span class="comment"># 集合差集 set02-set01</span></span><br><span class="line">1) <span class="string">"f"</span></span><br><span class="line">2) <span class="string">"o"</span></span><br><span class="line">3) <span class="string">"e"</span></span><br><span class="line">127.0.0.1:6379&gt; sinter set01 set02          <span class="comment"># 集合交集</span></span><br><span class="line">1) <span class="string">"a"</span></span><br><span class="line">2) <span class="string">"d"</span></span><br><span class="line">127.0.0.1:6379&gt; sunion set01 set02          <span class="comment"># 集合并集</span></span><br><span class="line">1) <span class="string">"k"</span></span><br><span class="line">2) <span class="string">"f"</span></span><br><span class="line">3) <span class="string">"a"</span></span><br><span class="line">4) <span class="string">"c"</span></span><br><span class="line">5) <span class="string">"o"</span></span><br><span class="line">6) <span class="string">"e"</span></span><br><span class="line">7) <span class="string">"d"</span></span><br><span class="line">8) <span class="string">"b"</span></span><br></pre></td></tr></table></figure>

<h4 id="Hash"><a href="#Hash" class="headerlink" title="Hash"></a>Hash</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#####################################################</span></span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">(empty list or <span class="built_in">set</span>)</span><br><span class="line">127.0.0.1:6379&gt; hset <span class="built_in">hash</span> name llunch   <span class="comment"># 添加hash键值对</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; hset <span class="built_in">hash</span> age 20</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; hget <span class="built_in">hash</span> name          <span class="comment"># 获取hash中某键对应值</span></span><br><span class="line"><span class="string">"llunch"</span></span><br><span class="line">127.0.0.1:6379&gt; hgetall <span class="built_in">hash</span>            <span class="comment"># 获取hash中所有键和值</span></span><br><span class="line">1) <span class="string">"name"</span></span><br><span class="line">2) <span class="string">"llunch"</span></span><br><span class="line">3) <span class="string">"age"</span></span><br><span class="line">4) <span class="string">"20"</span></span><br><span class="line"><span class="comment">#####################################################</span></span><br><span class="line">127.0.0.1:6379&gt; hkeys <span class="built_in">hash</span>              <span class="comment"># 获取hash中所有键</span></span><br><span class="line">1) <span class="string">"name"</span></span><br><span class="line">2) <span class="string">"age"</span></span><br><span class="line">127.0.0.1:6379&gt; hvals <span class="built_in">hash</span>              <span class="comment"># 获取hash中所有值</span></span><br><span class="line">1) <span class="string">"llunch"</span></span><br><span class="line">2) <span class="string">"20"</span></span><br><span class="line"><span class="comment">#####################################################</span></span><br><span class="line">127.0.0.1:6379&gt; hmset <span class="built_in">hash</span> hobby TV pet rabbit  <span class="comment"># 一次赋值多个</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; hmget <span class="built_in">hash</span> hobby pet            <span class="comment"># 一次获取多个键</span></span><br><span class="line">1) <span class="string">"TV"</span></span><br><span class="line">2) <span class="string">"rabbit"</span></span><br><span class="line">127.0.0.1:6379&gt; hset <span class="built_in">hash</span> hobby <span class="string">"watch TV"</span>      <span class="comment"># 更改已存在键</span></span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; hget <span class="built_in">hash</span> hobby</span><br><span class="line"><span class="string">"watch TV"</span></span><br><span class="line">127.0.0.1:6379&gt; hdel <span class="built_in">hash</span> hobby                 <span class="comment"># 删除键</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line"><span class="comment">#####################################################</span></span><br><span class="line">127.0.0.1:6379&gt; hlen <span class="built_in">hash</span>           <span class="comment"># 获取hash长度</span></span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line"><span class="comment">#####################################################</span></span><br><span class="line">127.0.0.1:6379&gt; hexists <span class="built_in">hash</span> hobby  <span class="comment"># 判断hash中某key是否存在</span></span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; hexists <span class="built_in">hash</span> name</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br></pre></td></tr></table></figure>

<h4 id="Zset"><a href="#Zset" class="headerlink" title="Zset"></a>Zset</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#####################################################</span></span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">(empty list or <span class="built_in">set</span>)</span><br><span class="line">127.0.0.1:6379&gt; zadd salary 1000 xiaohong   <span class="comment"># 添加zset</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; zadd salary -1000 xiaoming</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; zadd salary 500 afang</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; zrange salary 0 -1          <span class="comment"># 显示zset（默认升序，不显示score）</span></span><br><span class="line">1) <span class="string">"xiaoming"</span></span><br><span class="line">2) <span class="string">"afang"</span></span><br><span class="line">3) <span class="string">"xiaohong"</span></span><br><span class="line"><span class="comment">#####################################################</span></span><br><span class="line">127.0.0.1:6379&gt; zrange salary 0 -1 withscores <span class="comment"># 显示zset（显示score）</span></span><br><span class="line">1) <span class="string">"xiaoming"</span></span><br><span class="line">2) <span class="string">"-1000"</span></span><br><span class="line">3) <span class="string">"afang"</span></span><br><span class="line">4) <span class="string">"500"</span></span><br><span class="line">5) <span class="string">"xiaohong"</span></span><br><span class="line">6) <span class="string">"1000"</span></span><br><span class="line">127.0.0.1:6379&gt; zrevrange salary 0 -1         <span class="comment"># 降序显示</span></span><br><span class="line">1) <span class="string">"xiaohong"</span></span><br><span class="line">2) <span class="string">"afang"</span></span><br><span class="line">3) <span class="string">"xiaoming"</span></span><br><span class="line">127.0.0.1:6379&gt; zrangebyscore salary 0 +inf   <span class="comment"># 显示指定score范围的zset</span></span><br><span class="line">1) <span class="string">"afang"</span></span><br><span class="line">2) <span class="string">"xiaohong"</span></span><br><span class="line"><span class="comment">#####################################################</span></span><br><span class="line">127.0.0.1:6379&gt; zcard salary            <span class="comment"># 查看集合中元素个数</span></span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6379&gt; zrem salary xiaohong    <span class="comment"># 删除集合元素</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; zcard salary</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line"><span class="comment">#####################################################</span></span><br><span class="line">127.0.0.1:6379&gt; zadd nums 1 1 2 2 3 3 4 4 5 5 6 6</span><br><span class="line">(<span class="built_in">integer</span>) 6</span><br><span class="line">127.0.0.1:6379&gt; zcount nums 2 5         <span class="comment"># 统计指定区间的元素个数</span></span><br><span class="line">(<span class="built_in">integer</span>) 4</span><br><span class="line"><span class="comment">#####################################################</span></span><br></pre></td></tr></table></figure>

<h3 id="特殊数据类型"><a href="#特殊数据类型" class="headerlink" title="特殊数据类型"></a>特殊数据类型</h3><h4 id="Geospatial"><a href="#Geospatial" class="headerlink" title="Geospatial"></a>Geospatial</h4><blockquote>
<p>Geosptial的底层是ZSet，对ZSet的操作都可以用于Geospatial</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#####################################################</span></span><br><span class="line">127.0.0.1:6379&gt; geoadd china:city 116.40 39.90 beijing      <span class="comment"># 添加单地点</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; geoadd china:city 121.47 31.23 shanghai</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; geoadd china:city 106.50 29.53 chongqing 114.05 22.52 shenzhen <span class="comment"># 添加多地点</span></span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; geoadd china:city 120.16 30.24 hangzhou 108.96 34.26 xian</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line"><span class="comment">#####################################################</span></span><br><span class="line">127.0.0.1:6379&gt; geopos china:city beijing   <span class="comment"># 查询地点</span></span><br><span class="line">1) 1) <span class="string">"116.39999896287918091"</span></span><br><span class="line">   2) <span class="string">"39.90000009167092543"</span></span><br><span class="line"><span class="comment">#####################################################</span></span><br><span class="line">127.0.0.1:6379&gt; geodist china:city beijing shanghai km  <span class="comment"># 查询地点之间的距离</span></span><br><span class="line"><span class="string">"1067.3788"</span></span><br><span class="line"><span class="comment">#####################################################</span></span><br><span class="line">127.0.0.1:6379&gt; georadius china:city 110 30 1000 km     <span class="comment"># 指定圆心和半径查找范围内的地点</span></span><br><span class="line">1) <span class="string">"chongqing"</span></span><br><span class="line">2) <span class="string">"xian"</span></span><br><span class="line">3) <span class="string">"shenzhen"</span></span><br><span class="line">4) <span class="string">"hangzhou"</span></span><br><span class="line">127.0.0.1:6379&gt; georadius china:city 110 30 500 km</span><br><span class="line">1) <span class="string">"chongqing"</span></span><br><span class="line">2) <span class="string">"xian"</span></span><br><span class="line">127.0.0.1:6379&gt; georadius china:city 110 30 500 km withdist     <span class="comment"># 范围查找并显示与圆心距离</span></span><br><span class="line">1) 1) <span class="string">"chongqing"</span></span><br><span class="line">   2) <span class="string">"341.9374"</span></span><br><span class="line">2) 1) <span class="string">"xian"</span></span><br><span class="line">   2) <span class="string">"483.8340"</span></span><br><span class="line">127.0.0.1:6379&gt; georadius china:city 110 30 500 km withcoord    <span class="comment"># 范围查找并显示地点经纬度</span></span><br><span class="line">1) 1) <span class="string">"chongqing"</span></span><br><span class="line">   2) 1) <span class="string">"106.49999767541885376"</span></span><br><span class="line">      2) <span class="string">"29.52999957900659211"</span></span><br><span class="line">2) 1) <span class="string">"xian"</span></span><br><span class="line">   2) 1) <span class="string">"108.96000176668167114"</span></span><br><span class="line">      2) <span class="string">"34.25999964418929977"</span></span><br><span class="line"><span class="comment">#####################################################</span></span><br><span class="line">127.0.0.1:6379&gt; georadiusbymember china:city beijing 1000 km    <span class="comment"># 以地点名称为中间的范围查找</span></span><br><span class="line">1) <span class="string">"beijing"</span></span><br><span class="line">2) <span class="string">"xian"</span></span><br><span class="line"><span class="comment">#####################################################</span></span><br><span class="line">127.0.0.1:6379&gt; geohash china:city shanghai     <span class="comment"># 将二维经纬度转换成一维字符串</span></span><br><span class="line">1) <span class="string">"wtw3sj5zbj0"</span></span><br><span class="line"><span class="comment">#####################################################</span></span><br></pre></td></tr></table></figure>

<h4 id="Hyperloglog"><a href="#Hyperloglog" class="headerlink" title="Hyperloglog"></a>Hyperloglog</h4><blockquote>
<p>一般用于基数统计</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; pfadd key1 a b c d e    <span class="comment"># 添加</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; pfadd key2 f i a <span class="built_in">cd</span> e</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; pfcount key1            <span class="comment"># 记数</span></span><br><span class="line">(<span class="built_in">integer</span>) 5</span><br><span class="line">127.0.0.1:6379&gt; pfcount key2</span><br><span class="line">(<span class="built_in">integer</span>) 5</span><br><span class="line">127.0.0.1:6379&gt; pfmerge key3 key1 key2  <span class="comment"># 合并</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; pfcount key3</span><br><span class="line">(<span class="built_in">integer</span>) 8</span><br></pre></td></tr></table></figure>

<h4 id="Bitmap"><a href="#Bitmap" class="headerlink" title="Bitmap"></a>Bitmap</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; setbit sign 0 1     <span class="comment"># 设置bit [key offset value]</span></span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; setbit sign 1 1</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; setbit sign 2 0</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; getbit sign 2       <span class="comment"># 获取指定位置的bit</span></span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; getbit sign 1 </span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; bitcount sign       <span class="comment"># 统计指定key中1的个数</span></span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br></pre></td></tr></table></figure>

<h1 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h1><ul>
<li>Redis事务的本质：一组命令的集合。一个事务中所有命令都会被序列化，在事务执行过程中，会按照顺序执行。</li>
<li>Redis事务没有隔离级别的概念</li>
<li>所有的命令在事务中，并没有直接被执行。只有在发起执行命令时才会执行</li>
<li>Redis单条命令保证原子性，但事务不保证原子性</li>
</ul>
<p><strong>Redis事务</strong></p>
<ul>
<li>开启事务：<code>multi</code></li>
<li>命令入队：<code>一系列具体命令</code></li>
<li>执行事务：<code>exec</code></li>
<li>放弃事务：<code>discard</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; multi</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; set k1 v1</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; set k2 v2</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; mget k1 k2</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; exec</span><br><span class="line">1) OK</span><br><span class="line">2) OK</span><br><span class="line">3) 1) &quot;v1&quot;</span><br><span class="line">   2) &quot;v2&quot;</span><br></pre></td></tr></table></figure>

<p><strong>异常</strong></p>
<ol>
<li>编译型异常（代码有问题），事务中所有命令都不会被执行</li>
<li>运行型异常（如1/0)，事务中其他命令可以正常执行，错误命令抛出异常</li>
</ol>
<h2 id="监控"><a href="#监控" class="headerlink" title="监控"></a>监控</h2><p><strong>悲观锁</strong><br>很悲观，认为什么时候都会出现问题，无论做什么都加锁</p>
<p><strong>乐观锁</strong></p>
<ul>
<li>很乐观，认为什么时候都不会出现问题，所以不会上锁。更新数据的时候去判断一下，在此期间是否有人修改过这个数据</li>
<li>获取version</li>
<li>更新时比较Version</li>
</ul>
<blockquote>
<p>watch的底层是乐观锁</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 成功的案例</span></span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> money 100</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> out 0</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; watch money     <span class="comment"># 加锁</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; multi           <span class="comment"># 开启事务</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; INCRBY money 10</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; DECRBY money 20</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; INCRBY out 10</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; mget money out</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">exec</span>            <span class="comment"># 执行事务</span></span><br><span class="line">1) (<span class="built_in">integer</span>) 110</span><br><span class="line">2) (<span class="built_in">integer</span>) 90</span><br><span class="line">3) (<span class="built_in">integer</span>) 10</span><br><span class="line">4) 1) <span class="string">"90"</span></span><br><span class="line">   2) <span class="string">"10"</span></span><br><span class="line">127.0.0.1:6379&gt; unwatch     <span class="comment"># 解锁</span></span><br><span class="line">OK</span><br></pre></td></tr></table></figure>

<p><img src="/2020/11/20/Redis/5.png" alt="watch-事务失败"></p>
<blockquote>
<p>如果发现事务失败，就先解锁，再加锁</p>
</blockquote>
<h1 id="JRedis"><a href="#JRedis" class="headerlink" title="JRedis"></a>JRedis</h1><blockquote>
<p>JRedis 是 Redis 官方推荐的 java 连接开发工具，使用 java 操作 Redis 的中间件</p>
</blockquote>
<h2 id="连接步骤"><a href="#连接步骤" class="headerlink" title="连接步骤"></a>连接步骤</h2><p><strong>1. 在服务器端配置远程连接</strong></p>
<p>（1）在阿里云服务器上安全组中开放端口6379</p>
<p>（2）在服务器端防火墙放行端口6379<br><img src="/2020/11/20/Redis/6.png" alt="防火墙放行端口"></p>
<p>（3）修改redis.conf文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/bin</span><br><span class="line">vim kconfig/redis.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更改两项键值对</span></span><br><span class="line"><span class="built_in">bind</span> 127.0.0.1      <span class="comment"># --&gt; 0.0.0.0</span></span><br><span class="line">protected-mode yes  <span class="comment"># --&gt; no</span></span><br></pre></td></tr></table></figure>

<p>（4）关闭正在进行的redis-server进程</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查询正在运行的redis-server进程</span></span><br><span class="line">ps -ef | grep redis</span><br><span class="line"></span><br><span class="line"><span class="comment"># 杀死正在运行的redis-server进程</span></span><br><span class="line"><span class="built_in">kill</span> -9 xxxx  <span class="comment"># xxxx为redis-server进程id</span></span><br></pre></td></tr></table></figure>

<p><strong>2. 在IDEA端配置Jedis环境</strong></p>
<p>（1）Maven工程中设置jdk8环境</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>（2）Maven工程中添加<code>jedis</code>、<code>fastjson</code>依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>（3）编写Java文件测试连接</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestPing</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testPing</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">"101.200.3.108"</span>,<span class="number">6379</span>);</span><br><span class="line">        System.out.println(jedis.ping());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="命令使用"><a href="#命令使用" class="headerlink" title="命令使用"></a>命令使用</h2><blockquote>
<p>Jedis 的命令和 Redis 是完全相同的</p>
</blockquote>
<h1 id="Redis-conf组成"><a href="#Redis-conf组成" class="headerlink" title="Redis.conf组成"></a>Redis.conf组成</h1><h2 id="按照配置文件启动"><a href="#按照配置文件启动" class="headerlink" title="按照配置文件启动"></a>按照配置文件启动</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ./redis-server /path/to/redis.conf</span></span><br><span class="line">redis-server /usr/<span class="built_in">local</span>/bin/kconfig/redis.conf</span><br></pre></td></tr></table></figure>

<h2 id="内存单位"><a href="#内存单位" class="headerlink" title="内存单位"></a>内存单位</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1k =&gt; 1000 bytes</span></span><br><span class="line"><span class="comment"># 1kb =&gt; 1024 bytes</span></span><br><span class="line"><span class="comment"># 1m =&gt; 1000000 bytes</span></span><br><span class="line"><span class="comment"># 1mb =&gt; 1024*1024 bytes</span></span><br><span class="line"><span class="comment"># 1g =&gt; 1000000000 bytes</span></span><br><span class="line"><span class="comment"># 1gb =&gt; 1024*1024*1024 bytes</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 单位忽略大小写</span></span><br></pre></td></tr></table></figure>

<h2 id="Includes"><a href="#Includes" class="headerlink" title="Includes"></a>Includes</h2><blockquote>
<p>包含一个或多个配置文件，多用于部署多个 Redis Server 时作为模板文件</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># include /path/to/local.conf</span></span><br><span class="line"><span class="comment"># include /path/to/other.conf</span></span><br></pre></td></tr></table></figure>

<h2 id="Modules"><a href="#Modules" class="headerlink" title="Modules"></a>Modules</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># loadmodule /path/to/my_module.so</span></span><br><span class="line"><span class="comment"># loadmodule /path/to/other_module.so</span></span><br></pre></td></tr></table></figure>

<h2 id="Network"><a href="#Network" class="headerlink" title="Network"></a>Network</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># bind 192.168.1.100 10.0.0.1   # 监听指定IP的连接</span></span><br><span class="line"><span class="comment"># bind 127.0.0.1 ::1            # 只监听本机的连接</span></span><br><span class="line"><span class="built_in">bind</span> 0.0.0.0                    <span class="comment"># 监听所有IP的连接</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># protected-mode yes            # 保护模式，是否允许非本机IP的连接</span></span><br><span class="line">protected-mode no</span><br><span class="line"></span><br><span class="line">port 6379                       <span class="comment"># TCP监听端口，若为0则表示不接受TCP请求</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## TCP listen() backlog</span></span><br><span class="line"><span class="comment"># /proc/sys/net/core/somaxconn somaxconn tcp_max_syn_backlog</span></span><br><span class="line">tcp-backlog 511                 <span class="comment"># TCP listen backlog</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## Unix Socket</span></span><br><span class="line"><span class="comment"># unixsocket /tmp/redis.sock</span></span><br><span class="line"><span class="comment"># unixsocketperm 700</span></span><br><span class="line">timeout 0                       <span class="comment"># 当用户空闲Ns时关闭连接</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## TCP keepalive</span></span><br><span class="line">tcp-keepalive 300               <span class="comment"># 当用户空闲时隔Ns发送一个ACK包试探其是否在线</span></span><br></pre></td></tr></table></figure>

<h2 id="General"><a href="#General" class="headerlink" title="General"></a>General</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 当开启daemonize时会用/var/run/redis/pid保存pid</span></span><br><span class="line">daemonize yes       <span class="comment"># 是否开启后台进程</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置保存pid的文件路径，默认是/var/run/redis/pid</span></span><br><span class="line">pidfile /var/run/redis_6379.pid</span><br><span class="line"></span><br><span class="line"><span class="comment">#   supervised no      - no supervision interaction</span></span><br><span class="line"><span class="comment">#   supervised upstart - signal upstart by putting Redis into SIGSTOP mode</span></span><br><span class="line"><span class="comment">#   supervised systemd - signal systemd by writing READY=1 to $NOTIFY_SOCKET</span></span><br><span class="line"><span class="comment">#   supervised auto    - detect upstart or systemd method based on</span></span><br><span class="line"><span class="comment">#                        UPSTART_JOB or NOTIFY_SOCKET environment variables</span></span><br><span class="line">supervised no</span><br><span class="line"></span><br><span class="line"><span class="comment"># 日志级别</span></span><br><span class="line"><span class="comment"># debug (a lot of information, useful for development/testing)</span></span><br><span class="line"><span class="comment"># verbose (many rarely useful info, but not a mess like the debug level)</span></span><br><span class="line"><span class="comment"># notice (moderately verbose, what you want in production probably)</span></span><br><span class="line"><span class="comment"># warning (only very important / critical messages are logged)</span></span><br><span class="line">loglevel notice</span><br><span class="line"></span><br><span class="line"><span class="comment"># 日志保存目录</span></span><br><span class="line"><span class="comment"># 空字符串 --&gt; 输出到控制台 --&gt; /dev/null</span></span><br><span class="line">logfile <span class="string">""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># syslog-enabled no         # 是否将日志输出到 system logger</span></span><br><span class="line"><span class="comment"># syslog-ident redis        # 指定系统目录的标识符</span></span><br><span class="line"><span class="comment"># syslog-facility local0    # 指定系统目录的工具 Must be USER or between LOCAL0-LOCAL7.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据库个数</span></span><br><span class="line">databases 16</span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否显示logo</span></span><br><span class="line">always-show-logo yes</span><br></pre></td></tr></table></figure>

<h2 id="SnapShotting"><a href="#SnapShotting" class="headerlink" title="SnapShotting"></a>SnapShotting</h2><blockquote>
<p>Save the DB on disk – 持久化保存<br>save &lt;seconds&gt; &lt;changes&gt;</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># save ""       # 清空所有save设置</span></span><br><span class="line">save 900 1      <span class="comment"># 900s内有1+ key发生更改则进行一次持久化     </span></span><br><span class="line">save 300 10     <span class="comment"># 300s内有10+ key发生更改则进行一次持久化</span></span><br><span class="line">save 60 10000   <span class="comment"># 60s内有10k+ key发生更改则进行一次持久化</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 持久化操作发生错误时是否停止</span></span><br><span class="line">stop-writes-on-bgsave-error yes</span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否压缩rdb文件</span></span><br><span class="line">rdbcompression yes</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存rdb文件时，是否进行错误的勘验</span></span><br><span class="line">rdbchecksum yes</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用于持久化的文件</span></span><br><span class="line">dbfilename dump.rdb</span><br><span class="line"></span><br><span class="line"><span class="comment"># rdb 文件保存的目录</span></span><br><span class="line">dir ./</span><br></pre></td></tr></table></figure>

<h2 id="Replication"><a href="#Replication" class="headerlink" title="Replication"></a>Replication</h2><blockquote>
<p>主从复制</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">replica-serve-stale-data yes</span><br><span class="line"></span><br><span class="line">replica-read-only yes</span><br><span class="line"></span><br><span class="line">repl-diskless-sync no</span><br><span class="line"></span><br><span class="line">repl-diskless-sync-delay 5</span><br><span class="line"></span><br><span class="line">repl-disable-tcp-nodelay no</span><br><span class="line"></span><br><span class="line">replica-priority 100</span><br></pre></td></tr></table></figure>

<h2 id="Security"><a href="#Security" class="headerlink" title="Security"></a>Security</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 登陆密码</span></span><br><span class="line">requirepass 123456Lq</span><br></pre></td></tr></table></figure>


<h2 id="Clients"><a href="#Clients" class="headerlink" title="Clients"></a>Clients</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 最大并发客户端数</span></span><br><span class="line"><span class="comment"># maxclients 10000</span></span><br></pre></td></tr></table></figure>

<h2 id="Memory-Management"><a href="#Memory-Management" class="headerlink" title="Memory Management"></a>Memory Management</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 内存上限</span></span><br><span class="line"><span class="comment"># maxmemory &lt;bytes&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># MAXMEMORY POLICY: how Redis will select what to remove when maxmemory</span></span><br><span class="line"><span class="comment"># volatile-lru -&gt; Evict using approximated LRU among the keys with an expire set.</span></span><br><span class="line"><span class="comment"># allkeys-lru -&gt; Evict any key using approximated LRU.</span></span><br><span class="line"><span class="comment"># volatile-lfu -&gt; Evict using approximated LFU among the keys with an expire set.</span></span><br><span class="line"><span class="comment"># allkeys-lfu -&gt; Evict any key using approximated LFU.</span></span><br><span class="line"><span class="comment"># volatile-random -&gt; Remove a random key among the ones with an expire set.</span></span><br><span class="line"><span class="comment"># allkeys-random -&gt; Remove a random key, any key.</span></span><br><span class="line"><span class="comment"># volatile-ttl -&gt; Remove the key with the nearest expire time (minor TTL)</span></span><br><span class="line"><span class="comment"># noeviction -&gt; Don't evict anything, just return an error on write operations.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Redis将选择的移除策略</span></span><br><span class="line"><span class="comment"># maxmemory-policy noeviction</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># maxmemory-samples 5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># replica-ignore-maxmemory yes</span></span><br></pre></td></tr></table></figure>

<h2 id="Lazy-Freeing"><a href="#Lazy-Freeing" class="headerlink" title="Lazy Freeing"></a>Lazy Freeing</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">lazyfree-lazy-eviction no</span><br><span class="line">lazyfree-lazy-expire no</span><br><span class="line">lazyfree-lazy-server-del no</span><br><span class="line">replica-lazy-flush no</span><br></pre></td></tr></table></figure>

<h2 id="Append-Only-Mode"><a href="#Append-Only-Mode" class="headerlink" title="Append Only Mode"></a>Append Only Mode</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 默认不开启aof模式，默认采用rdb方式进行持久化</span></span><br><span class="line">appendonly no</span><br><span class="line"></span><br><span class="line"><span class="comment"># 持久化文件的名字</span></span><br><span class="line">appendfilename <span class="string">"appendonly.aof"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># appendfsync no        # 不执行sync</span></span><br><span class="line"><span class="comment"># appendfsync always    # 每次修改执行一次sync</span></span><br><span class="line">appendfsync everysec    <span class="comment"># 每秒执行一次sync</span></span><br><span class="line"></span><br><span class="line">no-appendfsync-on-rewrite no</span><br><span class="line"></span><br><span class="line">auto-aof-rewrite-percentage 100</span><br><span class="line">auto-aof-rewrite-min-size 64mb</span><br><span class="line"></span><br><span class="line">aof-load-truncated yes</span><br><span class="line"></span><br><span class="line">aof-use-rdb-preamble yes</span><br></pre></td></tr></table></figure>

<h2 id="LUA-Scripting"><a href="#LUA-Scripting" class="headerlink" title="LUA Scripting"></a>LUA Scripting</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">lua-time-limit 5000</span><br></pre></td></tr></table></figure>

<h2 id="Redis-Cluster"><a href="#Redis-Cluster" class="headerlink" title="Redis Cluster"></a>Redis Cluster</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># cluster-enabled yes</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># cluster-config-file nodes-6379.conf</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># cluster-node-timeout 15000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># cluster-replica-validity-factor 10</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># cluster-migration-barrier 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># cluster-require-full-coverage yes</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># cluster-replica-no-failover no</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># cluster-announce-ip 10.1.1.5</span></span><br><span class="line"><span class="comment"># cluster-announce-port 6379</span></span><br><span class="line"><span class="comment"># cluster-announce-bus-port 6380</span></span><br></pre></td></tr></table></figure>

<h2 id="Slow-Log"><a href="#Slow-Log" class="headerlink" title="Slow Log"></a>Slow Log</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">slowlog-log-slower-than 10000</span><br><span class="line"></span><br><span class="line">slowlog-max-len 128</span><br></pre></td></tr></table></figure>

<h2 id="Latency-Monitor"><a href="#Latency-Monitor" class="headerlink" title="Latency Monitor"></a>Latency Monitor</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">latency-monitor-threshold 0</span><br></pre></td></tr></table></figure>

<h2 id="Event-Notification"><a href="#Event-Notification" class="headerlink" title="Event Notification"></a>Event Notification</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">notify-keyspace-events <span class="string">""</span></span><br></pre></td></tr></table></figure>

<h2 id="Advanced-Config"><a href="#Advanced-Config" class="headerlink" title="Advanced Config"></a>Advanced Config</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">hash</span>-max-ziplist-entries 512</span><br><span class="line"><span class="built_in">hash</span>-max-ziplist-value 64</span><br><span class="line"></span><br><span class="line">list-max-ziplist-size -2</span><br><span class="line"></span><br><span class="line">list-compress-depth 0</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span>-max-intset-entries 512</span><br><span class="line"></span><br><span class="line">zset-max-ziplist-entries 128</span><br><span class="line">zset-max-ziplist-value 64</span><br><span class="line"></span><br><span class="line">hll-sparse-max-bytes 3000</span><br><span class="line"></span><br><span class="line">stream-node-max-bytes 4096</span><br><span class="line">stream-node-max-entries 100</span><br><span class="line"></span><br><span class="line">activerehashing yes</span><br><span class="line"></span><br><span class="line">client-output-buffer-limit normal 0 0 0</span><br><span class="line">client-output-buffer-limit replica 256mb 64mb 60</span><br><span class="line">client-output-buffer-limit pubsub 32mb 8mb 60</span><br><span class="line"></span><br><span class="line"><span class="comment"># client-query-buffer-limit 1gb</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># proto-max-bulk-len 512mb</span></span><br><span class="line"></span><br><span class="line">hz 10</span><br><span class="line"></span><br><span class="line">dynamic-hz yes</span><br><span class="line"></span><br><span class="line">aof-rewrite-incremental-fsync yes</span><br><span class="line"></span><br><span class="line">rdb-save-incremental-fsync yes</span><br><span class="line"></span><br><span class="line"><span class="comment"># lfu-log-factor 10</span></span><br><span class="line"><span class="comment"># lfu-decay-time 1</span></span><br></pre></td></tr></table></figure>

<h2 id="Active-Defragmentation"><a href="#Active-Defragmentation" class="headerlink" title="Active Defragmentation"></a>Active Defragmentation</h2><h1 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h1><blockquote>
<p>Redis 是内存数据库，如果不将内存中的数据库状态保存到磁盘，那么一旦服务进程退出，服务器中的数据库状态也会消失。所以Redis提供了持久化功能。</p>
</blockquote>
<h2 id="RDB-Redis-Database"><a href="#RDB-Redis-Database" class="headerlink" title="RDB(Redis Database)"></a>RDB(Redis Database)</h2><blockquote>
<p>RDB通过写 rdb 文件来备份数据，默认保存在 dump.rdb 中。只需要将rdb文件放在redis的启动目录下，redis启动时会自动检测rdb文件来恢复其中数据</p>
</blockquote>
<p><img src="/2020/11/20/Redis/7.png" alt="RDB原理"></p>
<ul>
<li>在指定时间间隔内将内存中的数据集快照写入磁盘，它恢复时是将快照文件读入到内存中</li>
<li>Redis会单独创建一个子进程来进行持久化：先将数据写入一个临时持久化文件，等持久化操作结束后再用临时持久化文件替换上次持久化好的文件</li>
<li>整个过程中，主进程是不进行任何IO操作的，这就确保了极高的性能</li>
<li>如果需要大规模恢复数据且对数据完整性不敏感时，使用RDB比AOF方式更高效</li>
<li>RDB的缺点是最后一次持久化的数据可能丢失</li>
<li>默认情况下是使用RDB，一般情况下不需要更改这个配置</li>
</ul>
<p><strong>rdb文件默认为dump.rdb</strong></p>
<p><strong>优点</strong></p>
<ul>
<li>适合大规模的数据恢复</li>
<li>对数据完整性要求不高</li>
</ul>
<p><strong>缺点</strong></p>
<ul>
<li>需要一定的时间间隔进行操作</li>
<li>fork进程时，会占用一定的内存空阿金</li>
</ul>
<h2 id="AOF-Append-Only-File"><a href="#AOF-Append-Only-File" class="headerlink" title="AOF(Append Only File)"></a>AOF(Append Only File)</h2><blockquote>
<p>将所有命令记录下来，恢复的时候就把这个文件全部再执行一遍</p>
</blockquote>
<p><img src="/2020/11/20/Redis/8.png" alt="AOF原理"></p>
<ul>
<li>以日志的形式来记录每个写操作，将Redis执行过的指令记录下来（读操作不记录）</li>
<li>只许追加文件但不可以改写文件</li>
<li>Redis启动之初会读取该文件重新构建数据，即Redis重启会根据日志内容将写指令从前往后执行一次以完成数据的恢复</li>
<li>默认是不开启的</li>
</ul>
<p><strong>aof默认文件为appendonly.aof</strong></p>
<p>如果这个aof文件有错位，这时redis是启动不起来的，需要修复这个aof文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redis-check-aof --fix appendonly.aof</span><br></pre></td></tr></table></figure>

<p><strong>优点</strong></p>
<ul>
<li>每一次修改都同步；文件完整性会更好</li>
<li>每一秒同步一次：可能会丢失一秒数据</li>
<li>从不同步：效率最高</li>
</ul>
<p><strong>缺点</strong></p>
<ul>
<li>aof文件大小远大于rdb，修复速度也比rdb慢</li>
<li>aof运行效率也比rdb慢</li>
</ul>
<h1 id="发布订阅"><a href="#发布订阅" class="headerlink" title="发布订阅"></a>发布订阅</h1><p><img src="/2020/11/20/Redis/9.png" alt="Redis发布订阅"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 消息订阅端</span></span><br><span class="line">127.0.0.1:6379&gt; subscribe channel01</span><br><span class="line">Reading messages... (press Ctrl-C to quit)</span><br><span class="line">1) <span class="string">"subscribe"</span></span><br><span class="line">2) <span class="string">"channel01"</span></span><br><span class="line">3) (<span class="built_in">integer</span>) 1</span><br><span class="line">1) <span class="string">"message"</span></span><br><span class="line">2) <span class="string">"channel01"</span></span><br><span class="line">3) <span class="string">"hello,world"</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 消息发布duan</span></span><br><span class="line">127.0.0.1:6379&gt; publish channel01 <span class="string">"hello,world"</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br></pre></td></tr></table></figure>

<p><strong>原理</strong><br>维护一个字典，键为频道，值为一个链表，保存所有该频道的订阅者</p>
<h1 id="主从复制"><a href="#主从复制" class="headerlink" title="主从复制"></a>主从复制</h1><blockquote>
<p>将一台Redis服务器的数据，复制到其他的Redis服务器。前者称为主节点，后者称为从节点<br>数据复制是单向的，只能由主结点到从结点<br>一个主节点可以有多个从节点，但一个从节点只能有一个主节点</p>
</blockquote>
<p><strong>主从复制的作用</strong></p>
<ul>
<li>数据冗余：实现了数据的热备份，是持久化之外的一种数据冗余方式</li>
<li>故障恢复：当主节点出现故障时，可以由从节点提供服务，实现快速的故障恢复</li>
<li>负载均衡：在主从复制的基础上，配合读写分离。由主节点提供写服务，从节点提供读服务，分担服务器负载</li>
<li>高可用基石：主从复制是哨兵和集群能够实施的基础</li>
</ul>
]]></content>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring5学习记录</title>
    <url>/2020/12/19/Spring5%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote class="blockquote-center">
<p>^ _ ^ </p>

</blockquote>
<a id="more"></a>

<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><blockquote>
<p>Sping理念：使现有的技术更加容易使用。<br>Spring本身是一个大杂烩，整合了现有的技术框架</p>
</blockquote>
<p><img src="/2020/12/19/Spring5%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/2.png" alt></p>
<h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>官网：<a href="https://spring.io/projects" target="_blank" rel="noopener">https://spring.io/projects</a><br>官方下载地址：<a href="https://repo.spring.io/release/org/springframework/spring/" target="_blank" rel="noopener">https://repo.spring.io/release/org/springframework/spring/</a><br>Github：<a href="https://github.com/spring-projects/spring-framework" target="_blank" rel="noopener">https://github.com/spring-projects/spring-framework</a></p>
<p><strong>在Maven工程中需安装的依赖</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-webmvc --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.11.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-webmvc --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.11.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ul>
<li>Spring是一个开源的免费的框架（容器）</li>
<li>Spring是一个轻量级、非入侵式（导入后不会对原有项目造成影响）的框架</li>
<li>控制反转（IOC），面向切面编程（AOP）</li>
<li>支持事务的处理，对框架整合的支持（几乎能整合市面上所有的java框架）</li>
</ul>
<h2 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h2><p><img src="/2020/12/19/Spring5%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/1.png" alt></p>
<h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><p><strong>1. 创建父工程Spring-Study</strong></p>
<ul>
<li>New -&gt; Project -&gt; 普通Maven工程</li>
<li>对工程进行配置<br><img src="/2020/12/19/Spring5%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/3.png" alt></li>
<li>在pom.xml文件中添加依赖<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.11.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--junit--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>在pom.xml文件中配置编译环境为1.8<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--编译环境--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>删除Spring-Study工程下的source目录</li>
</ul>
<h1 id="IOC理论推导"><a href="#IOC理论推导" class="headerlink" title="IOC理论推导"></a>IOC理论推导</h1><p><strong>1. 创建子模块spring-01-ioc</strong></p>
<p><strong>2. 按照传统web编程模式编写一个小程序</strong><br><img src="/2020/12/19/Spring5%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/4.png" alt></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// UserDao</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">getUser</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// UserDaoImpl</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"数据库获取User"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// UserService</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">getUser</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// UserServiceImpl</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> UserDao userDao = <span class="keyword">new</span> UserDaoImpl();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">        userDao.getUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>3. 用测试类模拟客户端</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    UserService userService = <span class="keyword">new</span> UserServiceImpl();</span><br><span class="line">    userService.getUser();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/2020/12/19/Spring5%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/5.png" alt></p>
<p><strong>4. 提出问题</strong></p>
<blockquote>
<p>如果 UserDao 增加一个实现类会如何？</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserSqlDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Mysql数据库获取User"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>那么如果客户端想使用UserSqlDaoImpl实现类，需要程序猿在UserServiceImpl中进行更改</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> UserDao userDao = <span class="keyword">new</span> UserSqlDaoImpl();</span><br></pre></td></tr></table></figure>
<p>MyTest重新执行结果<br><img src="/2020/12/19/Spring5%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/6.png" alt></p>
<p><strong>5. 利用Set接口对程序进行修改</strong></p>
<ul>
<li>对UserServiceImpl进行如下修改<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> UserDao userDao;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserDao</span><span class="params">(UserDao userDao)</span></span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.userDao = userDao;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>客户端（Test）的调用变成<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">UserService userService = <span class="keyword">new</span> UserServiceImpl();</span><br><span class="line">userService.setUserDao(<span class="keyword">new</span> UserSqlDaoImpl());</span><br><span class="line">userService.getUser();</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p><strong>6. 结论</strong></p>
<ul>
<li>之前，程序是主动创建对象，控制权在程序猿手上</li>
<li>使用了set注入后，程序不再具有主动性，而是变成了被动接受对象</li>
</ul>
<p>这种思想，从本质上解决了问题，程序猿不用再去管理对象的创建了，系统的耦合性大大降低，可以更加专注在业务的实现上。</p>
<blockquote>
<p>这就是IOC的原型</p>
</blockquote>
<p><strong>7. IOC本质</strong><br>控制反转（Inversion of Control），是一种设计思想，DI（依赖注入）是实现IOC的一种方法。<br>我们使用面向对象编程，对象的创建与对象间的依赖关系完全硬编码在程序中，对象的创建由程序自己控制，控制反转将创建转移给第三方。<br>所谓控制反转就是：获得依赖的方式反转了。</p>
<p>控制反转是一种通过描述（XML或注解）并通过第三方去生产或获取特定对象的方式。在Spring中实现控制反转的是IOC容器，其实现方式是依赖注入。</p>
<h1 id="HelloSpring"><a href="#HelloSpring" class="headerlink" title="HelloSpring"></a>HelloSpring</h1><p><strong>1. 创建spring-02-hellospring模块</strong></p>
<p><strong>2. 在java目录下添加com.llunch4w.pojo.Hello类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>3. 在resources目录下添加beans.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--使用Spring来创建对象，在Spring里这些都称之为bean--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"hello"</span> <span class="attr">class</span>=<span class="string">"com.llunch4w.pojo.Hello"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"str"</span> <span class="attr">value</span>=<span class="string">"Spring"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>4. test/java目录下添加MyTest测试类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取Spring的上下文对象</span></span><br><span class="line">ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"beans.xml"</span>);</span><br><span class="line"><span class="comment">// 现在对象都在Spring中管理了，要使用的话直接从里面取出来即可</span></span><br><span class="line">Hello hello = (Hello)context.getBean(<span class="string">"hello"</span>);</span><br><span class="line">System.out.println(hello);</span><br></pre></td></tr></table></figure>

<h2 id="利用spring改写spring-01-ioc"><a href="#利用spring改写spring-01-ioc" class="headerlink" title="利用spring改写spring-01-ioc"></a>利用spring改写spring-01-ioc</h2><p><strong>1. 在resources目录下新建beans.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userDaoImpl"</span> <span class="attr">class</span>=<span class="string">"com.llunch4w.dao.UserDaoImpl"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userSqlDaoImpl"</span> <span class="attr">class</span>=<span class="string">"com.llunch4w.dao.UserSqlDaoImpl"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userServiceImpl"</span> <span class="attr">class</span>=<span class="string">"com.llunch4w.service.UserServiceImpl"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            ref：引用Spring容器中创建好的对象</span></span><br><span class="line"><span class="comment">            value：具体的值，基本数据类型</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"userDao"</span> <span class="attr">ref</span>=<span class="string">"userDaoImpl"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>2. 编写测试函数</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ClassPathXmlApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"beans.xml"</span>);</span><br><span class="line">UserService userService = (UserService)context.getBean(<span class="string">"userServiceImpl"</span>);</span><br><span class="line">userService.getUser();</span><br></pre></td></tr></table></figure>

<h1 id="IOC创建对象的方式"><a href="#IOC创建对象的方式" class="headerlink" title="IOC创建对象的方式"></a>IOC创建对象的方式</h1><ol>
<li>默认使用无参构造创建对象</li>
<li>使用有参构造<ul>
<li>下标赋值<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"user"</span> <span class="attr">class</span>=<span class="string">"com.llunch4w.pojo.User"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"0"</span> <span class="attr">value</span>=<span class="string">"kkk"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>类型赋值（不推荐使用）<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">"java.lang.String"</span> <span class="attr">value</span>=<span class="string">"kkk"</span> /&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>属性名赋值（推荐）<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"kkk"</span> /&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>在配置文件加载时，容器中的管理对象就已经初始化了；默认多次获取对象时返回的是同一个对象（单例模式）</li>
</ol>
<h1 id="Spring配置"><a href="#Spring配置" class="headerlink" title="Spring配置"></a>Spring配置</h1><h2 id="alias（别名）"><a href="#alias（别名）" class="headerlink" title="alias（别名）"></a>alias（别名）</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">alias</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">alias</span>=<span class="string">"userAlias"</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="bean"><a href="#bean" class="headerlink" title="bean"></a>bean</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    id : bean的唯一标识符</span></span><br><span class="line"><span class="comment">    class : bean对象所对应的全限定名</span></span><br><span class="line"><span class="comment">    name : 也是别名，而且name可以同时取多个别名，比alias更高级</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"user"</span> <span class="attr">class</span>=<span class="string">"com.llunch4w.pojo.User"</span> <span class="attr">name</span>=<span class="string">"u2,u3"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"kkk"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="import"><a href="#import" class="headerlink" title="import"></a>import</h2><blockquote>
<p>import，一般用于团队合作，他可以将多个配置文件导入合并为一个</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"beans2.xml"</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h1><h2 id="构造器注入"><a href="#构造器注入" class="headerlink" title="构造器注入"></a>构造器注入</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"user"</span> <span class="attr">class</span>=<span class="string">"com.llunch4w.pojo.User"</span> <span class="attr">name</span>=<span class="string">"u2,u3"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"kkk"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="Set方式注入"><a href="#Set方式注入" class="headerlink" title="Set方式注入"></a>Set方式注入</h2><p><strong>依赖注入</strong></p>
<ul>
<li>依赖：bean对象的创建依赖于容器</li>
<li>注入：bean对象中所有的属性，由容器来注入</li>
</ul>
<p><strong>1. 创建spring-04-di模块</strong></p>
<p><strong>2. 在java目录下com.llunch4w.pojo包中新建User类和Address类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// User</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Address address;</span><br><span class="line">    <span class="keyword">private</span> String[] books;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; hobbies;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,String&gt; card;</span><br><span class="line">    <span class="keyword">private</span> Set&lt;String&gt; games;</span><br><span class="line">    <span class="keyword">private</span> String wife;</span><br><span class="line">    <span class="keyword">private</span> Properties info;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Address</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Address</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>3. 在resources目录下添加beans.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"address"</span> <span class="attr">class</span>=<span class="string">"com.llunch4w.pojo.Address"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"长春"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"user"</span> <span class="attr">class</span>=<span class="string">"com.llunch4w.pojo.User"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--第一种，普通值注入，直接使用value--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"llunch"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--第二种，引用类型注入，使用ref--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"address"</span> <span class="attr">ref</span>=<span class="string">"address"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--数组类型注入--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"books"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>MyBatis入门<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>Spring入门<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>Javajingtong<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--list类型注入--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hobbies"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>唱歌<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>跳舞<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>Rap<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--map类型注入--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"card"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"身份证"</span> <span class="attr">value</span>=<span class="string">"122221212"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"银行卡"</span> <span class="attr">value</span>=<span class="string">"77777888"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--set类型注入--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"games"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>lol<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>bob<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>coc<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--null注入--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"wife"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">null</span>&gt;</span><span class="tag">&lt;/<span class="name">null</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--properties类型注入--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"info"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"学号"</span>&gt;</span>214389<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"性别"</span>&gt;</span>男<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"姓名"</span>&gt;</span>小明<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>4. 编写测试函数</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ClassPathXmlApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"beans.xml"</span>);</span><br><span class="line">User user = (User)context.getBean(<span class="string">"user"</span>);</span><br><span class="line">System.out.println(user);</span><br></pre></td></tr></table></figure>

<h2 id="c命名和p命名空间注入"><a href="#c命名和p命名空间注入" class="headerlink" title="c命名和p命名空间注入"></a>c命名和p命名空间注入</h2><p><strong>1. 新建User类演示命名空间注入</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>2. 编写studentBeans.xml</strong></p>
<blockquote>
<p>注意：需要导入p命名和c命名空间约束</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:c</span>=<span class="string">"http://www.springframework.org/schema/c"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>3. 使用p命名空间注入</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"student"</span> <span class="attr">class</span>=<span class="string">"com.llunch4w.pojo.Student"</span> <span class="attr">p:name</span>=<span class="string">"llunch"</span> <span class="attr">p:age</span>=<span class="string">"21"</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>4. 编写测试函数进行测试</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ClassPathXmlApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"studentBeans.xml"</span>);</span><br><span class="line">Student student = context.getBean(<span class="string">"student"</span>, Student<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">System.out.println(student);</span><br></pre></td></tr></table></figure>

<p><strong>5. 使用c命名空间注入</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"student"</span> <span class="attr">class</span>=<span class="string">"com.llunch4w.pojo.Student"</span> <span class="attr">c:name</span>=<span class="string">"llunch"</span> <span class="attr">c:age</span>=<span class="string">"21"</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>6. 结论</strong></p>
<ul>
<li>p命名空间相当于Set注入</li>
<li>c命名空间相当于构造器注入</li>
</ul>
<h1 id="bean的作用域"><a href="#bean的作用域" class="headerlink" title="bean的作用域"></a>bean的作用域</h1><p><img src="/2020/12/19/Spring5%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/7.png" alt></p>
<ul>
<li>单例模式（Spring默认机制）：多次从容器中获取返回的是同一对象<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"student"</span> <span class="attr">class</span>=<span class="string">"com.llunch4w.pojo.Student"</span> <span class="attr">c:name</span>=<span class="string">"llunch"</span> <span class="attr">c:age</span>=<span class="string">"21"</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">scope</span>=<span class="string">"singleton"</span>/&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>原型模式：多次从容器中获取返回的是不同对象<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"student"</span> <span class="attr">class</span>=<span class="string">"com.llunch4w.pojo.Student"</span> <span class="attr">c:name</span>=<span class="string">"llunch"</span> <span class="attr">c:age</span>=<span class="string">"21"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">scope</span>=<span class="string">"prototype"</span>/&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>其余的 request 、 session 、 application，这些只能在web开发中使用到</li>
</ul>
<h1 id="Bean的自动装配"><a href="#Bean的自动装配" class="headerlink" title="Bean的自动装配"></a>Bean的自动装配</h1><ul>
<li>自动装配是Spring满足bean依赖的一种方式</li>
<li>Spring会在上下文中自动寻找，并自动给bean装配属性</li>
</ul>
<p>在Spring中有3中装配方式：</p>
<ul>
<li>在xml中显式的配置</li>
<li>在java中显式配置</li>
<li>隐式的自动装配bean【重要】</li>
</ul>
<p><strong>1. 环境搭建</strong></p>
<ul>
<li>创建子模块spring-05-autowired</li>
<li>在java目录下添加包com.llunch4w.pojo，在pojo包中添加Cat、Dog、People<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Cat</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shout</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"miao~"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Dog</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shout</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"wang~"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// People</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">People</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Cat cat;</span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>resources目录下编写beans.xml文件<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"cat"</span> <span class="attr">class</span>=<span class="string">"com.llunch4w.pojo.Cat"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dog"</span> <span class="attr">class</span>=<span class="string">"com.llunch4w.pojo.Dog"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"people"</span> <span class="attr">class</span>=<span class="string">"com.llunch4w.pojo.People"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"llunch"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cat"</span> <span class="attr">ref</span>=<span class="string">"cat"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dog"</span> <span class="attr">ref</span>=<span class="string">"dog"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>编写测试函数<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"beans.xml"</span>);</span><br><span class="line">People people = context.getBean(<span class="string">"people"</span>, People<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">people.getCat().shout();</span><br><span class="line">people.getDog().shout();</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="xml文件实现自动装配"><a href="#xml文件实现自动装配" class="headerlink" title="xml文件实现自动装配"></a>xml文件实现自动装配</h2><p><strong>2. 更改beans.xml文件使其实现byName自动装配</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"people"</span> <span class="attr">class</span>=<span class="string">"com.llunch4w.pojo.People"</span> <span class="attr">autowire</span>=<span class="string">"byName"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"llunch"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>3. 更改beans.xml文件使其实现byType自动装配</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"people"</span> <span class="attr">class</span>=<span class="string">"com.llunch4w.pojo.People"</span> <span class="attr">autowire</span>=<span class="string">"byType"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"llunch"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>4. 小结</strong></p>
<ul>
<li>byName的时候，需要保证所有bean的id唯一，并且这个bean需要和自动注入的属性的set方法一致</li>
<li>byType的时候，需要保证所有bean的class唯一，并且这个bean需要和自动注入的属性的类型一致</li>
</ul>
<h2 id="注解实现自动装配"><a href="#注解实现自动装配" class="headerlink" title="注解实现自动装配"></a>注解实现自动装配</h2><p><em>jdk从1.5开始支持注解，spring从2.5开始支持注解</em></p>
<p>使用注解需要：</p>
<ul>
<li>导入约束 : context约束</li>
<li>配置注解的支持 : context:annotation-config</li>
</ul>
<p><strong>1. 修改beans.xml文件</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"cat"</span> <span class="attr">class</span>=<span class="string">"com.llunch4w.pojo.Cat"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dog"</span> <span class="attr">class</span>=<span class="string">"com.llunch4w.pojo.Dog"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"people"</span> <span class="attr">class</span>=<span class="string">"com.llunch4w.pojo.People"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="Autowired"><a href="#Autowired" class="headerlink" title="Autowired"></a>Autowired</h3><p><strong>2. 修改People类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">People</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Cat cat;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>3. 进行测试</strong></p>
<blockquote>
<p>输出结果与之前xml配置时一致，说明使用@Autowired注解自动装配成功</p>
</blockquote>
<p><strong>4. @Autowired小结</strong></p>
<ul>
<li>直接在属性上使用即可，也可在set方法上使用</li>
<li>使用Autowired后我们可以不用编写set方法了，但前提是这个自动装配的属性在IOC容器中存在，且符合名字</li>
</ul>
<h3 id="Qualifier"><a href="#Qualifier" class="headerlink" title="Qualifier"></a>Qualifier</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="meta">@Qualifier</span>(<span class="string">"cat"</span>)</span><br><span class="line"><span class="keyword">private</span> Cat cat;</span><br></pre></td></tr></table></figure>
<p><img src="/2020/12/19/Spring5%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/8.png" alt></p>
<blockquote>
<p>通常，Qualifier可以和Autowired组合使用，通过设置Qualifier的value值来显式的指定装配的对象（通过beans.xml中定义的bean id）</p>
</blockquote>
<h3 id="Resource"><a href="#Resource" class="headerlink" title="Resource"></a>Resource</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Resource</span>(name = <span class="string">"dog"</span>)</span><br><span class="line"><span class="keyword">private</span> Dog dog;</span><br></pre></td></tr></table></figure>

<ul>
<li>@Resource和@Autowired都是用来自动装配的，都可以放在属性字段上</li>
<li>@Autowired通过byType的方式实现，而且这个对象必须存在</li>
<li>@Resource默认通过byName的方式实现，如果找不到名字，则通过byType</li>
</ul>
<h3 id="Nullable"><a href="#Nullable" class="headerlink" title="Nullable"></a>Nullable</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 如果显式地定义了Autowired的required属性为false，说明这个对象可以为null，否则不允许为空</span></span><br><span class="line"><span class="meta">@Autowired</span>(required=<span class="keyword">false</span>)</span><br><span class="line"><span class="comment">// 在参数前面添加Nullable，表示该参数可以为null类型</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br></pre></td></tr></table></figure>

<h1 id="使用注解开发"><a href="#使用注解开发" class="headerlink" title="使用注解开发"></a>使用注解开发</h1><p><strong>前提条件</strong></p>
<ol>
<li>在Spring4之后，要使用注解开发，必须要保证aop包的导入<br><img src="/2020/12/19/Spring5%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/9.png" alt></li>
<li>使用注解需要导入context约束，增加注解的支持<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="扫描指定包下的注解"><a href="#扫描指定包下的注解" class="headerlink" title="扫描指定包下的注解"></a>扫描指定包下的注解</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.llunch4w"</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><h3 id="Component"><a href="#Component" class="headerlink" title="@Component"></a>@Component</h3><blockquote>
<p>组件，放在类上，说明这个类被Spring管理了，就是bean</p>
</blockquote>
<p>@Component有几个衍生注解，在web开发中，会按照mvc三层架构分层</p>
<ul>
<li>dao : @Repository</li>
<li>service : @Service</li>
<li>controller : @Controller</li>
</ul>
<p>这四个注解的功能是一样的，都代表将某个类注册到Spring容器中，装配Bean</p>
<h3 id="Value"><a href="#Value" class="headerlink" title="@Value"></a>@Value</h3><blockquote>
<p>进行属性注入</p>
</blockquote>
<h3 id="自动装配注解"><a href="#自动装配注解" class="headerlink" title="自动装配注解"></a>自动装配注解</h3><ul>
<li>@Autowired</li>
<li>@Qualifier</li>
<li>@Resource</li>
<li>@Nullable</li>
</ul>
<h3 id="Scope"><a href="#Scope" class="headerlink" title="@Scope"></a>@Scope</h3><blockquote>
<p>进行作用域设置</p>
</blockquote>
<p><strong>作用域可选值</strong></p>
<ul>
<li>singleton</li>
<li>prototype</li>
<li>request</li>
<li>session</li>
<li>application</li>
</ul>
<h2 id="实例演示"><a href="#实例演示" class="headerlink" title="实例演示"></a>实例演示</h2><ul>
<li>新建模块spring-06-anno</li>
<li>java目录下新建com.llunch4w包，再在此包下新建dao、pojo、controller、service包，并添加相应代码<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// User</span></span><br><span class="line"><span class="keyword">package</span> com.llunch4w.pojo;</span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="comment">/*相当于&lt;bean id="user" class="com.llunch4w.pojo.User"&gt;*/</span></span><br><span class="line"><span class="meta">@Scope</span>(<span class="string">"prototype"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*相当于&lt;property name="name" value="llunch" /&gt; */</span></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"llunch"</span>)</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"18"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// UserDao</span></span><br><span class="line"><span class="keyword">package</span> com.llunch4w.dao;</span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// UserService</span></span><br><span class="line"><span class="keyword">package</span> com.llunch4w.service;</span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// UserController</span></span><br><span class="line"><span class="keyword">package</span> com.llunch4w.controller;</span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>在resources目录下添加beans.xml<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.llunch4w"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>创建测试函数<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"beans.xml"</span>);</span><br><span class="line">User user1 = context.getBean(<span class="string">"user"</span>, User<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">System.out.println(user1);</span><br><span class="line"></span><br><span class="line">User user2 = context.getBean(<span class="string">"user"</span>, User<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">System.out.println(user1 == user2);</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="xml与注解比较"><a href="#xml与注解比较" class="headerlink" title="xml与注解比较"></a>xml与注解比较</h2><ul>
<li>xml更加万能，适用于任何场合，维护简单方便</li>
<li>注解不是自己的类用不了，维护相对复杂</li>
</ul>
<p>最佳实践：</p>
<ul>
<li>xml用来管理bean</li>
<li>注解只负责完成属性的注入</li>
</ul>
<h1 id="使用Java方式配置Spring"><a href="#使用Java方式配置Spring" class="headerlink" title="使用Java方式配置Spring"></a>使用Java方式配置Spring</h1><p>我们现在完全不需要Spring的xml配置了，全权交给Java来做。<br>JavaConfig是Spring的一个子项目，在Spring4之后，它成为了一个核心功能。</p>
<p><strong>1. 创建子模块spring-07-config</strong></p>
<p><strong>2. 在java目录下添加com.llunch4w包，再在此包下添加pojo包，包中添加User类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"llunch"</span>)</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"18"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>3. 在com.llunch4w包下添加config包，包中添加MyConfig类</strong></p>
<blockquote>
<p>Configuration本质也是一个Component，代表该类交给Spring容器托管，它的作用相当于一个配置文件beans.xml</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(<span class="string">"com.llunch4w.pojo"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">user</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> User();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>4. 编写测试函数</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ApplicationContext context = <span class="keyword">new</span> AnnotationConfigApplicationContext(MyConfig<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">User user = context.getBean(<span class="string">"user"</span>, User<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">System.out.println(user);</span><br></pre></td></tr></table></figure>

<p><strong>5. MyConfig中也可以引用其他的配置类</strong></p>
<ul>
<li>在pojo包下新建一个AnotherUser类<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnotherUser</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"another"</span>)</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>在config包下新建一个AnotherConfig类<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(<span class="string">"com.llunch4w.pojo"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnotherConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AnotherUser <span class="title">getAnotherUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AnotherUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>在MyConfig中引入AnotherConfig<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(<span class="string">"com.llunch4w.pojo"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnotherConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AnotherUser <span class="title">getAnotherUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AnotherUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>测试用MyConfig获取AnotherUser<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ApplicationContext context = <span class="keyword">new</span> AnnotationConfigApplicationContext(MyConfig<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">AnotherUser anotherUser = context.getBean(<span class="string">"getAnotherUser"</span>, AnotherUser<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">System.out.println(anotherUser);</span><br></pre></td></tr></table></figure>

</li>
</ul>
<blockquote>
<p>纯Java配置在SpringBoot中是很常见的</p>
</blockquote>
<h1 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h1><p><img src="/2020/12/19/Spring5%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/10.png" alt></p>
<h2 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h2><p><strong>角色分析：</strong></p>
<ul>
<li>抽象角色：一般使用接口或者抽象类来解决</li>
<li>真实角色：被代理的角色</li>
<li>代理角色：代理真实角色，代理真实角色后，一般会做一些附属操作</li>
<li>客户：访问代理对象的人</li>
</ul>
<h3 id="静态代理编码实例"><a href="#静态代理编码实例" class="headerlink" title="静态代理编码实例"></a>静态代理编码实例</h3><p><strong>1. 创建子模块spring-08-proxy</strong></p>
<p><strong>2. 在java目录下添加com.llunch4w.demo1包</strong></p>
<p><strong>3. 在demo1包下添加Rent接口</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Rent</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">rent</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>4. 在demo1包下添加Host类（房东）</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Host</span> <span class="keyword">implements</span> <span class="title">Rent</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"房东出租房子"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>5. 在demo1包下添加Proxy类（代理）</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Proxy</span> <span class="keyword">implements</span> <span class="title">Rent</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Host host;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Host <span class="title">getHost</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> host;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHost</span><span class="params">(Host host)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.host = host;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">seeHouse</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"代理用户看房"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fare</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"代理端收费"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        seeHouse();</span><br><span class="line">        host.rent();</span><br><span class="line">        fare();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>6. 编写客户端代码</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Host host = <span class="keyword">new</span> Host();</span><br><span class="line">        Proxy proxy = <span class="keyword">new</span> Proxy();</span><br><span class="line">        proxy.setHost(host);</span><br><span class="line">        proxy.rent();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>代理模式的好处：</p>
<ul>
<li>可以使真实角色的操作更加纯粹，不用去关注一些公共的业务</li>
<li>公共业务交给代理角色，实现了业务分工</li>
<li>公共业务产生拓展时，方便集中管理<br>代理模式的缺点：</li>
<li>一个真实角色就会产生一个代理角色，代码量翻倍，开发效率会变低</li>
</ul>
<p><img src="/2020/12/19/Spring5%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/11.png" alt></p>
<blockquote>
<p>代理模式本质上是实现横向开发，即在不改变原有代码的前提下增加一些功能。而实现这个需求的方式就是：创建一个代理类，让代理类做增加的工作，然后调用原有类实现原有功能。</p>
</blockquote>
<h3 id="横向修改编码实例"><a href="#横向修改编码实例" class="headerlink" title="横向修改编码实例"></a>横向修改编码实例</h3><p><strong>1. 创建demo2包</strong></p>
<p><strong>2. 添加UserServiceImpl类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"添加用户"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"删除用户"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>3. 编写客户端代码使用UserServiceImpl类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        UserServiceImpl userService = <span class="keyword">new</span> UserServiceImpl();</span><br><span class="line">        userService.add();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>4. 提出问题</strong></p>
<blockquote>
<p>如果要添加一个新功能：即将UserServiceImpl的行为记录一份日志，该如何修改呢？</p>
</blockquote>
<p><strong>5. 第一种解决方案</strong></p>
<blockquote>
<p>修改UserServiceImpl类</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>&#123;</span><br><span class="line">        log(<span class="string">"UserServiceImpl添加用户"</span>);</span><br><span class="line">        System.out.println(<span class="string">"添加用户"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span></span>&#123;</span><br><span class="line">        log(<span class="string">"UserServiceImpl删除用户"</span>);</span><br><span class="line">        System.out.println(<span class="string">"删除用户"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">log</span><span class="params">(String msg)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"[Info] : "</span> + msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>但这样修改的弊端很明显，就是修改了原有代码，违背了开闭原则</p>
</blockquote>
<p><strong>6. 第二种解决方案</strong></p>
<blockquote>
<p>更优的一种解决方案应该是：添加一个新的类，使新增的功能在新增类中实现。对原有的UserServiceImpl类不作任何修改</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"添加用户"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"删除用户"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Proxy</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> UserServiceImpl service;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setService</span><span class="params">(UserServiceImpl service)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.service = service;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>&#123;</span><br><span class="line">        log(<span class="string">"UserServiceImpl添加用户"</span>);</span><br><span class="line">        service.add();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span></span>&#123;</span><br><span class="line">        log(<span class="string">"UserServiceImpl删除用户"</span>);</span><br><span class="line">        service.delete();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">log</span><span class="params">(String msg)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"[Info] : "</span> + msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        UserServiceImpl userService = <span class="keyword">new</span> UserServiceImpl();</span><br><span class="line">        Proxy proxy = <span class="keyword">new</span> Proxy();</span><br><span class="line">        proxy.setService(userService);</span><br><span class="line">        proxy.add();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>这样就满足了开闭原则：对拓展开放，对修改关闭</p>
</blockquote>
<h2 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h2><ul>
<li>动态代理的角色和静态代理一样</li>
<li>动态代理的代理类是动态生成的，不是我们直接写的</li>
<li>动态代理分为两大类：基于接口的动态代理和基于类的动态代理<ul>
<li>基于接口 – JDK 动态代理</li>
<li>基于类 – cglib</li>
<li>java字节码实现 – javasist</li>
</ul>
</li>
</ul>
<p>需要了解两个类：Proxy（代理）、InvocationHandler（调用处理程序）</p>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p><strong>1. 准备工作</strong></p>
<ul>
<li>创建demo3包</li>
<li>将demo1包中的Rent接口和Host类复制到demo3包下</li>
</ul>
<p><strong>2. 创建动态代理调用处理类ProxyInvocationHandler</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用这个类，自动生成代理类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyInvocationHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 被代理的接口</span></span><br><span class="line">    <span class="keyword">private</span> Rent rent;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRent</span><span class="params">(Rent rent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.rent = rent;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 生成得到代理类</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getProxy</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Proxy.newProxyInstance(<span class="keyword">this</span>.getClass().getClassLoader(),rent.getClass().getInterfaces(),<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理实例，并返回结果</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object o, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="comment">// 动态代理的本质，就是使用反射机制</span></span><br><span class="line">        Object result = method.invoke(rent,args);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>3. 编写Client类并利用ProxyInvocationHandler类生成代理类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 真实角色</span></span><br><span class="line">        Host host = <span class="keyword">new</span> Host();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用程序处理角色</span></span><br><span class="line">        ProxyInvocationHandler invocationHandler = <span class="keyword">new</span> ProxyInvocationHandler();</span><br><span class="line">        <span class="comment">// 通过调用程序处理角色来处理我们要调用的接口对象</span></span><br><span class="line">        invocationHandler.setRent(host);</span><br><span class="line"></span><br><span class="line">        Rent proxy = (Rent)invocationHandler.getProxy();</span><br><span class="line">        proxy.rent();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>4. 如果要给Proxy类添加功能，只需修改ProxyInvocationHandler类的invoke函数</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object o, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">    seeHouse();</span><br><span class="line">    <span class="comment">// 动态代理的本质，就是使用反射机制</span></span><br><span class="line">    Object result = method.invoke(rent,args);</span><br><span class="line">    fare();</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">seeHouse</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"中介带你看房"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fare</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"收中介费"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>5. 创建demo4，演示利用ProxyInvocationHandler改造</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"添加用户"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"删除用户"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyInvocationHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 被代理的接口</span></span><br><span class="line">    <span class="keyword">private</span> Object target;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTarget</span><span class="params">(Object target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 生成得到代理类</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getProxy</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Proxy.newProxyInstance(<span class="keyword">this</span>.getClass().getClassLoader(),target.getClass().getInterfaces(),<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理实例，并返回结果</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object o, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        log(method.getName());</span><br><span class="line">        <span class="comment">// 动态代理的本质，就是使用反射机制</span></span><br><span class="line">        Object result = method.invoke(target,args);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">log</span><span class="params">(String msg)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"[Info] : 执行了 "</span> + msg + <span class="string">" 方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 真实角色</span></span><br><span class="line">        UserService userService = <span class="keyword">new</span> UserServiceImpl();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用程序处理角色</span></span><br><span class="line">        ProxyInvocationHandler invocationHandler = <span class="keyword">new</span> ProxyInvocationHandler();</span><br><span class="line">        <span class="comment">// 通过调用程序处理角色来处理我们要调用的接口对象</span></span><br><span class="line">        invocationHandler.setTarget(userService);</span><br><span class="line"></span><br><span class="line">        UserService proxy = (UserService)invocationHandler.getProxy();</span><br><span class="line">        proxy.add();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h1><blockquote>
<p>Aspect Oriented Programming，面向切片编程，通过预编译方式和运行期动态代理实现程序功能统一维护的一种技术</p>
</blockquote>
<p><strong>AOP在Spring中的作用</strong></p>
<blockquote>
<p>提供声明式事务，允许用户自定义切面</p>
</blockquote>
<ul>
<li>横切关注点：跨越应用程序多个模块的方法或功能。即是，与业务逻辑无关，但我们需要关注的部分，就是横切关注点，如日志、安全、缓存、事务等</li>
<li>切面（Aspect）：横切关注点被模块化后的特殊对象。即它是一个类</li>
<li>通知（Advice）：切面必须完成的工作。即，它是类中的一个方法</li>
<li>目标（Target）：被通知的对象</li>
<li>代理（Proxy）：向目标对象应用通知之后创建的对象</li>
<li>切入点（PointCut）：切面通知执行的“地点”的定义</li>
<li>连接点（JointPoint）：与切入点匹配的执行点</li>
</ul>
<p><strong>Spring中支持5种类型的Advice</strong><br><img src="/2020/12/19/Spring5%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/12.png" alt></p>
<h2 id="Spring中使用AOP"><a href="#Spring中使用AOP" class="headerlink" title="Spring中使用AOP"></a>Spring中使用AOP</h2><p><strong>使用AOP织入，需要导入一个依赖包</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.aspectj/aspectjweaver --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>1. 创建子模块spring-09-aop</strong></p>
<p><strong>2. 在模块的pom.xml中导入aspectjweaver依赖</strong></p>
<p><strong>3. 在java目录下添加com.llunch4w包，包下添加service包和log包</strong></p>
<p><strong>4. service包下添加UserService接口和UserServiceImpl类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">select</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"新增了一个用户"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"删除了一个用户"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"更新了一个用户"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">select</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"查找用户"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h3><blockquote>
<p>使用 Spring API接口</p>
</blockquote>
<p><strong>5. log包下添加Log类和AfterLog类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Log</span> <span class="keyword">implements</span> <span class="title">MethodBeforeAdvice</span> </span>&#123;</span><br><span class="line">    <span class="comment">/* method : 要执行的目标对象的方法</span></span><br><span class="line"><span class="comment">    *  args   : 参数</span></span><br><span class="line"><span class="comment">    *  target : 目标对象</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">(Method method, Object[] args, Object target)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(target.getClass().getName() + <span class="string">"的"</span> + method.getName() + <span class="string">"被执行了"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AfterLog</span> <span class="keyword">implements</span> <span class="title">AfterReturningAdvice</span> </span>&#123;</span><br><span class="line">    <span class="comment">// returnValue : 返回值</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterReturning</span><span class="params">(Object returnValue, Method method, Object[] args, Object target)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(target.getClass().getName() + <span class="string">"的"</span> + method.getName() + <span class="string">"被执行了，返回结果为："</span> + returnValue);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>6. 在resources包下添加applicationContext.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/aop/spring-aop.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--注册bean--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userService"</span> <span class="attr">class</span>=<span class="string">"com.llunch4w.service.UserServiceImpl"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"log"</span> <span class="attr">class</span>=<span class="string">"com.llunch4w.log.Log"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"afterLog"</span> <span class="attr">class</span>=<span class="string">"com.llunch4w.log.AfterLog"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置aop，需要导入aop的约束--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--切入点--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"pointcut"</span> <span class="attr">expression</span>=<span class="string">"execution(* com.llunch4w.service.UserServiceImpl.*(..))"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--执行环绕增加--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"log"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pointcut"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"afterLog"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pointcut"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>7. 编写测试函数</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">        UserService userService = (UserService) context.getBean(<span class="string">"userService"</span>);</span><br><span class="line">        userService.add();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>测试结果：<br><img src="/2020/12/19/Spring5%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/13.png" alt></p>
<h3 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h3><blockquote>
<p>自定义实现aop</p>
</blockquote>
<p><strong>5. 在diy包下自定义切片类DiyPointCut</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DiyPointCut</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"========方法执行前========="</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"========方法执行后========="</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>6. 在applicationContext.xml中配置</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/aop/spring-aop.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userService"</span> <span class="attr">class</span>=<span class="string">"com.llunch4w.service.UserServiceImpl"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"diy"</span> <span class="attr">class</span>=<span class="string">"com.llunch4w.diy.DiyPointCut"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--自定义切面,ref为要引用的类--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">"diy"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--切点--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"point"</span> <span class="attr">expression</span>=<span class="string">"execution(* com.llunch4w.service.UserServiceImpl.*(..))"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">"before"</span> <span class="attr">pointcut-ref</span>=<span class="string">"point"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:after-returning</span> <span class="attr">method</span>=<span class="string">"after"</span> <span class="attr">pointcut-ref</span>=<span class="string">"point"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>7. 重新执行测试函数</strong><br><img src="/2020/12/19/Spring5%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/14.png" alt></p>
<h3 id="方式三"><a href="#方式三" class="headerlink" title="方式三"></a>方式三</h3><blockquote>
<p>使用注解实现</p>
</blockquote>
<p><strong>5. 在diy包下创建AnnotationPointCut类并使用注解标注其为切面</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnnotationPointCut</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Before</span>(<span class="string">"execution(* com.llunch4w.service.UserServiceImpl.*(..))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"========方法执行前========="</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span>(<span class="string">"execution(* com.llunch4w.service.UserServiceImpl.*(..))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"========方法执行后========="</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在环绕增强中，我们可以给定一个参数，代表我们要处理切入的点</span></span><br><span class="line">    <span class="meta">@Around</span>(<span class="string">"execution(* com.llunch4w.service.UserServiceImpl.*(..))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">around</span><span class="params">(ProceedingJoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"环绕前"</span>);</span><br><span class="line"></span><br><span class="line">        Signature signature = joinPoint.getSignature();</span><br><span class="line">        System.out.println(<span class="string">"signature : "</span> + signature);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 执行方法</span></span><br><span class="line">        Object proceed = joinPoint.proceed();</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">"环绕后"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>6. 修改applicationContext.xml文件</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/aop/spring-aop.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userService"</span> <span class="attr">class</span>=<span class="string">"com.llunch4w.service.UserServiceImpl"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"annotationPointCut"</span> <span class="attr">class</span>=<span class="string">"com.llunch4w.diy.AnnotationPointCut"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--开启注解--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>7. 重新执行测试函数</strong><br><img src="/2020/12/19/Spring5%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/15.png" alt></p>
<h1 id="整合MyBatis"><a href="#整合MyBatis" class="headerlink" title="整合MyBatis"></a>整合MyBatis</h1><h2 id="依赖包"><a href="#依赖包" class="headerlink" title="依赖包"></a>依赖包</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--mysql驱动--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--mybatis--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--junit--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--spring--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.11.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--spring想要操纵数据库的话，还需要一个spring-jdbc--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--aop织入包--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--mybatis-spring--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="回顾创建一个mybatis工程"><a href="#回顾创建一个mybatis工程" class="headerlink" title="回顾创建一个mybatis工程"></a>回顾创建一个mybatis工程</h2><p><strong>1. 创建子模块spring-10-mybatis</strong></p>
<p><strong>2. 导入依赖</strong></p>
<p><strong>3. 在build中配置resources，来防止资源导出失败的问题</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--在build中配置resources，来放置资源导出失败问题--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>4. java目录下创建com.llunch4w包，该包下创建pojo包、mapper包、utils包</strong></p>
<p><strong>5. pojo包中添加User类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String pwd;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>6. 在utils包下编写MyBatisUtil类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBatisUtil</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SqlSessionFactory sqlSessionFactory;</span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            String resource = <span class="string">"mybatis-config.xml"</span>;</span><br><span class="line">            InputStream inputStream = Resources.getResourceAsStream(resource);</span><br><span class="line">            sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SqlSession <span class="title">getSqlSession</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sqlSessionFactory.openSession(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>7. mapper包下创建UserMapper接口</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">queryAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>8. mapper包下创建userMapper.xml文件</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.llunch4w.mapper.UserMapper"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryAll"</span> <span class="attr">resultType</span>=<span class="string">"com.llunch4w.pojo.User"</span>&gt;</span></span><br><span class="line">        select * from user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>9. resources目录下添加mybatis-config.xml文件和jdbc.properties文件</strong></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">driver</span> = <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">url</span> = <span class="string">jdbc:mysql://localhost:3307/mybatis?useSSL=false&amp;useUnicode=true&amp;charsetEncoding=UTF-8&amp;serverTimezone=UTC</span></span><br><span class="line"><span class="attr">username</span> = <span class="string">root</span></span><br><span class="line"><span class="attr">password</span> = <span class="string">MyNewPass</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--引入外部配置文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">"jdbc.properties"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com.llunch4w.pojo"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"$&#123;driver&#125;"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;url&#125;"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;username&#125;"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;password&#125;"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com.llunch4w.mapper"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>10. 编写测试函数测试</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 获取session</span></span><br><span class="line">    SqlSession sqlSession = MyBatisUtil.getSqlSession();</span><br><span class="line">    <span class="comment">// 获取mapper</span></span><br><span class="line">    UserMapper userMapper = sqlSession.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    <span class="comment">// 操纵mapper</span></span><br><span class="line">    List&lt;User&gt; allUserList = userMapper.queryAll();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (User user : allUserList) &#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 关闭session</span></span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="MyBatis-Spring"><a href="#MyBatis-Spring" class="headerlink" title="MyBatis-Spring"></a>MyBatis-Spring</h2><p>MyBatis-Spring官方文档：<a href="https://mybatis.org/spring/zh/" target="_blank" rel="noopener">https://mybatis.org/spring/zh/</a></p>
<h3 id="方式一-1"><a href="#方式一-1" class="headerlink" title="方式一"></a>方式一</h3><p><strong>1. 编写spring-dao.xml文件</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        DataSource:使用Spring的数据源替换MyBatis的配置 c3p0 dbcp druid</span></span><br><span class="line"><span class="comment">        这里使用Spring提供的JDBC ：org.springframework.jdbc.datasource</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DriverManagerDataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3307/mybatis?useSSL=false<span class="symbol">&amp;amp;</span>useUnicode=true<span class="symbol">&amp;amp;</span>charsetEncoding=UTF-8<span class="symbol">&amp;amp;</span>serverTimezone=UTC"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"MyNewPass"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--SqlSessionFactory--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--绑定MyBatis配置文件--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"configLocation"</span> <span class="attr">value</span>=<span class="string">"classpath:mybatis-config.xml"</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--以下这句不起效果，原因未知--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;property name="mapperLocations" value="classpath:com/llunch4w/mapper/*.xml" /&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--SqlSessionTemplate : 使用sqlSession--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSession"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionTemplate"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--只能使用构造器注入sqlSessionFactory--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">ref</span>=<span class="string">"sqlSessionFactory"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>2. 去掉jdbc.properties文件，改写mybatis-config.xml文件</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com.llunch4w.pojo"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com.llunch4w.mapper"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>3. mapper包下编写UserMapperImpl类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserMapperImpl</span> <span class="keyword">implements</span> <span class="title">UserMapper</span></span>&#123;</span><br><span class="line">    <span class="comment">// 我们的所有操作，在原来都使用sqlSession来执行，而现在使用的是sqlSessionTemplate</span></span><br><span class="line">    <span class="keyword">private</span> SqlSessionTemplate sqlSession;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSqlSession</span><span class="params">(SqlSessionTemplate sqlSession)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sqlSession = sqlSession;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">queryAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        UserMapper userMapper = sqlSession.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="keyword">return</span> userMapper.queryAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>4. 编写applicationContext.xml文件</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"spring-dao.xml"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userMapper"</span> <span class="attr">class</span>=<span class="string">"com.llunch4w.mapper.UserMapperImpl"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sqlSession"</span> <span class="attr">ref</span>=<span class="string">"sqlSession"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>5. 编写测试函数</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">UserMapper userMapper = context.getBean(<span class="string">"userMapper"</span>, UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">List&lt;User&gt; userList = userMapper.queryAll();</span><br><span class="line"><span class="keyword">for</span> (User user : userList) &#123;</span><br><span class="line">    System.out.println(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="方式二-1"><a href="#方式二-1" class="headerlink" title="方式二"></a>方式二</h3><p><strong>1. 在mapper包下添加UserMapperImpl2类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserMapperImpl2</span> <span class="keyword">extends</span> <span class="title">SqlSessionDaoSupport</span> <span class="keyword">implements</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">queryAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        SqlSession sqlSession = getSqlSession();</span><br><span class="line">        UserMapper userMapper = sqlSession.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="keyword">return</span> userMapper.queryAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>2. 修改applicationContext.xml文件</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userMapper"</span> <span class="attr">class</span>=<span class="string">"com.llunch4w.mapper.UserMapperImpl2"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">ref</span>=<span class="string">"sqlSessionFactory"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>3. 重新执行方式一中的测试函数</strong></p>
<h1 id="声明式事务"><a href="#声明式事务" class="headerlink" title="声明式事务"></a>声明式事务</h1><p><strong>事务</strong></p>
<blockquote>
<p>把一组业务当做一个业务来做；要么都成功，要么都失败</p>
</blockquote>
<p><strong>Spring中的事务管理</strong></p>
<ul>
<li>声明式事务：AOP</li>
<li>编程式事务：需要在代码中进行事务管理</li>
</ul>
<h2 id="实例演示-1"><a href="#实例演示-1" class="headerlink" title="实例演示"></a>实例演示</h2><p><strong>1. 创建模块spring-11-transcation，将spring-10-mybatis中的内容搬过来</strong></p>
<ul>
<li>代码搬过来</li>
<li>配置文件搬过来</li>
<li>pom.xml中的依赖和build搬过来</li>
</ul>
<p><strong>2. 在UserMapper接口中添加add方法和delete方法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(User user)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">delete</span><span class="params">(@Param(<span class="string">"id"</span>)</span> <span class="keyword">int</span> id)</span>;</span><br></pre></td></tr></table></figure>

<p><strong>3. 修改userMapper.xml文件</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"add"</span> <span class="attr">parameterType</span>=<span class="string">"User"</span>&gt;</span></span><br><span class="line">    insert into user(id,name,pwd) values(#&#123;id&#125;,#&#123;name&#125;,#&#123;pwd&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"delete"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span>&gt;</span></span><br><span class="line">    delete from user where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>4. UserMapperImpl类添加新增接口函数的实现</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> sqlSession.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>).<span class="title">add</span>(<span class="title">user</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">delete</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> sqlSession.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>).<span class="title">delete</span>(<span class="title">id</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>5. 编写测试函数</strong></p>
<blockquote>
<p>测试通过则说明基本环境搭建成功</p>
</blockquote>
<p><strong>6. 提出问题</strong><br>假设UserMapperImpl类中的queryAll方法是这样写的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">queryAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    UserMapper userMapper = sqlSession.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    userMapper.add(<span class="keyword">new</span> User(<span class="number">13</span>,<span class="string">"李明"</span>,<span class="string">"1234"</span>));</span><br><span class="line">    userMapper.delete(<span class="number">13</span>);</span><br><span class="line">    <span class="keyword">return</span> userMapper.queryAll();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>而delete方法对应的sql语句出现了错误：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"delete"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span>&gt;</span></span><br><span class="line">    deletes from user where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>那么，执行queryAll方法时，会出现什么？</p>
<blockquote>
<ol>
<li>首先，会出现报错：SQL语法出现错误</li>
<li>但是，查看数据表，会发现：insert语句执行成功</li>
<li>这说明，如果把queryAll函数当做一个事务的话，没有出现回滚，未被了一致性</li>
</ol>
</blockquote>
<p><strong>7. 解决方案：利用spring配置事务</strong></p>
<blockquote>
<p>修改spring-dao.xml文件</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置声明式事务--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transcationManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--结合AOP实现事务的织入--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置事务通知--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"txAdvice"</span> <span class="attr">transaction-manager</span>=<span class="string">"transcationManager"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--给哪些方法配置事务--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--事务的传播特性 propagation</span></span><br><span class="line"><span class="comment">        REQUIRED是默认值，含义：支持当前事务，如果没有当期事务，就新建一个事务（这是最常见的选择）</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"add"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"delete"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"queryAll"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--所有方法--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"*"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--配置事务切入--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"txPointCut"</span> <span class="attr">expression</span>=<span class="string">"execution(* com.llunch4w.mapper.*.*(..))"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"txAdvice"</span> <span class="attr">pointcut-ref</span>=<span class="string">"txPointCut"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>8. 再次测试</strong></p>
<blockquote>
<p>测试结果:依旧报SQL语法错误，但insert语句不再生效了，说明事务回滚成功</p>
</blockquote>
]]></content>
      <categories>
        <category>JavaEE</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>SSM框架整合</title>
    <url>/2021/02/03/SSM%E6%A1%86%E6%9E%B6%E6%95%B4%E5%90%88/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote class="blockquote-center">
<p>^ _ ^ </p>

</blockquote>
<a id="more"></a>

<h1 id="配置环境依赖"><a href="#配置环境依赖" class="headerlink" title="配置环境依赖"></a>配置环境依赖</h1><p>在pom.xml文件中配置编译环境</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在pom.xml文件中添加依赖包</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--Junit--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--数据库驱动--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 数据库连接池 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mchange<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--Servlet - JSP --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--Mybatis--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--Spring--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--lombok--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在pom.xml文件中添加资源过滤配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="建立项目基本包结构"><a href="#建立项目基本包结构" class="headerlink" title="建立项目基本包结构"></a>建立项目基本包结构</h1><blockquote>
<p>在 src/main/java 目录下建立</p>
</blockquote>
<ol>
<li>pojo包 – 实体类</li>
<li>dao包 – 数据库接口</li>
<li>service包 – 服务接口</li>
<li>impl包 – 位于service包下，保存服务接口的实现类</li>
<li>controller包 – 接收前端数据并返回处理结果的类</li>
</ol>
<p><img src="/2021/02/03/SSM%E6%A1%86%E6%9E%B6%E6%95%B4%E5%90%88/1.png" alt></p>
<h1 id="建立数据库"><a href="#建立数据库" class="headerlink" title="建立数据库"></a>建立数据库</h1><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> book_shop;</span><br><span class="line"><span class="keyword">use</span> book_shop;</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> books(</span><br><span class="line">    <span class="keyword">id</span> <span class="built_in">int</span>(<span class="number">10</span>) <span class="keyword">not</span> <span class="literal">null</span> auto_increment,</span><br><span class="line">    <span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">100</span>) <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">    <span class="keyword">count</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">    detail <span class="built_in">text</span> <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">    primary <span class="keyword">key</span> (<span class="keyword">id</span>)</span><br><span class="line">)<span class="keyword">ENGINE</span>=<span class="keyword">INNODB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> books(<span class="keyword">name</span>,<span class="keyword">count</span>,detail) <span class="keyword">values</span>(<span class="string">'Java'</span>,<span class="number">1</span>,<span class="string">'从入门到放弃'</span>),</span><br><span class="line">        (<span class="string">'MySQL'</span>,<span class="number">10</span>,<span class="string">'从删库到跑路'</span>),(<span class="string">'Linux'</span>,<span class="number">5</span>,<span class="string">'从进门到进牢'</span>);</span><br></pre></td></tr></table></figure>


<h1 id="添加配置文件"><a href="#添加配置文件" class="headerlink" title="添加配置文件"></a>添加配置文件</h1><ol>
<li><p>数据库配置文件 <code>jdbc.properties</code></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">driver</span> = <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">url</span> = <span class="string">jdbc:mysql://localhost:3307/book_shop?useSSL=false&amp;useUnicode=true&amp;charsetEncoding=UTF-8&amp;serverTimezone=UTC</span></span><br><span class="line"><span class="attr">username</span> = <span class="string">root</span></span><br><span class="line"><span class="attr">password</span> = <span class="string">MyNewPass</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>添加mybatis配置文件 <code>mybatis-config.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--开启自动驼峰命名规则映射--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"mapUnderscoreToCamelCase"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--标准日志工厂--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"logImpl"</span> <span class="attr">value</span>=<span class="string">"STDOUT_LOGGING"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com.llunch4w.pojo"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com.llunch4w.dao"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>添加 spring 配置文件 <code>applicationContext.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"spring-dao.xml"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"spring-service.xml"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"spring-mvc.xml"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>配置 spring 整合 mybatis 文件 <code>spring-dao.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置整合mybatis --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 1.关联数据库文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:jdbc.properties"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 2.数据库连接池 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--数据库连接池</span></span><br><span class="line"><span class="comment">        dbcp  半自动化操作  不能自动连接</span></span><br><span class="line"><span class="comment">        c3p0  自动化操作（自动的加载配置文件 并且设置到对象里面）</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置连接池属性 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span> <span class="attr">value</span>=<span class="string">"$&#123;driver&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">"$&#123;url&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"$&#123;username&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;password&#125;"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- c3p0连接池的私有属性 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxPoolSize"</span> <span class="attr">value</span>=<span class="string">"30"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"minPoolSize"</span> <span class="attr">value</span>=<span class="string">"10"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 关闭连接后不自动commit --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"autoCommitOnClose"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 获取连接超时时间 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"checkoutTimeout"</span> <span class="attr">value</span>=<span class="string">"10000"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 当获取连接失败重试次数 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"acquireRetryAttempts"</span> <span class="attr">value</span>=<span class="string">"2"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 3.配置SqlSessionFactory对象 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 注入数据库连接池 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置MyBaties全局配置文件:mybatis-config.xml --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"configLocation"</span> <span class="attr">value</span>=<span class="string">"classpath:mybatis-config.xml"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 4.配置扫描Dao接口包，动态实现Dao接口注入到spring容器中 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 注入sqlSessionFactory --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sqlSessionFactoryBeanName"</span> <span class="attr">value</span>=<span class="string">"sqlSessionFactory"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 给出需要扫描Dao接口包 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"com.llunch4w.dao"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>配置 spring 整合 service 层文件 <code>spring-service.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 开启Spring注解驱动 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--扫描指定包下的注解--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.llunch4w.service.impl"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置事务管理器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 注入数据库连接池 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>配置 spring 与 web 层整合文件 <code>spring-mvc.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="tag"><span class="string">    https://www.springframework.org/schema/mvc/spring-mvc.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置SpringMVC --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 1.开启SpringMVC注解驱动 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 2.静态资源默认servlet配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 3.配置jsp 显示ViewResolver视图解析器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"viewClass"</span> <span class="attr">value</span>=<span class="string">"org.springframework.web.servlet.view.JstlView"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/jsp/"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 4.扫描web相关的bean --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.llunch4w.controller"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>将项目添加Web的框架支持，然后编写web/WEB-INF/下的 <code>web.xml</code> 文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">"4.0"</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--DispatcherServlet--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--encodingFilter--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span></span><br><span class="line">            org.springframework.web.filter.CharacterEncodingFilter</span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--Session过期时间--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">session-config</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">session-timeout</span>&gt;</span>15<span class="tag">&lt;/<span class="name">session-timeout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">session-config</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--引导页--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--自己配置描述文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">jsp-config</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">taglib</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">taglib-uri</span>&gt;</span>http://java.sun.com/jsp/jstl/core<span class="tag">&lt;/<span class="name">taglib-uri</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">taglib-location</span>&gt;</span>/WEB-INF/jstl_tld/c.tld<span class="tag">&lt;/<span class="name">taglib-location</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">taglib</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">taglib</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">taglib-uri</span>&gt;</span>http://java.sun.com/jsp/jstl/fmt<span class="tag">&lt;/<span class="name">taglib-uri</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">taglib-location</span>&gt;</span>/WEB-INF/jstl_tld/fmt.tld<span class="tag">&lt;/<span class="name">taglib-location</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">taglib</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">taglib</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">taglib-uri</span>&gt;</span>http://java.sun.com/jsp/jstl/fn<span class="tag">&lt;/<span class="name">taglib-uri</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">taglib-location</span>&gt;</span>/WEB-INF/jstl_tld/fn.tld<span class="tag">&lt;/<span class="name">taglib-location</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">taglib</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">jsp-config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h1 id="编写类"><a href="#编写类" class="headerlink" title="编写类"></a>编写类</h1><ol>
<li><p>pojo包下的 Books 类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Books</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> count;</span><br><span class="line">    <span class="keyword">private</span> String detail;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>编写dao包下的数据库接口和对应的xml文件<br>BooksMapper.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BooksMapper</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">insert</span><span class="params">(Books book)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">delete</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">update</span><span class="params">(Books book)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">List&lt;Books&gt; <span class="title">queryById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">List&lt;Books&gt; <span class="title">queryAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>BooksMapper.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.llunch4w.dao.BooksMapper"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--增加--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"insert"</span> <span class="attr">parameterType</span>=<span class="string">"Books"</span>&gt;</span></span><br><span class="line">        insert into books(name,count,detail) values(#&#123;name&#125;,#&#123;count&#125;,#&#123;detail&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--删除--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"deleteById"</span>&gt;</span></span><br><span class="line">        delete from books where id=#&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--更新--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateById"</span>&gt;</span></span><br><span class="line">        update books set name=#&#123;name&#125;,count=#&#123;count&#125;,detail=#&#123;detail&#125; where id=#&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--通过ID查询--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryById"</span> <span class="attr">resultType</span>=<span class="string">"Books"</span>&gt;</span></span><br><span class="line">        select * from books where id=#&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--查询所有--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryAll"</span> <span class="attr">resultType</span>=<span class="string">"Books"</span>&gt;</span></span><br><span class="line">        select * from books</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>在service包下编写类<br>BooksService.java<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BooksService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">insert</span><span class="params">(Books book)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">deleteById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">updateById</span><span class="params">(Books book)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">List&lt;Books&gt; <span class="title">queryById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">List&lt;Books&gt; <span class="title">queryAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>impl包下BooksServiceImpl.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BooksServiceImpl</span> <span class="keyword">implements</span> <span class="title">BooksService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier</span>(<span class="string">"booksMapper"</span>)</span><br><span class="line">    <span class="keyword">private</span> BooksMapper booksMapper;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">insert</span><span class="params">(Books book)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> booksMapper.insert(book) &gt; <span class="number">0</span> ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">deleteById</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> booksMapper.deleteById(id) &gt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">updateById</span><span class="params">(Books book)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> booksMapper.updateById(book) &gt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Books&gt; <span class="title">queryById</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> booksMapper.queryById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Books&gt; <span class="title">queryAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> booksMapper.queryAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="4">
<li><p>在controller包下编写类<br>BooksController.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span>(<span class="string">"books"</span>)</span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/book"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BooksController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier</span>(<span class="string">"booksServiceImpl"</span>)</span><br><span class="line">    <span class="keyword">private</span> BooksService booksService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/getAllBooks"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAllBooks</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">        List&lt;Books&gt; bookList = booksService.queryAll();</span><br><span class="line">        model.addAttribute(<span class="string">"bookList"</span>,bookList);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"allBooks"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>添加依赖，否则会出现404错误<br><img src="/2021/02/03/SSM%E6%A1%86%E6%9E%B6%E6%95%B4%E5%90%88/4.png" alt></p>
</li>
</ol>
<h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ClassPathXmlApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">    BooksService service = (BooksServiceImpl)context.getBean(<span class="string">"booksServiceImpl"</span>);</span><br><span class="line">    List&lt;Books&gt; booksList = service.queryAll();</span><br><span class="line">    <span class="keyword">for</span> (Books book : booksList) &#123;</span><br><span class="line">        System.out.println(book);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JavaEE</category>
      </categories>
      <tags>
        <tag>SSM</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringMVC学习记录</title>
    <url>/2021/01/25/SpringMVC%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote class="blockquote-center">
<p>^ _ ^ </p>

</blockquote>
<a id="more"></a>

<h1 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h1><p>官方文档：<a href="https://docs.spring.io/spring-framework/docs/current/reference/html/web.html" target="_blank" rel="noopener">https://docs.spring.io/spring-framework/docs/current/reference/html/web.html</a><br>狂神视频：<a href="https://www.bilibili.com/video/BV1aE41167Tu?p=4" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1aE41167Tu?p=4</a></p>
<h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><ol>
<li><p>创建父工程为普通Maven工程，命名为SpringMVC</p>
</li>
<li><p>删除父工程中的src目录</p>
</li>
<li><p>在pom.xml文件中添加环境依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--junit--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--spring-mvc--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--jsp--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--jstl--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在pom.xml文件中配置编译环境为1.8</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h1 id="回顾servlet"><a href="#回顾servlet" class="headerlink" title="回顾servlet"></a>回顾servlet</h1><ol>
<li><p>以maven工程模板创建子模块 springmvc-01-servlet</p>
</li>
<li><p>将 springmvc-01-servlet 转换为 web项目<br><img src="/2021/01/25/SpringMVC%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/1.png" alt><br><img src="/2021/01/25/SpringMVC%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/2.png" alt></p>
</li>
<li><p>java文件夹下添加 com.llunch4w.servlet.TestServlet 类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 获取参数</span></span><br><span class="line">        String method = req.getParameter(<span class="string">"method"</span>);</span><br><span class="line"></span><br><span class="line">        HttpSession session = req.getSession();</span><br><span class="line">        <span class="keyword">if</span>(method.equals(<span class="string">"add"</span>))&#123;</span><br><span class="line">            session.setAttribute(<span class="string">"msg"</span>,<span class="string">"增加"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(method.equals(<span class="string">"delete"</span>))&#123;</span><br><span class="line">            session.setAttribute(<span class="string">"msg"</span>,<span class="string">"删除"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        resp.sendRedirect(<span class="string">"test.jsp"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>webapp目录下按照jsp模板创建 test.jsp，在body中添加${msg}</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    $&#123;msg&#125;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改webapp/WEB-INF目录下的web.xml文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--在web-app标签下添加如下子标签--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>TestServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.llunch4w.servlet.TestServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>TestServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/test<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>启动服务器进行测试<br>分别输入网址进行测试</p>
</li>
</ol>
<ul>
<li><a href="http://localhost:8080/springmvc_01_servlet_war_exploded/test.jsp?method=add" target="_blank" rel="noopener">http://localhost:8080/springmvc_01_servlet_war_exploded/test.jsp?method=add</a></li>
<li><a href="http://localhost:8080/springmvc_01_servlet_war_exploded/test.jsp?method=delete" target="_blank" rel="noopener">http://localhost:8080/springmvc_01_servlet_war_exploded/test.jsp?method=delete</a></li>
</ul>
<h1 id="初识SpringMVC"><a href="#初识SpringMVC" class="headerlink" title="初识SpringMVC"></a>初识SpringMVC</h1><h2 id="中心控制器"><a href="#中心控制器" class="headerlink" title="中心控制器"></a>中心控制器</h2><p>Spring的web框架围绕DispatcherServlet设计。DispatcherServlet的作用是将请求分发到不同的处理器。从Spring 2.5开始，使用Java 5或者以上版本的用户可以采用基于注解的controller声明方式。<br><img src="/2021/01/25/SpringMVC%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/3.png" alt></p>
<h2 id="SpringMVC执行原理"><a href="#SpringMVC执行原理" class="headerlink" title="SpringMVC执行原理"></a>SpringMVC执行原理</h2><p><img src="/2021/01/25/SpringMVC%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/5.png" alt></p>
<ol>
<li>用户发出请求，DispatcherServlet接收请求并拦截请求</li>
<li>HandlerMapping为处理器映射。DispatcherServlet调用HandlerMapping,HandlerMapping根据请求url查找Handler</li>
<li>HandlerExecution表示具体的Handler,其主要作用是根据url查找控制器</li>
<li>HandlerExecution将解析后的信息传递给DispatcherServlet,如解析控制器映射等</li>
<li>HandlerAdapter表示处理器适配器，其按照特定的规则去执行Handler</li>
<li>Handler让具体的Controller执行</li>
<li>Controller将具体的执行信息返回给HandlerAdapter,如ModelAndView</li>
<li>HandlerAdapter将视图逻辑名或模型传递给DispatcherServlet</li>
<li>DispatcherServlet调用视图解析器(ViewResolver)来解析HandlerAdapter传递的逻辑视图名</li>
<li>视图解析器将解析的逻辑视图名传给DispatcherServlet</li>
<li>DispatcherServlet根据视图解析器解析的视图结果，调用具体的视图</li>
<li>最终视图呈现给用户</li>
</ol>
<h1 id="第一个SpringMVC项目"><a href="#第一个SpringMVC项目" class="headerlink" title="第一个SpringMVC项目"></a>第一个SpringMVC项目</h1><ol>
<li><p>以maven工程模板创建子模块 springmvc-02-hello 并将其添加 web 支持</p>
</li>
<li><p>在 webapp/WEB-INF 目录下的 web.xml 中的webapp结点下添加</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--关联一个springmvc配置文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc-servlet.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--启动级别--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--/ 匹配所有的请求；（不包括.jsp）--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--/* 匹配所有的请求；（包括.jsp）--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在resources目录下添加 springmvc-servlet.xml 文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--添加 处理映射器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--添加 处理器适配器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--添加 视图解析器--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--视图解析器:DispatcherServlet给他的ModelAndView--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span> <span class="attr">id</span>=<span class="string">"InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--前缀--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/pages/"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--后缀--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>编写操作业务Controller ，要么实现Controller接口，要么增加注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.llunch4w.controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.mvc.Controller;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> <span class="keyword">implements</span> <span class="title">Controller</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">handleRequest</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//ModelAndView 模型和视图</span></span><br><span class="line">        ModelAndView mv = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">        <span class="comment">//封装对象，放在ModelAndView中。Model</span></span><br><span class="line">        mv.addObject(<span class="string">"msg"</span>,<span class="string">"HelloSpringMVC!"</span>);</span><br><span class="line">        <span class="comment">//封装要跳转的视图，放在ModelAndView中</span></span><br><span class="line">        mv.setViewName(<span class="string">"hello"</span>); <span class="comment">//: /WEB-INF/jsp/hello.jsp</span></span><br><span class="line">        <span class="keyword">return</span> mv;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>将自己的类交给SpringIOC容器，注册bean</p>
<blockquote>
<p>即在 springmvc-servlet.xml 文件中添加语句</p>
</blockquote>
</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--Handler--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"/hello"</span> <span class="attr">class</span>=<span class="string">"com.llunch4w.controller.HelloController"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="6">
<li><p>在 webapp/pages 目录下添加 hello.jsp，并在body标签下添加 ${msg}</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    $&#123;msg&#125;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>添加依赖，否则会出现404错误<br><img src="/2021/01/25/SpringMVC%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/4.png" alt></p>
</li>
<li><p>启动服务器进行测试<br>在浏览器输入网址：<a href="http://localhost:8080/springmvc_02_hello_war_exploded/hello" target="_blank" rel="noopener">http://localhost:8080/springmvc_02_hello_war_exploded/hello</a></p>
</li>
</ol>
<h1 id="实现注解开发SpringMVC项目"><a href="#实现注解开发SpringMVC项目" class="headerlink" title="实现注解开发SpringMVC项目"></a>实现注解开发SpringMVC项目</h1><ol>
<li><p>重复“第一个springmvc-02-hello”的开发步骤直到步骤5</p>
</li>
<li><p>更改 springmvc-servlet.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">       https://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="tag"><span class="string">       https://www.springframework.org/schema/mvc/spring-mvc.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 自动扫描包，让指定包下的注解生效,由IOC容器统一管理 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.llunch4w.controller"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 让Spring MVC不处理静态资源 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    支持mvc注解驱动</span></span><br><span class="line"><span class="comment">        在spring中一般采用@RequestMapping注解来完成映射关系</span></span><br><span class="line"><span class="comment">        要想使@RequestMapping注解生效</span></span><br><span class="line"><span class="comment">        必须向上下文中注册DefaultAnnotationHandlerMapping</span></span><br><span class="line"><span class="comment">        和一个AnnotationMethodHandlerAdapter实例</span></span><br><span class="line"><span class="comment">        这两个实例分别在类级别和方法级别处理。</span></span><br><span class="line"><span class="comment">        而annotation-driven配置帮助我们自动完成上述两个实例的注入。</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 视图解析器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">id</span>=<span class="string">"internalResourceViewResolver"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 前缀 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/pages/"</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 后缀 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>更新HelloController为注解方式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.llunch4w.controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/say"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">        <span class="comment">//向模型中添加属性msg与值，可以在JSP页面中取出并渲染</span></span><br><span class="line">        model.addAttribute(<span class="string">"msg"</span>,<span class="string">"hello,SpringMVC"</span>);</span><br><span class="line">        <span class="comment">//web-inf/pages/hello.jsp</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在 webapp/WEB-INF/pages 目录下添加 hello.jsp，并在body标签下添加 ${msg}</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    $&#123;msg&#125;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<blockquote>
<p>在WEB-INF目录下的文件客户端是不可访问的，这样能有效防止客户端通过手动输入网址来访问一些不可直接访问的网页，例如跳过登陆直接通过网址访问菜单页。</p>
</blockquote>
<ol start="5">
<li><p>添加依赖，否则会出现404错误<br><img src="/2021/01/25/SpringMVC%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/4.png" alt></p>
</li>
<li><p>启动服务器进行测试<br>在浏览器输入网址：<a href="http://localhost:8080/springmvc_03_annotation_war_exploded/hello/say" target="_blank" rel="noopener">http://localhost:8080/springmvc_03_annotation_war_exploded/hello/say</a></p>
</li>
</ol>
<h1 id="RestFul风格"><a href="#RestFul风格" class="headerlink" title="RestFul风格"></a>RestFul风格</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>Restful就是一个资源定位及资源操作的风格。不是标准也不是协议，只是一种风格。基于这个风格设计的软件可以更简洁，更有层次，更易于实现缓存等机制。</p>
<h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><p>资源：互联网所有的事物都可以被抽象为资源<br>资源操作：使用POST、DELETE、PUT、GET，使用不同方法对资源进行操作。<br>分别对应 添加、 删除、修改、查询</p>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RestFulController</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//映射访问路径</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/commit/&#123;p1&#125;/&#123;p2&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">(@PathVariable <span class="keyword">int</span> p1, @PathVariable <span class="keyword">int</span> p2, Model model)</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> result = p1+p2;</span><br><span class="line">        <span class="comment">//Spring MVC会自动实例化一个Model对象用于向视图中传值</span></span><br><span class="line">        model.addAttribute(<span class="string">"msg"</span>, <span class="string">"结果："</span>+result);</span><br><span class="line">        <span class="comment">//返回视图位置</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"test"</span>;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>请求网址：<a href="http://localhost:8080/commit/1/2" target="_blank" rel="noopener">http://localhost:8080/commit/1/2</a></p>
<h2 id="使用method属性指定请求类型"><a href="#使用method属性指定请求类型" class="headerlink" title="使用method属性指定请求类型"></a>使用method属性指定请求类型</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//映射访问路径,必须是POST请求</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/hello"</span>,method = &#123;RequestMethod.POST&#125;)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">index2</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">    model.addAttribute(<span class="string">"msg"</span>, <span class="string">"hello!"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"test"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>设置后只能使用POST方法访问</p>
</blockquote>
<h2 id="方法级别的注解变体"><a href="#方法级别的注解变体" class="headerlink" title="方法级别的注解变体"></a>方法级别的注解变体</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span></span><br><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line"><span class="meta">@PutMapping</span></span><br><span class="line"><span class="meta">@DeleteMapping</span></span><br><span class="line"><span class="meta">@PatchMapping</span></span><br></pre></td></tr></table></figure>

<h1 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h1><blockquote>
<p>比如说，用户可以直接通过网址访问登陆页，却不能通过网址直接访问主菜单页，即不能跳过登陆流程。拦截器的作用就是拦截那些未登陆用户直接访问主菜单页的行为</p>
</blockquote>
<h2 id="过滤器-vs-拦截器"><a href="#过滤器-vs-拦截器" class="headerlink" title="过滤器 vs 拦截器"></a>过滤器 vs 拦截器</h2><p><strong>过滤器</strong></p>
<ul>
<li>servlet规范的一部分，任何 java web 工程都可以使用</li>
<li>在 url-pattern 中配置了/*之后，可以对所有要访问的资源进行过滤</li>
</ul>
<p><strong>拦截器</strong></p>
<ul>
<li>是 SpringMVC 框架自己的，只有使用了 SpringMVC 框架的工程才能使用</li>
<li>拦截器只会拦截访问控制器的方法，如果访问的是 jsp/html/css/image/js 是不会进行拦截的</li>
</ul>
<h2 id="自定义拦截器"><a href="#自定义拦截器" class="headerlink" title="自定义拦截器"></a>自定义拦截器</h2><ol>
<li><p>新建模块 spring-04-intercepter，为该模块添加 web 支持</p>
</li>
<li><p>在 resources 包下添加 applicationContext.xml 文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="tag"><span class="string">    https://www.springframework.org/schema/mvc/spring-mvc.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置SpringMVC --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 1.开启SpringMVC注解驱动 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 2.静态资源默认servlet配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 3.配置jsp 显示ViewResolver视图解析器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"viewClass"</span> <span class="attr">value</span>=<span class="string">"org.springframework.web.servlet.view.JstlView"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/jsp/"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 4.扫描web相关的bean --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.llunch4w.controller"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>修改 WEB-INF 文件夹下的 web.xml文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">"4.0"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--DispatcherServlet--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--encodingFilter--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span></span><br><span class="line">            org.springframework.web.filter.CharacterEncodingFilter</span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>模块设置 -》 Artifacts<br>WEB-INF 文件夹下添加 lib目录，lib目录下添加 LibraryFiles</p>
</li>
<li><p>添加自定义 intercepter 类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInterceptor01</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 预处理，Controller方法执行前</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"MyInterceptor01执行前..."</span>);</span><br><span class="line">        HttpSession session = request.getSession();</span><br><span class="line">        <span class="keyword">if</span>(session.getAttribute(<span class="string">"user"</span>) != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(request.getRequestURI().contains(<span class="string">"login"</span>))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            request.getRequestDispatcher(<span class="string">"/WEB-INF/jsp/login.jsp"</span>).forward(request,response);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Controller方法执行后，jsp执行前</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"MyInterceptor01执行后..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// jsp方法执行后</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"最后"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在 applicaitonContext.xml 文件中添加拦截器配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="tag"><span class="string">    https://www.springframework.org/schema/mvc/spring-mvc.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置SpringMVC --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 1.开启SpringMVC注解驱动 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 2.静态资源默认servlet配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--SpringMVC拦截器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">"/user/*"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.llunch4w.interceptor.MyInterceptor01"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 3.配置jsp 显示ViewResolver视图解析器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"viewClass"</span> <span class="attr">value</span>=<span class="string">"org.springframework.web.servlet.view.JstlView"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/jsp/"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 4.扫描web相关的bean --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.llunch4w.controller"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>编写控制类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/login"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">(String username, String password, HttpSession session,Model model)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(username.equals(<span class="string">"user"</span>) &amp;&amp; password.equals(<span class="string">"password"</span>))&#123;</span><br><span class="line">            <span class="comment">//session.setAttribute("user",user);</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">"menu"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            model.addAttribute(<span class="string">"msg"</span>,<span class="string">"用户名或密码错误"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"login"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/goPage"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">goPage</span><span class="params">(String page,Model model)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> page;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>进行网页测试<br>index.jsp</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;h1&gt;&lt;a href="$&#123;pageContext.request.contextPath&#125;/user/goPage?page=login"&gt;登陆&lt;/a&gt;&lt;/h1&gt;</span><br><span class="line">&lt;h1&gt;&lt;a href="$&#123;pageContext.request.contextPath&#125;/user/goPage?page=menu"&gt;首页&lt;/a&gt;&lt;/h1&gt;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>login.jsp</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;h1&gt;登陆页&lt;/h1&gt;</span><br><span class="line">&lt;form action=<span class="string">"$&#123;pageContext.request.contextPath&#125;/user/login"</span>&gt;</span><br><span class="line">    用户名：&lt;input name=<span class="string">"username"</span> type=<span class="string">"text"</span>&gt;</span><br><span class="line">    密 码：&lt;input name=<span class="string">"password"</span> type=<span class="string">"password"</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span> value=<span class="string">"登陆"</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;h6 style="color: red"&gt;$&#123;msg&#125;&lt;/h6&gt;</span><br></pre></td></tr></table></figure>

<p>menu.jsp</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;h1&gt;首页&lt;/h1&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JavaEE</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>String,StringBuilder,StringBuffer</title>
    <url>/2020/08/20/String-StringBuilder-StringBuffer/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote class="blockquote-center">
<p>^ _ ^ </p>

</blockquote>
<a id="more"></a>

<h1 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q &amp; A"></a>Q &amp; A</h1><blockquote>
<p><strong>String，StringBuffer，StringBuilder的区别</strong></p>
</blockquote>
<ul>
<li><strong>可变性</strong>：String 一旦创建不可变，如果修改即创建新的对象，StringBuffer 和 StringBuilder 可变，修改之后引用不变；</li>
<li><strong>拼接效率</strong>：String 对象直接拼接效率高，但是如果执行的是间接拼接，效率很低，而 StringBuffer 和 StringBuilder 的效率更高，同时 StringBuilder 的效率高于 StringBuffer；</li>
<li><strong>线程安全</strong>：StringBuffer 的方法是线程安全的，StringBuilder 是线程不安全的，在考虑线程安全的情况下，应该使用 StringBuffer。</li>
</ul>
<h1 id="编程测试"><a href="#编程测试" class="headerlink" title="编程测试"></a>编程测试</h1><p><strong>可变性测试</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">String s &#x3D; &quot;Hello&quot;;</span><br><span class="line">String s1 &#x3D; s;</span><br><span class="line">StringBuilder strBuilder &#x3D; new StringBuilder(&quot;Hello&quot;);</span><br><span class="line">StringBuffer strBuffer &#x3D; new StringBuffer(&quot;Hello&quot;);</span><br><span class="line">s +&#x3D; &quot; World&quot;;</span><br><span class="line">strBuilder.append(&quot; Word&quot;);</span><br><span class="line">strBuffer.append(&quot; Word&quot;);</span><br><span class="line">System.out.println(&quot;s &#x3D; &quot; + s); \\s &#x3D; Hello World</span><br><span class="line">System.out.println(&quot;s1 &#x3D; &quot; + s1); \\s1 &#x3D; Hello</span><br><span class="line">System.out.println(&quot;strBuilder &#x3D; &quot; + strBuilder); \\strBuilder &#x3D; Hello Word</span><br><span class="line">System.out.println(&quot;strBuffer &#x3D; &quot; + strBuffer); \\strBuffer &#x3D; Hello Word</span><br></pre></td></tr></table></figure>
<p>s和s1的值不相等说明String是不可变的。因为如果s += xxx是为s加上后缀的话，那么指向s存储地址的s1应该也是会改变的。而事实是，s += xxx中，虚拟机先会实例一个StringBuilder，将s中的字符和新添加的xxx按顺序加入StringBuilder，然后调用StringBuilder的toString方法将其转换为一个新的String实例对象，并将s（引用地址）指向这个新的对象。</p>
<p><strong>效率测试</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">final int N &#x3D; 5000;</span><br><span class="line">String s &#x3D; new String();</span><br><span class="line">StringBuilder builder &#x3D; new StringBuilder();</span><br><span class="line">StringBuffer buffer &#x3D; new StringBuffer();</span><br><span class="line">long startTime,endTime;</span><br><span class="line">&#x2F;&#x2F; String用时统计</span><br><span class="line">startTime &#x3D; System.currentTimeMillis();</span><br><span class="line">for(int i &#x3D; 0;i &lt; N;i++) &#123;</span><br><span class="line">    s +&#x3D; i;</span><br><span class="line">&#125;</span><br><span class="line">endTime &#x3D; System.currentTimeMillis();</span><br><span class="line">System.out.printf(&quot;String%d次拼接操作耗时%d(ms)\n&quot;,N,endTime-startTime);</span><br><span class="line">&#x2F;&#x2F; StringBuilder用时统计</span><br><span class="line">startTime &#x3D; System.currentTimeMillis();</span><br><span class="line">for(int i &#x3D; 0;i &lt; N;i++) &#123;</span><br><span class="line">    builder.append(i);</span><br><span class="line">&#125;</span><br><span class="line">endTime &#x3D; System.currentTimeMillis();</span><br><span class="line">System.out.printf(&quot;StringBuilder%d次拼接操作耗时%d(ms)\n&quot;,N,endTime-startTime);</span><br><span class="line">&#x2F;&#x2F; StringBuffer用时统计</span><br><span class="line">startTime &#x3D; System.currentTimeMillis();</span><br><span class="line">for(int i &#x3D; 0;i &lt; N;i++) &#123;</span><br><span class="line">    buffer.append(i);</span><br><span class="line">&#125;</span><br><span class="line">endTime &#x3D; System.currentTimeMillis();</span><br><span class="line">System.out.printf(&quot;StringBuffer%d次拼接操作耗时%d(ms)\n&quot;,N,endTime-startTime);</span><br></pre></td></tr></table></figure>
<p>结果：<br>String5000次拼接操作耗时51(ms)<br>StringBuilder5000次拼接操作耗时1(ms)<br>StringBuffer5000次拼接操作耗时2(ms)</p>
<p><strong>线程安全</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">final int N &#x3D; 500;</span><br><span class="line">final int threadNum &#x3D; 10;</span><br><span class="line">&#x2F;&#x2F;StringBuilder builder &#x3D; new StringBuilder();</span><br><span class="line">StringBuffer buffer &#x3D; new StringBuffer();</span><br><span class="line">for(int i &#x3D; 0;i &lt; threadNum;i++) &#123;</span><br><span class="line">    new Thread(new Runnable() &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void run() &#123;</span><br><span class="line">            for(int i &#x3D; 0;i &lt; N;i++) &#123;</span><br><span class="line">				&#x2F;&#x2F;builder.append(&#39;a&#39;);</span><br><span class="line">                buffer.append(&#39;a&#39;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).start();</span><br><span class="line">&#125;</span><br><span class="line">try &#123;</span><br><span class="line">    Thread.sleep(1000);</span><br><span class="line">	&#x2F;&#x2F;System.out.println(&quot;builder_length &#x3D; &quot; + builder.length());</span><br><span class="line">    System.out.println(&quot;buffer_length &#x3D; &quot; + buffer.length());</span><br><span class="line">&#125;catch(Exception e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>如果是用builder来运行的话，builder_length &lt;= 5000 且可能出现<code>ArrayIndexOutOfBoundsException</code>异常。这是因为StringBuilder存在扩容机制，但append函数却没有用<code>synchronized</code>修饰，导致出现：多个线程访问StringBuilder的最后一个空闲名额时，都觉得不用扩容，但实际名额已经不够了；</li>
<li>如果是用buffer来运行的话，builder_length == 5000 是恒定的，StringBuffer通过给其涉及修改的成员函数增加<code>synchronized</code>修饰符来保证操作的互斥性。</li>
</ul>
]]></content>
      <categories>
        <category>Java面试</category>
      </categories>
      <tags>
        <tag>Java基础</tag>
        <tag>String类</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot入门</title>
    <url>/2021/06/17/SpringBoot%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
  </entry>
  <entry>
    <title>MyBatis学习记录</title>
    <url>/2020/12/14/MyBatis%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote class="blockquote-center">
<p>^ _ ^ </p>

</blockquote>
<a id="more"></a>

<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这篇文章记录了跟着狂神的MyBatis视频学习所进行的步骤，博客大纲也同狂神的视频一致。</p>
<p>狂神MyBatis视频链接：<a href="https://www.bilibili.com/video/BV1NE411Q7Nx?p=2" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1NE411Q7Nx?p=2</a></p>
<h1 id="第一个MyBatis程序"><a href="#第一个MyBatis程序" class="headerlink" title="第一个MyBatis程序"></a>第一个MyBatis程序</h1><p><strong>1. 搭建环境</strong></p>
<ul>
<li>File -&gt; New -&gt; Project</li>
<li>选择Maven项目，不勾选<code>Create from archetype</code>，表示创建一个基本Maven项目</li>
<li>为项目命名为MyBatis-Study，将groupId更改为org.llunch4w<br><img src="/2020/12/14/MyBatis%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/1.png" alt></li>
<li>项目创建成功后，将项目目录下的src文件夹删除，目的是使MyBatis-Study用作一个父工程，起一个容器的作用。具体的代码在其子模块中编写<br><img src="/2020/12/14/MyBatis%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/2.png" alt></li>
<li>编写pom.xml(MyBatis-Study)文件：配置子模块公共依赖<br><img src="/2020/12/14/MyBatis%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/3.png" alt><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--导入依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--mysql驱动--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--mybatis--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--junit--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>创建子模块<ul>
<li>MyBatis-Study项目处右键 -&gt; New -&gt; Module</li>
<li>选择Maven项目，不勾选<code>Create from archetype</code></li>
<li>配置模块名称<br><img src="/2020/12/14/MyBatis%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/4.png" alt></li>
<li>子模块中已自动包含父工程中配置好的依赖<br><img src="/2020/12/14/MyBatis%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/5.png" alt></li>
</ul>
</li>
<li>观察父工程pom.xml文件的变化<br><img src="/2020/12/14/MyBatis%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/6.png" alt></li>
</ul>
<p><strong>2. 编写MyBatis核心配置文件</strong></p>
<blockquote>
<p>此步骤的操作对象是mybatis-01子模块</p>
</blockquote>
<ul>
<li>在 <strong>mybatis-01/src/main/resources</strong> 目录下创建mybatis核心配置文件 <strong>mybatis-config.xml</strong> （这个名字可以自定义，但一般使用这个命名）</li>
<li>在 mybatis-config.xml 文件中填写如下基本代码<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"$&#123;driver&#125;"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;url&#125;"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;username&#125;"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;password&#125;"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--environments中可以存在多套环境，默认选择的环境根据其default选项指定</span></span><br><span class="line"><span class="comment">            比如test就可以是另一套环境--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"test"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>通过硬编码将数据库信息换成具体的值，具体值如下<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">driver &#x3D; com.mysql.jdbc.Driver</span><br><span class="line">url &#x3D; jdbc:mysql:&#x2F;&#x2F;localhost:3307&#x2F;mybatis?useSSL&#x3D;false&amp;useUnicode&#x3D;true&amp;charsetEncoding&#x3D;UTF-8&amp;serverTimezone&#x3D;UTC</span><br><span class="line">username &#x3D; root</span><br><span class="line">password &#x3D; MyNewPass</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p><strong>3. 编写读取配置文件工具类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBatisUtil</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SqlSessionFactory sqlSessionFactory;</span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            String resource = <span class="string">"mybatis-config.xml"</span>;</span><br><span class="line">            InputStream inputStream = Resources.getResourceAsStream(resource);</span><br><span class="line">            sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SqlSession <span class="title">getSqlSession</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sqlSessionFactory.openSession();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>4. 创建数据库mybatis，并在其中添加数据表user</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> mybatis;</span><br><span class="line"><span class="keyword">use</span> mybatis;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">user</span>(</span><br><span class="line">    <span class="keyword">id</span> <span class="built_in">int</span> auto_increment,</span><br><span class="line">    <span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">20</span>),</span><br><span class="line">    pwd <span class="built_in">varchar</span>(<span class="number">50</span>),</span><br><span class="line">    primary <span class="keyword">key</span>(<span class="keyword">id</span>)</span><br><span class="line">)<span class="keyword">ENGINE</span>=<span class="keyword">INNODB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=UTF8;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 往 user 表中添加一些数据</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span>(<span class="keyword">name</span>,pwd)</span><br><span class="line">        <span class="keyword">values</span>(<span class="string">"李明"</span>,<span class="number">123</span>),(<span class="string">"李华"</span>,<span class="number">456</span>),(<span class="string">"东东"</span>,<span class="number">789</span>);</span><br></pre></td></tr></table></figure>

<p><strong>5. 添加对应于user表的实体类User</strong><br><img src="/2020/12/14/MyBatis%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/7.png" alt></p>
<p><strong>6. 添加操纵User的Dao接口UserDao</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">getAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>7. 编写对应于UserDao的映射文件 userMapper.xml</strong><br><img src="/2020/12/14/MyBatis%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/8.png" alt></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.llunch4w.dao.UserDao"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getAll"</span> <span class="attr">resultType</span>=<span class="string">"com.llunch4w.pojo.User"</span>&gt;</span></span><br><span class="line">        select * from user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>9. 将 user-mapper.xml 文件在核心配置文件 mybatis-config.xml 中注册</strong><br><img src="/2020/12/14/MyBatis%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/9.png" alt></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--每一个 mapper.xml 文件都需要在核心配置文件中注册--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"com/llunch4w/dao/userMapper.xml"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>PS 如果不配置的话，会出现如下错误：<br>org.apache.ibatis.binding.BindingException: Type interface com.llunch4w.dao.UserDao is not known to the MapperRegistry.</p>
</blockquote>
<p><strong>10. 通过配置父工程的 pom.xml 文件制定编译条件，防止出现jdk1.5的警告</strong><br><img src="/2020/12/14/MyBatis%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/10.png" alt></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--编译环境--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>如果不配置的话，在运行java程序时，会出现如下警告：<br><img src="/2020/12/14/MyBatis%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/11.png" alt></p>
</blockquote>
<p><strong>11. 通过配置父工程的 pom.xml 文件制定资源过滤条件，防止 Maven 项目下资源导出失败问题</strong><br><img src="/2020/12/14/MyBatis%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/12.png" alt></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--在build中配置resources，来放置资源导出失败问题--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>PS 如果不配置的话，会出现如下错误：<br>Cause: org.apache.ibatis.builder.BuilderException: Error parsing SQL Mapper Configuration. Cause: java.io.IOException: Could not find resource com/llunch4w/dao/userMapper.xml</p>
</blockquote>
<p><strong>这个问题也可以通过将mapper.xml文件放到resources目录下的方式来解决（注意最好有一定的目录结构，例如resources/com/mapper/userMapper.xml）</strong></p>
<p><strong>12. 编写测试文件进行测试</strong><br><img src="/2020/12/14/MyBatis%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/13.png" alt></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 测试 UserDao 的 getAllUsers 方法</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 获取session</span></span><br><span class="line">    SqlSession sqlSession = MyBatisUtil.getSqlSession();</span><br><span class="line">    <span class="comment">// 获取mapper</span></span><br><span class="line">    UserDao userDao = sqlSession.getMapper(UserDao<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    <span class="comment">// 操纵mapper</span></span><br><span class="line">    List&lt;User&gt; allUserList = userDao.getAll();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (User user : allUserList) &#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 关闭session</span></span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>补充，还有另一种不获取userDao直接用sqlSession进行查询的方法，如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;User&gt; userList = sqlSession.selectList(<span class="string">"com.llunch4w.dao.UserDao.getAllUsers"</span>);</span><br></pre></td></tr></table></figure>
<p>但这种方式不推荐使用，了解即可</p>
</blockquote>
<h1 id="CRUD"><a href="#CRUD" class="headerlink" title="CRUD"></a>CRUD</h1><blockquote>
<p>create、read、 update、delete</p>
</blockquote>
<h2 id="基本增删改查实现"><a href="#基本增删改查实现" class="headerlink" title="基本增删改查实现"></a>基本增删改查实现</h2><p><strong>1. 检查namespace</strong></p>
<blockquote>
<p>nampespace中的包名要和Dao接口的包名一致</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.llunch4w.dao.UserDao"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--mapper标签内部添加诸如select、insert、delete、update的标签--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>2. 在Dao接口中添加方法申明</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 获取全部用户</span></span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">getAll</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">// 根据用户ID获取</span></span><br><span class="line">    <span class="function">User <span class="title">getById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line">    <span class="comment">// 添加用户</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">insert</span><span class="params">(User user)</span></span>;</span><br><span class="line">    <span class="comment">// 根据用户ID删除</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">deleteById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line">    <span class="comment">// 根据用户ID更新</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">update</span><span class="params">(User user)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>3. 在 userMapper.xml 文件中的 mapper 标签下添加操作标签</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--返回类型和参数类型都应写全限定名--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getAll"</span> <span class="attr">resultType</span>=<span class="string">"com.llunch4w.pojo.User"</span>&gt;</span></span><br><span class="line">    select * from user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Tips：返回类型/参数类型 如果为基本类型，可以不用特别申明--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getById"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span> <span class="attr">resultType</span>=<span class="string">"com.llunch4w.pojo.User"</span>&gt;</span></span><br><span class="line">    select * from user where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"insert"</span> <span class="attr">parameterType</span>=<span class="string">"com.llunch4w.pojo.User"</span>&gt;</span></span><br><span class="line">    insert into user(id,name,pwd) values(#&#123;id&#125;,#&#123;name&#125;,#&#123;pwd&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"update"</span> <span class="attr">parameterType</span>=<span class="string">"com.llunch4w.pojo.User"</span>&gt;</span></span><br><span class="line">    update user set name=#&#123;name&#125;,pwd=#&#123;pwd&#125; where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"deleteById"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span>&gt;</span></span><br><span class="line">    delete from user where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>4. 测试：以更新为例</strong></p>
<blockquote>
<p>注意：</p>
<ul>
<li>sqlSession应及时关闭</li>
<li>对于增加、删除、更新操作，sqlSession需要执行commmit后修改才会生效（事务才会提交）</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession sqlSession = MyBatisUtil.getSqlSession();</span><br><span class="line">    UserDao userDao = sqlSession.getMapper(UserDao<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    User user = userDao.getById(<span class="number">5</span>);</span><br><span class="line">    user.setName(<span class="string">"谢南"</span>);</span><br><span class="line">    <span class="keyword">if</span>(userDao.update(user) &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        System.out.println(<span class="string">"更新成功"</span>);</span><br><span class="line">        sqlSession.commit();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="map"><a href="#map" class="headerlink" title="map"></a>map</h2><p><strong>1. UserDao中声明传参为map的接口</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">updateByMap</span><span class="params">(Map&lt;String,Object&gt; map)</span></span>;</span><br></pre></td></tr></table></figure>

<p><strong>2. userMapper.xml中添加对应的操作标签</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateByMap"</span> <span class="attr">parameterType</span>=<span class="string">"map"</span>&gt;</span></span><br><span class="line">    update user set name=#&#123;userName&#125; where id=#&#123;userId&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>3. 编写测试函数</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateByMapTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession sqlSession = MyBatisUtil.getSqlSession();</span><br><span class="line">    UserDao userDao = sqlSession.getMapper(UserDao<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    Map&lt;String,Object&gt; params = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    params.put(<span class="string">"userName"</span>,<span class="string">"林树"</span>);</span><br><span class="line">    params.put(<span class="string">"userId"</span>,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(userDao.updateByMap(params) &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        System.out.println(<span class="string">"更新成功"</span>);</span><br><span class="line">        sqlSession.commit();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h2><p><strong>1. UserDao中添加根据名称模糊查询的接口</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 根据用户名称进行模糊查询</span></span><br><span class="line"><span class="function">List&lt;User&gt; <span class="title">getByNameInDim</span><span class="params">(String name)</span></span>;</span><br></pre></td></tr></table></figure>

<h3 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h3><blockquote>
<p>在调用方法时添加模糊匹配字符 %</p>
</blockquote>
<p><strong>2. 在userMapper.xml中添加模糊查询的操作标签</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--参数类型为String，不需要特别声明--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getByNameInDim"</span> <span class="attr">resultType</span>=<span class="string">"com.llunch4w.pojo.User"</span>&gt;</span></span><br><span class="line">    select * from user where name like #&#123;value&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>3. 测试类调用</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getByNameInDimTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession sqlSession = MyBatisUtil.getSqlSession();</span><br><span class="line">    UserDao userDao = sqlSession.getMapper(UserDao<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    List&lt;User&gt; userList = userDao.getByNameInDim(<span class="string">"%谢%"</span>);</span><br><span class="line">    <span class="keyword">for</span> (User user : userList) &#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h3><blockquote>
<p>在userMapper.xml中直接编码 %</p>
</blockquote>
<p><strong>2. 在userMapper.xml中添加模糊查询的操作标签</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--直接拼接方式1--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getByNameInDim"</span> <span class="attr">resultType</span>=<span class="string">"com.llunch4w.pojo.User"</span>&gt;</span></span><br><span class="line">    select * from user where name like "%"#&#123;value&#125;"%"</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--直接拼接方式2--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getByNameInDim"</span> <span class="attr">resultType</span>=<span class="string">"com.llunch4w.pojo.User"</span>&gt;</span></span><br><span class="line">    select * from user where name like concat("%",#&#123;value&#125;,"%")</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>3. 测试类调用</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;User&gt; userList = userDao.getByNameInDim(<span class="string">"谢"</span>);</span><br></pre></td></tr></table></figure>

<h1 id="配置解析"><a href="#配置解析" class="headerlink" title="配置解析"></a>配置解析</h1><p><strong>项目准备</strong></p>
<ul>
<li>在 MyBatis-Study 父工程下新建一个子模块 mybatis-02，也是普通Maven工程</li>
<li>将 mybatis-01 中的代码拷贝一份到mybatis-02</li>
<li>将 mybatis-02 中 UserDao、userMapper.xml 中除了基本增删改查外的其他操作相关内容去除，将UserDaoTest中除了getAllTest之外的函数都去除</li>
<li>测试getAllTest的执行，执行成功则说明项目准备完成</li>
</ul>
<h2 id="环境配置（enviroments）"><a href="#环境配置（enviroments）" class="headerlink" title="环境配置（enviroments）"></a>环境配置（enviroments）</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--MyBatis可以配置多种环境以适应多种环境（开发、测试、生产等）的需要</span></span><br><span class="line"><span class="comment">    但每个SqlSessionFactory实例只能选择一种环境</span></span><br><span class="line"><span class="comment">    default指定当前SqlSessionFactory选择的环境--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--每个enviroment结点代表一种环境--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--事务管理器，MyBatis中有两种类型的事务管理器：[JDBC|MANAGED]</span></span><br><span class="line"><span class="comment">            JDBC – 这个配置直接使用了 JDBC 的提交和回滚设施，它依赖从数据源获得的连接来管理事务作用域</span></span><br><span class="line"><span class="comment">            MANAGED – 这个配置几乎没做什么。它从不提交或回滚一个连接，而是让容器来管理事务的整个生命周期（比如 JEE 应用服务器的上下文）</span></span><br><span class="line"><span class="comment">            如果你正在使用 Spring + MyBatis，则没有必要配置事务管理器，因为 Spring 模块会使用自带的管理器来覆盖前面的配置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--数据源，有三种内建的数据源类型：[UNPOOLED|POOLED|JNDI]</span></span><br><span class="line"><span class="comment">            UNPOOLED– 这个数据源的实现会每次请求时打开和关闭连接</span></span><br><span class="line"><span class="comment">            POOLED– 这种数据源的实现利用“池”的概念将 JDBC 连接对象组织起来，避免了创建新的连接实例时所必需的初始化和认证时间</span></span><br><span class="line"><span class="comment">            JNDI – 这个数据源实现是为了能在如 EJB 或应用服务器这类容器中使用--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3307/mybatis?useSSL=false<span class="symbol">&amp;amp;</span>useUnicode=true<span class="symbol">&amp;amp;</span></span></span></span><br><span class="line"><span class="tag"><span class="string">                        charsetEncoding=UTF-8<span class="symbol">&amp;amp;</span>serverTimezone=UTC"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"MyNewPass"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="属性（properties）"><a href="#属性（properties）" class="headerlink" title="属性（properties）"></a>属性（properties）</h2><ul>
<li>可以通过properties属性实现引用配置文件</li>
<li>这些属性都是可外部配置和动态替换的：既可通过java属性文件配置，也可通过properties元素的子元素来传递</li>
</ul>
<h3 id="引用Java属性文件进行配置"><a href="#引用Java属性文件进行配置" class="headerlink" title="引用Java属性文件进行配置"></a>引用Java属性文件进行配置</h3><p><strong>1. 编写一个数据库属性配置文件 jdbc.properties</strong></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">driver</span> = <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">url</span> = <span class="string">jdbc:mysql://localhost:3307/mybatis?useSSL=false&amp;useUnicode=true&amp;charsetEncoding=UTF-8&amp;serverTimezone=UTC</span></span><br><span class="line"><span class="attr">username</span> = <span class="string">root</span></span><br><span class="line"><span class="attr">password</span> = <span class="string">MyNewPass</span></span><br></pre></td></tr></table></figure>

<p><strong>2. 在核心配置文件 mybatis-config.xml 中引用</strong><br><img src="/2020/12/14/MyBatis%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/14.png" alt></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--引入外部配置文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">"jdbc.properties"</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>3. 运行UserDaoTest中的方法进行测试</strong></p>
<h3 id="通过properties元素子元素进行配置"><a href="#通过properties元素子元素进行配置" class="headerlink" title="通过properties元素子元素进行配置"></a>通过properties元素子元素进行配置</h3><blockquote>
<p>注意：&amp;符号在xml文件中是非法的，应该用&amp;代替，而在properties文件中则不需要</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3307/mybatis?useSSL=false<span class="symbol">&amp;amp;</span>useUnicode=true<span class="symbol">&amp;amp;</span>charsetEncoding=UTF-8<span class="symbol">&amp;amp;</span>serverTimezone=UTC"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"MyNewPass"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="优先级比较实验"><a href="#优先级比较实验" class="headerlink" title="优先级比较实验"></a>优先级比较实验</h3><p><strong>1. 对mybatis-config.xml文件和jdbc.properties进行如下配置</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--mybatis-config.xml--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">"jdbc.properties"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"111"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># jdbc.properties</span></span><br><span class="line"><span class="attr">username</span> = <span class="string">root</span></span><br><span class="line"><span class="attr">password</span> = <span class="string">MyNewPass</span></span><br></pre></td></tr></table></figure>

<p><strong>2. 测试UserDaoTest运行结果</strong></p>
<blockquote>
<p>无错误</p>
</blockquote>
<p><strong>3. 调换mybatis-config.xml文件和jdbc.properties的密码配置</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--mybatis-config.xml--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">"jdbc.properties"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"MyNewPass"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># jdbc.properties</span></span><br><span class="line"><span class="attr">username</span> = <span class="string">root</span></span><br><span class="line"><span class="attr">password</span> = <span class="string">111</span></span><br></pre></td></tr></table></figure>

<p><strong>4. 测试UserDaoTest运行结果</strong></p>
<blockquote>
<p>出现错误</p>
</blockquote>
<p><strong>5. 得出结论</strong><br><strong>properties中引用的resources优先级最高</strong></p>
<h2 id="类型别名（typeAliases）"><a href="#类型别名（typeAliases）" class="headerlink" title="类型别名（typeAliases）"></a>类型别名（typeAliases）</h2><blockquote>
<p>类型别名是为Java类型设置一个短的名字。它只和XML配置有关，存在的意义仅在于减少类全限定名的冗余</p>
</blockquote>
<h3 id="指定类别名"><a href="#指定类别名" class="headerlink" title="指定类别名"></a>指定类别名</h3><p><strong>1. 在 mybatis-config.xml 中添加别名配置</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">"com.llunch4w.pojo.User"</span> <span class="attr">alias</span>=<span class="string">"User"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>2. 在 userMapper.xml 中就可将全限定类名用别名代替了</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getAll"</span> <span class="attr">resultType</span>=<span class="string">"User"</span>&gt;</span></span><br><span class="line">    select * from user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="指定搜索包"><a href="#指定搜索包" class="headerlink" title="指定搜索包"></a>指定搜索包</h3><blockquote>
<p>可以指定一个包名，MyBatis会在包名下搜索需要的JavaBean</p>
</blockquote>
<p><strong>1. 在 mybatis-config.xml 中添加别名配置</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com.llunch4w.pojo"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>2. 在 userMapper.xml 中就可将全限定类名用类名（首字母小写）代替了</strong></p>
<blockquote>
<p>默认别名是类名的首字母小写，但是直接使用类名也是可以的<br>一般是用小写，表名该类型是扫描包的<br>PS：如果实体类有注解@Alias的话，那么别名是注解值</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getAll"</span> <span class="attr">resultType</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">    select * from user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="设置（settings）"><a href="#设置（settings）" class="headerlink" title="设置（settings）"></a>设置（settings）</h2><blockquote>
<p>这是 MyBatis 中极为重要的调整设置，它们会改变 MyBatis 的运行时行为</p>
</blockquote>
<p><strong>常见设置</strong></p>
<table>
<thead>
<tr>
<th>设置名</th>
<th>描述</th>
<th>有效值</th>
<th>默认值</th>
</tr>
</thead>
<tbody><tr>
<td>cacheEnabled</td>
<td>全局性地开启或关闭所有映射器配置文件中已配置的任何缓存</td>
<td>true / false</td>
<td>true</td>
</tr>
<tr>
<td>lazyLoadingEnabled</td>
<td>延迟加载的全局开关。当开启时，所有关联对象都会延迟加载。</td>
<td>true / false</td>
<td>false</td>
</tr>
<tr>
<td>logImpl</td>
<td>指定 MyBatis 所用日志的具体实现，未指定时将自动查找</td>
<td>SLF4J / LOG4J / LOG4J2 / JDK_LOGGING / COMMONS_LOGGING / STDOUT_LOGGING / NO_LOGGING</td>
<td>未设置</td>
</tr>
</tbody></table>
<h2 id="映射器（mappers）"><a href="#映射器（mappers）" class="headerlink" title="映射器（mappers）"></a>映射器（mappers）</h2><blockquote>
<p>映射器告诉MyBatis去哪里找SQL映射语句</p>
</blockquote>
<h3 id="方式一：使用相对于类路径的资源引用"><a href="#方式一：使用相对于类路径的资源引用" class="headerlink" title="方式一：使用相对于类路径的资源引用"></a>方式一：使用相对于类路径的资源引用</h3><blockquote>
<p>推荐使用这种方式</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"com/llunch4w/dao/userMapper.xml"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="方式二：使用映射器接口实现类的完全限定类名"><a href="#方式二：使用映射器接口实现类的完全限定类名" class="headerlink" title="方式二：使用映射器接口实现类的完全限定类名"></a>方式二：使用映射器接口实现类的完全限定类名</h3><blockquote>
<p>这种方式要求接口和其映射文件的名称相同且必须在同一包下<br>例如：映射文件是userMapper.xml，那么类名应该是UserMapper</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">"com.llunch4w.dao.UserMapper"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="方式三：将包内的映射器接口实现全部注册为映射器"><a href="#方式三：将包内的映射器接口实现全部注册为映射器" class="headerlink" title="方式三：将包内的映射器接口实现全部注册为映射器"></a>方式三：将包内的映射器接口实现全部注册为映射器</h3><blockquote>
<p>这种方式要求包内所有接口和其对应映射文件的名称相同，且必须在同一包下</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com.llunch4w.dao"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="顺序"><a href="#顺序" class="headerlink" title="顺序"></a>顺序</h2><blockquote>
<p>核心配置文件 mybatis-config.xml 中各项配置是有一定先后顺序的<br>The content of element type “configuration” must match “(properties?,settings?,typeAliases?,typeHandlers?,objectFactory?,objectWrapperFactory?,reflectorFactory?,plugins?,environments?,databaseIdProvider?,mappers?)”.</p>
</blockquote>
<h2 id="生命周期和作用域"><a href="#生命周期和作用域" class="headerlink" title="生命周期和作用域"></a>生命周期和作用域</h2><blockquote>
<p>生命周期、作用域，是至关重要的，因为错误的使用会导致非常严重的 <strong>并发问题</strong></p>
</blockquote>
<p><img src="/2020/12/14/MyBatis%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/15.png" alt></p>
<p><strong>SqlSessionFactoryBuilder</strong></p>
<ul>
<li>一旦创建了SqlSessionFactory后，就不再需要它了</li>
<li>最好作为局部变量存在</li>
</ul>
<p><strong>SqlSessionFactory</strong></p>
<ul>
<li>类似于数据库连接池</li>
<li>SqlSessionFactory一旦被创建就应该在应用运行期间一直存在，没有任何理由丢弃它或重新创建一个实例</li>
<li>因此SqlSessionFactory的最佳作用域是应用作用域</li>
<li>最简单的就是使用单例模式或者静态单例模式</li>
</ul>
<p><strong>SqlSession</strong></p>
<ul>
<li>连接到连接池的一个请求</li>
<li>SqlSession的实例不是线程安全的，因此是不能被共享的</li>
<li>因此SqlSession的最佳作用域是请求或方法作用域</li>
<li>用完之后需要赶紧关闭，否则资源被占用</li>
</ul>
<p><img src="/2020/12/14/MyBatis%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/16.png" alt></p>
<p>这里面的每一个Mapper，就代表着一个具体的业务。</p>
<h2 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h2><p>mybatis官方文档：<a href="https://mybatis.org/mybatis-3/zh/configuration.html" target="_blank" rel="noopener">https://mybatis.org/mybatis-3/zh/configuration.html</a></p>
<h1 id="ResultMap"><a href="#ResultMap" class="headerlink" title="ResultMap"></a>ResultMap</h1><blockquote>
<p>结果集映射，用于解决数据库表名和对应JavaBean中字段名称不统一的问题</p>
</blockquote>
<p><strong>0. 新建模块</strong><br>在MyBatis-Study父工程中新建一个子模块mybatis-03，然后将mybatis-02中的文件拷贝过去，删除一些配置使项目达到最简状态。</p>
<p><strong>1. 提出问题</strong></p>
<blockquote>
<p>在数据库中，对于长字段通常是用下划线分割而不是使用驼峰命名法。原因是：数据库中并不区别大小写，驼峰命名法实际上起不到分割单词的作用；但在java中，变量的命名通常是驼峰命名<br>在MyBatis中，JavaBean的属性名必须和数据库中的字段是完全一致的，否则就会找不到对应字段。<br>所以，该如何统一两者之间的命名差异呢？</p>
</blockquote>
<p>下面演示这种情况<br>（1）数据库表名字段和对应JavaBean属性不一致<br><img src="/2020/12/14/MyBatis%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/17.png" alt><br>（2）执行UserTestDao的getAllTest方法进行测试<br><img src="/2020/12/14/MyBatis%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/18.png" alt><br>（3）得出结论：数据库表名字段和对应JavaBean属性不一致时无对应字段的属性无法被赋值</p>
<p><strong>2. 解决方案一：修改userMapper.xml中的查询语句</strong><br><img src="/2020/12/14/MyBatis%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/19.png" alt></p>
<p><strong>3. 解决方案二：使用ResultMap</strong><br><img src="/2020/12/14/MyBatis%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/20.png" alt></p>
<h2 id="设计思想"><a href="#设计思想" class="headerlink" title="设计思想"></a>设计思想</h2><blockquote>
<p>对于简单的语句根本不需要配置显式的结果映射，而对于复杂一点的语句，只需要描述他们的关系即可</p>
</blockquote>
<h1 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h1><h2 id="标准日志工厂"><a href="#标准日志工厂" class="headerlink" title="标准日志工厂"></a>标准日志工厂</h2><blockquote>
<p>如果一个数据库操作，出现了异常，我们需要排错，日志就是最好的助手</p>
</blockquote>
<p><strong>0. 新建模块</strong><br>在MyBatis-Study父工程中新建一个子模块mybatis-04，然后将mybatis-03中的文件拷贝过去，删除一些配置使项目达到最简状态。然后将UserDaoTest中的测试函数换为getByIdTest</p>
<p><strong>1. 测试UserDaoTest的运行效果</strong><br><img src="/2020/12/14/MyBatis%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/21.png" alt></p>
<p><strong>2. 在核心配置文件 mybatis-config.xml 中添加日志配置</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"logImpl"</span> <span class="attr">value</span>=<span class="string">"STDOUT_LOGGING"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>3. 测试UserDaoTest的运行效果</strong><br><img src="/2020/12/14/MyBatis%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/22.png" alt></p>
<h2 id="所有的日志工厂"><a href="#所有的日志工厂" class="headerlink" title="所有的日志工厂"></a>所有的日志工厂</h2><ul>
<li>SLF4J </li>
<li>LOG4J 【掌握】：log4j日志工厂，需要导包</li>
<li>LOG4J2 </li>
<li>JDK_LOGGING </li>
<li>COMMONS_LOGGING </li>
<li>STDOUT_LOGGING 【掌握】：标准日志工厂，不需要导包依赖</li>
<li>NO_LOGGING</li>
</ul>
<h2 id="LOG4J"><a href="#LOG4J" class="headerlink" title="LOG4J"></a>LOG4J</h2><blockquote>
<p>Log4j是Apache的一个开源项目。通过使用Log4j，我们可以控制日志信息输送的目的地使控制台、文件、GUI组件<br>也可以控制每一条日志的输出格式<br>通过定义每一条日志信息的级别，我们能够更加细致地控制日志的生成过程<br>通过一个<code>配置文件</code>来灵活地进行配置，而不需要修改应用的代码</p>
</blockquote>
<p><strong>1. 在mybatis-04模块的pom.xml中引入log4j依赖</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/log4j/log4j --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>2. 编写log4j.properties文件</strong></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将等级为DEBUG的日志信息输出到 console 和 logFile 这两个目的地，console 和 logFile 的定义在下面的代码</span></span><br><span class="line"><span class="meta">log4j.rootLogger</span>=<span class="string">DEBUG,console,logFile</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 控制台(console)</span></span><br><span class="line"><span class="meta">log4j.appender.console</span>=<span class="string">org.apache.log4j.ConsoleAppender</span></span><br><span class="line"><span class="meta">log4j.appender.console.Threshold</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">log4j.appender.console.ImmediateFlush</span>=<span class="string">true</span></span><br><span class="line"><span class="meta">log4j.appender.console.Target</span>=<span class="string">System.out</span></span><br><span class="line"><span class="meta">log4j.appender.console.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.console.layout.ConversionPattern</span>=<span class="string">[%c]-%m%n</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 日志文件(logFile)</span></span><br><span class="line"><span class="meta">log4j.appender.logFile</span>=<span class="string">org.apache.log4j.RollingFileAppender</span></span><br><span class="line"><span class="meta">log4j.appender.logFile.Threshold</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">log4j.appender.logFile.MaxFileSize</span> = <span class="string">10mb</span></span><br><span class="line"><span class="meta">log4j.appender.logFile.File</span>=<span class="string">./logs/log.log4j</span></span><br><span class="line"><span class="meta">log4j.appender.logFile.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.logFile.layout.ConversionPattern</span>=<span class="string">[%-5p] %d(%r) --&gt; [%t] %l: %m %x %n</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 日志输出级别</span></span><br><span class="line"><span class="meta">log4j.logger.org.mybatis</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">log4j.logger.java.sql</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">log4j.logger.java.sql.Statement</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">log4j.logger.java.sql.ResultSet</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">log4j.logger.java.sql.PreparedStatement</span>=<span class="string">DEBUG</span></span><br></pre></td></tr></table></figure>

<p><strong>3. 在核心配置文件 mybatis-config.xml 中添加log4j日志配置</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"logImpl"</span> <span class="attr">value</span>=<span class="string">"LOG4J"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>4. 运行UserDaoTest进行测试</strong><br><img src="/2020/12/14/MyBatis%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/23.png" alt></p>
<p><strong>5. 观察logFile文件的生成</strong><br><img src="/2020/12/14/MyBatis%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/24.png" alt></p>
<p><strong>补充：log4j.properties中格式化符号的说明</strong><br><img src="/2020/12/14/MyBatis%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/25.png" alt></p>
<p><strong>6. 在UserTestDao中使用Logger添加一些自定义输出</strong><br><img src="/2020/12/14/MyBatis%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/26.png" alt></p>
<p><strong>7. 清空log.log4j文件后运行log4jTest函数进行测试，完成后观察log.log4j文件内容</strong><br><img src="/2020/12/14/MyBatis%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/27.png" alt></p>
<h1 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h1><h2 id="limit分页"><a href="#limit分页" class="headerlink" title="limit分页"></a>limit分页</h2><p><strong>1. 在UserMapper接口中添加分页函数</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">List&lt;User&gt; <span class="title">getInLimit</span><span class="params">(Map&lt;String,Object&gt; params)</span></span>;</span><br></pre></td></tr></table></figure>

<p><strong>2. 在userMapper.xml中添加数据库操作标签</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getInLimit"</span> <span class="attr">parameterType</span>=<span class="string">"map"</span> <span class="attr">resultMap</span>=<span class="string">"userMap"</span>&gt;</span></span><br><span class="line">    select * from user limit #&#123;startIndex&#125;,#&#123;pageSize&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>3. 在UserDaoTest类中添加测试函数</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// limit分页查询测试</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getInLimitTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession sqlSession = MyBatisUtil.getSqlSession();</span><br><span class="line">    UserMapper userDao = sqlSession.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    Map&lt;String,Object&gt; params = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    params.put(<span class="string">"startIndex"</span>,<span class="number">0</span>);</span><br><span class="line">    params.put(<span class="string">"pageSize"</span>,<span class="number">2</span>);</span><br><span class="line">    List&lt;User&gt; userList = userDao.getInLimit(params);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (User user : userList) &#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="RowBounds分页"><a href="#RowBounds分页" class="headerlink" title="RowBounds分页"></a>RowBounds分页</h2><blockquote>
<p>核心思想：在java层面实现分页<br>这种方式不推荐使用，仅作了解</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// RowBound分页查询测试</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getInRowBoundTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession sqlSession = MyBatisUtil.getSqlSession();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 参数为offset(起始位置)和limit(读取数据条数)</span></span><br><span class="line">    RowBounds rowBounds = <span class="keyword">new</span> RowBounds(<span class="number">0</span>,<span class="number">2</span>);</span><br><span class="line">    List&lt;User&gt; userList = sqlSession.selectList(<span class="string">"com.llunch4w.dao.UserMapper.getAll"</span>, <span class="keyword">null</span>, rowBounds);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (User user : userList) &#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="分页插件"><a href="#分页插件" class="headerlink" title="分页插件"></a>分页插件</h2><blockquote>
<p>MyBatis分页插件PageHelper</p>
</blockquote>
<p>PageHelper官方地址：<a href="https://pagehelper.github.io/" target="_blank" rel="noopener">https://pagehelper.github.io/</a></p>
<h1 id="MyBatis执行流程"><a href="#MyBatis执行流程" class="headerlink" title="MyBatis执行流程"></a>MyBatis执行流程</h1><p><img src="/2020/12/14/MyBatis%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/28.png" alt></p>
<h1 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h1><p><strong>0. 在MyBatis-Study父工程下新建一个子模块mybatis-05</strong></p>
<ul>
<li>将mybatis-04中resources目录下的jdbc.properties和mybatis-config.xml移动到mybatis-05的resources目录下，并将mybatis-config.xml中的setting设置logImpl的值改为STDOUT_LOGGING</li>
<li>将mybatis-04中java目录下的包移动到mybatis-05中，将dao包中的类和xml文件删除</li>
<li>将mybatis-01模块中test目录下的包拷贝到mybatis-05中test目录下，并对其中测试函数进行删减，使其满足只具有基本的增删改查功能</li>
</ul>
<p><strong>1. 在dao包下添加UserDao接口</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 查询所有用户</span></span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from user"</span>)</span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">getAll</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据用户ID进行查询</span></span><br><span class="line">    <span class="comment">// 方法存在多个参数时，所有参数前必须加上@Param注解</span></span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from user where id = #&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function">User <span class="title">getById</span><span class="params">(@Param(<span class="string">"id"</span>)</span><span class="keyword">int</span> id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加用户</span></span><br><span class="line">    <span class="comment">// 因为数据表中设置了id属性为自增的，所以添加时不幅值也没关系，它会自增</span></span><br><span class="line">    <span class="meta">@Insert</span>(<span class="string">"insert into user(name,pwd) values(#&#123;name&#125;,#&#123;password&#125;)"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">insert</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 更新用户</span></span><br><span class="line">    <span class="meta">@Update</span>(<span class="string">"update user set name=#&#123;name&#125;,pwd=#&#123;password&#125; where id=#&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">update</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据ID删除用户</span></span><br><span class="line">    <span class="meta">@Delete</span>(<span class="string">"delete from user where id=#&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">deleteById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>2. 通过MyBatisUtil类中获取SqlSession时设置自动提交为true</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SqlSession <span class="title">getSqlSession</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> sqlSessionFactory.openSession(<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>3. 在UserTestDao中测试接口各个功能</strong></p>
<p><strong>4. 注意：mybatis-config.xml中必须包含接口的映射路径</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com.llunch4w.dao"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="Param注解基本规则"><a href="#Param注解基本规则" class="headerlink" title="Param注解基本规则"></a>Param注解基本规则</h2><ul>
<li>基本类型或String类型的参数，需要加上；但如果只有一个基本类型的话，可以不加（但建议加上）</li>
<li>引用类型不需要加</li>
<li>在SQL中的引用就是在@Param中设定的属性名</li>
</ul>
<h1 id="Lombok"><a href="#Lombok" class="headerlink" title="Lombok"></a>Lombok</h1><blockquote>
<p>Project Lombok is a java library that automatically plugs into your editor and build tools, spicing up your java.<br>Never write another getter or equals method again, with one annotation your class has a fully featured builder, Automate your logging variables, and much more.</p>
</blockquote>
<p><strong>1. 在mybatis-05的pom.xml中导入Maven依赖</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>2. 在IDEA中安装lombok插件</strong><br>File -&gt; Settings -&gt; Plugins -&gt; 搜索lombok<br><img src="/2020/12/14/MyBatis%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/31.png" alt></p>
<p><strong>3. 使用lombok标签简化开发</strong><br><img src="/2020/12/14/MyBatis%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/29.png" alt></p>
<p><strong>4. 对于User类只保留属性</strong><br><img src="/2020/12/14/MyBatis%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/30.png" alt></p>
<p>常用注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span>  <span class="comment">// 无参构造、set(@Set)、get(@Get)、toString(@ToString)、hashcode、equals(@EqualsAndHashCode)</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span> <span class="comment">// 全参构造</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span>  <span class="comment">// 无参构造</span></span><br></pre></td></tr></table></figure>

<p><strong>5. 添加lombok的Data注解</strong></p>
<blockquote>
<p>添加Data注解后，lombok自动为User类添加了很多方法</p>
</blockquote>
<p><img src="/2020/12/14/MyBatis%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/32.png" alt></p>
<h1 id="复杂查询"><a href="#复杂查询" class="headerlink" title="复杂查询"></a>复杂查询</h1><h2 id="环境构建"><a href="#环境构建" class="headerlink" title="环境构建"></a>环境构建</h2><p><strong>1. 在数据库mybatis中创建teacher表和student表并向其中插入数据</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> teacher(</span><br><span class="line">    <span class="keyword">id</span> <span class="built_in">int</span> <span class="keyword">not</span> <span class="literal">null</span> auto_increment,</span><br><span class="line">    <span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">30</span>) <span class="keyword">default</span> <span class="literal">null</span>,</span><br><span class="line">    primary <span class="keyword">key</span> (<span class="keyword">id</span>)</span><br><span class="line">)<span class="keyword">engine</span>=<span class="keyword">innodb</span> <span class="keyword">default</span> <span class="keyword">charset</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> teacher(<span class="keyword">id</span>,<span class="keyword">name</span>) <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">'秦老师'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> student(</span><br><span class="line">    <span class="keyword">id</span> <span class="built_in">int</span> <span class="keyword">not</span> <span class="literal">null</span> auto_increment,</span><br><span class="line">    <span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">30</span>) <span class="keyword">default</span> <span class="literal">null</span>,</span><br><span class="line">    tid <span class="built_in">int</span> <span class="keyword">default</span> <span class="literal">null</span>,</span><br><span class="line">    primary <span class="keyword">key</span> (<span class="keyword">id</span>),</span><br><span class="line">    <span class="keyword">key</span> fk_tid (tid),</span><br><span class="line">    <span class="keyword">constraint</span> fk_tid <span class="keyword">foreign</span> <span class="keyword">key</span> (tid) <span class="keyword">references</span> teacher(<span class="keyword">id</span>)</span><br><span class="line">)<span class="keyword">engine</span>=<span class="keyword">innodb</span> <span class="keyword">default</span> <span class="keyword">charset</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student(<span class="keyword">name</span>,tid) </span><br><span class="line">        <span class="keyword">values</span>(<span class="string">'小明'</span>,<span class="number">1</span>),(<span class="string">'小红'</span>,<span class="number">1</span>),(<span class="string">'小张'</span>,<span class="number">1</span>),(<span class="string">'小李'</span>,<span class="number">1</span>),(<span class="string">'小王'</span>,<span class="number">1</span>);</span><br></pre></td></tr></table></figure>

<p><strong>2. 在MyBatis-Study父工程下建立子模块mybatis-06</strong></p>
<ul>
<li>将mybatis-05的pom.xml中包含的lombok依赖复制到mybatis-06的pom.xml文件中</li>
<li>将mybatis-05的resources目录下文件复制到mybatis-06的resources目录下</li>
<li>将mybatis-05 java目录下的包复制到mybatis-06的java目录下，并删除dao包和pojo包中的类</li>
</ul>
<p><strong>3. 在pojo包中添加实体类 Teacher 和 Student</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 学生关联一个老师</span></span><br><span class="line">    <span class="keyword">private</span> Teacher teacher;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>4. 在dao包下添加数据库映射接口</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TeacherMapper</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StudentMapper</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<p><strong>5. 在resources目录下建立com.llunch4w.dao目录</strong></p>
<blockquote>
<p>这个目录结构与存放Mapper类源码的路径最好一致，用于存放mapper.xml文件</p>
</blockquote>
<p>在该目录下添加 <strong>studentMapper.xml</strong> 和 <strong>teacherMapper.xml</strong> 文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.llunch4w.dao.StudentMapper"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.llunch4w.dao.TeacherMapper"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>6. 在mybatis-config文件中添加studentMapper.xml和teacherMapper.xml的绑定</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"com/llunch4w/dao/teacherMapper.xml"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"com/llunch4w/dao/studentMapper.xml"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>7. 编写测试类进行测试，检查环境是否配置成功</strong></p>
<ul>
<li>TeacherMapper中添加方法getById<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 根据ID获取教师</span></span><br><span class="line"><span class="meta">@Select</span>(<span class="string">"select * from teacher where id=#&#123;id&#125;"</span>)</span><br><span class="line"><span class="function">Teacher <span class="title">getById</span><span class="params">(@Param(<span class="string">"id"</span>)</span><span class="keyword">int</span> id)</span>;</span><br></pre></td></tr></table></figure></li>
<li>test目录下测试类com.llunch4w.dao.TeacherMapperTest中添加函数<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getByIdTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession sqlSession = MyBatisUtil.getSqlSession();</span><br><span class="line">    TeacherMapper teacherMapper = sqlSession.getMapper(TeacherMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    Teacher teacher = teacherMapper.getById(<span class="number">1</span>);</span><br><span class="line">    System.out.println(teacher);</span><br><span class="line">    </span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="多对一处理"><a href="#多对一处理" class="headerlink" title="多对一处理"></a>多对一处理</h2><p><strong>1. 提出问题</strong></p>
<blockquote>
<p>在Java类Student中包含一个对象属性Teacher，在数据库层面Teacher信息可以通过多表连接查询得到，但是又该如何将查询结果映射映射到Student的Teacher属性上呢？</p>
</blockquote>
<p><strong>2. 为StudentMapper类添加查询所有学生的接口</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">List&lt;Student&gt; <span class="title">getAll</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>

<p><strong>3. 编写studentMapper.xml文件</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getAll"</span> <span class="attr">resultType</span>=<span class="string">"Student"</span>&gt;</span></span><br><span class="line">    select * from student</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>4. 编写StudentMapperTest测试查询所有学生</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getAllTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession sqlSession = MyBatisUtil.getSqlSession();</span><br><span class="line">    StudentMapper studentMapper = sqlSession.getMapper(StudentMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    List&lt;Student&gt; studentList = studentMapper.getAll();</span><br><span class="line">    <span class="keyword">for</span> (Student student : studentList) &#123;</span><br><span class="line">        System.out.println(student);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>查询结果<br><img src="/2020/12/14/MyBatis%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/33.png" alt></p>
<blockquote>
<p>发现：student的teacher属性不能被赋值</p>
</blockquote>
<h3 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h3><p><strong>5. 改写studentMapper.xml文件</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getAll"</span> <span class="attr">resultMap</span>=<span class="string">"StudentTeacher"</span>&gt;</span></span><br><span class="line">    select * from student</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"StudentTeacher"</span> <span class="attr">type</span>=<span class="string">"Student"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--复杂的对象，需要单独处理</span></span><br><span class="line"><span class="comment">        collection:集合</span></span><br><span class="line"><span class="comment">        association:对象</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"teacher"</span> <span class="attr">column</span>=<span class="string">"tid"</span> <span class="attr">javaType</span>=<span class="string">"Teacher"</span> <span class="attr">select</span>=<span class="string">"getTeacherByTid"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getTeacherByTid"</span> <span class="attr">resultType</span>=<span class="string">"Teacher"</span>&gt;</span></span><br><span class="line">    select * from teacher where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>6. 运行StudentMapperTest的getAllTest函数</strong><br>查询结果<br><img src="/2020/12/14/MyBatis%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/34.png" alt></p>
<blockquote>
<p>结论：teacher属性赋值成功</p>
</blockquote>
<h3 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h3><p><strong>5. 改写studentMapper.xml文件</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getAll"</span> <span class="attr">resultMap</span>=<span class="string">"StudentTeacher"</span>&gt;</span></span><br><span class="line">    select s.id sid,s.name sname,t.id tid,t.name tname</span><br><span class="line">    from student s inner join teacher t on s.tid=t.id</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"StudentTeacher"</span> <span class="attr">type</span>=<span class="string">"Student"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"sid"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"name"</span> <span class="attr">column</span>=<span class="string">"sname"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"teacher"</span> <span class="attr">column</span>=<span class="string">"tname"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"tid"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"name"</span> <span class="attr">column</span>=<span class="string">"tname"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>6. 运行StudentMapperTest的getAllTest函数</strong><br>查询结果：teacher属性赋值成功</p>
<h2 id="一对多处理"><a href="#一对多处理" class="headerlink" title="一对多处理"></a>一对多处理</h2><p><strong>0. 重复一遍构建环境的过程，得到mybatis-07</strong></p>
<ul>
<li>将mybatis-06的pom.xml中包含的lombok依赖复制到mybatis-07的pom.xml文件中</li>
<li>将mybatis-06的resources目录下文件复制到mybatis-07的resources目录下</li>
<li>将mybatis-06 java目录下的包复制到mybatis-07的java目录下，并删除pojo包中的类，清空dao包中接口包含的方法</li>
</ul>
<p><strong>1. 在pojo包中添加实体类 Teacher 和 Student</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> List&lt;Student&gt; students; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> tid;    <span class="comment">//教师ID</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>2. 为TeacherMapper编写一个按ID查询的方法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 根据ID获取教师</span></span><br><span class="line"><span class="function">Teacher <span class="title">getById</span><span class="params">(@Param(<span class="string">"id"</span>)</span><span class="keyword">int</span> id)</span>;</span><br></pre></td></tr></table></figure>

<h3 id="方案一-1"><a href="#方案一-1" class="headerlink" title="方案一"></a>方案一</h3><p><strong>3. 编写teacherMapper.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getById"</span> <span class="attr">resultMap</span>=<span class="string">"TeacherStudent"</span>&gt;</span></span><br><span class="line">    select s.id sid,s.name sname,t.id tid,t.name tname</span><br><span class="line">    from student s inner join teacher t on s.tid=t.id</span><br><span class="line">    where t.id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"TeacherStudent"</span> <span class="attr">type</span>=<span class="string">"Teacher"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"tid"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"name"</span> <span class="attr">column</span>=<span class="string">"tname"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"students"</span> <span class="attr">ofType</span>=<span class="string">"Student"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"sid"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"name"</span> <span class="attr">column</span>=<span class="string">"sname"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"tid"</span> <span class="attr">column</span>=<span class="string">"tid"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>4. 运行TeacherMapperTest中的getByIdTest函数进行测试</strong><br><img src="/2020/12/14/MyBatis%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/35.png" alt></p>
<blockquote>
<p>Teacher类中的students属性被顺利赋值</p>
</blockquote>
<h3 id="方案二-1"><a href="#方案二-1" class="headerlink" title="方案二"></a>方案二</h3><p><strong>3. 编写teacherMapper.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getById"</span> <span class="attr">resultMap</span>=<span class="string">"TeacherStudent"</span>&gt;</span></span><br><span class="line">    select * from teacher where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"TeacherStudent"</span> <span class="attr">type</span>=<span class="string">"Teacher"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"students"</span> <span class="attr">javaType</span>=<span class="string">"ArrayList"</span> <span class="attr">ofType</span>=<span class="string">"Student"</span> <span class="attr">select</span>=<span class="string">"getStudentByTeacherId"</span> <span class="attr">column</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getStudentByTeacherId"</span> <span class="attr">resultType</span>=<span class="string">"Student"</span>&gt;</span></span><br><span class="line">    select * from student where tid=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>4. 运行TeacherMapperTest中的getByIdTest函数进行测试</strong><br><img src="/2020/12/14/MyBatis%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/36.png" alt></p>
<blockquote>
<p>Teacher类中的students属性被顺利赋值<br>但Teacher的id属性值不对，解决方式是在resultMap中添加</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"id"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
</blockquote>
<h1 id="动态SQL"><a href="#动态SQL" class="headerlink" title="动态SQL"></a>动态SQL</h1><blockquote>
<p>动态SQL就是根据不同的条件生成不同的SQL语句</p>
</blockquote>
<h2 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h2><p><strong>1. 在mybatis数据库中创建数据表blog</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> blog(</span><br><span class="line">    <span class="keyword">id</span> <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">    title <span class="built_in">varchar</span>(<span class="number">100</span>) <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">    author <span class="built_in">varchar</span>(<span class="number">30</span>) <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">    create_time datetime <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">comment</span> <span class="string">'创建时间'</span>,</span><br><span class="line">    <span class="keyword">view</span> <span class="built_in">int</span>(<span class="number">30</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">comment</span> <span class="string">'浏览量'</span></span><br><span class="line">)<span class="keyword">engine</span>=<span class="keyword">innodb</span> <span class="keyword">default</span> <span class="keyword">charset</span>=utf8;</span><br></pre></td></tr></table></figure>

<p><strong>2. 在MyBatis-Study父工程下创建子模块mybatis-08</strong></p>
<ul>
<li>将mybatis-07中pom.xml的lombok依赖拷贝到mybatis-08的pom.xml文件中</li>
<li>将mybatis-07 resources目录下的jdbc.properties文件和mybatis-config.xml文件拷贝到mybatis-08 resources目录下</li>
<li>将mybatis-07 java目录下的包拷贝到mybatis-08的java目录下，并清空pojo包和dao包中的类</li>
</ul>
<p><strong>3. 在pojo包中编写Blog类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Blog</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="keyword">private</span> String author;</span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> view;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>4. 在utils包中添加IdUtil用于随机生产ID</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IdUtil</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getId</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> UUID.randomUUID().toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>5. 在mybatis-config.xml中添加<code>mapUnderscoreToCamelCase</code>的setting设置</strong></p>
<blockquote>
<p>此设置可以使驼峰命名的Java属性和下划线命名的数据库列名相对应</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--是否开启自动驼峰命名规则映射--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"mapUnderscoreToCamelCase"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>6. 在dao包下添加接口BlogMapper</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BlogMapper</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">insert</span><span class="params">(Blog blog)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>7. 在resources目录下的com/llunch4w/dao目录下添加blogMapper.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.llunch4w.dao.BlogMapper"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"insert"</span> <span class="attr">parameterType</span>=<span class="string">"Blog"</span>&gt;</span></span><br><span class="line">        insert into blog(id,title,author,create_time,view) values(#&#123;id&#125;,#&#123;title&#125;,#&#123;author&#125;,#&#123;createTime&#125;,#&#123;view&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>8. 修改mybatis-config.xml中mapper配置</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"com/llunch4w/dao/blogMapper.xml"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>9. 在test目录下编写com.llunch4w.dao.BlogMapperTest类进行测试</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession sqlSession = MyBatisUtil.getSqlSession();</span><br><span class="line">    BlogMapper blogMapper = sqlSession.getMapper(BlogMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    Blog blog = <span class="keyword">new</span> Blog();</span><br><span class="line">    blog.setId(IdUtil.getId());</span><br><span class="line">    blog.setTitle(<span class="string">"MyBatis如此困难"</span>);</span><br><span class="line">    blog.setAuthor(<span class="string">"Llunch Say"</span>);</span><br><span class="line">    blog.setCreateTime(<span class="keyword">new</span> Date());</span><br><span class="line">    blog.setView(<span class="number">9999</span>);</span><br><span class="line"></span><br><span class="line">    blogMapper.insert(blog);</span><br><span class="line"></span><br><span class="line">    String[] titles = &#123;<span class="string">"Java"</span>,<span class="string">"Spring"</span>,<span class="string">"微服务"</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span> (String title : titles) &#123;</span><br><span class="line">        blog.setId(IdUtil.getId());</span><br><span class="line">        blog.setTitle(title + <span class="string">"如此困难"</span>);</span><br><span class="line">        blogMapper.insert(blog);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="IF"><a href="#IF" class="headerlink" title="IF"></a>IF</h2><p><strong>1. 在BlogMapper中添加函数getWithIf</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">List&lt;Blog&gt; <span class="title">getWithIf</span><span class="params">(Map&lt;String,Object&gt; params)</span></span>;</span><br></pre></td></tr></table></figure>

<p><strong>2. 在blogMapper.xml中添加对应的查询语句</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getWithIf"</span> <span class="attr">parameterType</span>=<span class="string">"map"</span> <span class="attr">resultType</span>=<span class="string">"Blog"</span>&gt;</span></span><br><span class="line">    select * from blog where 1=1</span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"title != null"</span>&gt;</span></span><br><span class="line">        and title = #&#123;title&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"author != null"</span>&gt;</span></span><br><span class="line">        and author = #&#123;author&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>3. 在BlogMapperTest类中添加测试方法getWithIfTest</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getWithIfTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession sqlSession = MyBatisUtil.getSqlSession();</span><br><span class="line">    BlogMapper blogMapper = sqlSession.getMapper(BlogMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    Map&lt;String,Object&gt; params = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    List&lt;Blog&gt; blogList = blogMapper.getWithIf(params);</span><br><span class="line">    <span class="keyword">for</span> (Blog blog : blogList) &#123;</span><br><span class="line">        System.out.println(blog);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以上为不添加任何参数的情况，查询结果为：<br><img src="/2020/12/14/MyBatis%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/37.png" alt></p>
<blockquote>
<p>结论：查出了所有数据</p>
</blockquote>
<p><strong>4. 在getWithIfTest方法里params变量添加title参数限定</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">params.put(<span class="string">"title"</span>,<span class="string">"MyBatis如此困难"</span>);</span><br></pre></td></tr></table></figure>
<p>查询结果为：<br><img src="/2020/12/14/MyBatis%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/38.png" alt></p>
<blockquote>
<p>结论：限定了title的值进行查询</p>
</blockquote>
<h2 id="trim"><a href="#trim" class="headerlink" title="trim"></a>trim</h2><h3 id="WHERE-IF"><a href="#WHERE-IF" class="headerlink" title="WHERE + IF"></a>WHERE + IF</h3><p><strong>1. 提出问题</strong><br>对于IF的使用，考虑这样一种情况：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getWithIfProblem"</span> <span class="attr">parameterType</span>=<span class="string">"map"</span> <span class="attr">resultType</span>=<span class="string">"Blog"</span>&gt;</span></span><br><span class="line">    select * from blog where</span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"title != null"</span>&gt;</span></span><br><span class="line">        and title = #&#123;title&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"author != null"</span>&gt;</span></span><br><span class="line">        and author = #&#123;author&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>如果此时传来的参数中title为null,author不为null的话，sql语句就会被动态拼接成</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> blog <span class="keyword">where</span> <span class="keyword">and</span> author = ?</span><br></pre></td></tr></table></figure>
<p>显然，这样是不正确的<br><img src="/2020/12/14/MyBatis%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/39.png" alt></p>
<p><strong>2. 解决问题</strong><br>所以引入了where元素，where 元素只会在子元素返回任何内容的情况下才插入 “WHERE” 子句。而且，若子句的开头为 “AND” 或 “OR”，where 元素也会将它们去除。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getWithTrim"</span> <span class="attr">parameterType</span>=<span class="string">"map"</span> <span class="attr">resultType</span>=<span class="string">"Blog"</span>&gt;</span></span><br><span class="line">    select * from blog</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"title != null"</span>&gt;</span></span><br><span class="line">            and title = #&#123;title&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"author != null"</span>&gt;</span></span><br><span class="line">            and author = #&#123;author&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>问题被解决了<br><img src="/2020/12/14/MyBatis%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/40.png" alt></p>
<h3 id="Where-Set"><a href="#Where-Set" class="headerlink" title="Where + Set"></a>Where + Set</h3><blockquote>
<p>对于更新语句来说，需要用Where + Set的组合来避免SQL动态组合出错的情况<br>set 元素会动态地在行首插入 SET 关键字，并会删掉额外的逗号（这些逗号是在使用条件语句给列赋值时引入的）</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateWithTrim"</span> <span class="attr">parameterType</span>=<span class="string">"map"</span>&gt;</span></span><br><span class="line">    update blog</span><br><span class="line">    <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"title != null"</span>&gt;</span></span><br><span class="line">            title=#&#123;title&#125;,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"author != null"</span>&gt;</span></span><br><span class="line">            author = #&#123;author&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>更新测试函数执行前：<br><img src="/2020/12/14/MyBatis%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/41.png" alt><br>更新测试函数执行后：<br><img src="/2020/12/14/MyBatis%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/42.png" alt></p>
<h3 id="定制过滤条件"><a href="#定制过滤条件" class="headerlink" title="定制过滤条件"></a>定制过滤条件</h3><p><strong>1. 可以通过trim定制where过滤条件</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">"WHERE"</span> <span class="attr">prefixOverrides</span>=<span class="string">"AND |OR "</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>prefixOverrides 属性会忽略通过管道符分隔的文本序列（注意此例中的空格是必要的）</p>
</blockquote>
<p><strong>2. 可以通过trim定制set过滤条件</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">"SET"</span> <span class="attr">suffixOverrides</span>=<span class="string">","</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="choose-When-Otherwise"><a href="#choose-When-Otherwise" class="headerlink" title="choose(When  + Otherwise)"></a>choose(When  + Otherwise)</h2><blockquote>
<p>choose标签类似于java语句中的switch：会在多个when中选择一个符合条件的执行，如果都不符合则执行otherwise标签中定义的语句</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getWithChoose"</span> <span class="attr">parameterType</span>=<span class="string">"map"</span> <span class="attr">resultType</span>=<span class="string">"Blog"</span>&gt;</span></span><br><span class="line">    select * from blog</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">"title != null"</span>&gt;</span></span><br><span class="line">                title = #&#123;title&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">"author != null"</span>&gt;</span></span><br><span class="line">                and author = #&#123;author&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">otherwise</span>&gt;</span></span><br><span class="line">                and view = #&#123;view&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>1. 测试只添加view参数时</strong></p>
<blockquote>
<p>会走otherwise路径</p>
</blockquote>
<p><img src="/2020/12/14/MyBatis%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/43.png" alt></p>
<p><strong>2. 测试只添加author参数</strong><br><img src="/2020/12/14/MyBatis%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/44.png" alt></p>
<p><strong>3. 添加author参数和title参数限定</strong></p>
<blockquote>
<p>发现只有title参数有效，说明choose标签会顺序判断所有when标签中条件是否满足，若满足则执行该标签，不会再考虑后面的when标签条件是否满足</p>
</blockquote>
<p><img src="/2020/12/14/MyBatis%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/45.png" alt></p>
<h2 id="SQL片段"><a href="#SQL片段" class="headerlink" title="SQL片段"></a>SQL片段</h2><blockquote>
<p>用于将公共的SQL片段提取出来，方便复用</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">"if-title-author"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"title != null"</span>&gt;</span></span><br><span class="line">        and title = #&#123;title&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"author != null"</span>&gt;</span></span><br><span class="line">        and author = #&#123;author&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getWithIf"</span> <span class="attr">parameterType</span>=<span class="string">"map"</span> <span class="attr">resultType</span>=<span class="string">"Blog"</span>&gt;</span></span><br><span class="line">    select * from blog</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"if-title-author"</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="/2020/12/14/MyBatis%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/46.png" alt></p>
<p><strong>注意事项</strong></p>
<ul>
<li>最好基于单表来定义SQL片段</li>
<li>不要存在where标签</li>
</ul>
<h2 id="foreach"><a href="#foreach" class="headerlink" title="foreach"></a>foreach</h2><blockquote>
<p>动态SQL的另一个常用需求是对一个集合进行遍历，通常是在构建IN条件语句时</p>
</blockquote>
<p><strong>1. blogMapper.xml中定义查询语句</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    拼凑目标：select * from blog where (title='MyBatis如此困难' or title='Java如此困难')</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getWithForEach"</span> <span class="attr">parameterType</span>=<span class="string">"map"</span> <span class="attr">resultType</span>=<span class="string">"Blog"</span>&gt;</span></span><br><span class="line">    select * from blog</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"titles"</span> <span class="attr">item</span>=<span class="string">"title"</span> <span class="attr">open</span>=<span class="string">"and ("</span> <span class="attr">close</span>=<span class="string">")"</span> <span class="attr">separator</span>=<span class="string">"or"</span>&gt;</span></span><br><span class="line">            title = #&#123;title&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>2. BlogMapper接口中定义函数</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 查询Blog（伴随ForEach）</span></span><br><span class="line"><span class="function">List&lt;Blog&gt; <span class="title">getWithForEach</span><span class="params">(Map&lt;String,Object&gt; params)</span></span>;</span><br></pre></td></tr></table></figure>

<p><strong>3. 编写测试函数</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getWithForEachTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession sqlSession = MyBatisUtil.getSqlSession();</span><br><span class="line">    BlogMapper blogMapper = sqlSession.getMapper(BlogMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    Map&lt;String,Object&gt; params = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    List&lt;String&gt; titles = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    titles.add(<span class="string">"MyBatis如此困难"</span>);</span><br><span class="line">    titles.add(<span class="string">"Java如此困难"</span>);</span><br><span class="line">    params.put(<span class="string">"titles"</span>,titles);</span><br><span class="line">    List&lt;Blog&gt; blogList = blogMapper.getWithForEach(params);</span><br><span class="line">    <span class="keyword">for</span> (Blog blog : blogList) &#123;</span><br><span class="line">        System.out.println(blog);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>查询成功<br><img src="/2020/12/14/MyBatis%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/47.png" alt></p>
<h1 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ol>
<li>什么是缓存？<ul>
<li>存在内存中的临时数据</li>
<li>将用户经常查询的数据放在缓存（内存）中，用户去查询数据就不用从磁盘上（关系型数据库数据文件）查询，而是从缓存中查询，从而提高查询效率，解决了高并发系统的性能问题</li>
</ul>
</li>
<li>为什么使用缓存？<ul>
<li>减少和数据库的交互次数，减少系统开销，提高系统效率</li>
</ul>
</li>
<li>什么样的数据能使用缓存？<ul>
<li>经常查询并且不经常改变的数据</li>
</ul>
</li>
</ol>
<h2 id="MyBatis缓存"><a href="#MyBatis缓存" class="headerlink" title="MyBatis缓存"></a>MyBatis缓存</h2><blockquote>
<p>MyBatis包含一个非常强大的查询缓存特性，它可以非常方便地定制和配置缓存</p>
</blockquote>
<p>MyBatis系统中默认定义了两级缓存：一级缓存和二级缓存</p>
<ul>
<li>默认情况下，只有一级缓存开启（<code>SqlSession</code> 级别的缓存，也称为本地缓存）</li>
<li>二级缓存需要手动开启和配置，它是基于 <code>namespace</code> 级别的缓存</li>
<li>为了提高扩展性，MyBatis定义了缓存接口 <code>Cache</code>。我们可以通过实现Cache接口来自定义二级缓存</li>
</ul>
<h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><p><strong>0. 在MyBatis-Study父工程下创建子模块mybatis-09</strong></p>
<ul>
<li>将mybatis-08的pom.xml文件中的lombok依赖复制到mybatis-09的pom.xml文件中</li>
<li>将mybatis-08的resources文件夹下内容复制到mybatis-09的resources文件夹<ul>
<li>并删除其中com.llunch4w.dao中的xml文件</li>
<li>并对其mybatis-config.xml文件中的mapper路径进行对应修改</li>
</ul>
</li>
<li>将mybatis-08的java文件夹下的包复制到mybatis-09的java文件夹下，并删除pojo包和dao包中的内容</li>
</ul>
<p><strong>1. pojo包下创建User类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String pwd;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>3. dao包下创建UserMapper接口</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="function">User <span class="title">getById</span><span class="params">(@Param(<span class="string">"id"</span>)</span><span class="keyword">int</span> id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>4. resources文件下com/llunch4w/dao目录下创建userMapper.xml文件</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.llunch4w.dao.UserMapper"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getById"</span> <span class="attr">resultType</span>=<span class="string">"User"</span>&gt;</span></span><br><span class="line">        select * from user where id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h3 id="一级缓存"><a href="#一级缓存" class="headerlink" title="一级缓存"></a>一级缓存</h3><p>一级缓存也叫本地缓存：<code>SqlSession</code></p>
<ul>
<li>与数据库同一次会话期间查询到的数据会放在本地缓存中</li>
<li>以后如果需要获取相同的数据，直接从缓存中拿，没必要再去查询数据库</li>
</ul>
<p><strong>1. 测试同一SqlSession下的相同查询的缓存情况</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">firstCacheTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession sqlSession = MyBatisUtil.getSqlSession();</span><br><span class="line">    UserMapper userMapper = sqlSession.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    User user1 = userMapper.getById(<span class="number">1</span>);</span><br><span class="line">    System.out.println(user1);</span><br><span class="line">    User user2 = userMapper.getById(<span class="number">1</span>);</span><br><span class="line">    System.out.println(user2);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">"user1 == user2 ?"</span> + (user1 == user2));</span><br><span class="line"></span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>查询结果<br><img src="/2020/12/14/MyBatis%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/48.png" alt></p>
<blockquote>
<p>结论：同一个SqlSession内的相同查询，在1+次查询时会直接使用缓存中的结果，不会重新查询</p>
</blockquote>
<p><strong>2. 测试更新操作使缓存失效的情况</strong></p>
<blockquote>
<p>同一SqlSession内的相同查询中间插入一个更新操作，缓存是否仍旧有效？</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">User user1 = userMapper.getById(<span class="number">1</span>);</span><br><span class="line">System.out.println(user1);</span><br><span class="line"></span><br><span class="line">userMapper.update(<span class="keyword">new</span> User(<span class="number">2</span>,<span class="string">"aaa"</span>,<span class="string">"bbb"</span>));</span><br><span class="line"></span><br><span class="line">User user2 = userMapper.getById(<span class="number">1</span>);</span><br><span class="line">System.out.println(user2);</span><br></pre></td></tr></table></figure>
<p>查询结果<br><img src="/2020/12/14/MyBatis%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/49.png" alt></p>
<blockquote>
<p>结论：更新（同理还有增加和删除）操作可以使缓存失效</p>
</blockquote>
<p><strong>3. 测试手动清理缓存使缓存失效的情况</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">sqlSession.clearCache();</span><br></pre></td></tr></table></figure>
<p>查询结果<br><img src="/2020/12/14/MyBatis%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/50.png" alt></p>
<blockquote>
<p>结论：手动清理缓存可以使缓存失效</p>
</blockquote>
<h3 id="二级缓存"><a href="#二级缓存" class="headerlink" title="二级缓存"></a>二级缓存</h3><ul>
<li>二级缓存也叫全局缓存，一级缓存作用域太低了，所以诞生了二级缓存</li>
<li>基于namespace级别的缓存，一个名称空间，对应一个二级缓存</li>
<li>工作机制<ul>
<li>一个会话查询一条数据，这个数据就会被放在当前会话的一级缓存中</li>
<li>如果当前会话关闭了，这个会话对应的一级缓存就没了；但我们希望的是：会话关闭了，一级缓存中的数据被保存到二级缓存中</li>
<li>新的会话查询信息，就可以从二级缓存中获取</li>
<li>不同mapper查出的数据会放在自己对应的缓存中</li>
</ul>
</li>
</ul>
<p><strong>1. 在mybatis-config.xml文件中显式的开启</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--显式开启全局缓存--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"cacheEnable"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>2. 在当前mapper.xml中使用二级缓存</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">cache</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<p>也可以自定义参数</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">cache</span></span></span><br><span class="line"><span class="tag">  <span class="attr">eviction</span>=<span class="string">"FIFO"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">flushInterval</span>=<span class="string">"60000"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">size</span>=<span class="string">"512"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">readOnly</span>=<span class="string">"true"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>这个更高级的配置创建了一个 FIFO 缓存，每隔 60 秒刷新，最多可以存储结果对象或列表的 512 个引用，而且返回的对象被认为是只读的，因此对它们进行修改可能会在不同线程中的调用者产生冲突。<br>可用的清除策略有：</p>
<ul>
<li>LRU – 最近最少使用：移除最长时间不被使用的对象。</li>
<li>FIFO – 先进先出：按对象进入缓存的顺序来移除它们。</li>
<li>SOFT – 软引用：基于垃圾回收器状态和软引用规则移除对象。</li>
<li>WEAK – 弱引用：更积极地基于垃圾收集器状态和弱引用规则移除对</li>
</ul>
</blockquote>
<p><strong>3. 测试二级缓存</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">secondCacheTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession sqlSession1 = MyBatisUtil.getSqlSession();</span><br><span class="line">    UserMapper userMapper1 = sqlSession1.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    User user1 = userMapper1.getById(<span class="number">1</span>);</span><br><span class="line">    System.out.println(user1);</span><br><span class="line">    sqlSession1.close();</span><br><span class="line"></span><br><span class="line">    SqlSession sqlSession2 = MyBatisUtil.getSqlSession();</span><br><span class="line">    UserMapper userMapper2 = sqlSession2.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    User user2 = userMapper2.getById(<span class="number">1</span>);</span><br><span class="line">    System.out.println(user2);</span><br><span class="line">    sqlSession2.close();</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">"user1 == user2 ?"</span> + (user1 == user2));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>查询结果<br><img src="/2020/12/14/MyBatis%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/51.png" alt></p>
<blockquote>
<p>结论：二级缓存已经失效，所以在第二个SqlSession中可以访问到第一个SqlSession查询到的数据结果</p>
</blockquote>
<p><strong>小结</strong></p>
<ul>
<li>只要开启的二级缓存，在同一个Mapper下就有效</li>
<li>所有的数据都会先放在一级缓存中</li>
<li>只有当会话提交（或关闭）时，才会提交到二级缓存中</li>
</ul>
<h2 id="MyBatis缓存原理"><a href="#MyBatis缓存原理" class="headerlink" title="MyBatis缓存原理"></a>MyBatis缓存原理</h2><p><img src="/2020/12/14/MyBatis%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/52.png" alt></p>
<h2 id="自定义缓存Ehcache"><a href="#自定义缓存Ehcache" class="headerlink" title="自定义缓存Ehcache"></a>自定义缓存Ehcache</h2><blockquote>
<p>Ehcache是一种广泛使用的Java分布式缓存，主要用于面向缓存</p>
</blockquote>
]]></content>
      <categories>
        <category>学习记录</category>
      </categories>
      <tags>
        <tag>MyBatis</tag>
      </tags>
  </entry>
  <entry>
    <title>VSCode-Python环境配置</title>
    <url>/2021/06/13/VSCode-Python%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote class="blockquote-center">
<p>^ _ ^ </p>

</blockquote>
<a id="more"></a>


]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>VSCode Python</tag>
      </tags>
  </entry>
  <entry>
    <title>String类的继承问题</title>
    <url>/2020/08/19/String%E7%B1%BB%E7%9A%84%E7%BB%A7%E6%89%BF%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote class="blockquote-center">
<p>^ _ ^ </p>

</blockquote>
<a id="more"></a>

<h1 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q &amp; A"></a>Q &amp; A</h1><blockquote>
<p><strong>String类能被继承吗，为什么?</strong></p>
</blockquote>
<p>不能，String类是由final修饰的类，因此不可被继承。<br>String类被设计成由final修饰的类，原因主要有两个，一是设计，而是效率：</p>
<ul>
<li>设计：final类中的所有方法都是final类型，这样将方法锁定，可以防止任何继承类修改它的意义和实现；</li>
<li>效率：final方法使用内嵌机制，可以提升效率。但这样的机制在方法体很大时可能会耗费更多时间反而使效率降低，所以现在使用final方法一般只取决于设计原因。</li>
</ul>
<blockquote>
<p><strong>String类可以被更改吗，为什么？</strong></p>
</blockquote>
<p>不能，String类中用于保存字符串值的成员变量是由final修饰的char型数组。数组被final修饰后，数组本身不可被改变，但其数组元素本身可以被改变，因此，char数组是不能被扩容的。由于这个char数组也被private修饰，且String没有提供修改这个数组成员的方法，因此程序员也不能操纵String的每个字符。<br>String类被设计为不可变类的原因主要有两个，一是效率，二是安全：</p>
<ul>
<li>效率：String类有一个成员变量hashcode，用来判断两个字符串值是否相等。String值不变，hashcode值就不变，缓存hashcode值才有意义；</li>
<li>安全：String类常被作为网络连接，文件操作等参数类型，倘若改变，会出现意想不到的结果。</li>
</ul>
<h1 id="final修饰的作用"><a href="#final修饰的作用" class="headerlink" title="final修饰的作用"></a>final修饰的作用</h1><ul>
<li><strong>修饰基本类型变量</strong>：类型的值不可改变</li>
<li><strong>修饰对象类型变量</strong>：指向对象的引用不可改变指向，对象本身可以改变</li>
<li><strong>修饰方法</strong>：使方法不可被重写</li>
<li><strong>修饰类</strong>：类不可被继承</li>
</ul>
<h1 id="编程测试"><a href="#编程测试" class="headerlink" title="编程测试"></a>编程测试</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">equalTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.printf(<span class="string">"\nequalTest\n"</span>);</span><br><span class="line">    String s1 = <span class="string">"abc"</span>;</span><br><span class="line">    String s2 = <span class="string">"abc"</span>;</span><br><span class="line">    String s3 = <span class="keyword">new</span> String(<span class="string">"abc"</span>);</span><br><span class="line">    System.out.println(<span class="string">"s1 == s2? "</span> + (s1==s2));    \\ <span class="keyword">true</span></span><br><span class="line">    System.out.println(<span class="string">"s1 == s3? "</span> + (s1==s3));    \\ <span class="keyword">false</span></span><br><span class="line">    System.out.println(<span class="string">"s1 equals s2? "</span> + s1.equals(s2));   \\<span class="keyword">true</span></span><br><span class="line">    System.out.println(<span class="string">"s1 equals s3? "</span> + s1.equals(s3));   \\<span class="keyword">true</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">concatEqualTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.printf(<span class="string">"\nconcatEqualTest\n"</span>);</span><br><span class="line">    String s1 = <span class="string">"Hello Word"</span>;</span><br><span class="line">    String s2 = <span class="string">"Hello "</span> + <span class="string">"Word"</span>;</span><br><span class="line">    System.out.println(<span class="string">"s1 == s2? "</span> + (s1==s2));    \\<span class="keyword">true</span></span><br><span class="line">    System.out.println(<span class="string">"s1 equals s2? "</span> + s1.equals(s2));   \\<span class="keyword">true</span></span><br><span class="line">    String hello = <span class="string">"Hello "</span>;</span><br><span class="line">    String s3 = hello + <span class="string">"Word"</span>;</span><br><span class="line">    System.out.println(<span class="string">"s1 == s3? "</span> + (s1==s3));    \\<span class="keyword">false</span></span><br><span class="line">    System.out.println(<span class="string">"s1 equals s3? "</span> + s1.equals(s3));   \\<span class="keyword">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java面试</category>
      </categories>
      <tags>
        <tag>Java基础</tag>
        <tag>String类</tag>
        <tag>final修饰符</tag>
      </tags>
  </entry>
  <entry>
    <title>VimAdventures</title>
    <url>/2021/05/19/VimAdventures/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote class="blockquote-center">
<p>记录玩网页小游戏 vim adventures 的过程 ^ _ ^ </p>

</blockquote>

<a id="more"></a>

<h1 id="Vim-Adventrue-简介"><a href="#Vim-Adventrue-简介" class="headerlink" title="Vim Adventrue 简介"></a>Vim Adventrue 简介</h1><p>Vim Adventrue是一款学习vim操作的小游戏，网址是：<a href="https://vim-adventures.com/" target="_blank" rel="noopener">https://vim-adventures.com/</a>。本篇博客用于记录我的游戏攻略 ^ _ ^</p>
<h1 id="Level-1"><a href="#Level-1" class="headerlink" title="Level 1"></a>Level 1</h1><h2 id="Point1：光标移动"><a href="#Point1：光标移动" class="headerlink" title="Point1：光标移动"></a>Point1：光标移动</h2><table>
<thead>
<tr>
<th>键</th>
<th>方向</th>
</tr>
</thead>
<tbody><tr>
<td>h</td>
<td>左</td>
</tr>
<tr>
<td>j</td>
<td>下</td>
</tr>
<tr>
<td>k</td>
<td>上</td>
</tr>
<tr>
<td>l</td>
<td>右</td>
</tr>
</tbody></table>
<p>用hjkl四个键控制左下上右移动，拿到钥匙，打开宝箱。</p>
<hr>

<h2 id="Point2：光标记忆功能"><a href="#Point2：光标记忆功能" class="headerlink" title="Point2：光标记忆功能"></a>Point2：光标记忆功能</h2><p><img src="/2021/05/19/VimAdventures/1.jpg" alt></p>
<p>看上面这个地图，是不是感觉按常理过不去呢？这时就要引入Vim的<code>光标记忆</code>特性了。</p>
<ul>
<li>假设图上有一个坐标系，水平方向为x轴，垂直方向为y轴。x轴以右为正方向，y轴以下为正方向。</li>
<li>若光标 (x1,y1) 往下移动，而 (x1,y1+1) 是不可走区域（例如图中的河，真实情况的短行），那么光标最终到达的坐标 (x2,y1+1) 中的x2 是 y1+1 行中可走的不超过 x1 且最接近 x1 的点。</li>
<li>往上移动同理。</li>
</ul>
<p><img src="/2021/05/19/VimAdventures/2.jpg" alt></p>
<p>如图所示，2~8都是在记下了1的位置的情况下尽量靠近1去走的。</p>
<h1 id="Level2"><a href="#Level2" class="headerlink" title="Level2"></a>Level2</h1><h2 id="Point1：按单词移动"><a href="#Point1：按单词移动" class="headerlink" title="Point1：按单词移动"></a>Point1：按单词移动</h2><p>单词是由字符、数字、下划线、标点符号（连续的标点符号作为单独一个单词）组成的字符串，按单词移动就是每次移动一个单词。有两种移动方式，分别是：</p>
<ol>
<li>w：从一个单词头跳到下一个单词头；</li>
<li>e：从一个单词尾调到下一个单词尾；</li>
<li>b：从一个单词头跳到上一个单词头；</li>
<li>B：同 b</li>
</ol>
<h1 id="Level3"><a href="#Level3" class="headerlink" title="Level3"></a>Level3</h1><h2 id="Point1：删除字符"><a href="#Point1：删除字符" class="headerlink" title="Point1：删除字符"></a>Point1：删除字符</h2><ol>
<li>x：删除当前光标所在的字符</li>
<li>nx：n是数字，表示删除当前光标所在及以后共n个字符</li>
</ol>
<h1 id="More"><a href="#More" class="headerlink" title="More"></a>More</h1><p>没想到只能玩3关，剩下的游戏想玩就得交$25了。So,Bye~</p>
<p><img src="/2021/05/19/VimAdventures/3.jpg" alt></p>
<h1 id="其他玩-Vim-的网站"><a href="#其他玩-Vim-的网站" class="headerlink" title="其他玩 Vim 的网站"></a>其他玩 Vim 的网站</h1><p><strong>OpenVim</strong> : <a href="https://www.openvim.com/tutorial.html" target="_blank" rel="noopener">https://www.openvim.com/tutorial.html</a>，一个不错的交互式小网页</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>游戏</tag>
      </tags>
  </entry>
  <entry>
    <title>Swing中的那些组件</title>
    <url>/2020/10/25/Swing%E4%B8%AD%E7%9A%84%E9%82%A3%E4%BA%9B%E7%BB%84%E4%BB%B6/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote class="blockquote-center">
<p>^ _ ^ </p>

</blockquote>

<a id="more"></a>

<h1 id="引入swing包包"><a href="#引入swing包包" class="headerlink" title="引入swing包包"></a>引入swing包包</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import javax.swing.*;</span><br></pre></td></tr></table></figure>

<h1 id="顶层容器"><a href="#顶层容器" class="headerlink" title="顶层容器"></a>顶层容器</h1><p>Swing提供了三种顶层容器，分别是：<code>JFrame</code>,<code>JDialog</code>,<code>JApplet</code></p>
<ul>
<li>显示在屏幕上的GUI组件必须处于一个容器层级结构（一棵以顶层容器为根的组件树）中</li>
<li>每个GUI组件只能处于一个容器中一次：如果将一个组件从一个容器中移入到另一个，则移出方中该组件会消失</li>
<li>每个顶层容器都有一个content pane，包含着顶级容器GUI中的可见组件</li>
<li>可以选择性地为顶层容器添加菜单栏，菜单栏并不包含在content pane中</li>
</ul>
<p><img src="/2020/10/25/Swing%E4%B8%AD%E7%9A%84%E9%82%A3%E4%BA%9B%E7%BB%84%E4%BB%B6/1.png" alt="顶层容器、content pane、菜单栏"></p>
<h2 id="Top-Level-Container-和-Containment-Hierarchy"><a href="#Top-Level-Container-和-Containment-Hierarchy" class="headerlink" title="Top-Level Container 和 Containment Hierarchy"></a>Top-Level Container 和 Containment Hierarchy</h2><p>每个Top-Level Container对应着一个Containment Hierarchy，它们是Containment Hierarchy的根，往Top-Level Container中添加的其他组件就是Containment Hierachy的子节点。<br>如果一个应用中包含着多个Top-Level Container，那么它也有多个Containment Hierarchy。</p>
<h2 id="Content-Pane"><a href="#Content-Pane" class="headerlink" title="Content Pane"></a>Content Pane</h2><ol>
<li><p>每个Top-Level Container包含一个默认的Content Pane</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; frame is a JFrame</span><br><span class="line">Container contentPanel &#x3D; frame.getContentPane();</span><br></pre></td></tr></table></figure>
</li>
<li><p>默认的Content Pane是一个继承自JComponent的中间件，使用BorderLayout为默认布局方式<br><img src="/2020/10/25/Swing%E4%B8%AD%E7%9A%84%E9%82%A3%E4%BA%9B%E7%BB%84%E4%BB%B6/2.png" alt="JComponent和Container之间的关系"><br>但是，如1所示，JFrame的getContentPane方法返回的是Container类型，这就导致Content Pane无法使用一些JComponent特有的方法。<br>解决这个问题的方法有：</p>
</li>
</ol>
<ul>
<li>将使用getContentPane得到的Container强制类型转换成JComponent</li>
<li>自定义JPanel，然后使用setContentPane设置为Top-Level的Content Pane<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; Content Pane强制转换成panel</span><br><span class="line">JPanel panel &#x3D; (JPanel)frame.getContentPane();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 自定义JPanel，设置为JFrame的Content Pane</span><br><span class="line">&#x2F;&#x2F; JPanel默认是FlowLayout布局方式的</span><br><span class="line">JPanel customizePanel &#x3D; new JPanel(new BorderLayout());</span><br><span class="line">frame.setContentPane(customizePanel);</span><br></pre></td></tr></table></figure>
</li>
</ul>
<ol start="3">
<li>frame的add,remove,setLayout方法真正的作用对象是它的Content Pane</li>
</ol>
<h2 id="Root-Pane"><a href="#Root-Pane" class="headerlink" title="Root Pane"></a>Root Pane</h2><p>每个Top-Level都依赖于一个隐藏的中间层–RootPane<br><img src="/2020/10/25/Swing%E4%B8%AD%E7%9A%84%E9%82%A3%E4%BA%9B%E7%BB%84%E4%BB%B6/3.png" alt="JFrame中的RootPane"><br><img src="/2020/10/25/Swing%E4%B8%AD%E7%9A%84%E9%82%A3%E4%BA%9B%E7%BB%84%E4%BB%B6/4.png" alt="RootPane中包含的面板"></p>
<ul>
<li>LayeredPane：包含Menu Bar和Content Pane，用于布置组件</li>
<li>GlassPane：用于捕获输入事件和组件上的绘图</li>
</ul>
<h1 id="JComponent类"><a href="#JComponent类" class="headerlink" title="JComponent类"></a>JComponent类</h1><blockquote>
<p>所有的Swing组件，除了JFrame和JDialog，只要是以’J’开头，均派生自JComponent</p>
</blockquote>
<p><img src="/2020/10/25/Swing%E4%B8%AD%E7%9A%84%E9%82%A3%E4%BA%9B%E7%BB%84%E4%BB%B6/5.png" alt="JComponent和Container之间的关系"></p>
<ul>
<li>Component：提供布局、绘图、事件捕获等功能</li>
<li>Container：提供增加组件到container和放置它们的功能</li>
</ul>
<h1 id="Text-Component"><a href="#Text-Component" class="headerlink" title="Text Component"></a>Text Component</h1><p><img src="/2020/10/25/Swing%E4%B8%AD%E7%9A%84%E9%82%A3%E4%BA%9B%E7%BB%84%E4%BB%B6/6.png" alt="文本相关组件"></p>
<p>JTextComponent类是Swing Text组件的基础，它为它的子类提供了如下特征：</p>
<ul>
<li>model：<code>document</code>，用于管理组件的内容</li>
<li>view：控制组件如何显示在屏幕上</li>
<li>controller：<code>editor kit</code>，控制读写操作和基于事件的编辑</li>
<li>支持无限次撤销和重做</li>
<li>支持文本插入的监听器和导航过滤器</li>
</ul>
<p><img src="/2020/10/25/Swing%E4%B8%AD%E7%9A%84%E9%82%A3%E4%BA%9B%E7%BB%84%E4%BB%B6/7.png" alt="document"></p>
<p>对于JTextComponent的子类，Text Controls（JTextField,JFormattedField,JPasswordField）和Text Area包含的文档模型都是PlainDocument，字体有着相同的样式。而Styled Text Area（JEditorPane,JTextPane）所包含的模型是DefaultStyledDocuement，可以像word文档一样设置丰富的文本样式，包括设置字体颜色大小，添加图片，添加组件等等。</p>
<h1 id="装饰"><a href="#装饰" class="headerlink" title="装饰"></a>装饰</h1><h2 id="Border"><a href="#Border" class="headerlink" title="Border"></a>Border</h2><p>Border的作用：</p>
<ul>
<li>划线</li>
<li>给组件边缘添加边框</li>
<li>提供标题和边距</li>
</ul>
<p>理论上可以给所有的JComponent类型组件添加Border，但是实际上一般添加边框的组件都是<code>JPanel</code>和<code>JLabel</code>，对于其他JComponent类型添加边框可能效果不是太好。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Swing</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue入门</title>
    <url>/2021/06/07/Vue%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote class="blockquote-center">
<p>^ _ ^ </p>

</blockquote>
<a id="more"></a>

<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="Vue-Devtools"><a href="#Vue-Devtools" class="headerlink" title="Vue Devtools"></a>Vue Devtools</h2><p>在使用 Vue 时，推荐在你的浏览器上安装 <a href="https://github.com/vuejs/vue-devtools#vue-devtools" target="_blank" rel="noopener">Vue Devtools</a>，，它允许你在一个更友好的界面中审查和调试 Vue 应用。</p>
<ul>
<li><a href="https://chrome.google.com/webstore/detail/vuejs-devtools/ljjemllljcmogpfapbkkighbhhppjdbg" target="_blank" rel="noopener">获取 Chrome 扩展程序</a></li>
<li><a href="https://addons.mozilla.org/en-US/firefox/addon/vue-js-devtools/" target="_blank" rel="noopener">获取 Firefox 附加组件</a></li>
<li><a href="https://github.com/vuejs/vue-devtools/blob/legacy/packages/shell-electron/README.md" target="_blank" rel="noopener">获取独立的 Electron 应用程序</a></li>
</ul>
<h2 id="4种添加方式"><a href="#4种添加方式" class="headerlink" title="4种添加方式"></a>4种添加方式</h2><p>将 Vue.js 添加到项目中有四种主要方式：</p>
<ol>
<li>在页面上以 CDN 包的形式导入。</li>
<li>下载 JavaScript 文件并自行托管</li>
<li>使用 npm 安装它。</li>
<li>使用官方的 CLI 来构建一个项目，它为现代前端工作流程提供了功能齐备的构建设置 (例如，热重载、保存时的提示等等)。</li>
</ol>
<h3 id="CDN"><a href="#CDN" class="headerlink" title="CDN"></a>CDN</h3><p>对于制作原型或学习，你可以这样使用最新版本：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://unpkg.com/vue@next"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>对于生产环境，我们推荐链接到一个明确的版本号和构建文件，以避免新版本造成的不可预期的破坏。</p>
<h3 id="下载并自托管"><a href="#下载并自托管" class="headerlink" title="下载并自托管"></a>下载并自托管</h3><p>如果你想避免使用构建工具，但又无法在生产环境使用 CDN，那么你可以下载相关 <code>.js</code> 文件并自行托管在你的服务器上。然后你可以通过 <code>&lt;script&gt;</code> 标签引入，与使用 CDN 的方法类似。</p>
<p>这些文件可以在 <a href="https://unpkg.com/browse/vue@next/dist/" target="_blank" rel="noopener">unpkg</a> 或者 <a href="https://cdn.jsdelivr.net/npm/vue@next/dist/" target="_blank" rel="noopener">jsDelivr</a> 这些 CDN 上浏览和下载。</p>
<h3 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h3><p>在用 Vue 构建大型应用时推荐使用 npm 安装。npm 能很好地和诸如 webpack 或 Rollup 模块打包器配合使用。</p>
<blockquote>
<p>国内用户推荐使用淘宝镜像 cnpm</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 最新稳定版</span></span><br><span class="line">npm install vue@next</span><br></pre></td></tr></table></figure>

<h3 id="命令行工具-CLI"><a href="#命令行工具-CLI" class="headerlink" title="命令行工具 (CLI)"></a>命令行工具 (CLI)</h3><p>Vue 提供了一个官方的 CLI，为单页面应用 (SPA) 快速搭建繁杂的脚手架。它为现代前端工作流提供了功能齐备的构建设置。只需要几分钟的时间就可以运行起来并带有热重载、保存时 lint 校验，以及生产环境可用的构建版本。</p>
<blockquote>
<p>CLI 工具假定用户对 Node.js 和相关构建工具有一定程度的了解。如果你是新手，我们强烈建议先在不用构建工具的情况下通读指南，在熟悉 Vue 本身之后再使用 CLI。</p>
</blockquote>
<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><h2 id="Vue-js-是什么"><a href="#Vue-js-是什么" class="headerlink" title="Vue.js 是什么"></a>Vue.js 是什么</h2><p>Vue是一套用于构建用户界面的<strong>渐进式框架</strong>。与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。</p>
<h2 id="MVVM架构"><a href="#MVVM架构" class="headerlink" title="MVVM架构"></a>MVVM架构</h2><p>MVVM 是 Model-View-ViewModel 的简写。它本质上就是MVC 的改进版。MVVM 就是将其中的 View 的状态和行为抽象化，让我们将视图 UI 和业务逻辑分开。</p>
<p><img src="/2021/06/07/Vue%E5%85%A5%E9%97%A8/1.png" alt></p>
<p>View 和 ViewModel 中存在一个双向绑定关系：</p>
<ul>
<li>一方面，View 能向 ViewModel 发送命令，ViewModel 将请求分发给 Model 进行业务处理；</li>
<li>一方面，ViewModel 监听 Model 中的数据，当发生变换时向 View 发送消息进行页面更新。</li>
</ul>
<h1 id="第一个Vue程序"><a href="#第一个Vue程序" class="headerlink" title="第一个Vue程序"></a>第一个Vue程序</h1><blockquote>
<p>使用的是 <code>Vue3</code> 框架</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">HTML</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//W3C//DTD HTML 4.01 Transitional//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://www.w3.org/TR/html4/loose.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    &#123;&#123;message&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue@3.0.10/dist/vue.global.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">const</span> HelloVueApp = &#123;</span></span><br><span class="line">        data() &#123;</span><br><span class="line"><span class="actionscript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">                message: <span class="string">'Hello Vue!!'</span></span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="actionscript">    Vue.createApp(HelloVueApp).mount(<span class="string">'#app'</span>)</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="Vue基本用法"><a href="#Vue基本用法" class="headerlink" title="Vue基本用法"></a>Vue基本用法</h1><h2 id="声明式渲染"><a href="#声明式渲染" class="headerlink" title="声明式渲染"></a>声明式渲染</h2><p>Vue.js 的核心是一个允许采用简洁的模板语法来声明式地将数据渲染进 DOM 的系统：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"counter"</span>&gt;</span></span><br><span class="line">  Counter: &#123;&#123; counter &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>通过如下代码将数据和 DOM 建立关联，所有东西都是响应式的。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Counter = &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      counter: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted() &#123;</span><br><span class="line">    setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.counter++</span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Vue.createApp(Counter).mount(<span class="string">'#counter'</span>)</span><br></pre></td></tr></table></figure>

<h2 id="v-bind"><a href="#v-bind" class="headerlink" title="v-bind"></a>v-bind</h2><p>除了文本插值，我们还可以像这样绑定元素的 attribute：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"bind-attribute"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-bind:title</span>=<span class="string">"message"</span>&gt;</span></span><br><span class="line">    鼠标悬停几秒钟查看此处动态绑定的提示信息！</span><br><span class="line">  <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> AttributeBinding = &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      message: <span class="string">'You loaded this page on '</span> + <span class="keyword">new</span> <span class="built_in">Date</span>().toLocaleString()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Vue.createApp(AttributeBinding).mount(<span class="string">'#bind-attribute'</span>)</span><br></pre></td></tr></table></figure>

<p><code>v-bind:attribute</code> 被称为指令。指令带有前缀 <code>v-</code>，以表示它们是 Vue 提供的特殊 attribute。它们会在渲染的 DOM 上应用特殊的响应式行为。在这里，该指令的意思是：“将这个元素节点的 <code>title</code> attribute 和当前活跃实例的 <code>message</code> property 保持一致”。</p>
<h3 id="动态参数"><a href="#动态参数" class="headerlink" title="动态参数"></a>动态参数</h3><p>也可以在指令参数中使用 JavaScript 表达式，方法是用方括号括起来：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">注意，参数表达式的写法存在一些约束，如之后的“对动态参数表达式的约束”章节所述。</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:</span>[<span class="attr">attributeName</span>]=<span class="string">"url"</span>&gt;</span> ... <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="v-bind-缩写"><a href="#v-bind-缩写" class="headerlink" title="v-bind 缩写"></a><code>v-bind</code> 缩写</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 完整语法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">"url"</span>&gt;</span> ... <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 缩写 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">:href</span>=<span class="string">"url"</span>&gt;</span> ... <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 动态参数的缩写 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">:</span>[<span class="attr">key</span>]=<span class="string">"url"</span>&gt;</span> ... <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="v-on"><a href="#v-on" class="headerlink" title="v-on"></a>v-on</h2><p>为了让用户和应用进行交互，我们可以用 <code>v-on</code> 指令添加一个事件监听器，通过它调用在实例中定义的方法：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"event-handling"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"reverseMessage"</span>&gt;</span>反转 Message<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> EventHandling = &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      message: <span class="string">'Hello Vue.js!'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    reverseMessage() &#123;</span><br><span class="line">      <span class="keyword">this</span>.message = <span class="keyword">this</span>.message</span><br><span class="line">        .split(<span class="string">''</span>)</span><br><span class="line">        .reverse()</span><br><span class="line">        .join(<span class="string">''</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Vue.createApp(EventHandling).mount(<span class="string">'#event-handling'</span>)</span><br></pre></td></tr></table></figure>

<h3 id="v-on-缩写"><a href="#v-on-缩写" class="headerlink" title="v-on 缩写"></a><code>v-on</code> 缩写</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 完整语法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click</span>=<span class="string">"doSomething"</span>&gt;</span> ... <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 缩写 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> @<span class="attr">click</span>=<span class="string">"doSomething"</span>&gt;</span> ... <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 动态参数的缩写 (2.6.0+) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> @[<span class="attr">event</span>]=<span class="string">"doSomething"</span>&gt;</span> ... <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h2><p>Vue 还提供了 <code>v-model</code> 指令，它能轻松实现表单输入和应用状态之间的双向绑定。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"two-way-binding"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">"message"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> TwoWayBinding = &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      message: <span class="string">'Hello Vue!'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Vue.createApp(TwoWayBinding).mount(<span class="string">'#two-way-binding'</span>)</span><br></pre></td></tr></table></figure>

<h2 id="v-if-amp-v-for"><a href="#v-if-amp-v-for" class="headerlink" title="v-if &amp; v-for"></a>v-if &amp; v-for</h2><p>通过 <code>v-if</code> 我们不仅可以把数据绑定到 DOM 文本或 attribute，还可以绑定到 DOM 的结构。此外，Vue 也提供一个强大的过渡效果系统，可以在 Vue 插入/更新/移除元素时自动应用过渡效果。</p>
<p><code>v-for</code> 指令可以绑定数组的数据来渲染一个项目列表</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"list-rendering"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"todo in todos"</span>&gt;</span></span><br><span class="line">            &#123;&#123; todo.text &#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-if</span>=<span class="string">"seen === 'A'"</span>&gt;</span>A<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-else-if</span>=<span class="string">"seen === 'B'"</span>&gt;</span>B<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-else</span>&gt;</span>C<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> ListRendering = &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      todos: [</span><br><span class="line">        &#123; <span class="attr">text</span>: <span class="string">'Learn JavaScript'</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">text</span>: <span class="string">'Learn Vue'</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">text</span>: <span class="string">'Build something awesome'</span> &#125;</span><br><span class="line">      ],</span><br><span class="line">      seen: <span class="string">"B"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Vue.createApp(ListRendering).mount(<span class="string">'#list-rendering'</span>)</span><br></pre></td></tr></table></figure>


<h1 id="组件化应用构建"><a href="#组件化应用构建" class="headerlink" title="组件化应用构建"></a>组件化应用构建</h1><p>组件系统是 Vue 的另一个重要概念，因为它是一种抽象，允许我们使用小型、独立和通常可复用的组件构建大型应用。</p>
<p>在 Vue 中，组件本质上是一个具有预定义选项的实例。在 Vue 中注册组件很简单：如对 <code>App</code> 对象所做的那样创建一个组件对象，并将其定义在父级组件的 <code>components</code> 选项中：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建 Vue 应用</span></span><br><span class="line"><span class="keyword">const</span> app = Vue.createApp(...)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义名为 todo-item 的新组件</span></span><br><span class="line">app.component(<span class="string">'todo-item'</span>, &#123;</span><br><span class="line">  template: <span class="string">`&lt;li&gt;This is a todo&lt;/li&gt;`</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 挂载 Vue 应用</span></span><br><span class="line">app.mount(...)</span><br></pre></td></tr></table></figure>

<p>现在，你可以将其放到到另一个组件的模板中：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 创建一个 todo-item 组件实例 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">todo-item</span>&gt;</span><span class="tag">&lt;/<span class="name">todo-item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>但是这样会为每个待办项渲染同样的文本，这看起来并不炫酷。我们应该能将数据从父组件传入子组件才对。让我们来修改一下组件的定义，使之能够接受一个 <code>prop</code>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.component(<span class="string">'todo-item'</span>, &#123;</span><br><span class="line">  props: [<span class="string">'todo'</span>],</span><br><span class="line">  template: <span class="string">`&lt;li&gt;&#123;&#123; todo.text &#125;&#125;&lt;/li&gt;`</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>现在，我们可以使用 <code>v-bind</code> 指令将待办项传到循环输出的每个组件中：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"todo-list-app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">      现在我们为每个 todo-item 提供 todo 对象</span></span><br><span class="line"><span class="comment">      todo 对象是变量，即其内容可以是动态的。</span></span><br><span class="line"><span class="comment">      我们也需要为每个组件提供一个“key”，稍后再</span></span><br><span class="line"><span class="comment">      作详细解释。</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">todo-item</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-for</span>=<span class="string">"item in groceryList"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-bind:todo</span>=<span class="string">"item"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-bind:key</span>=<span class="string">"item.id"</span></span></span><br><span class="line"><span class="tag">    &gt;</span><span class="tag">&lt;/<span class="name">todo-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> TodoList = &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      groceryList: [</span><br><span class="line">        &#123; <span class="attr">id</span>: <span class="number">0</span>, <span class="attr">text</span>: <span class="string">'Vegetables'</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">text</span>: <span class="string">'Cheese'</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">text</span>: <span class="string">'Whatever else humans are supposed to eat'</span> &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = Vue.createApp(TodoList)</span><br><span class="line"></span><br><span class="line">app.component(<span class="string">'todo-item'</span>, &#123;</span><br><span class="line">  props: [<span class="string">'todo'</span>],</span><br><span class="line">  template: <span class="string">`&lt;li&gt;&#123;&#123; todo.text &#125;&#125;&lt;/li&gt;`</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.mount(<span class="string">'#todo-list-app'</span>)</span><br></pre></td></tr></table></figure>

<h2 id="根组件"><a href="#根组件" class="headerlink" title="根组件"></a>根组件</h2><p>传递给 <code>createApp</code> 的选项用于配置根组件。当我们挂载应用时，该组件被用作渲染的起点。</p>
<p>一个应用需要被挂载到一个 DOM 元素中。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> RootComponent = &#123; </span><br><span class="line">  <span class="comment">/* 选项 */</span> </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> app = Vue.createApp(RootComponent)</span><br><span class="line"><span class="keyword">const</span> vm = app.mount(<span class="string">'#app'</span>)</span><br></pre></td></tr></table></figure>

<p>与大多数应用方法不同的是，<code>mount</code> 不返回应用本身。相反，它返回的是根组件实例。</p>
<p>每个组件将有自己的组件实例 <code>vm</code>。对于一些组件，如 TodoItem，在任何时候都可能有多个实例渲染。这个应用中的所有组件实例将共享同一个应用实例。</p>
<h2 id="生命周期钩子"><a href="#生命周期钩子" class="headerlink" title="生命周期钩子"></a>生命周期钩子</h2><p>每个组件在被创建时都要经过一系列的初始化过程——例如，需要设置数据监听、编译模板、将实例挂载到 DOM 并在数据变化时更新 DOM 等。同时在这个过程中也会运行一些叫做<strong>生命周期钩子</strong>的函数，这给了用户在不同阶段添加自己的代码的机会。</p>
<p>比如 <code>created</code> 钩子可以用来在一个实例被创建之后执行代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Vue.createApp(&#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">count</span>: <span class="number">1</span>&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  created() &#123;</span><br><span class="line">    <span class="comment">// `this` 指向 vm 实例</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'count is: '</span> + <span class="keyword">this</span>.count) <span class="comment">// =&gt; "count is: 1"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>也有一些其它的钩子，在实例生命周期的不同阶段被调用，如 <code>mounted</code>、<code>updated</code> 和 <code>unmounted</code>。生命周期钩子的 <code>this</code> 上下文指向调用它的当前活动实例。</p>
<blockquote>
<p>不要在选项 property 或回调上使用箭头函数，因为箭头函数并没有 this</p>
</blockquote>
<p><img src="/2021/06/07/Vue%E5%85%A5%E9%97%A8/2.svg" alt></p>
<h1 id="Data-Property-和方法"><a href="#Data-Property-和方法" class="headerlink" title="Data Property 和方法"></a>Data Property 和方法</h1><h2 id="data"><a href="#data" class="headerlink" title="data"></a>data</h2><p>组件的 <code>data</code> 选项是一个函数。Vue 在创建新组件实例的过程中调用此函数。它应该返回一个对象，然后 Vue 会通过响应性系统将其包裹起来，并以 $data 的形式存储在组件实例中。为方便起见，该对象的任何顶级 property 也直接通过组件实例暴露出来：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> app = Vue.createApp(&#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">count</span>: <span class="number">4</span> &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> vm = app.mount(<span class="string">'#app'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(vm.$data.count) <span class="comment">// =&gt; 4</span></span><br><span class="line"><span class="built_in">console</span>.log(vm.count)       <span class="comment">// =&gt; 4</span></span><br></pre></td></tr></table></figure>

<p>这些实例 property 仅在实例首次创建时被添加，所以你需要确保它们都在 <code>data</code> 函数返回的对象中。必要时，要对尚未提供所需值的 property 使用 <code>null</code>、<code>undefined</code> 或其他占位的值。</p>
<p>直接将不包含在 data 中的新 property 添加到组件实例是可行的。但由于该 property 不在背后的响应式 <code>$data</code> 对象内，所以 Vue 的响应性系统不会自动跟踪它。</p>
<p>Vue 使用 <code>$</code> 前缀通过组件实例暴露自己的内置 API。它还为内部 property 保留 <code>_</code> 前缀。你应该避免使用这两个字符开头的的顶级 data property 名称。</p>
<h2 id="methods"><a href="#methods" class="headerlink" title="methods"></a>methods</h2><p>我们用 <code>methods</code> 选项向组件实例添加方法，它应该是一个包含所需方法的对象：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> app = Vue.createApp(&#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">count</span>: <span class="number">4</span> &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    increment() &#123;</span><br><span class="line">      <span class="comment">// `this` 指向该组件实例</span></span><br><span class="line">      <span class="keyword">this</span>.count++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> vm = app.mount(<span class="string">'#app'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(vm.count) <span class="comment">// =&gt; 4</span></span><br><span class="line"></span><br><span class="line">vm.increment()</span><br><span class="line"><span class="built_in">console</span>.log(vm.count) <span class="comment">// =&gt; 5</span></span><br></pre></td></tr></table></figure>

<p>Vue 自动为 <code>methods</code> 绑定 <code>this</code>，以便于它始终指向组件实例。这将确保方法在用作事件监听或回调时保持正确的 <code>this</code> 指向。在定义 <code>methods</code> 时应避免使用箭头函数，因为这会阻止 Vue 绑定恰当的 <code>this</code> 指向。</p>
<h1 id="计算属性和侦听器"><a href="#计算属性和侦听器" class="headerlink" title="计算属性和侦听器"></a>计算属性和侦听器</h1><h2 id="computed"><a href="#computed" class="headerlink" title="computed"></a>computed</h2><p>模板内的表达式非常便利，但是设计它们的初衷是用于简单运算的。在模板中放入太多的逻辑会让模板过重且难以维护。对于任何包含响应式数据的复杂逻辑，你都应该使用<strong>计算属性</strong>。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"computed-basics"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Has published books:<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; publishedBooksMessage &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Vue.createApp(&#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      author: &#123;</span><br><span class="line">        name: <span class="string">'John Doe'</span>,</span><br><span class="line">        books: [</span><br><span class="line">          <span class="string">'Vue 2 - Advanced Guide'</span>,</span><br><span class="line">          <span class="string">'Vue 3 - Basic Guide'</span>,</span><br><span class="line">          <span class="string">'Vue 4 - The Mystery'</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    <span class="comment">// 计算属性的 getter</span></span><br><span class="line">    publishedBooksMessage() &#123;</span><br><span class="line">      <span class="comment">// `this` 指向 vm 实例</span></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.author.books.length &gt; <span class="number">0</span> ? <span class="string">'Yes'</span> : <span class="string">'No'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;).mount(<span class="string">'#computed-basics'</span>)</span><br></pre></td></tr></table></figure>

<h3 id="计算属性缓存-vs-方法"><a href="#计算属性缓存-vs-方法" class="headerlink" title="计算属性缓存 vs 方法"></a>计算属性缓存 vs 方法</h3><p>我们可以通过在表达式中调用方法来达到同样的效果：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; calculateBooksMessage() &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在组件中</span></span><br><span class="line">methods: &#123;</span><br><span class="line">  calculateBooksMessage() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.author.books.length &gt; <span class="number">0</span> ? <span class="string">'Yes'</span> : <span class="string">'No'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们可以将同一函数定义为一个方法而不是一个计算属性。两种方式的最终结果确实是完全相同的。然而，不同的是<strong>计算属性是基于它们的反应依赖关系缓存</strong>的。计算属性只在相关响应式依赖发生改变时它们才会重新求值。这就意味着只要 <code>author.books</code> 还没有发生改变，多次访问 <code>publishedBookMessage</code> 计算属性会立即返回之前的计算结果，而不必再次执行函数。</p>
<p>这也同样意味着下面的计算属性将不再更新，因为 Date.now () 不是响应式依赖：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">  now() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Date</span>.now()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>相比之下，每当触发重新渲染时，调用方法将总会再次执行函数。</p>
<p>我们为什么需要缓存？假设我们有一个性能开销比较大的计算属性 <code>list</code>，它需要遍历一个巨大的数组并做大量的计算。然后我们可能有其他的计算属性依赖于 <code>list。如果没有缓存，我们将不可避免的多次执行</code> <code>list</code> 的 <code>getter</code>！如果你不希望有缓存，请用 <code>method</code> 来替代。</p>
<h3 id="计算属性的-Setter"><a href="#计算属性的-Setter" class="headerlink" title="计算属性的 Setter"></a>计算属性的 Setter</h3><p>计算属性默认只有 getter，不过在需要时你也可以提供一个 setter：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">  fullName: &#123;</span><br><span class="line">    <span class="comment">// getter</span></span><br><span class="line">    <span class="keyword">get</span>() &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.firstName + <span class="string">' '</span> + <span class="keyword">this</span>.lastName</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// setter</span></span><br><span class="line">    <span class="keyword">set</span>(newValue) &#123;</span><br><span class="line">      <span class="keyword">const</span> names = newValue.split(<span class="string">' '</span>)</span><br><span class="line">      <span class="keyword">this</span>.firstName = names[<span class="number">0</span>]</span><br><span class="line">      <span class="keyword">this</span>.lastName = names[names.length - <span class="number">1</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>现在再运行 <code>vm.fullName = &#39;John Doe&#39;</code> 时，<code>setter</code> 会被调用，<code>vm.firstName</code> 和 <code>vm.lastName</code> 也会相应地被更新。</p>
<h2 id="watch"><a href="#watch" class="headerlink" title="watch"></a>watch</h2><p>虽然计算属性在大多数情况下更合适，但有时也需要一个自定义的侦听器。这就是为什么 Vue 通过 <code>watch</code> 选项提供了一个更通用的方法，来响应数据的变化。当需要在数据变化时执行异步或开销较大的操作时，这个方式是最有用的。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"watch-example"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    Ask a yes/no question:</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">"question"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; answer &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!-- 因为 AJAX 库和通用工具的生态已经相当丰富，Vue 核心代码没有重复 --&gt;</span><br><span class="line">&lt;!-- 提供这些功能以保持精简。这也可以让你自由选择自己更熟悉的工具。 --&gt;</span><br><span class="line">&lt;script src=<span class="string">"https://cdn.jsdelivr.net/npm/axios@0.12.0/dist/axios.min.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">const</span> watchExampleVM = Vue.createApp(&#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        question: <span class="string">''</span>,</span><br><span class="line">        answer: <span class="string">'Questions usually contain a question mark. ;-)'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    watch: &#123;</span><br><span class="line">      <span class="comment">// whenever question changes, this function will run</span></span><br><span class="line">      question(newQuestion, oldQuestion) &#123;</span><br><span class="line">        <span class="keyword">if</span> (newQuestion.indexOf(<span class="string">'?'</span>) &gt; <span class="number">-1</span>) &#123;</span><br><span class="line">          <span class="keyword">this</span>.getAnswer()</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      getAnswer() &#123;</span><br><span class="line">        <span class="keyword">this</span>.answer = <span class="string">'Thinking...'</span></span><br><span class="line">        axios</span><br><span class="line">          .get(<span class="string">'https://yesno.wtf/api'</span>)</span><br><span class="line">          .then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.answer = response.data.answer</span><br><span class="line">          &#125;)</span><br><span class="line">          .catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.answer = <span class="string">'Error! Could not reach the API. '</span> + error</span><br><span class="line">          &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;).mount(<span class="string">'#watch-example'</span>)</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="计算属性-vs-侦听器"><a href="#计算属性-vs-侦听器" class="headerlink" title="计算属性 vs 侦听器"></a>计算属性 vs 侦听器</h3><p>Vue 提供了一种更通用的方式来观察和响应当前活动的实例上的数据变动：侦听属性。当你有一些数据需要随着其它数据变动而变动时，你很容易滥用 <code>watch</code> 。 然而，通常更好的做法是使用计算属性而不是命令式的 <code>watch</code> 回调。细想一下这个例子：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"demo"</span>&gt;</span>&#123;&#123; fullName &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> vm = Vue.createApp(&#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      firstName: <span class="string">'Foo'</span>,</span><br><span class="line">      lastName: <span class="string">'Bar'</span>,</span><br><span class="line">      fullName: <span class="string">'Foo Bar'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  watch: &#123;</span><br><span class="line">    firstName(val) &#123;</span><br><span class="line">      <span class="keyword">this</span>.fullName = val + <span class="string">' '</span> + <span class="keyword">this</span>.lastName</span><br><span class="line">    &#125;,</span><br><span class="line">    lastName(val) &#123;</span><br><span class="line">      <span class="keyword">this</span>.fullName = <span class="keyword">this</span>.firstName + <span class="string">' '</span> + val</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;).mount(<span class="string">'#demo'</span>)</span><br></pre></td></tr></table></figure>

<p>上面代码是命令式且重复的。将它与计算属性的版本进行比较：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> vm = Vue.createApp(&#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      firstName: <span class="string">'Foo'</span>,</span><br><span class="line">      lastName: <span class="string">'Bar'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    fullName() &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.firstName + <span class="string">' '</span> + <span class="keyword">this</span>.lastName</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;).mount(<span class="string">'#demo'</span>)</span><br></pre></td></tr></table></figure>

<h1 id="Class-与-Style-绑定"><a href="#Class-与-Style-绑定" class="headerlink" title="Class 与 Style 绑定"></a>Class 与 Style 绑定</h1><p>操作元素的 class 列表和内联样式是数据绑定的一个常见需求。因为它们都是 attribute，所以我们可以用 <code>v-bind</code> 处理它们：只需要通过表达式计算出字符串结果即可。不过，字符串拼接麻烦且易错。因此，在将 <code>v-bind</code> 用于 <code>class</code> 和 <code>style</code> 时，Vue.js 做了专门的增强。表达式结果的类型除了字符串之外，还可以是对象或数组。</p>
<h2 id="绑定-HTML-Class"><a href="#绑定-HTML-Class" class="headerlink" title="绑定 HTML Class"></a>绑定 HTML Class</h2><h3 id="对象语法"><a href="#对象语法" class="headerlink" title="对象语法"></a>对象语法</h3><p>我们可以传给 <code>:class</code> (<code>v-bind:class</code> 的简写) 一个对象，以动态地切换 class：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">"&#123; active: isActive &#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>上面的语法表示 <code>active</code> 这个 class 存在与否将取决于数据 property <code>isActive</code> 的值。</p>
<p>你可以在对象中传入更多字段来动态切换多个 class。此外，<code>:class</code> 指令也可以与普通的 <code>class</code> attribute 共存。当有如下模板：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag">  <span class="attr">class</span>=<span class="string">"static"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:class</span>=<span class="string">"&#123; active: isActive, 'text-danger': hasError &#125;"</span></span></span><br><span class="line"><span class="tag">&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>和如下 data：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">data() &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    isActive: <span class="literal">true</span>,</span><br><span class="line">    hasError: <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>渲染的结果为：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"static active"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>当 <code>isActive</code> 或者 <code>hasError</code> 变化时，class 列表将相应地更新。</p>
<p>绑定的数据对象不必内联定义在模板里：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">"classObject"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">data() &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    classObject: &#123;</span><br><span class="line">      active: <span class="literal">true</span>,</span><br><span class="line">      <span class="string">'text-danger'</span>: <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>渲染的结果和上面一样。我们也可以在这里绑定一个返回对象的计算属性。这是一个常用且强大的模式：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">"classObject"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">data() &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    isActive: <span class="literal">true</span>,</span><br><span class="line">    error: <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line">computed: &#123;</span><br><span class="line">  classObject() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      active: <span class="keyword">this</span>.isActive &amp;&amp; !<span class="keyword">this</span>.error,</span><br><span class="line">      <span class="string">'text-danger'</span>: <span class="keyword">this</span>.error &amp;&amp; <span class="keyword">this</span>.error.type === <span class="string">'fatal'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="数组语法"><a href="#数组语法" class="headerlink" title="数组语法"></a>数组语法</h3><p>我们可以把一个数组传给 <code>:class</code>，以应用一个 class 列表：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">"[activeClass, errorClass]"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">data() &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    activeClass: <span class="string">'active'</span>,</span><br><span class="line">    errorClass: <span class="string">'text-danger'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>渲染的结果为：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"active text-danger"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>如果你想根据条件切换列表中的 class，可以使用三元表达式：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">"[isActive ? activeClass : '', errorClass]"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>不过，当有多个条件 class 时这样写有些繁琐。所以在数组语法中也可以使用对象语法：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">"[&#123; active: isActive &#125;, errorClass]"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="在组件上使用"><a href="#在组件上使用" class="headerlink" title="在组件上使用"></a>在组件上使用</h3><p>当你在带有单个根元素的自定义组件上使用 <code>class</code> attribute 时，这些 <code>class</code> 将被添加到该元素中。此元素上的现有 class 将不会被覆盖。</p>
<p>如果你的组件有多个根元素，你需要定义哪些部分将接收这个类。可以使用 $attrs 组件属性执行此操作：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">my-component</span> <span class="attr">class</span>=<span class="string">"baz"</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> app = Vue.createApp(&#123;&#125;)</span><br><span class="line"></span><br><span class="line">app.component(<span class="string">'my-component'</span>, &#123;</span><br><span class="line">  template: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;p :class="$attrs.class"&gt;Hi!&lt;/p&gt;</span></span><br><span class="line"><span class="string">    &lt;span&gt;This is a child component&lt;/span&gt;</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="绑定内联样式"><a href="#绑定内联样式" class="headerlink" title="绑定内联样式"></a>绑定内联样式</h2><h3 id="对象语法-1"><a href="#对象语法-1" class="headerlink" title="对象语法"></a>对象语法</h3><p><code>:style</code> 的对象语法十分直观——看着非常像 CSS，但其实是一个 JavaScript 对象。CSS property 名可以用驼峰式 (camelCase) 或短横线分隔 (kebab-case，记得用引号括起来) 来命名：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:style</span>=<span class="string">"&#123; color: activeColor, fontSize: fontSize + 'px' &#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">data() &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    activeColor: <span class="string">'red'</span>,</span><br><span class="line">    fontSize: <span class="number">30</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>直接绑定到一个样式对象通常更好，这会让模板更清晰：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:style</span>=<span class="string">"styleObject"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">data() &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    styleObject: &#123;</span><br><span class="line">      color: <span class="string">'red'</span>,</span><br><span class="line">      fontSize: <span class="string">'13px'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="数组语法-1"><a href="#数组语法-1" class="headerlink" title="数组语法"></a>数组语法</h3><p><code>:style</code> 的数组语法可以将多个样式对象应用到同一个元素上：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:style</span>=<span class="string">"[baseStyles, overridingStyles]"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="自动添加前缀"><a href="#自动添加前缀" class="headerlink" title="自动添加前缀"></a>自动添加前缀</h4><p>在 <code>:style</code> 中使用需要一个 vendor prefix (浏览器引擎前缀) 的 CSS property 时，Vue 将自动侦测并添加相应的前缀。Vue 是通过运行时检测来确定哪些样式的 property 是被当前浏览器支持的。如果浏览器不支持某个 property，Vue 会进行多次测试以找到支持它的前缀。</p>
<h4 id="多重值"><a href="#多重值" class="headerlink" title="多重值"></a>多重值</h4><p>可以为 style 绑定中的 property 提供一个包含多个值的数组，常用于提供多个带前缀的值，例如：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:style</span>=<span class="string">"&#123; display: ['-webkit-box', '-ms-flexbox', 'flex'] &#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这样写只会渲染数组中最后一个被浏览器支持的值。在本例中，如果浏览器支持不带浏览器前缀的 flexbox，那么就只会渲染 <code>display: flex</code>。</p>
<h1 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h1><h2 id="在-lt-template-gt-元素上使用-v-if-条件渲染分组"><a href="#在-lt-template-gt-元素上使用-v-if-条件渲染分组" class="headerlink" title="在 &lt;template&gt; 元素上使用 v-if 条件渲染分组"></a>在 <code>&lt;template&gt;</code> 元素上使用 <code>v-if</code> 条件渲染分组</h2><p>因为 <code>v-if</code> 是一个指令，所以必须将它添加到一个元素上。但是如果想切换多个元素呢？此时可以把一个 <code>&lt;template&gt;</code> 元素当做不可见的包裹元素，并在上面使用 v-if。最终的渲染结果将不包含 <code>&lt;template&gt;</code> 元素。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">v-if</span>=<span class="string">"ok"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Paragraph 1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Paragraph 2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="v-show"><a href="#v-show" class="headerlink" title="v-show"></a><code>v-show</code></h2><p>另一个用于条件性展示元素的选项是 <code>v-show</code> 指令。用法大致一样：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-show</span>=<span class="string">"ok"</span>&gt;</span>Hello!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>不同的是带有 <code>v-show</code> 的元素始终会被渲染并保留在 DOM 中。<code>v-sh ow</code> 只是简单地切换元素的 CSS property <code>display</code>。</p>
<h2 id="v-if-vs-v-show"><a href="#v-if-vs-v-show" class="headerlink" title="v-if vs v-show"></a><code>v-if</code> vs <code>v-show</code></h2><p><code>v-if</code> 是“真正”的条件渲染，因为它会确保在切换过程中，条件块内的事件监听器和子组件适当地被销毁和重建。<code>v-if</code> 也是惰性的：如果在初始渲染时条件为假，则什么也不做——直到条件第一次变为真时，才会开始渲染条件块。</p>
<p>相比之下，<code>v-show</code> 就简单得多——不管初始条件是什么，元素总是会被渲染，并且只是简单地基于 CSS 进行切换。</p>
<p>一般来说，<code>v-if</code> 有更高的切换开销，而 <code>v-show</code> 有更高的初始渲染开销。因此，如果需要非常频繁地切换，则使用 <code>v-show</code> 较好；如果在运行时条件很少改变，则使用 <code>v-if</code> 较好。</p>
<p><strong>不推荐同时使用 <code>v-if</code> 和 <code>v-for</code>。</strong></p>
<h1 id="列表渲染"><a href="#列表渲染" class="headerlink" title="列表渲染"></a>列表渲染</h1><h2 id="在-v-for-里使用对象"><a href="#在-v-for-里使用对象" class="headerlink" title="在 v-for 里使用对象"></a>在 v-for 里使用对象</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"v-for-object"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(value, name, index) in myObject"</span>&gt;</span></span><br><span class="line">    &#123;&#123; index &#125;&#125;. &#123;&#123; name &#125;&#125;: &#123;&#123; value &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Vue.createApp(&#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      myObject: &#123;</span><br><span class="line">        title: <span class="string">'How to do lists in Vue'</span>,</span><br><span class="line">        author: <span class="string">'Jane Doe'</span>,</span><br><span class="line">        publishedAt: <span class="string">'2020-03-22'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;).mount(<span class="string">'#v-for-object'</span>)</span><br></pre></td></tr></table></figure>

<h2 id="维护状态"><a href="#维护状态" class="headerlink" title="维护状态"></a>维护状态</h2><p>当 Vue 正在更新使用 <code>v-for</code> 渲染的元素列表时，它默认使用“就地更新”的策略。如果数据项的顺序被改变，Vue 将不会移动 DOM 元素来匹配数据项的顺序，而是就地更新每个元素，并且确保它们在每个索引位置正确渲染。</p>
<p>这个默认的模式是高效的，但是<strong>只适用于不依赖子组件状态或临时 DOM 状态 (例如：表单输入值) 的列表渲染输出</strong>。</p>
<p>为了给 Vue 一个提示，以便它能跟踪每个节点的身份，从而重用和重新排序现有元素，你需要为每项提供一个唯一 <code>key</code> attribute：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">"item in items"</span> <span class="attr">:key</span>=<span class="string">"item.id"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- content --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="数组更新检测"><a href="#数组更新检测" class="headerlink" title="数组更新检测"></a>数组更新检测</h1><h2 id="变更方法"><a href="#变更方法" class="headerlink" title="变更方法"></a>变更方法</h2><p>Vue 将被侦听的数组的变更方法进行了包裹，所以它们也将会触发视图更新。这些被包裹过的方法包括：</p>
<ul>
<li><code>push()</code> : （在数组结尾处）向数组添加一个新的元素，返回新数组的长度</li>
<li><code>pop()</code> : 数组中删除最后一个元素，返回“被弹出”的值</li>
<li><code>shift()</code> : 删除首个数组元素，并把所有其他元素“位移”到更低的索引，返回“被移出”的值</li>
<li><code>unshift()</code> : 方法（在开头）向数组添加新元素，并“反向位移”旧元素</li>
<li><code>splice(index, num, args*)</code> : index 定义了应添加新元素的位置（拼接），num 定义应删除多少元素，其余参数定义要添加的新元素</li>
<li><code>sort()</code> : 数组排序</li>
<li><code>reverse()</code> : 数组反转</li>
</ul>
<h2 id="替换数组"><a href="#替换数组" class="headerlink" title="替换数组"></a>替换数组</h2><p>变更方法，顾名思义，会变更调用了这些方法的原始数组。相比之下，也有非变更方法，例如 <code>filter()</code>、<code>concat()</code> 和 <code>slice()</code>。它们不会变更原始数组，而总是返回一个新数组。当使用非变更方法时，可以用新数组替换旧数组：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">example1.items = example1.items.filter(<span class="function"><span class="params">item</span> =&gt;</span> item.message.match(<span class="regexp">/Foo/</span>))</span><br></pre></td></tr></table></figure>

<blockquote>
<p>你可能认为这将导致 Vue 丢弃现有 DOM 并重新渲染整个列表。幸运的是，事实并非如此。Vue 为了使得 DOM 元素得到最大范围的重用而实现了一些智能的启发式方法，所以用一个含有相同元素的数组去替换原来的数组是非常高效的操作。</p>
</blockquote>
<h2 id="显示过滤-排序后的结果"><a href="#显示过滤-排序后的结果" class="headerlink" title="显示过滤/排序后的结果"></a>显示过滤/排序后的结果</h2><p>有时，我们想要显示一个数组经过过滤或排序后的版本，而不实际变更或重置原始数据。在这种情况下，可以创建一个计算属性，来返回过滤或排序后的数组。</p>
<p>例如：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"n in evenNumbers"</span> <span class="attr">:key</span>=<span class="string">"n"</span>&gt;</span>&#123;&#123; n &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">data() &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    numbers: [ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line">computed: &#123;</span><br><span class="line">  evenNumbers() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.numbers.filter(<span class="function"><span class="params">number</span> =&gt;</span> number % <span class="number">2</span> === <span class="number">0</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在计算属性不适用的情况下 (例如，在嵌套 v-for 循环中) 你可以使用一个方法：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">v-for</span>=<span class="string">"numbers in sets"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"n in even(numbers)"</span> <span class="attr">:key</span>=<span class="string">"n"</span>&gt;</span>&#123;&#123; n &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">`</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">data() &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    sets: [[ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> ], [<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">  even(numbers) &#123;</span><br><span class="line">    <span class="keyword">return</span> numbers.filter(<span class="function"><span class="params">number</span> =&gt;</span> number % <span class="number">2</span> === <span class="number">0</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="在-v-for-里使用值的范围"><a href="#在-v-for-里使用值的范围" class="headerlink" title="在 v-for 里使用值的范围"></a>在 v-for 里使用值的范围</h2><p>v-for 也可以接受整数。在这种情况下，它会把模板重复对应次数。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"range"</span> <span class="attr">class</span>=<span class="string">"demo"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-for</span>=<span class="string">"n in 10"</span> <span class="attr">:key</span>=<span class="string">"n"</span>&gt;</span>&#123;&#123; n &#125;&#125; <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="在-lt-template-gt-中使用-v-for"><a href="#在-lt-template-gt-中使用-v-for" class="headerlink" title="在 &lt;template&gt; 中使用 v-for"></a>在 <code>&lt;template&gt;</code> 中使用 v-for</h2><p>类似于 v-if，你也可以利用带有 v-for 的 <code>&lt;template&gt;</code> 来循环渲染一段包含多个元素的内容。比如：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-for</span>=<span class="string">"item in items"</span> <span class="attr">:key</span>=<span class="string">"item.msg"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123; item.msg &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"divider"</span> <span class="attr">role</span>=<span class="string">"presentation"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="在组件上使用-v-for"><a href="#在组件上使用-v-for" class="headerlink" title="在组件上使用 v-for"></a>在组件上使用 v-for</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"todo-list-example"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">form</span> <span class="attr">v-on:submit.prevent</span>=<span class="string">"addNewTodo"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"new-todo"</span>&gt;</span>Add a todo<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-model</span>=<span class="string">"newTodoText"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">id</span>=<span class="string">"new-todo"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">placeholder</span>=<span class="string">"E.g. Feed the cat"</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>Add<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">todo-item</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-for</span>=<span class="string">"(todo, index) in todos"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:key</span>=<span class="string">"todo.id"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:title</span>=<span class="string">"todo.title"</span></span></span><br><span class="line"><span class="tag">      @<span class="attr">remove</span>=<span class="string">"todos.splice(index, 1)"</span></span></span><br><span class="line"><span class="tag">    &gt;</span><span class="tag">&lt;/<span class="name">todo-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> app = Vue.createApp(&#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      newTodoText: <span class="string">''</span>,</span><br><span class="line">      todos: [</span><br><span class="line">        &#123;</span><br><span class="line">          id: <span class="number">1</span>,</span><br><span class="line">          title: <span class="string">'Do the dishes'</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          id: <span class="number">2</span>,</span><br><span class="line">          title: <span class="string">'Take out the trash'</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          id: <span class="number">3</span>,</span><br><span class="line">          title: <span class="string">'Mow the lawn'</span></span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      nextTodoId: <span class="number">4</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    addNewTodo() &#123;</span><br><span class="line">      <span class="keyword">this</span>.todos.push(&#123;</span><br><span class="line">        id: <span class="keyword">this</span>.nextTodoId++,</span><br><span class="line">        title: <span class="keyword">this</span>.newTodoText</span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="keyword">this</span>.newTodoText = <span class="string">''</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.component(<span class="string">'todo-item'</span>, &#123;</span><br><span class="line">  template: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;li&gt;</span></span><br><span class="line"><span class="string">      &#123;&#123; title &#125;&#125;</span></span><br><span class="line"><span class="string">      &lt;button @click="$emit('remove')"&gt;Remove&lt;/button&gt;</span></span><br><span class="line"><span class="string">    &lt;/li&gt;</span></span><br><span class="line"><span class="string">  `</span>,</span><br><span class="line">  props: [<span class="string">'title'</span>],</span><br><span class="line">  emits: [<span class="string">'remove'</span>]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.mount(<span class="string">'#todo-list-example'</span>)</span><br></pre></td></tr></table></figure>

<h1 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h1><h2 id="监听事件"><a href="#监听事件" class="headerlink" title="监听事件"></a>监听事件</h2><p>我们可以使用 <code>v-on</code> 指令 (通常缩写为 <code>@</code> 符号) 来监听 DOM 事件，并在触发事件时执行一些 JavaScript。用法为 <code>v-on:click=&quot;methodName&quot;</code> 或使用快捷方式 <code>@click=&quot;methodName&quot;</code></p>
<p>例如：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"basic-event"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"counter += 1"</span>&gt;</span>Add 1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>The button above has been clicked &#123;&#123; counter &#125;&#125; times.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Vue.createApp(&#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      counter: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;).mount(<span class="string">'#basic-event'</span>)</span><br></pre></td></tr></table></figure>

<h2 id="事件处理方法"><a href="#事件处理方法" class="headerlink" title="事件处理方法"></a>事件处理方法</h2><p>然而许多事件处理逻辑会更为复杂，所以直接把 JavaScript 代码写在 <code>v-on</code> 指令中是不可行的。因此 <code>v-on</code> 还可以接收一个需要调用的方法名称。</p>
<p>例如：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"event-with-method"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- `greet` 是在下面定义的方法名 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"greet"</span>&gt;</span>Greet<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Vue.createApp(&#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      name: <span class="string">'Vue.js'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    greet(event) &#123;</span><br><span class="line">      <span class="comment">// `methods` 内部的 `this` 指向当前活动实例</span></span><br><span class="line">      alert(<span class="string">'Hello '</span> + <span class="keyword">this</span>.name + <span class="string">'!'</span>)</span><br><span class="line">      <span class="comment">// `event` 是原生 DOM event</span></span><br><span class="line">      <span class="keyword">if</span> (event) &#123;</span><br><span class="line">        alert(event.target.tagName)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;).mount(<span class="string">'#event-with-method'</span>)</span><br></pre></td></tr></table></figure>

<h2 id="内联处理器中的方法"><a href="#内联处理器中的方法" class="headerlink" title="内联处理器中的方法"></a>内联处理器中的方法</h2><p>除了直接绑定到一个方法，也可以在内联 JavaScript 语句中调用方法：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"inline-handler"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"say('hi')"</span>&gt;</span>Say hi<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"say('what')"</span>&gt;</span>Say what<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Vue.createApp(&#123;</span><br><span class="line">  methods: &#123;</span><br><span class="line">    say(message) &#123;</span><br><span class="line">      alert(message)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;).mount(<span class="string">'#inline-handler'</span>)</span><br></pre></td></tr></table></figure>

<p>有时也需要在内联语句处理器中访问原始的 DOM 事件。可以用特殊变量 <code>$event</code> 把它传入方法：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"warn('Form cannot be submitted yet.', $event)"</span>&gt;</span></span><br><span class="line">  Submit</span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">/ ...</span><br><span class="line">methods: &#123;</span><br><span class="line">  warn(message, event) &#123;</span><br><span class="line">    <span class="comment">// 现在可以访问到原生事件</span></span><br><span class="line">    <span class="keyword">if</span> (event) &#123;</span><br><span class="line">      event.preventDefault()</span><br><span class="line">    &#125;</span><br><span class="line">    alert(message)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="多事件处理器"><a href="#多事件处理器" class="headerlink" title="多事件处理器"></a>多事件处理器</h2><p>事件处理程序中可以有多个方法，这些方法由逗号运算符分隔：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 这两个 one() 和 two() 将执行按钮点击事件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"one($event), two($event)"</span>&gt;</span></span><br><span class="line">  Submit</span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">  one(event) &#123;</span><br><span class="line">    <span class="comment">// 第一个事件处理器逻辑...</span></span><br><span class="line">  &#125;,</span><br><span class="line">  two(event) &#123;</span><br><span class="line">   <span class="comment">// 第二个事件处理器逻辑...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="事件修饰符"><a href="#事件修饰符" class="headerlink" title="事件修饰符"></a>事件修饰符</h2><p>在事件处理程序中调用 <code>event.preventDefault()</code> 或 <code>event.stopPropagation()</code> 是非常常见的需求。尽管我们可以在方法中轻松实现这点，但更好的方式是：方法只有纯粹的数据逻辑，而不是去处理 DOM 事件细节。</p>
<p>为了解决这个问题，Vue.js 为 v-on 提供了<strong>事件修饰符</strong>。之前提过，修饰符是由点开头的指令后缀来表示的。</p>
<ul>
<li><code>.stop</code> : 阻止事件继续传播</li>
<li><code>.prevent</code> : 阻止默认事件的发生</li>
<li><code>.capture</code> : 内部元素触发的事件先在此处理，然后才交由内部元素进行处理</li>
<li><code>.self</code> : 只当在 event.target 是当前元素自身时触发处理函数</li>
<li><code>.once</code> : 事件将只会触发一次</li>
<li><code>.passive</code> : 事件的默认行为将会立即触发</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 阻止单击事件继续传播 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> @<span class="attr">click.stop</span>=<span class="string">"doThis"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 提交事件不再重载页面 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> @<span class="attr">submit.prevent</span>=<span class="string">"onSubmit"</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 修饰符可以串联 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> @<span class="attr">click.stop.prevent</span>=<span class="string">"doThat"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 只有修饰符 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> @<span class="attr">submit.prevent</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 添加事件监听器时使用事件捕获模式 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 即内部元素触发的事件先在此处理，然后才交由内部元素进行处理 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> @<span class="attr">click.capture</span>=<span class="string">"doThis"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 只当在 event.target 是当前元素自身时触发处理函数 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 即事件不是从内部元素触发的 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> @<span class="attr">click.self</span>=<span class="string">"doThat"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 点击事件将只会触发一次 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> @<span class="attr">click.once</span>=<span class="string">"doThis"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 滚动事件的默认行为 (即滚动行为) 将会立即触发   --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 而不会等待 `onScroll` 完成                   --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 这其中包含 `event.preventDefault()` 的情况   --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> @<span class="attr">scroll.passive</span>=<span class="string">"onScroll"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>使用修饰符时，顺序很重要；相应的代码会以同样的顺序产生。因此，用 <code>v-on:click.prevent.self</code> 会阻止所有的点击，而 <code>v-on:click.self.prevent</code> 只会阻止对元素自身的点击。</p>
</blockquote>
<blockquote>
<p>不要把 <code>.passive</code> 和 <code>.prevent</code> 一起使用，因为 <code>.prevent</code> 将会被忽略，同时浏览器可能会向你展示一个警告。请记住，<code>.passive</code> 会告诉浏览器你不想阻止事件的默认行为。</p>
</blockquote>
<h2 id="按键修饰符"><a href="#按键修饰符" class="headerlink" title="按键修饰符"></a>按键修饰符</h2><p>在监听键盘事件时，我们经常需要检查详细的按键。Vue 允许为 v-on 或者 <code>@</code> 在监听键盘事件时添加按键修饰符：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 只有在 `key` 是 `Enter` 时调用 `vm.submit()` --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> @<span class="attr">keyup.enter</span>=<span class="string">"submit"</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>你可以直接将 <a href="https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values" target="_blank" rel="noopener">KeyboardEvent.key</a> 暴露的任意有效按键名转换为 kebab-case 来作为修饰符。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> @<span class="attr">keyup.page-down</span>=<span class="string">"onPageDown"</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="按键别名"><a href="#按键别名" class="headerlink" title="按键别名"></a>按键别名</h3><p>Vue 为最常用的键提供了别名：</p>
<ul>
<li><code>.enter</code></li>
<li><code>.tab</code></li>
<li><code>.delete</code> (捕获“删除”和“退格”键)</li>
<li><code>.esc</code></li>
<li><code>.space</code></li>
<li><code>.up</code></li>
<li><code>.down</code></li>
<li><code>.left</code></li>
<li><code>.right</code></li>
</ul>
<h3 id="系统修饰键"><a href="#系统修饰键" class="headerlink" title="系统修饰键"></a>系统修饰键</h3><p>可以用如下修饰符来实现仅在按下相应按键时才触发鼠标或键盘事件的监听器。</p>
<ul>
<li><code>.ctrl</code></li>
<li><code>.alt</code></li>
<li><code>.shift</code></li>
<li><code>.meta</code> : Win键</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Alt + Enter --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> @<span class="attr">keyup.alt.enter</span>=<span class="string">"clear"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Ctrl + Click --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> @<span class="attr">click.ctrl</span>=<span class="string">"doSomething"</span>&gt;</span>Do something<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="exact-修饰符"><a href="#exact-修饰符" class="headerlink" title=".exact 修饰符"></a><code>.exact</code> 修饰符</h3><p><code>.exact</code> 修饰符允许你控制由精确的系统修饰符组合触发的事件。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 即使 Alt 或 Shift 被一同按下时也会触发 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.ctrl</span>=<span class="string">"onClick"</span>&gt;</span>A<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 有且只有 Ctrl 被按下的时候才触发 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.ctrl.exact</span>=<span class="string">"onCtrlClick"</span>&gt;</span>A<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 没有任何系统修饰符被按下的时候才触发 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.exact</span>=<span class="string">"onClick"</span>&gt;</span>A<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="鼠标按钮修饰符"><a href="#鼠标按钮修饰符" class="headerlink" title="鼠标按钮修饰符"></a>鼠标按钮修饰符</h3><ul>
<li><code>.left</code></li>
<li><code>.right</code></li>
<li><code>.middle</code></li>
</ul>
<p>这些修饰符会限制处理函数仅响应特定的鼠标按钮。</p>
<h2 id="为什么在-HTML-中监听事件？"><a href="#为什么在-HTML-中监听事件？" class="headerlink" title="为什么在 HTML 中监听事件？"></a>为什么在 HTML 中监听事件？</h2><p>你可能注意到这种事件监听的方式违背了关注点分离 (separation of concern) 这个长期以来的优良传统。但不必担心，因为所有的 Vue.js 事件处理方法和表达式都严格绑定在当前视图的 ViewModel 上，它不会导致任何维护上的困难。实际上，使用 v-on 或 @ 有几个好处：</p>
<ol>
<li>扫一眼 HTML 模板便能轻松定位在 JavaScript 代码里对应的方法。</li>
<li>因为你无须在 JavaScript 里手动绑定事件，你的 ViewModel 代码可以是非常纯粹的逻辑，和 DOM 完全解耦，更易于测试。</li>
<li>当一个 ViewModel 被销毁时，所有的事件处理器都会自动被删除。你无须担心如何清理它们。</li>
</ol>
<h1 id="表单输入绑定"><a href="#表单输入绑定" class="headerlink" title="表单输入绑定"></a>表单输入绑定</h1><p>你可以用 v-model 指令在表单 <code>&lt;input&gt;</code>、<code>&lt;textarea&gt;</code> 及 <code>&lt;select&gt;</code> 元素上创建双向数据绑定。它会根据控件类型自动选取正确的方法来更新元素。尽管有些神奇，但 v-model 本质上不过是语法糖。它负责监听用户的输入事件来更新数据，并在某种极端场景下进行一些特殊处理。</p>
<blockquote>
<p><code>v-model</code> 会忽略所有表单元素的 <code>value</code>、<code>checked</code>、<code>selected</code> attribute 的初始值而总是将当前活动实例的数据作为数据来源。你应该通过 JavaScript 在组件的 <code>data</code> 选项中声明初始值。</p>
</blockquote>
<p><code>v-model</code> 在内部为不同的输入元素使用不同的 property 并抛出不同的事件：</p>
<ul>
<li>text 和 textarea 元素使用 <code>value</code> property 和 <code>input</code> 事件；</li>
<li>checkbox 和 radio 使用 <code>checked</code> property 和 <code>change</code> 事件；</li>
<li>select 使用 <code>value</code> property 和 <code>change</code> 事件；</li>
</ul>
<h2 id="文本"><a href="#文本" class="headerlink" title="文本"></a>文本</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">"message"</span> <span class="attr">placeholder</span>=<span class="string">"edit me"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Message is: &#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="多行文本"><a href="#多行文本" class="headerlink" title="多行文本"></a>多行文本</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>Multiline message is:<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"white-space: pre-line;"</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">v-model</span>=<span class="string">"message"</span> <span class="attr">placeholder</span>=<span class="string">"add multiple lines"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="复选框"><a href="#复选框" class="headerlink" title="复选框"></a>复选框</h2><p>单个复选框，绑定到布尔值：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">id</span>=<span class="string">"checkbox"</span> <span class="attr">v-model</span>=<span class="string">"checked"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"checkbox"</span>&gt;</span>&#123;&#123; checked &#125;&#125;<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>多个复选框，绑定到同一个数组：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"v-model-multiple-checkboxes"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">id</span>=<span class="string">"jack"</span> <span class="attr">value</span>=<span class="string">"Jack"</span> <span class="attr">v-model</span>=<span class="string">"checkedNames"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"jack"</span>&gt;</span>Jack<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">id</span>=<span class="string">"john"</span> <span class="attr">value</span>=<span class="string">"John"</span> <span class="attr">v-model</span>=<span class="string">"checkedNames"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"john"</span>&gt;</span>John<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">id</span>=<span class="string">"mike"</span> <span class="attr">value</span>=<span class="string">"Mike"</span> <span class="attr">v-model</span>=<span class="string">"checkedNames"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"mike"</span>&gt;</span>Mike<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>Checked names: &#123;&#123; checkedNames &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Vue.createApp(&#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      checkedNames: []</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;).mount(<span class="string">'#v-model-multiple-checkboxes'</span>)</span><br></pre></td></tr></table></figure>

<h2 id="单选框"><a href="#单选框" class="headerlink" title="单选框"></a>单选框</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"v-model-radiobutton"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">id</span>=<span class="string">"one"</span> <span class="attr">value</span>=<span class="string">"One"</span> <span class="attr">v-model</span>=<span class="string">"picked"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"one"</span>&gt;</span>One<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">id</span>=<span class="string">"two"</span> <span class="attr">value</span>=<span class="string">"Two"</span> <span class="attr">v-model</span>=<span class="string">"picked"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"two"</span>&gt;</span>Two<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>Picked: &#123;&#123; picked &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Vue.createApp(&#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      picked: <span class="string">''</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;).mount(<span class="string">'#v-model-radiobutton'</span>)</span><br></pre></td></tr></table></figure>

<h2 id="选择框"><a href="#选择框" class="headerlink" title="选择框"></a>选择框</h2><p>单选时：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"v-model-select"</span> <span class="attr">class</span>=<span class="string">"demo"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">"selected"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">disabled</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span>Please select one<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>A<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>B<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>C<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>Selected: &#123;&#123; selected &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Vue.createApp(&#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      selected: <span class="string">''</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;).mount(<span class="string">'#v-model-select'</span>)</span><br></pre></td></tr></table></figure>

<p>多选时 (绑定到一个数组)：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">"selected"</span> <span class="attr">multiple</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span>&gt;</span>A<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span>&gt;</span>B<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span>&gt;</span>C<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>Selected: &#123;&#123; selected &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Vue.createApp(&#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      selected: <span class="string">''</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;).mount(<span class="string">'#v-model-select'</span>)</span><br></pre></td></tr></table></figure>

<p>用 <code>v-for</code> 渲染的动态选项：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"v-model-select-dynamic"</span> <span class="attr">class</span>=<span class="string">"demo"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">"selected"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">v-for</span>=<span class="string">"option in options"</span> <span class="attr">:value</span>=<span class="string">"option.value"</span>&gt;</span></span><br><span class="line">      &#123;&#123; option.text &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>Selected: &#123;&#123; selected &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Vue.createApp(&#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      selected: <span class="string">'A'</span>,</span><br><span class="line">      options: [</span><br><span class="line">        &#123; <span class="attr">text</span>: <span class="string">'One'</span>, <span class="attr">value</span>: <span class="string">'A'</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">text</span>: <span class="string">'Two'</span>, <span class="attr">value</span>: <span class="string">'B'</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">text</span>: <span class="string">'Three'</span>, <span class="attr">value</span>: <span class="string">'C'</span> &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;).mount(<span class="string">'#v-model-select-dynamic'</span>)</span><br></pre></td></tr></table></figure>

<h2 id="值绑定"><a href="#值绑定" class="headerlink" title="值绑定"></a>值绑定</h2><p>有时我们可能想把值绑定到当前活动实例的一个动态 property 上，这时可以用 <code>v-bind</code> 实现，此外，使用 v-bind 可以将输入值绑定到非字符串。</p>
<h3 id="复选框-1"><a href="#复选框-1" class="headerlink" title="复选框"></a>复选框</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">v-model</span>=<span class="string">"toggle"</span> <span class="attr">true-value</span>=<span class="string">"yes"</span> <span class="attr">false-value</span>=<span class="string">"no"</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// when checked:</span></span><br><span class="line">vm.toggle === <span class="string">'yes'</span></span><br><span class="line"><span class="comment">// when unchecked:</span></span><br><span class="line">vm.toggle === <span class="string">'no'</span></span><br></pre></td></tr></table></figure>

<h3 id="单选框-1"><a href="#单选框-1" class="headerlink" title="单选框"></a>单选框</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">v-model</span>=<span class="string">"pick"</span> <span class="attr">v-bind:value</span>=<span class="string">"a"</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 当选中时</span></span><br><span class="line">vm.pick === vm.a</span><br></pre></td></tr></table></figure>

<h3 id="选择框选项"><a href="#选择框选项" class="headerlink" title="选择框选项"></a>选择框选项</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">"selected"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 内联对象字面量 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">:value</span>=<span class="string">"&#123; number: 123 &#125;"</span>&gt;</span>123<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 当被选中时</span></span><br><span class="line"><span class="keyword">typeof</span> vm.selected <span class="comment">// =&gt; 'object'</span></span><br><span class="line">vm.selected.number <span class="comment">// =&gt; 123</span></span><br></pre></td></tr></table></figure>

<h2 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h2><h3 id="lazy"><a href="#lazy" class="headerlink" title=".lazy"></a>.lazy</h3><p>在默认情况下，v-model 在每次 input 事件触发后将输入框的值与数据进行同步 (除了上述输入法组织文字时)。你可以添加 <code>lazy</code> 修饰符，从而转为在 <code>change</code> 事件_之后_进行同步：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在“change”时而非“input”时更新 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model.lazy</span>=<span class="string">"msg"</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="number"><a href="#number" class="headerlink" title=".number"></a>.number</h3><p>如果想自动将用户的输入值转为数值类型，可以给 v-model 添加 <code>number</code> 修饰符：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model.number</span>=<span class="string">"age"</span> <span class="attr">type</span>=<span class="string">"number"</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="trim"><a href="#trim" class="headerlink" title=".trim"></a>.trim</h3><p>如果要自动过滤用户输入的首尾空白字符，可以给 v-model 添加 <code>trim</code> 修饰符：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model.trim</span>=<span class="string">"msg"</span> /&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端框架</category>
      </categories>
      <tags>
        <tag>Vue 前端</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2022/01/10/hello-world/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote class="blockquote-center">
<p>Only A Start Of Hexo</p>

</blockquote>
<a id="more"></a>
<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>hexo添加看板娘</title>
    <url>/2021/06/15/hexo%E6%B7%BB%E5%8A%A0%E7%9C%8B%E6%9D%BF%E5%A8%98/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote class="blockquote-center">
<p>^ _ ^ </p>

</blockquote>
<a id="more"></a>

<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>CSDN 博文 : <a href="https://blog.csdn.net/qq_36239569/article/details/104104894" target="_blank" rel="noopener">https://blog.csdn.net/qq_36239569/article/details/104104894</a></p>
<h1 id="Live2D"><a href="#Live2D" class="headerlink" title="Live2D"></a>Live2D</h1><p>Live2D是一种应用于电子游戏的绘图渲染技术，由日本Cybernoids公司开发，通过一系列的连续图像和人物建模来生成一种类似二维图像的三维模型，换句话说就是2D的素材实现一定程度的3D效果，但只能是一定程度3D，因为Live 2D人物无法大幅度转身。</p>
<p>hexo中的看板娘基于 Live2D 技术进行实现。</p>
<h1 id="添加步骤"><a href="#添加步骤" class="headerlink" title="添加步骤"></a>添加步骤</h1><p><strong>1. 安装依赖</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm install --save hexo-helper-live2d</span><br></pre></td></tr></table></figure>
<p>添加成功后 <strong>node_modules</strong> 模块下会增加一个 <strong>live2d-widget</strong> 目录。</p>
<p><strong>2. 下载模型文件</strong><br>模型文件可直接用npm安装：如下</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm install live2d-widget-model-koharu</span><br></pre></td></tr></table></figure>
<p>model名字可在<a href="https://github.com/xiazeyu/live2d-widget-models" target="_blank" rel="noopener">live2d-widget-models</a>中找到，也可点击<a href="https://blog.csdn.net/wang_123_zy/article/details/87181892" target="_blank" rel="noopener">live2d看板娘模型预览</a>来选择你喜欢的模型进行安装。</p>
<p><strong>3. 添加live2d看板娘到hexo</strong><br>配置Hexo的主 <code>_config.yml</code> 或者使用的主题的 <code>_config.yml</code><br>添加以下代码到配置文件中：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">## Live2D看板娘</span><br><span class="line">live2d:</span><br><span class="line">  enable: true</span><br><span class="line">  pluginModelPath: assets/</span><br><span class="line">  model:</span><br><span class="line">    #模板目录，在node_modules里</span><br><span class="line">    use: live2d-widget-model-koharu </span><br><span class="line">  display:</span><br><span class="line">    position: right</span><br><span class="line">    width: 300 </span><br><span class="line">    height: 600</span><br><span class="line">  mobile:</span><br><span class="line">    # 在手机端显示</span><br><span class="line">    show: false   </span><br><span class="line">  rect:</span><br><span class="line">    opacity:0.7</span><br></pre></td></tr></table></figure>

<p><strong>4. 生成文件</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure>

<h1 id="可爱的koharu"><a href="#可爱的koharu" class="headerlink" title="可爱的koharu"></a>可爱的koharu</h1><p><img src="/2021/06/15/hexo%E6%B7%BB%E5%8A%A0%E7%9C%8B%E6%9D%BF%E5%A8%98/1.jpg" alt></p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>VSCode使用指南</title>
    <url>/2021/06/13/VSCode%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote class="blockquote-center">
<p>^ _ ^ </p>

</blockquote>
<a id="more"></a>

<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>故事要从一个月前说起，当时我还在用 VSCode 写图像处理算法小程序，是一位矜矜业业的搬砖工。搬砖时，辅助有 VSCode 中 Python 插件提供的代码提示；鼠标轻轻移动就能显示出函数定义，给我的搬砖工作带来了极大便利。</p>
<p>直到某一天，我一顿玄学操作后，函数提示消失了，好用的“仿IDE编程”沦为“记事本编程”。我尝试了很多网上的办法也没有成功。刚巧我的搬砖工作也完成了，就以“不写python代码”为解决方案搁置了这个问题。</p>
<p>直到昨天，我突然想写一个“图片转动漫”的小脚本，搜了搜youtube，发现有一个基于图像处理的简单实现，打算copy下来。copy过程中，“记事本编程”的碍眼之处又显现出来。我沿着历史的轨迹，继续“搜博客–&gt;无脑试错”，但是幸运女神仿佛始终没能眷顾我。最后，我采用了终极解决方案–卸载重装。结果发现重装后的 VSCode 竟然保留了之前的所有配置(ΩДΩ) 阿巴阿巴，痴呆落泪…</p>
<p>正所谓“瞎看博客三百篇，不会原创也会抄”。大量的博客试错虽然没有解决我的问题，但至少让我有一个解决问题的思路，就是–配置 <code>setting.json</code> 文件。一定是其中有某个地方配置错误，导致问题出现。但是由于之前各种不求甚解的“拆东墙，补西墙”操作， setting.json 中的配置项已经变得杂乱无章。搜索了一下也没发现有比较好的 setting.json 解析文章，于是打算去官方文档上看看。</p>
<p>随便看了看就发现了一个可行的尝试思路，试了试竟然真的解决了问题。问题解决后，我又逛了逛官方文档，发现 VSCode 原来有那么多玩法，于是打算将官方文档好好看一看，有一个“汉化搬砖+缝合”的工作计划（就是<strong>VSCode使用指南</strong>系列文章），希望我不要鸽掉o(*￣︶￣*)o</p>
<h1 id="官方文档地址"><a href="#官方文档地址" class="headerlink" title="官方文档地址"></a>官方文档地址</h1><p>Documention Of Visual Studio Code : <a href="https://code.visualstudio.com/docs" target="_blank" rel="noopener">https://code.visualstudio.com/docs</a></p>
<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>Visual Studio Code是一个轻量级但功能强大的源代码编辑器，可以在桌面上运行，适用于Windows、macOS和Linux。它内置了对JavaScript、TypeScript和Nodejs的支持，并为其他语言(如c++、c#、Java、Python、PHP、Go)和运行时(如. net和Unity)提供了丰富的扩展生态系统。</p>
<p><strong>核心功能</strong>：</p>
<ol>
<li><strong>Intelligent Code Completion</strong>：智能代码提示，自动补全变量名称、方法和引入模块。</li>
<li><strong>Streamlined Debugging</strong>：程序调试。</li>
<li><strong>Code Navigation and Refactoring</strong>：源代码快速跳转，如快速跳转到函数定义的源代码处。</li>
<li><strong>In-Product Source Control</strong>：软件配置管理(SCM)是指通过执行版本控制、变更控制的规程，以及使用合适的配置管理软件，来保证所有配置项的完整性和可跟踪性。VSCode 在编辑器中使用 SCM 支持加快发布周期，包括富Git集成。</li>
</ol>
<h1 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h1><h2 id="下载-amp-更新-amp-卸载"><a href="#下载-amp-更新-amp-卸载" class="headerlink" title="下载 &amp; 更新 &amp; 卸载"></a>下载 &amp; 更新 &amp; 卸载</h2><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>VSCode 下载地址：<a href="https://code.visualstudio.com/Download" target="_blank" rel="noopener">https://code.visualstudio.com/Download</a>。</p>
<p>VSCode 有内测版本，如果你愿意提前使用即将发布的新版本（虽然可能不是很稳定），就可以下载内测版本，下载地址：<a href="https://code.visualstudio.com/insiders" target="_blank" rel="noopener">https://code.visualstudio.com/insiders</a>。</p>
<p>VSCode 支持<strong>Portable</strong>模式，这种模式旨在将其配置设置读写到计算机中可访问的文件夹中，这种模式使所有由 VS Code 创建和维护的数据能够靠近它自己，这使得根据用户的偏好和数据在不同的计算机之间更容易地传输程序。这种模式还提供了一种方法来设置 VS Code 扩展的安装文件夹位置，这对于防止扩展安装在 Windows AppData 文件夹中的公司环境很有用。</p>
<p><strong>Portable</strong>模式的 VSCode 只能通过<strong>压缩包</strong>的形式进行下载，你可以通过<a href="https://code.visualstudio.com/download" target="_blank" rel="noopener">下载页</a>找到符合你系统的压缩包进行下载：Windows用户下载<strong>zip</strong>安装包，Linux用户下载<strong>.tar.gz</strong>安装包。<br><img src="/2021/06/13/VSCode%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/1.jpg" alt></p>
<blockquote>
<p>不要试图在<strong>Windows User or System installers</strong>完成的安装下配置<strong>Portable</strong>模式，该模式只在<strong>压缩包</strong>形式的下载中被支持。</p>
</blockquote>
<p>启动<strong>Portable</strong>模式（Windows下）的步骤：</p>
<ol>
<li>解压安装包到某目录，比如我解压到了 <strong>D:\VSCode-1.57.0</strong> 目录，不妨用 <strong>%VSCODE_DIR%</strong> 代表这个目录。</li>
<li>在 <strong>%VSCODE_DIR%</strong> 下创建 <strong>data</strong> 文件夹，该文件夹将用于包含所有VS Code数据，包括会话状态，首选项，扩展等。</li>
</ol>
<blockquote>
<p><strong>data</strong> 文件夹可以移动到其他安装的 VS Code 平台中，无论是同电脑上的不同版本 VSCode，还是其他电脑上的 VSCode，因此轻松地实现了配置移植。</p>
</blockquote>
<p>即使在<strong>Portable</strong>模式下，默认存放临时文件的 <strong>TMP</strong> 文件夹仍然在系统文件中。如果你希望将你的 TMP 目录放入你的 <strong>%VSCODE_DIR%</strong> 下的话，可以在 <strong>data</strong> 文件夹中创建一个空的 <strong>tmp</strong> 文件。当 tmp 文件创建成功后，它就会被自动用来保存 VSCode 产生的临时数据。</p>
<p>VSCode 是一个占用存储空间很小的应用，它只包含大多数开发工作流中最常用的组件，如：编辑器、文件管理、窗口管理和首选项设置等。另外， Javascript/TypeScript 语言服务和 Node.js 调试器也是基本安装的一部分。</p>
<p>经常使用大型 IDE 的朋友可能会习惯 <strong>File–&gt;New Project</strong> 的形式来创建一个项目，但 VSCode 中没有这项操作。原因是大型 IDE 中的 <strong>New Project</strong> 之所以成功，是因为其中内置了很多项目模板，而 VSCode 中没有内置这些东西。这种设定造就了 VSCode 小巧轻便的特点，但并没有降低它的能力。因为这些 IDE 有的功能，VSCode 也可以通过安装组件（扩展）来完成。</p>
<h3 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h3><p>VSCode 几乎每个月会发布一个新版本，新版本会增加一些新特性、修复一些 bug。VS Code 平台支持平台和插件的自动更新，用户也可以通过<strong>Help–&gt;Check for Updates</strong>来检测当前可用更新。如果用户希望取消自动更新，则可以通过 <code>Ctrl + Shift + P</code> 输入 <code>Open Settings</code> 打开<strong>设置</strong>的配置文件，并增加以下两项配置：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 平台的自动更新，默认是 default</span></span><br><span class="line">"update.mode": "none"</span><br><span class="line"><span class="comment">// 插件的自动更新，默认是 true</span></span><br><span class="line">"extensions.autoUpdate": false</span><br></pre></td></tr></table></figure>
<blockquote>
<p>自动更新在<strong>Windows Zip</strong>下载下不支持。</p>
</blockquote>
<h3 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h3><p>使用 VSCode 中自带的卸载程序就可以将 VSCode 进行卸载，但是卸载后用户数据却还在（看到这我就发现为什么 VSCode 卸载后再重装结果还是原来的亚子了）。所以，要想彻底删干净 VSCode，就需要删除保存配置数据的系统文件：</p>
<ul>
<li><strong>%APPDATA%\Code</strong> ：比如我的电脑是 <strong>C:\Users\a\AppData\Roaming\Code</strong> 。</li>
<li><strong>%USERPROFILE%.vscode</strong> ：比如我的电脑是 <strong>C:\Users\a.vscode</strong> 。</li>
</ul>
<h2 id="Tips-and-Tricks"><a href="#Tips-and-Tricks" class="headerlink" title="Tips and Tricks"></a>Tips and Tricks</h2><h3 id="Welcome-页"><a href="#Welcome-页" class="headerlink" title="Welcome 页"></a>Welcome 页</h3><p>Welcome 页会提供一些快捷标签，通过这些标签可以快速跳转到某操作。打开 Welcome 页的方式为：<strong>Help–&gt;Welcome</strong>。页面左下角的 <strong>Interactive playground</strong> 将带你进入一个交互式学习场景，介绍 VSCode 的一些编辑特性及使用技巧。<br>如下图所示：<img src="/2021/06/13/VSCode%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/2.jpg" alt>介绍区域会介绍某个特性及这个特性的用法，而交互式区域则是一段可编辑代码，用户可以在这段代码上按照教程尝试使用这个特性。</p>
<p>接下来是 <strong>Interactive playground</strong> 介绍的几种特性。</p>
<h4 id="多焦点编辑（Mul-Cursor-Editing）"><a href="#多焦点编辑（Mul-Cursor-Editing）" class="headerlink" title="多焦点编辑（Mul-Cursor Editing）"></a>多焦点编辑（Mul-Cursor Editing）</h4><ul>
<li><code>Alt + Click</code> : 在任意鼠标点击处增加一个焦点；</li>
<li><code>Ctrl + Shift + L</code> : 选中所有和当前选择相同的字符串，该功能可用于全局范围内同时更改某字符串</li>
<li><code>Ctrl + Shift + UpArrow/DownArrow</code> : 在当前焦点上/下一行同一位置增加一个鼠标焦点。</li>
</ul>
<h4 id="智能感知（IntelliSense）"><a href="#智能感知（IntelliSense）" class="headerlink" title="智能感知（IntelliSense）"></a>智能感知（IntelliSense）</h4><p>通过 <code>Ctrl + Space</code> 可触发智能提示。值得注意的一点是，<code>Ctrl + Space</code> 快捷键在 Windows 系统中已经被<strong>输入法/非输入法切换</strong>功能占用，只有先更改这项快捷键的设定才能在 VSCode 中使用智能感知功能。更改步骤如下：</p>
<ol>
<li>在桌面底部 <strong>任务栏</strong> 处右键 –&gt; 选中 <strong>任务栏设置</strong> ；</li>
<li>在 <strong>设置</strong> 窗口的左上角有一个 <strong>查找设置</strong> 输入框 –&gt; 键入 <strong>input</strong> ；</li>
<li>查询后在显示结果列表中选择 <strong>显示所有结果</strong> –&gt; 在结果列表中选择 <strong>高级键盘设置</strong> –&gt; 在该面板中选择 <strong>输入语言热键</strong> ；</li>
<li>更改 <strong>输入法/非输入法切换</strong> 的 <strong>按键顺序</strong> ，由 <code>Ctrl + Space</code> 变为 <code>左 Alt + Shift</code>。</li>
</ol>
<p>重启 VSCode 后即可使用 <code>Ctrl + Space</code> 快捷键来触发智能提示了。</p>
<h4 id="行操作（Line-Action）"><a href="#行操作（Line-Action）" class="headerlink" title="行操作（Line Action）"></a>行操作（Line Action）</h4><ul>
<li><code>Shift + Alt + DownArraow/UpArrow</code> : 向下/上复制当前光标所在行。</li>
<li><code>Alt + DownArraow/UpArrow</code> : 将光标所在行向下/上移动。</li>
</ul>
<h4 id="命令面板（Command-Platte）"><a href="#命令面板（Command-Platte）" class="headerlink" title="命令面板（Command Platte）"></a>命令面板（Command Platte）</h4><p>功能：根据当前上下文访问所有可用的命令。对于那些可以通过快捷键快速执行的命令，其对应快捷键也可在该面板中显示。<br>快捷键：<code>Ctrl + Shift + P</code>。</p>
<h4 id="更名（Rename-Refactoring）"><a href="#更名（Rename-Refactoring）" class="headerlink" title="更名（Rename Refactoring）"></a>更名（Rename Refactoring）</h4><p>在需要更名的单词处放置光标，按下 <code>F2</code> 键即可更改该文件中所包含的这个字符串的所有实例。</p>
<h4 id="格式化（Formatting）"><a href="#格式化（Formatting）" class="headerlink" title="格式化（Formatting）"></a>格式化（Formatting）</h4><p><code>Shift + Alt + F</code></p>
<h4 id="代码块折叠与展开（Code-Folding）"><a href="#代码块折叠与展开（Code-Folding）" class="headerlink" title="代码块折叠与展开（Code Folding）"></a>代码块折叠与展开（Code Folding）</h4><ul>
<li><code>Ctrl + Shift + [</code> : 折叠 ；</li>
<li><code>Ctrl + Shift + ]</code> : 展开 。</li>
</ul>
<h4 id="模板代码段（Snipptes）"><a href="#模板代码段（Snipptes）" class="headerlink" title="模板代码段（Snipptes）"></a>模板代码段（Snipptes）</h4><p>可通过安装插件的方式为平台添加多种语言的模板代码段。例如输入 <strong>try</strong> 之后会出现 <strong>trycatch</strong> 的选择项，按 <code>Tab</code> 键即可在代码中添加一段 try catch 的模板代码。</p>
<h3 id="默认快捷键"><a href="#默认快捷键" class="headerlink" title="默认快捷键"></a>默认快捷键</h3><p><img src="/2021/06/13/VSCode%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/3.jpg" alt></p>
<blockquote>
<p>你可以通过在<strong>命令面板</strong>中搜索<strong>shortcut</strong>关键词来查找快捷键默认配置文件和配置文件，前者帮助你查找各默认快捷键；后者帮助你自定义快捷键设置来覆盖默认设置。</p>
</blockquote>
<h3 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h3><table>
<thead>
<tr>
<th>按键</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td><code>Ctrl + P</code></td>
<td>快速打开文件（通过输入文件名进行模糊匹配）</td>
</tr>
<tr>
<td><code>Ctrl + P</code> &amp; <code>RightArrow</code></td>
<td>快速打开多个文件（对于搜索出来的文件，可通过右箭头直接打开并且不关闭选择窗口）</td>
</tr>
<tr>
<td><code>Ctrl + R</code></td>
<td>打开最近使用的文件</td>
</tr>
<tr>
<td><code>Alt + Click</code></td>
<td>在任意鼠标点击处增加一个焦点</td>
</tr>
<tr>
<td><code>Ctrl + Shift + L</code></td>
<td>选中所有和当前选择相同的字符串，该功能可用于全局范围内同时更改某字符串</td>
</tr>
<tr>
<td><code>Ctrl + Shift + UpArrow/DownArrow</code></td>
<td>在当前焦点上/下一行同一位置增加一个鼠标焦点</td>
</tr>
<tr>
<td><code>Ctrl + Space</code></td>
<td>智能感知</td>
</tr>
<tr>
<td><code>Ctrl + Shift + P</code></td>
<td>打开命令面板</td>
</tr>
<tr>
<td><code>Shift + Alt + DownArraow/UpArrow</code></td>
<td>向下/上复制当前光标所在行</td>
</tr>
<tr>
<td><code>Alt + DownArraow/UpArrow</code></td>
<td>将光标所在行向下/上移动</td>
</tr>
<tr>
<td><code>Ctrl + /</code></td>
<td>注释当前选择代码（若无选择则注释当前行）</td>
</tr>
<tr>
<td><code>F2</code></td>
<td>全局更名</td>
</tr>
<tr>
<td><code>Shift + Alt + F</code></td>
<td>代码格式化</td>
</tr>
<tr>
<td><code>Ctrl + Shift + [</code></td>
<td>代码块折叠/展开</td>
</tr>
<tr>
<td><code>Ctrl + \</code> `</td>
<td>打开终端</td>
</tr>
<tr>
<td><code>Shift + F8</code></td>
<td>错误漫游</td>
</tr>
<tr>
<td><code>Ctrl + D</code></td>
<td>将下一个和当前选择相同的字符串加入选择</td>
</tr>
<tr>
<td><code>Shift + Alt</code></td>
<td>拖动鼠标时实现块选择（列选择）</td>
</tr>
<tr>
<td><code>Ctrl + G</code></td>
<td>跳转到指定行</td>
</tr>
<tr>
<td><code>Ctrl + L</code></td>
<td>选中当前行</td>
</tr>
<tr>
<td><code>Ctrl + Shift + V</code></td>
<td>打开 Markdown 预览</td>
</tr>
<tr>
<td><code>Ctrl + K V</code></td>
<td>才侧边窗口打开 Markdown 预览</td>
</tr>
<tr>
<td><code>Ctrl + Click</code></td>
<td>跳转到代码定义处</td>
</tr>
<tr>
<td><code>Ctrl + B</code></td>
<td>文件栏显示/隐藏切换</td>
</tr>
</tbody></table>
<h3 id="更改主题"><a href="#更改主题" class="headerlink" title="更改主题"></a>更改主题</h3><ol>
<li><code>Ctrl + Shift + P</code> 打开14命令面板；</li>
<li>输入 <strong>theme</strong> , 选择 <strong>Preferences:Color Theme</strong></li>
<li>通过 <code>RightArrow</code> 应用主题而不关闭选择窗口。</li>
</ol>
<h3 id="更改设置"><a href="#更改设置" class="headerlink" title="更改设置"></a>更改设置</h3><p>默认情况下VS Code显示设置编辑器，你可以在搜索栏中找到下面列出的设置，但你仍然可以编辑底层设置。使用Open Settings (json)命令或使用workbench.settings.editor设置更改默认设置编辑器。</p>
<p>通过编辑 <strong>setting.json</strong> 文件更改设置：</p>
<ol>
<li><code>Ctrl + Shift + P</code> 打开命令面板；</li>
<li>搜索关键字 <strong>Open Settings</strong> ， 在搜索结果中选择 <strong>Open Settings(JSON)</strong></li>
<li>建议同时打开搜索结果中的 <strong>Open Default Settings(JSON)</strong> ，打开的 <strong>defaultSetting.json</strong> 文件中包含所有的默认设置，以及设置相关的注释，通过查阅可以让你更清楚各项配置的含义。</li>
</ol>
<p>我的配置（部分参考官方文档上定义的配置）：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Specifies the color theme used in the workbench.</span></span><br><span class="line">    <span class="attr">"workbench.colorTheme"</span>: <span class="string">"Visual Studio Dark"</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Main editor</span></span><br><span class="line">    <span class="attr">"editor.fontSize"</span>: <span class="number">18</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Controls the font family.</span></span><br><span class="line">    <span class="attr">"editor.fontFamily"</span>: <span class="string">"Fira Code"</span>,</span><br><span class="line">    <span class="comment">// Enables/Disables font ligatures ('calt' and 'liga' font features).</span></span><br><span class="line">    <span class="attr">"editor.fontLigatures"</span>: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Controls auto save of dirty editors. </span></span><br><span class="line">    <span class="attr">"files.autoSave"</span>: <span class="string">"afterDelay"</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Format a file on save. </span></span><br><span class="line">    <span class="attr">"editor.formatOnSave"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// Controls whether the editor should automatically format the pasted content.</span></span><br><span class="line">    <span class="attr">"editor.formatOnPaste"</span>: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Controls how the editor should render whitespace characters.</span></span><br><span class="line">    <span class="attr">"editor.renderWhitespace"</span>: <span class="string">"all"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>特定语言的设定</strong>：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">"[languageid]": &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>可通过 <strong>命令面板</strong> 输入 <strong>Configure Language Specific Settings</strong> 指令来选择一门语言添加配置（前提是该语言需要的插件已经安装成功）</p>
</blockquote>
<h3 id="拓展插件"><a href="#拓展插件" class="headerlink" title="拓展插件"></a>拓展插件</h3><p>VSCode 包含非常丰富的插件库，具有多种语言的编写插件，在左侧面板中可以看到。可以通过筛选条件中的 <strong>Most Popular</strong>查看最流行的插件。</p>
<p>具体插件的安装和使用将在后续文章中给出。</p>
<h3 id="搜索和替换"><a href="#搜索和替换" class="headerlink" title="搜索和替换"></a>搜索和替换</h3><ol>
<li><code>Ctrl + F</code> 打开搜索窗口。</li>
<li>点击 <code>.*</code> 可用于切换为 <strong>正则表达式</strong> 匹配。</li>
<li>左侧的箭头符号点击后会出现<strong>替换框</strong>。</li>
</ol>
<p><img src="/2021/06/13/VSCode%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/4.jpg" alt></p>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>VSCode</tag>
      </tags>
  </entry>
  <entry>
    <title>WhiteDoor</title>
    <url>/2021/06/08/WhiteDoor/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote class="blockquote-center">
<p>一个神级游戏彩蛋 ^ _ ^ </p>

</blockquote>
<a id="more"></a>

<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>今天也是不想学习的一天，逛逛B站看到一个超棒的游戏解说，讲的是由 <strong>Rusty Lake</strong> 公司发布的 <strong>White Door</strong> 游戏。乍一看是一个平平无奇的剧情向小游戏，谁能想到背后彩蛋这么大呢 _(:з」∠)_</p>
<p>视频解说链接在这里：<a href="https://www.bilibili.com/video/BV1VK4y137DN" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1VK4y137DN</a></p>
<h1 id="游戏介绍"><a href="#游戏介绍" class="headerlink" title="游戏介绍"></a>游戏介绍</h1><p>游戏讲述了主人公 <strong>Robert Hill(Bob)</strong> 在1982年8月14日到20日7天时间内，在白门心理诊疗中心接受治疗。Bob在严重心理创伤下失去记忆。但在治疗过程中，Bob逐渐回忆起过去：分手、失业、噩耗传来、饮弹自尽，他被迫回忆起过去的痛苦。治疗中心名为治愈创伤，实际上是为了提取Bob的记忆制作 <code>黑色方块</code>。</p>
<p>但在自己的邻居兼护士 <strong>Lucy</strong> 的帮助下，Bob 最终得到的救赎。</p>
<p><strong>不过，这并不是故事的结束，相反，解密之旅才刚刚开始…</strong></p>
<h1 id="解密之旅"><a href="#解密之旅" class="headerlink" title="解密之旅"></a>解密之旅</h1><h2 id="A-mysterious-murder-case-linked-to-The-White-Door"><a href="#A-mysterious-murder-case-linked-to-The-White-Door" class="headerlink" title="A mysterious murder case linked to The White Door"></a>A mysterious murder case linked to The White Door</h2><p>在游戏发布两周后，Rusty Lake 在它的 Youtube 频道上发布了一则名为 <strong>A mysterious murder case linked to The White Door</strong> 的视频。这是一篇时长半分钟的新闻报道，报道了白门的一位医生 <strong>Theo Hoorn</strong> 遭遇谋杀身亡。且在报道的最后，出现了一个黑盒子，放着一段不知其意的音频。</p>
<p><img src="/2021/06/08/WhiteDoor/1.jpg" alt></p>
<p>报道链接在这里：<a href="https://www.youtube.com/watch?v=rny81LCYbeY" target="_blank" rel="noopener">https://www.youtube.com/watch?v=rny81LCYbeY</a></p>
<p>另一方面，视频发布者（Rusty Lake官方）在描述部分给出了白门心理诊疗中心的网址：<a href="http://mentalhealthandfishing.com/" target="_blank" rel="noopener">http://mentalhealthandfishing.com/</a></p>
<p>同时，在下方评论部分，一位自称是 Hoorn 医生女儿的人发布评论，请求视频发布者将视频删除。其中一位评论者贴出了她的Ins地址。</p>
<p><img src="/2021/06/08/WhiteDoor/2.jpg" alt></p>
<h2 id="黑盒音频"><a href="#黑盒音频" class="headerlink" title="黑盒音频"></a>黑盒音频</h2><p>将黑盒所放的不知其意的音频进入倒放，将得到一串数字 <code>7281003</code></p>
<h2 id="心理测试"><a href="#心理测试" class="headerlink" title="心理测试"></a>心理测试</h2><p>在<a href="http://mentalhealthandfishing.com/" target="_blank" rel="noopener">白门网站</a>中，有一个心理测试的模块。这篇测试，就是打开谜题的钥匙。</p>
<p><img src="/2021/06/08/WhiteDoor/3.jpg" alt></p>
<h3 id="第一题"><a href="#第一题" class="headerlink" title="第一题"></a>第一题</h3><p>在测试的上方有一张图片，打开开发者工具。看到图片名称中 <code>(1)</code>，推测这张图片预示着第一题的答案。而图中的内容是选择了最左边的选项，因此第一题也应该是选 <code>左1</code>。<br><img src="/2021/06/08/WhiteDoor/4.jpg" alt></p>
<h3 id="第二题"><a href="#第二题" class="headerlink" title="第二题"></a>第二题</h3><p>在网站的 Contact 模块下有一张护工的照片，在开发者工具中可以看到图片名称中的 <code>(2)</code>，推测这张图片预示着第二题的答案。观察图片中护工胸口的图案，认为第二题应该选 <code>左1</code>。<br><img src="/2021/06/08/WhiteDoor/5.jpg" alt></p>
<h3 id="第三题"><a href="#第三题" class="headerlink" title="第三题"></a>第三题</h3><p>在网站的 Homepage 模块下有一张医生团队的照片，其中第5个医生的衣服上有一个标记，推测第三题的答案为 <code>左5</code>。</p>
<p><img src="/2021/06/08/WhiteDoor/15.jpg" alt></p>
<h3 id="第四题"><a href="#第四题" class="headerlink" title="第四题"></a>第四题</h3><p>在网站的 Research 模块下有一张曲线的图片，观察两条曲线交点处 y 值为 <code>3</code>，预测第 <code>4</code> 题的答案为 <code>左3</code>。<br><img src="/2021/06/08/WhiteDoor/8.jpg" alt></p>
<h3 id="第五题"><a href="#第五题" class="headerlink" title="第五题"></a>第五题</h3><p>在网站的 Research 模块下有一张板书的图片，预示了第 <code>5</code> 题的答案为 <code>右2</code>。<br><img src="/2021/06/08/WhiteDoor/7.jpg" alt></p>
<h3 id="第六题"><a href="#第六题" class="headerlink" title="第六题"></a>第六题</h3><p>在网站的 Research 模块下有一张盲文的图片。<br><img src="/2021/06/08/WhiteDoor/9.jpg" alt></p>
<p>对照如下盲文-英文对照表：<br><img src="/2021/06/08/WhiteDoor/10.jpg" alt></p>
<p>得到盲文对应的英文字母：<br><img src="/2021/06/08/WhiteDoor/11.jpg" alt></p>
<p>得到第 <code>6</code> 题的答案为 <code>a black cube</code></p>
<h3 id="第七题"><a href="#第七题" class="headerlink" title="第七题"></a>第七题</h3><p>在网站的 Research 模块下有一张柱状图。<br><img src="/2021/06/08/WhiteDoor/12.jpg" alt></p>
<p>看到图中 y 轴最大值为 26，可以推测柱状图中每个柱子的值和一个英文字母相对应。根据对应关系得到：<br><img src="/2021/06/08/WhiteDoor/13.jpg" alt></p>
<p>故第 <code>7</code> 题答案为 <code>enlightenment</code></p>
<h3 id="第八题"><a href="#第八题" class="headerlink" title="第八题"></a>第八题</h3><p>在网站的 Service 模块下有一个列表。乍一看没什么特别，但是打开开发者工具查看列表元素就会发现，列表中每一项都带有一个数字注释。这与最后一行的注释是一致的。</p>
<p>按照最后一行注释 <code>&lt;!--8= 6 1-1-1-2-7 3-6 6 4-9-13-10--&gt;</code> 提供的顺序依次提取每一项中的字母。比如第一个<code>6</code>代表获取第一项的第6个字母；第一个<code>1</code>代表获取第二项的第二个字母，依次类推。最后得到 <code>8= a cabin at a lake</code><br><img src="/2021/06/08/WhiteDoor/6.jpg" alt></p>
<h3 id="第九题"><a href="#第九题" class="headerlink" title="第九题"></a>第九题</h3><p>在网站的 Testimonials 模块下有一个可疑的 <code>(9)</code>，将该段留言中的每句首字母提取出来，得到第 <code>9</code> 题答案为： <code>my corrupted soul</code><br><img src="/2021/06/08/WhiteDoor/14.jpg" alt></p>
<h3 id="第十题"><a href="#第十题" class="headerlink" title="第十题"></a>第十题</h3><p><img src="/2021/06/08/WhiteDoor/16.jpg" alt></p>
<p>该题无法在网站上找到答案，只有游戏的玩家才能回答，就是：<br><img src="/2021/06/08/WhiteDoor/17.jpg" alt></p>
<p>因此，第 <code>10</code> 题的答案为：<code>never dead</code></p>
<h3 id="所有答案"><a href="#所有答案" class="headerlink" title="所有答案"></a>所有答案</h3><p><img src="/2021/06/08/WhiteDoor/18.jpg" alt></p>
<h2 id="管理员登录"><a href="#管理员登录" class="headerlink" title="管理员登录"></a>管理员登录</h2><p>提交答案后，网页跳转到 <code>模拟管理员登录</code> 界面。<br><img src="/2021/06/08/WhiteDoor/19.jpg" alt></p>
<p>选择登陆 <strong>Hoorn</strong> 医生的账号，系统将提示你输入密码。尝试输入之前在黑盒子得到的音频 <code>7281003</code>，可惜不对。<br><img src="/2021/06/08/WhiteDoor/20.jpg" alt></p>
<p>不过好在下面提供了找回密码的途径：一是联系技术人员；一是回答安保问题。联系技术人员的途径被发现不可行，现在只剩下回答安保问题一条途径。<br><img src="/2021/06/08/WhiteDoor/21.jpg" alt></p>
<h3 id="安保问题1"><a href="#安保问题1" class="headerlink" title="安保问题1"></a>安保问题1</h3><p><img src="/2021/06/08/WhiteDoor/22.jpg" alt></p>
<blockquote>
<p>你女儿的名字是什么？</p>
</blockquote>
<p>联系之前在 youtube 视频下的留言，可知答案为 <code>Kirsten</code></p>
<h3 id="其他安保问题"><a href="#其他安保问题" class="headerlink" title="其他安保问题"></a>其他安保问题</h3><p>在 <a href="https://www.youtube.com/channel/UCWRJLrhDzYBXOwsITTQHsIw/about" target="_blank" rel="noopener">Kirsten Hoorn</a>的 Youtube 首页上，提供了她的 Ins 地址：<a href="https://www.instagram.com/accounts/login/" target="_blank" rel="noopener">https://www.instagram.com/kirstenhoorn </a></p>
<p>因为 instagaram 上不去，所以没有自己去 instagram 上找答案。而是使用了视频中给的答案。</p>
<p><img src="/2021/06/08/WhiteDoor/25.jpg" alt></p>
<h3 id="登陆成功"><a href="#登陆成功" class="headerlink" title="登陆成功"></a>登陆成功</h3><p>登陆成功后，界面上会显示密码 <code>TWDH!</code>。这个密码去掉惊叹号可用于游戏中 Hoorn 医生的账户登陆。不去掉则可通过网站中的管理员登陆入口进行登陆。<br><img src="/2021/06/08/WhiteDoor/26.jpg" alt></p>
<p><strong>输入密码后，白门正中央的地板下陷，缓缓出现的不仅是地下室的入口，也是锈湖组织隐藏多年的秘密…</strong></p>
<h2 id="地下室"><a href="#地下室" class="headerlink" title="地下室"></a>地下室</h2><p>地下室里有十间牢房，白门一直在利用心理治疗作为幌子，暗中囚禁病人，进行实验，提取记忆。</p>
<h2 id="网站后台"><a href="#网站后台" class="headerlink" title="网站后台"></a>网站后台</h2><p>通过网站的 <code>Doctor Login</code> 模块进入到登陆页面。输入 Hoorn 医生的账号（<code>T_Hoorn</code>）和密码（<code>TWDH!</code>）进行登陆。</p>
<p><img src="/2021/06/08/WhiteDoor/27.jpg" alt></p>
<p>后台包括两个模块，分别是 <code>病人档案</code> 和 <code>方块定位器</code>。</p>
<h3 id="病人档案"><a href="#病人档案" class="headerlink" title="病人档案"></a>病人档案</h3><p><img src="/2021/06/08/WhiteDoor/28.jpg" alt></p>
<p>除去已被 Lucy 解救的 Robert Hill，还有10人的档案。</p>
<h3 id="方块定位器"><a href="#方块定位器" class="headerlink" title="方块定位器"></a>方块定位器</h3><p><img src="/2021/06/08/WhiteDoor/29.jpg" alt></p>
<p>除了 Robert Hill 的方块已被 Lucy 解锁外，其他人的方块散落世界各地，即图中红点出现的位置。我们的任务就是根据病人档案里的信息找到这10个散落在世界各地的方块。</p>
<h2 id="寻找方块"><a href="#寻找方块" class="headerlink" title="寻找方块"></a>寻找方块</h2><h3 id="London-–-Susan-Fisher"><a href="#London-–-Susan-Fisher" class="headerlink" title="London – Susan Fisher"></a>London – Susan Fisher</h3><h4 id="录音文件"><a href="#录音文件" class="headerlink" title="录音文件"></a>录音文件</h4><p>I left something for you at the cafe, you know what’s to go.</p>
<h4 id="病历和字母图"><a href="#病历和字母图" class="headerlink" title="病历和字母图"></a>病历和字母图</h4><p><strong>病历</strong><br><img src="/2021/06/08/WhiteDoor/30.jpg" alt></p>
<p><strong>字母图</strong><br><img src="/2021/06/08/WhiteDoor/31.jpg" alt></p>
<p>病历和字母图两张图片具有相同的大小，尝试将两张图片进行1:1的融合，得到下图。<br><img src="/2021/06/08/WhiteDoor/32.jpg" alt></p>
<p>将字母图中的字母按从上到下的顺序读取，得到字母字符串：<code>PTIVALMQSUSANFPIOSVXGHERUBYV</code>。我们可以发现里面其实隐藏着一句 <code>I AM SUSAN FISHER</code>，找到字母表中这些字符在病历上对应位置的字母，得到 <code>159 Great Dovers</code></p>
<p>至于融合方法，我使用了自己编写的脚本(#^.^#)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 脚本名称：weight_add.py</span></span><br><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">process</span><span class="params">(inputImgPath1, inputImgPath2, outputImgPath, alpha)</span>:</span></span><br><span class="line">    img1 = cv.imread(inputImgPath1)</span><br><span class="line">    img2 = cv.imread(inputImgPath2)</span><br><span class="line">    c = float(alpha)</span><br><span class="line"></span><br><span class="line">    targetImg = cv.addWeighted(img1, c, img2, <span class="number">1</span> - c, <span class="number">0</span>)</span><br><span class="line">    cv.imwrite(outputImgPath,targetImg)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    params = <span class="string">""</span></span><br><span class="line">    <span class="keyword">for</span> arg <span class="keyword">in</span> sys.argv[<span class="number">1</span>:]:</span><br><span class="line">        params = params + <span class="string">","</span> + <span class="string">f"'<span class="subst">&#123;arg&#125;</span>'"</span></span><br><span class="line">    params = params[<span class="number">1</span>:]</span><br><span class="line">    loc = <span class="string">f"process(<span class="subst">&#123;params&#125;</span>)"</span></span><br><span class="line">    exec(loc)</span><br></pre></td></tr></table></figure>

<p>运行脚本命令</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># medical.jpg是病历图，letter.jpg是字母图，结果存储在result.jpg中，最后一个参数是融合比例。</span></span><br><span class="line">python weight_add.py imgs/medical.jpg imgs/letter.jpg imgs/result.jpg 0.5</span><br></pre></td></tr></table></figure>

<h4 id="159-Great-Dovers"><a href="#159-Great-Dovers" class="headerlink" title="159 Great Dovers"></a>159 Great Dovers</h4><p>通过谷歌地图，我们找到了这个地方。<br><img src="/2021/06/08/WhiteDoor/33.jpg" alt></p>
<p>根据录音，可以猜测黑盒子应该是放在这条街道附近的某一个咖啡厅里。</p>
<p><img src="/2021/06/08/WhiteDoor/34.jpg" alt></p>
<p>很幸运，第一个黑盒子被找到了。<br><img src="/2021/06/08/WhiteDoor/35.jpg" alt></p>
<h3 id="Moscow-Yuliana-Kazantseva"><a href="#Moscow-Yuliana-Kazantseva" class="headerlink" title="Moscow Yuliana_Kazantseva"></a>Moscow Yuliana_Kazantseva</h3><h4 id="录音文件-1"><a href="#录音文件-1" class="headerlink" title="录音文件"></a>录音文件</h4><p>是一段莫斯密码，翻译过来是 <code>the cube can be found in the bar, be careful</code>。</p>
<h4 id="熊"><a href="#熊" class="headerlink" title="熊"></a>熊</h4><p>病人档案里有一张熊的照片，结合录音文件，猜测黑盒子在一家与熊有关的酒吧里。</p>
<p><img src="/2021/06/08/WhiteDoor/36.jpg" alt></p>
<h4 id="搜寻"><a href="#搜寻" class="headerlink" title="搜寻"></a>搜寻</h4><p>在谷歌地图上搜索 <code>Bear Pub</code> 关键字，最后只有一家符合条件的酒吧 – <code>Guns &amp; Bears Pub</code><br><img src="/2021/06/08/WhiteDoor/38.jpg" alt></p>
<p>而且在它的室内街景图中，找到了病历答案中的徽章墙，第二个黑盒子，找到！<br><img src="/2021/06/08/WhiteDoor/37.jpg" alt></p>
<h3 id="Milan-–-Giulio-Trentino"><a href="#Milan-–-Giulio-Trentino" class="headerlink" title="Milan – Giulio Trentino"></a>Milan – Giulio Trentino</h3><h4 id="录音文件-2"><a href="#录音文件-2" class="headerlink" title="录音文件"></a>录音文件</h4><p>这个病人是一个意大利人，它的录音也是意大利语。经过翻译之后是：“嗨。是我。我把它送到了我们谈过的地方，安娜丽莎博士办公室前面的那个。问问费德里科，他知道立方体在哪里。谢谢，朱利奥会为你感到骄傲。”</p>
<h4 id="Giuseppe-Govone"><a href="#Giuseppe-Govone" class="headerlink" title="Giuseppe Govone"></a>Giuseppe Govone</h4><p>档案中有一张图片，经过识图搜索后发现是 <code>Giuseppe Govone</code>。</p>
<p><img src="/2021/06/08/WhiteDoor/39.jpg" alt></p>
<p>又根据图片左上角的 <code>31</code>，猜测地点可能包含 <code>Giuseppe Govone</code> 和 <code>31</code> 两个关键字，通过谷歌地图在米兰境内搜索带这两个关键字的地点。</p>
<p>方块就在 Giuseppe Govone街31号的 Titan 仓库中。第三个方块找到。<br><img src="/2021/06/08/WhiteDoor/40.jpg" alt></p>
<h3 id="Montreal-–-Leonie-Poisson"><a href="#Montreal-–-Leonie-Poisson" class="headerlink" title="Montreal – Leonie Poisson"></a>Montreal – Leonie Poisson</h3><p>这个比较难，需要慢慢比对档案中图片和谷歌地图中的图片。其中档案中包含一则漫画，是关键点，因为最终放置黑盒子的地方就是一家漫画店，搜索关键词应该是 <code>comic bookshop</code></p>
<p><strong>未完待续。。。</strong></p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>游戏 B站</tag>
      </tags>
  </entry>
  <entry>
    <title>[daily daily]2022-01-11~2022-01-14</title>
    <url>/2022/01/12/daily-daily-2022-01-11-2022-01-14/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote class="blockquote-center">
<p>My Flow Record during 2022-01-11 to 2022-01-14 ^ _ ^ </p>

</blockquote>
<a id="more"></a>

<h1 id="2022-01-11"><a href="#2022-01-11" class="headerlink" title="2022-01-11"></a>2022-01-11</h1><p>Last day, I asked Professor Chen the question “When could I go home?”. In the moring today, I get the answer “Within five days before Spring Festival”. It is sad. I don’t want to work, but I need to work.</p>
<p>In addition, I need to change my ticket of bullet train from 19th to 25th. It is also sad, because I only refund successfully, but buying new ticket failed. ZhiXing, the software to buy ticket, should be blamed for the sad thing.</p>
<p>Rpeatly attempts for ticket wasted lots of time of mine. It was an inefficient morning. The only bussiness thing I did was watching a video explaining the paper in the bilibili.</p>
<p>It is about video generation. Sounds like a variation or advanced modification of VQ-VAE, which means “Vector Quantization - Variant Auto Encoder”. The core idea is use 3 different scales to quantize.</p>
<p>In the afternoon, I read some code about seq2seq. It is cloned in the <a href="https://github.com/bentrevett/pytorch-seq2seq" target="_blank" rel="noopener">guthub</a>. Overall, it has 6 chapters. I was reading chapter1.</p>
<p>The overall architecture of <strong>seq2seq</strong> is <strong>encoder-decoder</strong>. Both encoder and decoder are composed of RNN or variant RNN(e.g. LSTM).</p>
<p>In the evening, I took part in a massive NUCLEIC acid screening till 8:30pm. After that, I browsed website(specially ZhiHu) for a long while. Then, chatting with some old classmates. Finnaly, I went back to dormitory, watching American TV serias, specially “The Good Doctor” utils 2:00am in the next day.</p>
<p>What a decadent day!!!</p>
<h1 id="2022-01-12"><a href="#2022-01-12" class="headerlink" title="2022-01-12"></a>2022-01-12</h1><p>My Plan:</p>
<ul>
<li><input checked disabled type="checkbox"> Finish the code reading of <strong>seq2seq</strong>, unscramble ipynb tutorial to python script.</li>
</ul>
<p>Good news, in the morning, I got my new bullet ticket of 26th in the app 12306. </p>
<p>Sometimes I think the Win11 is very slow, I want to restore it back to Win10. But I found it is very tedious if the update of Win11 has been updated more than a week. So I gave up. And another question, if I add Ubuntu as the second operating system, what benefit I will get? Should I do this work?</p>
<p>Today I knew a new python package named <strong>spaCy</strong>, which provides lots of models with <strong>tagging</strong>, <strong>parsing</strong>, <strong>lemmatization</strong> and <strong>named entity recognition</strong>. I can download models whatever I want from this <a href="https://github.com/explosion/spacy-models" target="_blank" rel="noopener">webpage</a>. And the corresponding document is <a href="https://spacy.io/usage/models" target="_blank" rel="noopener">there</a></p>
<p><strong>Dependency Syntactic Parsing</strong>, one import part in NLP domain. I’d love to figure out what it is to make up my poor undestanding in class. “Dependency” is a realtionship between words which is unequal. In this relationship, one party is the <strong>governor/regent/head</strong>, while another party is <strong>modifier/subordinate/dependent</strong>. So, Dependency Analyze is to analyze the relationship of words in the same sentence.</p>
<p>Parameter List about some function in <code>torch.nn</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">'''torch.nn.Embedding</span></span><br><span class="line"><span class="string">    - num_embeddings: normally the input dim</span></span><br><span class="line"><span class="string">    - embedding_dim</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''torch.nn.LSTM</span></span><br><span class="line"><span class="string">    - input_size: the dimension of input. Normally the dimension of embedding dim.</span></span><br><span class="line"><span class="string">    - hidden_size: the dimension of hidden unit.</span></span><br><span class="line"><span class="string">    - num_layers: the number of RNN layers</span></span><br><span class="line"><span class="string">    - bias: default=True</span></span><br><span class="line"><span class="string">    - batch_first: default=False. </span></span><br><span class="line"><span class="string">        Normally the shape of input is (batch_size, seq_length, embedding_dim).</span></span><br><span class="line"><span class="string">        So we would better exchange batch_size and seq_length.</span></span><br><span class="line"><span class="string">    - dropout: default 0</span></span><br><span class="line"><span class="string">    - bidirectional, default=False</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''torch.nn.Linear</span></span><br><span class="line"><span class="string">    - in_features</span></span><br><span class="line"><span class="string">    - out_features</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure>

<h1 id="2022-01-13"><a href="#2022-01-13" class="headerlink" title="2022-01-13"></a>2022-01-13</h1><p>My Plan:</p>
<ul>
<li><input checked disabled type="checkbox"> Finish the code reading of <strong>seq2seq</strong>, unscramble ipynb tutorial to python script.</li>
</ul>
<p>In the morning, when I downloaded WhatsAPP again, I found mango is no more there any more. It is sad, so I deleted it again. </p>
<h1 id="2022-01-14"><a href="#2022-01-14" class="headerlink" title="2022-01-14"></a>2022-01-14</h1><p>Watering…</p>
]]></content>
      <tags>
        <tag>diary</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo添加音乐链接</title>
    <url>/2021/05/26/hexo%E6%B7%BB%E5%8A%A0%E9%9F%B3%E4%B9%90%E9%93%BE%E6%8E%A5/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote class="blockquote-center">
<p>为hexo博客添加音乐链接 ^ _ ^<br><img src="/2021/05/26/hexo%E6%B7%BB%E5%8A%A0%E9%9F%B3%E4%B9%90%E9%93%BE%E6%8E%A5/1.jpg" alt></p>

</blockquote>

<a id="more"></a>

<h1 id="下载hexo音乐播放插件"><a href="#下载hexo音乐播放插件" class="headerlink" title="下载hexo音乐播放插件"></a>下载hexo音乐播放插件</h1><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">npm install hexo-tag-aplayer --save</span><br></pre></td></tr></table></figure>

<h1 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h1><h2 id="Step1-获取音乐的链接"><a href="#Step1-获取音乐的链接" class="headerlink" title="Step1 : 获取音乐的链接"></a>Step1 : 获取音乐的链接</h2><p><img src="/2021/05/26/hexo%E6%B7%BB%E5%8A%A0%E9%9F%B3%E4%B9%90%E9%93%BE%E6%8E%A5/2.jpg" alt></p>
<p>打开<strong>网易云网站</strong>，找到希望添加的歌曲id，比如这首没有理想的人不伤心是<strong>1305364671</strong>。<br>这首歌对应的外链地址就是：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;music.163.com&#x2F;song&#x2F;media&#x2F;outer&#x2F;url?id&#x3D;1305364671.mp3</span><br></pre></td></tr></table></figure>

<h2 id="Step2-获取封面图片的链接"><a href="#Step2-获取封面图片的链接" class="headerlink" title="Step2 : 获取封面图片的链接"></a>Step2 : 获取封面图片的链接</h2><p><img src="/2021/05/26/hexo%E6%B7%BB%E5%8A%A0%E9%9F%B3%E4%B9%90%E9%93%BE%E6%8E%A5/3.jpg" alt></p>
<ul>
<li>在图片处右键，然后检查图片</li>
<li>找到 img 结点，获取它的 src 值，即为图片链接</li>
</ul>
<h2 id="Step3-获取歌词"><a href="#Step3-获取歌词" class="headerlink" title="Step3 : 获取歌词"></a>Step3 : 获取歌词</h2><p>在浏览器中输入以下网址：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 其中 id 是 Step1 中获取到的歌曲链接</span><br><span class="line">http:&#x2F;&#x2F;music.163.com&#x2F;api&#x2F;song&#x2F;media?id&#x3D;1305364671</span><br></pre></td></tr></table></figure>

<p>得到如下页面：<br><img src="/2021/05/26/hexo%E6%B7%BB%E5%8A%A0%E9%9F%B3%E4%B9%90%E9%93%BE%E6%8E%A5/4.jpg" alt></p>
<p>但我们最后希望得到的是这样格式的歌词：<br><img src="/2021/05/26/hexo%E6%B7%BB%E5%8A%A0%E9%9F%B3%E4%B9%90%E9%93%BE%E6%8E%A5/5.jpg" alt></p>
<p>所以我写了一个python脚本来对它进行处理</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_html</span><span class="params">(url)</span>:</span></span><br><span class="line">    <span class="comment"># 模仿浏览器的headers</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">"user-agent"</span>: <span class="string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.114 Safari/537.36"</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    response = requests.get(url,headers=headers)</span><br><span class="line">    lyric = response.json()[<span class="string">'lyric'</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">"lyric.txt"</span>, <span class="string">"w"</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(lyric)</span><br><span class="line">    print(<span class="string">"done"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    get_html(<span class="string">"http://music.163.com/api/song/media?id=1305364671"</span>)</span><br></pre></td></tr></table></figure>

<p>然后就得到了歌词文件：<br><img src="/2021/05/26/hexo%E6%B7%BB%E5%8A%A0%E9%9F%B3%E4%B9%90%E9%93%BE%E6%8E%A5/6.jpg" alt></p>
<h2 id="Step4-在博文中插入链接"><a href="#Step4-在博文中插入链接" class="headerlink" title="Step4 : 在博文中插入链接"></a>Step4 : 在博文中插入链接</h2><p>插入格式如下：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">&#123;% aplayerlrc "<span class="built_in">title</span>" "author" "url" ["picture_url", "narrow", "autoplay", "width:xxx"] %&#125;</span><br><span class="line">[xx:xx.xx]lrc here</span><br><span class="line">&#123;% endaplayerlrc %&#125;</span><br></pre></td></tr></table></figure>

<p><strong>标签参数</strong>：</p>
<ul>
<li>title : 歌曲名称</li>
<li>author : 歌曲作者</li>
<li>url : Step1 获取到的歌曲外链url地址</li>
<li>picture_url（封面|可选） : Step2 获取到的图片url地址</li>
<li>narrow: （可选）播放器袖珍风格</li>
<li>autoplay: (可选) 自动播放，移动端浏览器暂时不支持此功能</li>
<li>width:xxx:(可选) 播放器宽度(默认: 100%)</li>
</ul>
<p><strong>实例</strong></p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">&#123;% aplayerlrc "没有理想的人不伤心" "新裤子" "http://music.<span class="number">163</span>.com/song/media/outer/url?id=<span class="number">1305364671</span>.mp3" "http://p2.music.<span class="number">126</span>.<span class="built_in">net</span>/GW7sRVT4sfm8P0kwkMlQlg==/<span class="number">109951163522768092</span>.jpg?param=<span class="number">130</span>y130" %&#125;</span><br><span class="line">[<span class="number">00</span>:<span class="number">00</span>.<span class="number">00</span>]没有理想的人不伤心 声活版</span><br><span class="line">[<span class="number">00</span>:<span class="number">00</span>.<span class="number">00</span>]Remix by：卓越</span><br><span class="line"></span><br><span class="line">[<span class="number">00</span>:<span class="number">00</span>.<span class="number">00</span>]我最爱去的唱片店</span><br><span class="line">[<span class="number">00</span>:<span class="number">03</span>.<span class="number">15</span>]昨天是她的最后一天</span><br><span class="line">[<span class="number">00</span>:<span class="number">06</span>.<span class="number">96</span>]曾经让我陶醉的碎片</span><br><span class="line">[<span class="number">00</span>:<span class="number">10</span>.<span class="number">16</span>]全都散落在街边</span><br><span class="line"></span><br><span class="line">[<span class="number">00</span>:<span class="number">14</span>.<span class="number">31</span>]我最爱去的书店</span><br><span class="line">[<span class="number">00</span>:<span class="number">17</span>.<span class="number">76</span>]她也没撑过这个夏天</span><br><span class="line">[<span class="number">00</span>:<span class="number">21</span>.<span class="number">30</span>]回忆文字流淌着怀念</span><br><span class="line">[<span class="number">00</span>:<span class="number">24</span>.<span class="number">94</span>]可是已没什么好怀念</span><br><span class="line">[<span class="number">00</span>:<span class="number">28</span>.<span class="number">85</span>]可是你曾经的那些梦</span><br><span class="line">[<span class="number">00</span>:<span class="number">32</span>.<span class="number">38</span>]都已变得模糊看不见</span><br><span class="line">[<span class="number">00</span>:<span class="number">35</span>.<span class="number">92</span>]那些为了理想的战斗</span><br><span class="line">[<span class="number">00</span>:<span class="number">39</span>.<span class="number">66</span>]也不过为了钱</span><br><span class="line">[<span class="number">00</span>:<span class="number">43</span>.<span class="number">28</span>]可是我最恨的那个人</span><br><span class="line">[<span class="number">00</span>:<span class="number">47</span>.<span class="number">40</span>]他始终没死在我面前</span><br><span class="line">[<span class="number">00</span>:<span class="number">50</span>.<span class="number">85</span>]还没年轻就变得苍老</span><br><span class="line">[<span class="number">00</span>:<span class="number">54</span>.<span class="number">52</span>]这一生无解</span><br><span class="line"></span><br><span class="line">[<span class="number">00</span>:<span class="number">56</span>.<span class="number">87</span>]没有我的空间</span><br><span class="line">[<span class="number">01</span>:<span class="number">01</span>.<span class="number">82</span>]没有我的空间</span><br><span class="line">[<span class="number">01</span>:<span class="number">05</span>.<span class="number">52</span>]没有我的空间</span><br><span class="line">[<span class="number">01</span>:<span class="number">09</span>.<span class="number">39</span>]没有我的空间</span><br><span class="line"></span><br><span class="line">[<span class="number">01</span>:<span class="number">12</span>.<span class="number">90</span>]你曾热爱的那个人</span><br><span class="line">[<span class="number">01</span>:<span class="number">16</span>.<span class="number">75</span>]这一生也不会再见面</span><br><span class="line">[<span class="number">01</span>:<span class="number">20</span>.<span class="number">41</span>]你等在这文化的废墟上</span><br><span class="line">[<span class="number">01</span>:<span class="number">24</span>.<span class="number">08</span>]已没人觉得你狂野</span><br><span class="line">[<span class="number">01</span>:<span class="number">27</span>.<span class="number">83</span>]那些让人敬仰的神殿</span><br><span class="line">[<span class="number">01</span>:<span class="number">31</span>.<span class="number">51</span>]只在无知的人心中灵验</span><br><span class="line">[<span class="number">01</span>:<span class="number">33</span>.<span class="number">07</span>](旁白：大家晚上好，这里是正在直播的午夜新闻 欢迎收看)</span><br><span class="line">[<span class="number">01</span>:<span class="number">36</span>.<span class="number">11</span>]我住在属于我的猪圈</span><br><span class="line">[<span class="number">01</span>:<span class="number">39</span>.<span class="number">02</span>]这一夜无眠</span><br><span class="line"></span><br><span class="line">[<span class="number">01</span>:<span class="number">41</span>.<span class="number">59</span>]我不要在失败孤独中死去</span><br><span class="line">[<span class="number">01</span>:<span class="number">46</span>.<span class="number">05</span>]我不要一直活在地下里</span><br><span class="line">[<span class="number">01</span>:<span class="number">49</span>.<span class="number">49</span>]物质的骗局</span><br><span class="line">[<span class="number">01</span>:<span class="number">51</span>.<span class="number">90</span>]匆匆的蚂蚁</span><br><span class="line">[<span class="number">01</span>:<span class="number">53</span>.<span class="number">63</span>]没有文化的人不伤心</span><br><span class="line">[<span class="number">01</span>:<span class="number">57</span>.<span class="number">05</span>]我不要在失败孤独中死去</span><br><span class="line">[<span class="number">02</span>:<span class="number">00</span>.<span class="number">53</span>]我不要一直活在地下里</span><br><span class="line">[<span class="number">02</span>:<span class="number">04</span>.<span class="number">28</span>]物质的骗局</span><br><span class="line">[<span class="number">02</span>:<span class="number">06</span>.<span class="number">75</span>]匆匆的蚂蚁</span><br><span class="line">[<span class="number">02</span>:<span class="number">08</span>.<span class="number">68</span>]没有文化的人不伤心</span><br><span class="line">[<span class="number">02</span>:<span class="number">11</span>.<span class="number">80</span>]他不伤心</span><br><span class="line"></span><br><span class="line">[<span class="number">02</span>:<span class="number">24</span>.<span class="number">60</span>]（背景音：欢迎乘坐武汉轨道交通<span class="number">4</span>号线 本次列车终点站黄金口）</span><br><span class="line"></span><br><span class="line">[<span class="number">02</span>:<span class="number">28</span>.<span class="number">24</span>]我最爱去的唱片店</span><br><span class="line">[<span class="number">02</span>:<span class="number">30</span>.<span class="number">87</span>]昨天是她的最后一天</span><br><span class="line">[<span class="number">02</span>:<span class="number">34</span>.<span class="number">51</span>]曾经让我陶醉的碎片</span><br><span class="line">[<span class="number">02</span>:<span class="number">38</span>.<span class="number">00</span>]全都散落在街边</span><br><span class="line"></span><br><span class="line">[<span class="number">02</span>:<span class="number">42</span>.<span class="number">30</span>]我最爱去的书店</span><br><span class="line">[<span class="number">02</span>:<span class="number">45</span>.<span class="number">42</span>]她也没撑过这个夏天</span><br><span class="line">[<span class="number">02</span>:<span class="number">49</span>.<span class="number">07</span>]回忆文字流淌着怀念</span><br><span class="line">[<span class="number">02</span>:<span class="number">53</span>.<span class="number">01</span>]已不能怀念</span><br><span class="line"></span><br><span class="line">[<span class="number">02</span>:<span class="number">55</span>.<span class="number">85</span>]我不要在失败孤独中死去</span><br><span class="line">[<span class="number">02</span>:<span class="number">59</span>.<span class="number">61</span>]我不要一直活在地下里</span><br><span class="line">[<span class="number">03</span>:<span class="number">03</span>.<span class="number">46</span>]物质的骗局</span><br><span class="line">[<span class="number">03</span>:<span class="number">05</span>.<span class="number">76</span>]匆匆的蚂蚁</span><br><span class="line">[<span class="number">03</span>:<span class="number">07</span>.<span class="number">64</span>]没有文化的人不伤心</span><br><span class="line">[<span class="number">03</span>:<span class="number">11</span>.<span class="number">02</span>]我不要在失败孤独中死去</span><br><span class="line">[<span class="number">03</span>:<span class="number">14</span>.<span class="number">39</span>]我不要一直活在地下里</span><br><span class="line">[<span class="number">03</span>:<span class="number">17</span>.<span class="number">91</span>]物质的骗局</span><br><span class="line">[<span class="number">03</span>:<span class="number">20</span>.<span class="number">46</span>]匆匆的蚂蚁</span><br><span class="line">[<span class="number">03</span>:<span class="number">22</span>.<span class="number">58</span>]没有文化的人不伤心</span><br><span class="line">[<span class="number">03</span>:<span class="number">25</span>.<span class="number">58</span>]他不会伤心</span><br><span class="line">[<span class="number">03</span>:<span class="number">29</span>.<span class="number">54</span>]他不会伤心</span><br><span class="line">[<span class="number">03</span>:<span class="number">33</span>.<span class="number">02</span>]他不会伤心</span><br><span class="line">[<span class="number">03</span>:<span class="number">36</span>.<span class="number">70</span>]他不会伤心</span><br><span class="line">[<span class="number">03</span>:<span class="number">40</span>.<span class="number">79</span>]他也会伤心</span><br><span class="line">[<span class="number">03</span>:<span class="number">43</span>.<span class="number">47</span>]他也会伤心</span><br><span class="line">[<span class="number">03</span>:<span class="number">47</span>.<span class="number">62</span>]他也会伤心</span><br><span class="line">[<span class="number">03</span>:<span class="number">51</span>.<span class="number">72</span>]伤心</span><br><span class="line"></span><br><span class="line">[<span class="number">04</span>:<span class="number">12</span>.<span class="number">15</span>]我最爱去的唱片店</span><br><span class="line">[<span class="number">04</span>:<span class="number">14</span>.<span class="number">23</span>]昨天是她的最后一天</span><br><span class="line">[<span class="number">04</span>:<span class="number">17</span>.<span class="number">95</span>]曾经让我陶醉的碎片</span><br><span class="line">[<span class="number">04</span>:<span class="number">21</span>.<span class="number">55</span>]全都散落在街边</span><br><span class="line">[<span class="number">04</span>:<span class="number">26</span>.<span class="number">17</span>]</span><br><span class="line">[<span class="number">04</span>:<span class="number">28</span>.<span class="number">81</span>]Presented By Levi’s®</span><br><span class="line">&#123;% endaplayerlrc %&#125;</span><br></pre></td></tr></table></figure>

<p><strong>效果</strong></p>
<div id="aplayer-uEYzIMmk" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;">
				<pre class="aplayer-lrc-content">[00:00.00]没有理想的人不伤心 声活版
[00:00.00]Remix by：卓越

[00:00.00]我最爱去的唱片店
[00:03.15]昨天是她的最后一天
[00:06.96]曾经让我陶醉的碎片
[00:10.16]全都散落在街边

[00:14.31]我最爱去的书店
[00:17.76]她也没撑过这个夏天
[00:21.30]回忆文字流淌着怀念
[00:24.94]可是已没什么好怀念
[00:28.85]可是你曾经的那些梦
[00:32.38]都已变得模糊看不见
[00:35.92]那些为了理想的战斗
[00:39.66]也不过为了钱
[00:43.28]可是我最恨的那个人
[00:47.40]他始终没死在我面前
[00:50.85]还没年轻就变得苍老
[00:54.52]这一生无解

[00:56.87]没有我的空间
[01:01.82]没有我的空间
[01:05.52]没有我的空间
[01:09.39]没有我的空间

[01:12.90]你曾热爱的那个人
[01:16.75]这一生也不会再见面
[01:20.41]你等在这文化的废墟上
[01:24.08]已没人觉得你狂野
[01:27.83]那些让人敬仰的神殿
[01:31.51]只在无知的人心中灵验
[01:33.07](旁白：大家晚上好，这里是正在直播的午夜新闻 欢迎收看)
[01:36.11]我住在属于我的猪圈
[01:39.02]这一夜无眠

[01:41.59]我不要在失败孤独中死去
[01:46.05]我不要一直活在地下里
[01:49.49]物质的骗局
[01:51.90]匆匆的蚂蚁
[01:53.63]没有文化的人不伤心
[01:57.05]我不要在失败孤独中死去
[02:00.53]我不要一直活在地下里
[02:04.28]物质的骗局
[02:06.75]匆匆的蚂蚁
[02:08.68]没有文化的人不伤心
[02:11.80]他不伤心

[02:24.60]（背景音：欢迎乘坐武汉轨道交通4号线 本次列车终点站黄金口）

[02:28.24]我最爱去的唱片店
[02:30.87]昨天是她的最后一天
[02:34.51]曾经让我陶醉的碎片
[02:38.00]全都散落在街边

[02:42.30]我最爱去的书店
[02:45.42]她也没撑过这个夏天
[02:49.07]回忆文字流淌着怀念
[02:53.01]已不能怀念

[02:55.85]我不要在失败孤独中死去
[02:59.61]我不要一直活在地下里
[03:03.46]物质的骗局
[03:05.76]匆匆的蚂蚁
[03:07.64]没有文化的人不伤心
[03:11.02]我不要在失败孤独中死去
[03:14.39]我不要一直活在地下里
[03:17.91]物质的骗局
[03:20.46]匆匆的蚂蚁
[03:22.58]没有文化的人不伤心
[03:25.58]他不会伤心
[03:29.54]他不会伤心
[03:33.02]他不会伤心
[03:36.70]他不会伤心
[03:40.79]他也会伤心
[03:43.47]他也会伤心
[03:47.62]他也会伤心
[03:51.72]伤心

[04:12.15]我最爱去的唱片店
[04:14.23]昨天是她的最后一天
[04:17.95]曾经让我陶醉的碎片
[04:21.55]全都散落在街边
[04:26.17]
[04:28.81]Presented By Levi’s®</pre>
			</div>
			<script>
				var ap = new APlayer({
					element: document.getElementById("aplayer-uEYzIMmk"),
					narrow: false,
					autoplay: false,
					showlrc: 2,
					music: {
						title: "没有理想的人不伤心",
						author: "新裤子",
						url: "http://music.163.com/song/media/outer/url?id=1305364671.mp3",
						pic: "http://p2.music.126.net/GW7sRVT4sfm8P0kwkMlQlg==/109951163522768092.jpg?param=130y130",
					}
				});
				window.aplayers || (window.aplayers = []);
				window.aplayers.push(ap);
			</script>

<h1 id="遗留问题"><a href="#遗留问题" class="headerlink" title="遗留问题"></a>遗留问题</h1><ol>
<li>此方法只能使用网易云的外链，对于其他平台的音乐则不行。</li>
<li>无法播放本地音乐文件，似乎只能用url。</li>
</ol>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>某博主的文章：<a href="https://donlex.cn/archives/bda67445.html" target="_blank" rel="noopener">https://donlex.cn/archives/bda67445.html</a></p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo添加视频</title>
    <url>/2021/06/15/hexo%E6%B7%BB%E5%8A%A0%E8%A7%86%E9%A2%91/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote class="blockquote-center">
<p>^ _ ^ </p>

</blockquote>
<a id="more"></a>

<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>我写<a href>做个端午节小视频</a>那篇文章的时候想往博文里添加视频，于是在网上搜了添加视频的方法，没想到竟出人意料的简单。</p>
<h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><p><strong>Step1</strong><br>将需要显示的视频放到该篇博文对应的目录下，比如 <strong>A.md</strong> 对应 <strong>A</strong> 目录。</p>
<p><strong>Step2</strong><br>在博文中你需要添加视频的地方添加以下代码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% raw %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">src</span>=<span class="string">'xxx.mp4'</span> <span class="attr">type</span>=<span class="string">'video/mp4'</span> <span class="attr">controls</span>=<span class="string">'controls'</span> <span class="attr">width</span>=<span class="string">'100%'</span> <span class="attr">height</span>=<span class="string">'100%'</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line">&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>new_article</title>
    <url>/2020/01/07/new-article/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>This is a test article.<br>I start hexo in 2020-01-07.</p>
]]></content>
  </entry>
  <entry>
    <title>nodejs学习</title>
    <url>/2021/06/05/nodejs%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote class="blockquote-center">
<p>^ _ ^ </p>

</blockquote>
<a id="more"></a>

<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>简单的说 Node.js 就是运行在服务端的 JavaScript。Node.js 是一个基于Chrome JavaScript 运行时建立的一个平台。Node.js是一个事件驱动I/O服务端JavaScript环境，基于Google的V8引擎，V8引擎执行Javascript的速度非常快，性能非常好。</p>
<p>我们可以使用以下命令来查看当前的 Node 版本：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">&gt; node -v</span><br><span class="line">v10.<span class="number">15</span>.<span class="number">3</span></span><br></pre></td></tr></table></figure>

<h1 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h1><p>NPM是随同NodeJS一起安装的包管理工具，能解决NodeJS代码部署上的很多问题，常见的使用场景有以下几种：</p>
<ul>
<li>允许用户从NPM服务器下载别人编写的第三方包到本地使用</li>
<li>允许用户从NPM服务器下载并安装别人编写的命令行程序到本地使用</li>
<li>允许用户将自己编写的包或命令行程序上传到NPM服务器供别人使用</li>
</ul>
<p>由于新版的nodejs已经集成了npm，所以之前npm也一并安装好了。可以通过输入 “npm -v” 来测试是否成功安装：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">&gt; npm -v</span><br><span class="line"><span class="number">6</span>.<span class="number">4</span>.<span class="number">1</span></span><br></pre></td></tr></table></figure>

<h2 id="安装模块"><a href="#安装模块" class="headerlink" title="安装模块"></a>安装模块</h2><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">npm install &lt;Module Name&gt;</span><br></pre></td></tr></table></figure>

<p><strong>全局安装与本地安装</strong></p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">npm install express      # 本地安装</span><br><span class="line">npm install express -g   # 全局安装</span><br></pre></td></tr></table></figure>
<ul>
<li>本地安装：将安装包放在 ./node_modules 下（运行 npm 命令时所在的目录），如果没有 node_modules 目录，会在当前执行 npm 命令的目录下生成 node_modules 目录。可以通过 require() 来引入本地安装的包。</li>
<li>全局安装：将安装包放在node 的安装目录。可以直接在命令行里使用。</li>
</ul>
<h2 id="查看安装信息"><a href="#查看安装信息" class="headerlink" title="查看安装信息"></a>查看安装信息</h2><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">npm list &lt;Module Name&gt; [-g]</span><br></pre></td></tr></table></figure>

<h2 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h2><p>package.json 位于模块的目录下，用于定义包的属性。</p>
<ul>
<li>name - 包名。</li>
<li>version - 包的版本号。</li>
<li>description - 包的描述。</li>
<li>homepage - 包的官网 url 。</li>
<li>dependencies - 依赖包列表。如果依赖包没有安装，npm 会自动将依赖包安装在 node_module 目录下。</li>
<li>repository - 包代码存放的地方的类型，可以是 git 或 svn，git 可在 Github 上。</li>
<li>main - main 字段指定了程序的主入口文件，require(‘moduleName’) 就会加载这个文件。这个字段的默认值是模块根目录下面的 index.js。</li>
<li>keywords - 关键字</li>
</ul>
<h2 id="卸载模块"><a href="#卸载模块" class="headerlink" title="卸载模块"></a>卸载模块</h2><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">npm uninstall express</span><br></pre></td></tr></table></figure>

<h2 id="更新模块"><a href="#更新模块" class="headerlink" title="更新模块"></a>更新模块</h2><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">npm update express</span><br></pre></td></tr></table></figure>

<h2 id="搜索模块"><a href="#搜索模块" class="headerlink" title="搜索模块"></a>搜索模块</h2><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">npm search express</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>nodejs</category>
      </categories>
      <tags>
        <tag>nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title>书籍阅读[虚拟机设计与实现]</title>
    <url>/2021/01/04/%E4%B9%A6%E7%B1%8D%E9%98%85%E8%AF%BB-%E8%99%9A%E6%8B%9F%E6%9C%BA%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote class="blockquote-center">
<p>^ _ ^ </p>

</blockquote>
<a id="more"></a>

<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>书名全称为：虚拟机设计与实现（以JVM为例），为李晓峰所著。</p>
<h1 id="虚拟机简介"><a href="#虚拟机简介" class="headerlink" title="虚拟机简介"></a>虚拟机简介</h1><h2 id="什么是虚拟机"><a href="#什么是虚拟机" class="headerlink" title="什么是虚拟机"></a>什么是虚拟机</h2><p>百度百科上对于虚拟机的定义是：虚拟机（Virtual Machine）指通过软件模拟的具有完整硬件系统功能的、运行在一个完全隔离环境中的完整计算机系统。<br>但在本书中，将虚拟机分为了两类，一是<code>模拟器</code>，二是<code>语言运行时引擎</code>。</p>
<ul>
<li>模拟器又细分为两类<ul>
<li>一是提供完整计算机系统模拟的<code>完整指令架构(ISA)虚拟机</code>，符合百度百科的虚拟机定义</li>
<li>二是提供用户进程ABI模拟的<code>应用程序二进制接口(ABI)虚拟机</code></li>
</ul>
</li>
<li>语言运行时引擎也细分为两类<ul>
<li>一是<code>虚拟ISA虚拟机</code>。虚拟ISA通常定义了一套高层的、规模有限的ISA语言；提供的运行时引擎使虚拟ISA编码的应用程序在其上执行</li>
<li>二是<code>语言虚拟机</code>，提供一个运行时引擎来执行以客户语言编写的程序。程序通常以客户语言的源码形式提供给虚拟机，运行时引擎去解释或翻译程序，也就对应着<code>解释器</code>和<code>编译器</code></li>
</ul>
</li>
</ul>
<blockquote>
<p>作者提到，本书的主题是 <strong>语言运行时引擎</strong></p>
</blockquote>
<h2 id="为什么需要虚拟机"><a href="#为什么需要虚拟机" class="headerlink" title="为什么需要虚拟机"></a>为什么需要虚拟机</h2><ul>
<li>（计算机）安全性</li>
<li>（编程）效率</li>
<li>（应用程序）可移植性</li>
</ul>
<p><strong>安全语言的条件</strong></p>
<ul>
<li>内存安全：确保内存中某种类型的数据总是遵循对这种类型的限制。例如：指针变量永远不会持有非法指针，数组元素永远不会越界</li>
<li>运算安全：确保内存中某种数据的运行总是遵循对这种类型的限制。例如：指针变量不允许进行任意算术运算。</li>
<li>控制安全：确保代码的执行流既不会卡住也不会跑飞。例如：跳转到恶意代码。</li>
</ul>
<h2 id="虚拟机示例"><a href="#虚拟机示例" class="headerlink" title="虚拟机示例"></a>虚拟机示例</h2><ul>
<li>JavaScript引擎：存在于Web浏览器中，最早的JavaScript引擎是Mozilla Firefox的SpiderMonkey。2015年版本的JavaScript引擎工作步骤为：将JavaScript代码翻译为字节码形式的IR(Intermediate representation，中间表示)，然后调用IonMonkey把字节码编译为机器码。</li>
<li>Perl引擎：Perl虚拟机本质上是一个解释器，其工作步骤为：第一阶段将Perl源码翻译为一系列操作码（称为op code或者字节码），第二阶段一步步遍历op code序列来执行它们。<ul>
<li>一般传统脚本语言虚拟机就是类似Perl引擎的解释器</li>
<li>常见的脚本语言有：UNIX Shell、Windows PowerShell、Perl、Python、Ruby</li>
<li>脚本语言通常以“编写 -&gt; 执行”这样的交互方式使用。交互执行意味着程序执行一行代码，然后等待程序员输入下一行代码来执行。</li>
<li>脚本语言也常用于批量执行或自动执行一系列任务</li>
</ul>
</li>
<li>Android Java VM：Google Android是一种用于智能设备的操作系统。Android应用程序的主要编程语言是Java的一种变体。<ul>
<li>第一阶段Java程序被编译为JVM字节码；第二阶段JVM字节码被翻译为另一种形式的字节码，称为dex（Android应用程序以打包dex字节码的形式发布）。</li>
<li>智能设备执行Android程序时，需要虚拟机来执行dex代码<ul>
<li>Kitkat版本前的Android版本中，虚拟机名为Dalvik，它包含一个解释器以及一个即时编译器。其工作流程为：Dalvik首先用解释器执行dex代码，并维护一个计数器来记录同一dex代码片段的执行次数。当某一dex片段执行次数超过某一阈值时（说明该段代码频繁使用）。Dalvik就会调用编译器将这段代码编译为机器码，然后下次就可以直接执行机器码来提高性能</li>
<li>Kitkat版本后的Android版本中，虚拟机名为ART(Android Runtime)。ART在应用程序安装到设备上时就把dex代码编译为机器码，编译后的代码缓存在持久存储中，这种方法称为预编译AOT(Ahead Of Time)。ART用更长的安装时间换得了更快的应用程序启动</li>
</ul>
</li>
</ul>
</li>
<li>Apache Harmony：一个由Apache软件基金会和社区贡献者开发的一个开源Java实现。它包括一个名为动态运行层虚拟机的JVM实现。<ul>
<li>Apache Harmony项目本身已在2011终止</li>
<li>实现完整的Java平台，特别是那些大量的类库，需要巨大的工作量。但实现一个JVM则相对容易一些。据作者所知，已经有十几个声明对外发布的JVM实现，但独立的Java类库实现只有3个：OpenJDK、GNU Classpath、Apache Harmony。目前，OpenJDK库实现可能是唯一一个仍在活跃维护中的Java类库</li>
</ul>
</li>
</ul>
<h1 id="虚拟机的内部组成"><a href="#虚拟机的内部组成" class="headerlink" title="虚拟机的内部组成"></a>虚拟机的内部组成</h1><p>一个完整的语言实现通常至少包括3部分：</p>
<ul>
<li><strong>虚拟机</strong> ：对于JVM来说，就是字节码的运行时引擎</li>
<li><strong>语言库</strong> ：语言的核心库。除非是非常底层且非常原始的语言（比如针对某个特定处理器的汇编语言），否则一个常用语言的实现通常会把这个语言的核心库作为虚拟机的一部分包含进去。<ul>
<li>有时候，虚拟机不得不硬编码一些只能用于关联库的逻辑。例如，JVM不能没有库程序包java.lang</li>
<li>这是因为有些核心数据结构，如Java对象和Java类，依赖于程序包java.lang.Object以及java.lang.Class的定义</li>
</ul>
</li>
<li><strong>工具集</strong> ：为了应用某个语言开发程序，通常需要针对这个语言的工具集与虚拟机合作，以支持调试、性能分析、打包等等功能。</li>
</ul>
<h2 id="虚拟机核心组件"><a href="#虚拟机核心组件" class="headerlink" title="虚拟机核心组件"></a>虚拟机核心组件</h2><blockquote>
<p>同一语言的不同虚拟机实现可能在各个方面大有不同，但必须遵循并支持同一语言标准。因此，每个实现必须包含一系列功能类似的核心组件</p>
</blockquote>
<p>一个虚拟机的实现需要完成如下功能：</p>
<ul>
<li>把应用程序的代码加载到内存中（<code>加载器</code>），并把符号解析到内部地址（<code>动态链接器</code>）</li>
<li>执行程序操作（<code>执行引擎</code>）</li>
<li>管理各种计算资源，包括内存（<code>内存管理器</code>）和处理器（<code>线程调度器</code>）</li>
<li>为该语言不能直接访问的外部资源提某种访问方式（<code>语言扩展/本地接口</code>）</li>
</ul>
<h3 id="加载器与动态链接器"><a href="#加载器与动态链接器" class="headerlink" title="加载器与动态链接器"></a>加载器与动态链接器</h3>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>JVM</tag>
        <tag>虚拟机</tag>
      </tags>
  </entry>
  <entry>
    <title>人工智能-搜索算法</title>
    <url>/2021/09/17/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD-%E6%90%9C%E7%B4%A2%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote class="blockquote-center">
<p>^ _ ^ </p>

</blockquote>
<a id="more"></a>

<h1 id="Prerequisite"><a href="#Prerequisite" class="headerlink" title="Prerequisite"></a>Prerequisite</h1><h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><p>Firstly, you need to define the problem. It’s an abstract class for formal problem. You should subclass it and implements method of the class to fit different problem.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Problem</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, initial, goal=None)</span>:</span></span><br><span class="line">        <span class="string">"""initial means initial state"""</span></span><br><span class="line">        self.initial = initial</span><br><span class="line">        self.goal = goal</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">actions</span><span class="params">(self, state)</span>:</span></span><br><span class="line">        <span class="string">"""Return the actions that can be executed in the given</span></span><br><span class="line"><span class="string">        state. The result would typically be a list, but if there are</span></span><br><span class="line"><span class="string">        many actions, consider yielding them one at a time in an</span></span><br><span class="line"><span class="string">        iterator, rather than building them all at once."""</span></span><br><span class="line">        <span class="keyword">raise</span> NotImplementedError</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">result</span><span class="params">(self, state, action)</span>:</span></span><br><span class="line">        <span class="string">"""Return the state that results from executing the given</span></span><br><span class="line"><span class="string">        action in the given state. The action must be one of</span></span><br><span class="line"><span class="string">        self.actions(state)."""</span></span><br><span class="line">        <span class="keyword">raise</span> NotImplementedError</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">goal_test</span><span class="params">(self, state)</span>:</span></span><br><span class="line">        <span class="string">"""Return True if the state is a goal. """</span></span><br><span class="line">        <span class="keyword">if</span> isinstance(self.goal, list):</span><br><span class="line">            <span class="keyword">return</span> is_in(state, self.goal)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> state == self.goal</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">path_cost</span><span class="params">(self, c, state1, action, state2)</span>:</span></span><br><span class="line">        <span class="string">"""Return the cost of a solution path that arrives at state2 from</span></span><br><span class="line"><span class="string">        state1 via action"""</span></span><br><span class="line">        <span class="keyword">return</span> c + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">value</span><span class="params">(self, state)</span>:</span></span><br><span class="line">        <span class="string">"""For optimization problems, each state has a value. Hill Climbing</span></span><br><span class="line"><span class="string">        and related algorithms try to maximize this value."""</span></span><br><span class="line">        <span class="keyword">raise</span> NotImplementedError</span><br></pre></td></tr></table></figure>

<h2 id="Node"><a href="#Node" class="headerlink" title="Node"></a>Node</h2><p>Sometimes we only want to search to get an answer, sometimes we also want to keep the path that we can track back from destination to origin.So we can define <code>Node</code> class to realize path recording.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span>:</span></span><br><span class="line">    <span class="string">"""A node in a search tree. Contains a pointer to the parent (the node</span></span><br><span class="line"><span class="string">    that this is a successor of) and to the actual state for this node. Note</span></span><br><span class="line"><span class="string">    that if a state is arrived at by two paths, then there are two nodes with</span></span><br><span class="line"><span class="string">    the same state. Also includes the action that got us to this state, and</span></span><br><span class="line"><span class="string">    the total path_cost (also known as g) to reach the node. Other functions</span></span><br><span class="line"><span class="string">    may add an f and h value; see best_first_graph_search and astar_search for</span></span><br><span class="line"><span class="string">    an explanation of how the f and h values are handled. You will not need to</span></span><br><span class="line"><span class="string">    subclass this class."""</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, state, parent=None, action=None, path_cost=<span class="number">0</span>)</span>:</span></span><br><span class="line">        <span class="string">"""Create a search tree Node, derived from a parent by an action."""</span></span><br><span class="line">        self.state = state</span><br><span class="line">        self.parent = parent</span><br><span class="line">        self.action = action</span><br><span class="line">        self.path_cost = path_cost</span><br><span class="line">        self.depth = <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> parent:</span><br><span class="line">            self.depth = parent.depth + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"&lt;Node &#123;&#125;&gt;"</span>.format(self.state)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__lt__</span><span class="params">(self, node)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.state &lt; node.state</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">expand</span><span class="params">(self, problem)</span>:</span></span><br><span class="line">        <span class="string">"""List the nodes reachable in one step from this node."""</span></span><br><span class="line">        <span class="keyword">return</span> [self.child_node(problem, action)</span><br><span class="line">                <span class="keyword">for</span> action <span class="keyword">in</span> problem.actions(self.state)]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">child_node</span><span class="params">(self, problem, action)</span>:</span></span><br><span class="line">        <span class="string">"""[Figure 3.10]"""</span></span><br><span class="line">        next_state = problem.result(self.state, action)</span><br><span class="line">        next_node = Node(next_state, self, action, problem.path_cost(self.path_cost, self.state, action, next_state))</span><br><span class="line">        <span class="keyword">return</span> next_node</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">solution</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""Return the sequence of actions to go from the root to this node."""</span></span><br><span class="line">        <span class="keyword">return</span> [node.action <span class="keyword">for</span> node <span class="keyword">in</span> self.path()[<span class="number">1</span>:]]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">path</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""Return a list of nodes forming the path from the root to this node."""</span></span><br><span class="line">        node, path_back = self, []</span><br><span class="line">        <span class="keyword">while</span> node:</span><br><span class="line">            path_back.append(node)</span><br><span class="line">            node = node.parent</span><br><span class="line">        <span class="keyword">return</span> list(reversed(path_back))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># We want for a queue of nodes in breadth_first_graph_search or</span></span><br><span class="line">    <span class="comment"># astar_search to have no duplicated states, so we treat nodes</span></span><br><span class="line">    <span class="comment"># with the same state as equal. [Problem: this may not be what you</span></span><br><span class="line">    <span class="comment"># want in other contexts.]</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__eq__</span><span class="params">(self, other)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> isinstance(other, Node) <span class="keyword">and</span> self.state == other.state</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__hash__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># We use the hash value of the state</span></span><br><span class="line">        <span class="comment"># stored in the node instead of the node</span></span><br><span class="line">        <span class="comment"># object itself to quickly search a node</span></span><br><span class="line">        <span class="comment"># with the same state in a Hash Table</span></span><br><span class="line">        <span class="keyword">return</span> hash(self.state)</span><br></pre></td></tr></table></figure>

<h1 id="BFS"><a href="#BFS" class="headerlink" title="BFS"></a>BFS</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">breadth_first_tree_search</span><span class="params">(problem)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    [Figure 3.7]</span></span><br><span class="line"><span class="string">    Search the shallowest nodes in the search tree first.</span></span><br><span class="line"><span class="string">    Search through the successors of a problem to find a goal.</span></span><br><span class="line"><span class="string">    The argument frontier should be an empty queue.</span></span><br><span class="line"><span class="string">    Repeats infinitely in case of loops.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    frontier = deque([Node(problem.initial)])  <span class="comment"># FIFO queue</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> frontier:</span><br><span class="line">        node = frontier.popleft()</span><br><span class="line">        <span class="keyword">if</span> problem.goal_test(node.state):</span><br><span class="line">            <span class="keyword">return</span> node</span><br><span class="line">        frontier.extend(node.expand(problem))</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span></span><br></pre></td></tr></table></figure>

<h1 id="DFS"><a href="#DFS" class="headerlink" title="DFS"></a>DFS</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">depth_first_tree_search</span><span class="params">(problem)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    [Figure 3.7]</span></span><br><span class="line"><span class="string">    Search the deepest nodes in the search tree first.</span></span><br><span class="line"><span class="string">    Search through the successors of a problem to find a goal.</span></span><br><span class="line"><span class="string">    The argument frontier should be an empty queue.</span></span><br><span class="line"><span class="string">    Repeats infinitely in case of loops.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    frontier = [Node(problem.initial)]  <span class="comment"># Stack</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> frontier:</span><br><span class="line">        node = frontier.pop()</span><br><span class="line">        <span class="keyword">if</span> problem.goal_test(node.state):</span><br><span class="line">            <span class="keyword">return</span> node</span><br><span class="line">        frontier.extend(node.expand(problem))</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span></span><br></pre></td></tr></table></figure>

<h1 id="Graph-Based-DFS"><a href="#Graph-Based-DFS" class="headerlink" title="Graph-Based DFS"></a>Graph-Based DFS</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">depth_first_graph_search</span><span class="params">(problem)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    [Figure 3.7]</span></span><br><span class="line"><span class="string">    Search the deepest nodes in the search tree first.</span></span><br><span class="line"><span class="string">    Search through the successors of a problem to find a goal.</span></span><br><span class="line"><span class="string">    The argument frontier should be an empty queue.</span></span><br><span class="line"><span class="string">    Does not get trapped by loops.</span></span><br><span class="line"><span class="string">    If two paths reach a state, only use the first one.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    frontier = [(Node(problem.initial))]  <span class="comment"># Stack</span></span><br><span class="line"></span><br><span class="line">    explored = set()</span><br><span class="line">    <span class="keyword">while</span> frontier:</span><br><span class="line">        node = frontier.pop()</span><br><span class="line">        <span class="keyword">if</span> problem.goal_test(node.state):</span><br><span class="line">            <span class="keyword">return</span> node</span><br><span class="line">        explored.add(node.state)</span><br><span class="line">        frontier.extend(child <span class="keyword">for</span> child <span class="keyword">in</span> node.expand(problem)</span><br><span class="line">                        <span class="keyword">if</span> child.state <span class="keyword">not</span> <span class="keyword">in</span> explored <span class="keyword">and</span> child <span class="keyword">not</span> <span class="keyword">in</span> frontier)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span></span><br></pre></td></tr></table></figure>

<h1 id="Graph-Based-BFS"><a href="#Graph-Based-BFS" class="headerlink" title="Graph-Based BFS"></a>Graph-Based BFS</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">breadth_first_graph_search</span><span class="params">(problem)</span>:</span></span><br><span class="line">    <span class="string">"""[Figure 3.11]</span></span><br><span class="line"><span class="string">    Note that this function can be implemented in a</span></span><br><span class="line"><span class="string">    single line as below:</span></span><br><span class="line"><span class="string">    return graph_search(problem, FIFOQueue())</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    node = Node(problem.initial)</span><br><span class="line">    <span class="keyword">if</span> problem.goal_test(node.state):</span><br><span class="line">        <span class="keyword">return</span> node</span><br><span class="line">    frontier = deque([node])</span><br><span class="line">    explored = set()</span><br><span class="line">    <span class="keyword">while</span> frontier:</span><br><span class="line">        node = frontier.popleft()</span><br><span class="line">        explored.add(node.state)</span><br><span class="line">        <span class="keyword">for</span> child <span class="keyword">in</span> node.expand(problem):</span><br><span class="line">            <span class="keyword">if</span> child.state <span class="keyword">not</span> <span class="keyword">in</span> explored <span class="keyword">and</span> child <span class="keyword">not</span> <span class="keyword">in</span> frontier:</span><br><span class="line">                <span class="keyword">if</span> problem.goal_test(child.state):</span><br><span class="line">                    <span class="keyword">return</span> child</span><br><span class="line">                frontier.append(child)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>搜索算法</category>
      </categories>
      <tags>
        <tag>人工智能 搜索算法 研究生课程</tag>
      </tags>
  </entry>
  <entry>
    <title>操作系统</title>
    <url>/2021/06/20/%E3%80%90%E9%9D%A2%E8%AF%95%E5%85%AB%E8%82%A1%E6%96%87%E3%80%91%E4%B9%8B%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote class="blockquote-center">
<p>^ _ ^ </p>

</blockquote>
<a id="more"></a>

<h1 id="进程间有哪些通信方式？"><a href="#进程间有哪些通信方式？" class="headerlink" title="进程间有哪些通信方式？"></a>进程间有哪些通信方式？</h1><p><strong>资料</strong>：</p>
<ol>
<li><a href="https://www.guru99.com/inter-process-communication-ipc.html" target="_blank" rel="noopener">https://www.guru99.com/inter-process-communication-ipc.html</a></li>
<li><a href="https://www.cnblogs.com/zgq0/p/8780893.html#:~:text=%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1%EF%BC%88IPC%EF%BC%8CInterProcess,Communication%EF%BC%89%E6%98%AF%E6%8C%87%E5%9C%A8%E4%B8%8D%E5%90%8C%E8%BF%9B%E7%A8%8B%E4%B9%8B%E9%97%B4%E4%BC%A0%E6%92%AD%E6%88%96%E4%BA%A4%E6%8D%A2%E4%BF%A1%E6%81%AF%E3%80%82%20IPC%E7%9A%84%E6%96%B9%E5%BC%8F%E9%80%9A%E5%B8%B8%E6%9C%89%E7%AE%A1%E9%81%93%EF%BC%88%E5%8C%85%E6%8B%AC%E6%97%A0%E5%90%8D%E7%AE%A1%E9%81%93%E5%92%8C%E5%91%BD%E5%90%8D%E7%AE%A1%E9%81%93%EF%BC%89%E3%80%81%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E3%80%81%E4%BF%A1%E5%8F%B7%E9%87%8F%E3%80%81%E5%85%B1%E4%BA%AB%E5%AD%98%E5%82%A8%E3%80%81Socket%E3%80%81Streams%E7%AD%89%E3%80%82" target="_blank" rel="noopener">进程间的五种通信方式</a></li>
<li><a href="https://cloud.tencent.com/developer/news/478432#:~:text=%E5%A5%97%E6%8E%A5%E5%AD%97%E6%98%AF%E4%B8%80%E5%A5%97%E7%94%A8%20C%E8%AF%AD%E8%A8%80%20%E5%86%99%E6%88%90%E7%9A%84%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%20%E5%BC%80%E5%8F%91%E5%BA%93%20%EF%BC%8C%E5%AE%83%E9%A6%96%E5%85%88%E6%98%AF%E4%B8%80%E4%B8%AA%E5%BA%93%E3%80%82,%E4%B8%BB%E8%A6%81%E4%BD%9C%E7%94%A8%E5%B0%B1%E6%98%AF%E5%AE%9E%E7%8E%B0%20%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1%20%E5%92%8C%20%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%20%EF%BC%8C%E5%9B%A0%E6%AD%A4%E5%9C%A8%E7%BD%91%E7%BB%9C%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E4%B8%AD%E8%A2%AB%E5%B9%BF%E6%B3%9B%E4%BD%BF%E7%94%A8%E3%80%82" target="_blank" rel="noopener">套接字</a></li>
<li><a href="https://blog.csdn.net/qq_42021840/article/details/108778105" target="_blank" rel="noopener">Windows RPC–远程过程调用</a></li>
</ol>
<p><img src="/2021/06/20/%E3%80%90%E9%9D%A2%E8%AF%95%E5%85%AB%E8%82%A1%E6%96%87%E3%80%91%E4%B9%8B%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/1.jpg" alt></p>
<h2 id="管道"><a href="#管道" class="headerlink" title="管道"></a>管道</h2><ol>
<li>通常管道指的是无名管道，它是半双工的（即数据只能在一个方向上流动），具有固定的读端和写端。</li>
<li>它只能用于具有亲缘关系的进程之间的通信（也是父子进程或者兄弟进程之间）。</li>
<li>它可以看成是一种特殊的文件，对于它的读写也可以使用普通的 <code>read</code> 、 <code>write</code> 等函数。但是它不是普通的文件，并不属于其他任何文件系统，并且只存在于内存中。</li>
</ol>
<p><strong>原型</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pipe</span><span class="params">(<span class="keyword">int</span> fd[<span class="number">2</span>])</span></span>;    <span class="comment">// 返回值：若成功返回0，失败返回-1</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>当一个管道建立时，它会创建两个文件描述符：fd[0]为读而打开，fd[1]为写而打开。<br>要关闭管道只需将这两个文件描述符关闭即可。</p>
</blockquote>
<h2 id="FIFO"><a href="#FIFO" class="headerlink" title="FIFO"></a>FIFO</h2><ol>
<li>FIFO，也称为命名管道，它是一种文件类型。</li>
<li>FIFO可以在无关的进程之间交换数据，与无名管道不同。</li>
<li>FIFO有路径名与之相关联，它以一种特殊设备文件形式存在于文件系统中。</li>
</ol>
<p><strong>原型</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="comment">// 返回值：成功返回0，出错返回-1</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">mkfifo</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *pathname, <span class="keyword">mode_t</span> mode)</span></span>;</span><br></pre></td></tr></table></figure>
<p>其中的 <code>mode</code> 参数与 <code>open</code> 函数中的 <code>mode</code> 相同。一旦创建了一个 <strong>FIFO</strong> ，就可以用一般的文件I/O函数操作它。<br>当 open 一个 FIFO 时，是否设置非阻塞标志（ <strong>O_NONBLOCK</strong> ）的区别：</p>
<ul>
<li>若没有指定 <code>O_NONBLOCK</code> （默认），只读 open 要阻塞到某个其他进程为写而打开此 FIFO。类似的，只写 open 要阻塞到某个其他进程为读而打开它。</li>
<li>若指定了 <code>O_NONBLOCK</code> ，则只读 open 立即返回。而只写 open 将出错返回 -1 如果没有进程已经为读而打开该 FIFO ，其 <code>errno</code> 置 <code>ENXIO</code> 。</li>
</ul>
<h2 id="消息队列"><a href="#消息队列" class="headerlink" title="消息队列"></a>消息队列</h2><ol>
<li>消息队列，是消息的链接表，存放在内核中。一个消息队列由一个标识符（即队列ID）来标识。</li>
<li>消息队列是面向记录的，其中的消息具有特定的格式以及特定的优先级。</li>
<li>消息队列独立于发送与接收进程。进程终止时，消息队列及其内容并不会被删除。</li>
<li>消息队列可以实现消息的随机查询,消息不一定要以先进先出的次序读取,也可以按消息的类型读取。</li>
</ol>
<p><strong>原型</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/msg.h&gt;</span></span></span><br><span class="line"><span class="comment">// 创建或打开消息队列：成功返回队列ID，失败返回-1</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">msgget</span><span class="params">(<span class="keyword">key_t</span> key, <span class="keyword">int</span> flag)</span></span>;</span><br><span class="line"><span class="comment">// 添加消息：成功返回0，失败返回-1</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">msgsnd</span><span class="params">(<span class="keyword">int</span> msqid, <span class="keyword">const</span> <span class="keyword">void</span> *ptr, <span class="keyword">size_t</span> <span class="built_in">size</span>, <span class="keyword">int</span> flag)</span></span>;</span><br><span class="line"><span class="comment">// 读取消息：成功返回消息数据的长度，失败返回-1</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">msgrcv</span><span class="params">(<span class="keyword">int</span> msqid, <span class="keyword">void</span> *ptr, <span class="keyword">size_t</span> <span class="built_in">size</span>, <span class="keyword">long</span> type,<span class="keyword">int</span> flag)</span></span>;</span><br><span class="line"><span class="comment">// 控制消息队列：成功返回0，失败返回-1</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">msgctl</span><span class="params">(<span class="keyword">int</span> msqid, <span class="keyword">int</span> cmd, struct msqid_ds *buf)</span></span>;</span><br></pre></td></tr></table></figure>
<p>在以下两种情况下，msgget将创建一个新的消息队列：</p>
<ul>
<li>如果没有与键值 key 相对应的消息队列，并且 flag 中包含了 <code>IPC_CREAT</code> 标志位。</li>
<li>key参数为 <code>IPC_PRIVATE</code> 。</li>
</ul>
<p>函数 <code>msgrcv</code> 在读取消息队列时，type参数有下面几种情况：</p>
<ul>
<li><code>type == 0</code> , 返回队列中的第一个消息；</li>
<li><code>type &gt; 0</code> , 返回队列中消息类型为 type 的第一个消息；</li>
<li><code>type &lt; 0</code> , 返回队列中消息类型值小于或等于 type 绝对值的消息，如果有多个，则取类型值最小的消息。</li>
</ul>
<h2 id="信号量"><a href="#信号量" class="headerlink" title="信号量"></a>信号量</h2><ol>
<li>信号量（semaphore）与已经介绍过的 IPC 结构不同，它是一个计数器。信号量用于实现进程间的互斥与同步，而不是用于存储进程间通信数据。</li>
<li>信号量用于进程间同步，若要在进程间传递数据需要结合共享内存。</li>
<li>信号量基于操作系统的 PV 操作，程序对信号量的操作都是原子操作。</li>
<li>每次对信号量的 PV 操作不仅限于对信号量值加 1 或减 1，而且可以加减任意正整数。</li>
<li>支持信号量组。</li>
</ol>
<p><strong>原型</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/sem.h&gt;</span></span></span><br><span class="line"><span class="comment">// 创建或获取一个信号量组：若成功返回信号量集ID，失败返回-1</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">semget</span><span class="params">(<span class="keyword">key_t</span> key, <span class="keyword">int</span> num_sems, <span class="keyword">int</span> sem_flags)</span></span>;</span><br><span class="line"><span class="comment">// 对信号量组进行操作，改变信号量的值：成功返回0，失败返回-1</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">semop</span><span class="params">(<span class="keyword">int</span> semid, struct sembuf semoparray[], <span class="keyword">size_t</span> numops)</span></span>;</span><br><span class="line"><span class="comment">// 控制信号量的相关信息</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">semctl</span><span class="params">(<span class="keyword">int</span> semid, <span class="keyword">int</span> sem_num, <span class="keyword">int</span> cmd, ...)</span></span>;</span><br></pre></td></tr></table></figure>

<h2 id="共享内存"><a href="#共享内存" class="headerlink" title="共享内存"></a>共享内存</h2><ol>
<li>共享内存（Shared Memory），指两个或多个进程共享一个给定的存储区。</li>
<li>共享内存是最快的一种 IPC，因为进程是直接对内存进行存取。</li>
<li>因为多个进程可以同时操作，所以需要进行同步。</li>
<li>信号量+共享内存通常结合在一起使用，信号量用来同步对共享内存的访问。</li>
</ol>
<p><strong>原型</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/shm.h&gt;</span></span></span><br><span class="line"><span class="comment">// 创建或获取一个共享内存：成功返回共享内存ID，失败返回-1</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">shmget</span><span class="params">(<span class="keyword">key_t</span> key, <span class="keyword">size_t</span> <span class="built_in">size</span>, <span class="keyword">int</span> flag)</span></span>;</span><br><span class="line"><span class="comment">// 连接共享内存到当前进程的地址空间：成功返回指向共享内存的指针，失败返回-1</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">shmat</span><span class="params">(<span class="keyword">int</span> shm_id, <span class="keyword">const</span> <span class="keyword">void</span> *addr, <span class="keyword">int</span> flag)</span></span>;</span><br><span class="line"><span class="comment">// 断开与共享内存的连接：成功返回0，失败返回-1</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">shmdt</span><span class="params">(<span class="keyword">void</span> *addr)</span></span>;</span><br><span class="line"><span class="comment">// 控制共享内存的相关信息：成功返回0，失败返回-1</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">shmctl</span><span class="params">(<span class="keyword">int</span> shm_id, <span class="keyword">int</span> cmd, struct shmid_ds *buf)</span></span>;</span><br></pre></td></tr></table></figure>
<p>当用shmget函数创建一段共享内存时，必须指定其 size；而如果引用一个已存在的共享内存，则将 size 指定为0 。</p>
<p>当一段共享内存被创建以后，它并不能被任何进程访问。必须使用shmat函数连接该共享内存到当前进程的地址空间，连接成功后把共享内存区对象映射到调用进程的地址空间，随后可像本地空间一样访问。</p>
<p>shmdt函数是用来断开shmat建立的连接的。注意，这并不是从系统中删除该共享内存，只是当前进程不能再访问该共享内存而已。</p>
<h2 id="套接字"><a href="#套接字" class="headerlink" title="套接字"></a>套接字</h2><ol>
<li>套接字（socket）是一个抽象层，应用程序可以通过它发送或接收数据，可对其进行像对文件一样的打开、读写和关闭等操作。套接字允许应用程序与网络中的其他应用程序进行通信。网络套接字是IP地址与端口的组合。</li>
<li>实际开发中使用的套接字可以分为三类：<strong>流套接字（TCP套接字）</strong>、<strong>数据报套接字</strong>和<strong>原始套接字</strong>。<ul>
<li><strong>流式套接字（SOCK-STREAM）</strong>。它提供了一种可靠的、可以进行双向连接的数据传输服务。其实现了数据无差错、无重复的发送。流式套接字自身便内设了流量控制功能。在TCP/IP协议簇中，使用TCP协议来实现字节流的传输，当用户想要发送大批量的数据或者对数据传输有较高的要求时，可以使用流式套接字。</li>
<li><strong>数据报套接字（SOCK-DGRAM）</strong>。它提供了一种不可靠的双向数据传输服务。数据包以独立的形式被发送，不提供可靠性保证。数据在传输过程中可能会丢失或重复，并且不能保证在接收端按发送顺序接收数据。在TCP/IP协议簇中，使用UDP协议来实现数据报套接字。在出现差错的可能性较小或允许部分传输出错的应用场合，可以使用数据报套接字进行数据传输，这样通信的效率较高。</li>
<li><strong>原始套接字（SOCK-RAW）</strong>。该套接字允许对较低层协议（如IP或ICMP）进行直接访问，常用于网络协议分析，检验新的网络协议实现，也可用于测试新配置或安装的网络设备。</li>
</ul>
</li>
</ol>
<h2 id="远程过程调用"><a href="#远程过程调用" class="headerlink" title="远程过程调用"></a>远程过程调用</h2><p>RPC（ Remote Procedure Call），远程过程调用，相比于IPC来说RPC就是基于远程的工作机制，说白了RPC也是一种进程间通信方式，它只不过可以允许本地程序调用另一个地址空间的过程或者函数，而不用程序员去管理调用的细节。对于IPC来说，程序只能调用本地空间的函数，而RPC机制提供了一种程序员不必显示的区分本地调用和远程调用。</p>
<p><strong>RPC框架</strong></p>
<ul>
<li>客户端（client）：服务的调用方。</li>
<li>客户端存根（client stub）:存放服务端的地址信息，再将客户端的请求参数打包成网络数据，然后通过网络远程发送给服务方。</li>
<li>服务端存根（server stub）:接受客户端发送过来的消息，将消息解包，并调用本地的方法。</li>
<li>服务端（server）:正真的服务提供者。</li>
</ul>
<h1 id="进程和线程之间有什么区别？"><a href="#进程和线程之间有什么区别？" class="headerlink" title="进程和线程之间有什么区别？"></a>进程和线程之间有什么区别？</h1><p>进程是资源分配的最⼩单位，⽽线程则是系统调度的最⼩单位。</p>
<ol>
<li><strong>创建时消耗资源不同</strong>：进程下多个线程间共享<strong>虚拟内存</strong>、<strong>⽂件描述符</strong>、<strong>信号处理⽅式</strong>等资源，但进程间拥有独⽴的虚拟内存、⽂件描述符与信号处理等资源。在创建线程时，由于虚拟内存、⽂件描述符等资源共享，故不需要进⾏额外的内存复制。</li>
<li><strong>通信⽅式不同</strong>：线程间可通过全局变量、互斥锁或者是条件变量来进⾏通信，但进程间只能使⽤管道、OS 提供的共享内存等进⾏通信，需要投⼊更多的资源。</li>
<li><strong>对信号的⽀持不同</strong>：由于线程是“依附”在进程之上的，因此，同⼀个进程下的多个线程在使⽤信号时会有问题，⽆法准确的将信号传递⾄某⼀个具体的线程。</li>
<li><strong>上下⽂切换速度不同</strong>：因为线程间共享了虚拟内存、⽂件描述符等诸多信息，因此 OS 只需要在上下⽂保存线程的堆栈、寄存器等少量信息，所以其切换速度要⾼于进程间的上下⽂切换。</li>
</ol>
<h1 id="简述-select-poll-epoll-的使用场景以及区别"><a href="#简述-select-poll-epoll-的使用场景以及区别" class="headerlink" title="简述 select, poll, epoll 的使用场景以及区别"></a>简述 select, poll, epoll 的使用场景以及区别</h1><p>进程可以通过 select、poll、epoll 发起 I/O 多路复用的系统调用，这些系统调用都是同步阻塞的：如果传入的多个文件描述符中，有描述符就绪，则返回就绪的描述符；否则如果所有文件描述符都未就绪，就阻塞调用进程，直到某个描述符就绪，或者阻塞时长超过设置的 timeout 后，再返回。使用非阻塞 I/O 检查每个描述符的就绪状态。</p>
<p>如果 <code>timeout</code> 参数设为 NULL，会无限阻塞直到某个描述符就绪；如果 <code>timeout</code> 参数设为 0，会立即返回，不阻塞。</p>
<h2 id="文件描述符"><a href="#文件描述符" class="headerlink" title="文件描述符"></a>文件描述符</h2><p>文件描述符（file descriptor）是一个非负整数，从 0 开始。进程使用文件描述符来标识一个打开的文件。</p>
<p>系统为每一个进程维护了一个文件描述符表，表示该进程打开文件的记录表，而文件描述符实际上就是这张表的索引。当进程打开（open）或者新建（create）文件时，内核会在该进程的文件列表中新增一个表项，同时返回一个文件描述符 —— 也就是新增表项的下标。</p>
<p>每个进程默认都有 3 个文件描述符：0 (stdin)、1 (stdout)、2 (stderr)。</p>
<h2 id="select"><a href="#select" class="headerlink" title="select"></a>select</h2><p><strong>函数原型</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">select</span><span class="params">(<span class="keyword">int</span> nfds,    <span class="comment">// 需要遍历的文件描述符个数</span></span></span></span><br><span class="line"><span class="function"><span class="params">            fd_set *<span class="keyword">restrict</span> readfds,  <span class="comment">// 可以读取的描述符</span></span></span></span><br><span class="line"><span class="function"><span class="params">            fd_set *<span class="keyword">restrict</span> writefds, <span class="comment">// 可以写入的描述符</span></span></span></span><br><span class="line"><span class="function"><span class="params">            fd_set *<span class="keyword">restrict</span> errorfds, <span class="comment">// 发生错误的描述符</span></span></span></span><br><span class="line"><span class="function"><span class="params">            struct timeval *<span class="keyword">restrict</span> timeout <span class="comment">// select 阻塞时长</span></span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>;</span><br></pre></td></tr></table></figure>

<p><strong>fd_set</strong><br>参数中的 <code>fd_set</code> 类型表示文件描述符的集合。由于文件描述符 fd 是一个从 0 开始的无符号整数，所以可以使用 fd_set 的二进制每一位来表示一个文件描述符。某一位为 1，表示对应的文件描述符已就绪。</p>
<p>fd_set 的使用涉及以下几个 API：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/select.h&gt;   </span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">FD_ZERO</span><span class="params">(<span class="keyword">int</span> fd, fd_set *fdset)</span></span>;  <span class="comment">// 将 fd_set 所有位置 0</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">FD_CLR</span><span class="params">(<span class="keyword">int</span> fd, fd_set *fdset)</span></span>;   <span class="comment">// 将 fd_set 某一位置 0</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">FD_SET</span><span class="params">(<span class="keyword">int</span> fd, fd_set *fd_set)</span></span>;  <span class="comment">// 将 fd_set 某一位置 1</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">FD_ISSET</span><span class="params">(<span class="keyword">int</span> fd, fd_set *fdset)</span></span>; <span class="comment">// 检测 fd_set 某一位是否为 1</span></span><br></pre></td></tr></table></figure>

<p><strong>select 的缺点</strong></p>
<ol>
<li>性能开销大：调用 select 时会陷入内核，这时需要将参数中的 fd_set 从用户空间拷贝到内核空间；内核需要遍历传递进来的所有 fd_set 的每一位，不管它们是否就绪。<br>2、 同时能够监听的文件描述符数量太少。受限于 sizeof(fd_set) 的大小，在编译内核时就确定了且无法更改。一般是 1024，不同的操作系统不相同。</li>
</ol>
<h2 id="poll"><a href="#poll" class="headerlink" title="poll"></a>poll</h2><p>poll 和 select 几乎没有区别。poll 采用链表的方式存储文件描述符，没有最大存储数量的限制。<br>从性能开销上看，poll 和 select 的差别不大。</p>
<h2 id="epoll"><a href="#epoll" class="headerlink" title="epoll"></a>epoll</h2><p>epoll 是对 select 和 poll 的改进，避免了“性能开销大”和“文件描述符数量少”两个缺点。<br>简而言之，epoll 有以下几个特点：</p>
<ol>
<li>使用<strong>红黑树</strong>存储文件描述符集合。</li>
<li>使用<strong>队列</strong>存储就绪的文件描述符。</li>
<li>每个文件描述符只需在添加时传入一次；通过事件更改文件描述符状态。</li>
</ol>
<p>select、poll 模型都只使用一个函数，而 epoll 模型使用三个函数：<code>epoll_create</code>、<code>epoll_ctl</code> 和 <code>epoll_wait</code>。</p>
<h3 id="epoll-create"><a href="#epoll-create" class="headerlink" title="epoll_create"></a>epoll_create</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建一个 epoll 实例，同时返回一个引用该实例的文件描述符。</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">epoll_create</span><span class="params">(<span class="keyword">int</span> <span class="built_in">size</span>)</span></span>;</span><br></pre></td></tr></table></figure>

<p>返回的文件描述符仅仅指向对应的 epoll 实例，并不表示真实的磁盘文件节点。其他 API 如 epoll_ctl、epoll_wait 会使用这个文件描述符来操作相应的 epoll 实例。</p>
<p>epoll 实例内部存储：</p>
<ul>
<li>监听列表：所有要监听的文件描述符，使用红黑树</li>
<li>就绪列表：所有就绪的文件描述符，使用链表</li>
</ul>
<h3 id="epoll-ctl"><a href="#epoll-ctl" class="headerlink" title="epoll_ctl"></a>epoll_ctl</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// epoll_ctl 会监听文件描述符 fd 上发生的 event 事件。返回值 0 或 -1，表示上述操作成功与否。</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">epoll_ctl</span><span class="params">(<span class="keyword">int</span> epfd, <span class="keyword">int</span> op, <span class="keyword">int</span> fd, struct epoll_event *event)</span></span>;</span><br></pre></td></tr></table></figure>

<p>参数说明：</p>
<ul>
<li>epfd 即 epoll_create 返回的文件描述符，指向一个 epoll 实例</li>
<li>fd 表示要监听的目标文件描述符</li>
<li>event 表示要监听的事件（可读、可写、发送错误…）</li>
<li>op 表示要对 fd 执行的操作，有以下几种：<ul>
<li>EPOLL_CTL_ADD：为 fd 添加一个监听事件 event</li>
<li>EPOLL_CTL_MOD：event 是一个结构体变量，这相当于变量 event 本身没变，但是更改了其内部字段的值</li>
<li>EPOLL_CTL_DEL：删除 fd 的所有监听事件，这种情况下 event 参数没用</li>
</ul>
</li>
</ul>
<p>epoll_ctl 会将文件描述符 fd 添加到 epoll 实例的监听列表里，同时为 fd 设置一个回调函数，并监听事件 event。当 fd 上发生相应事件时，会调用回调函数，将 fd 添加到 epoll 实例的就绪队列上。</p>
<h3 id="epoll-wait"><a href="#epoll-wait" class="headerlink" title="epoll_wait"></a>epoll_wait</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">epoll_wait</span><span class="params">(<span class="keyword">int</span> epfd, struct epoll_event *events,</span></span></span><br><span class="line"><span class="function"><span class="params">               <span class="keyword">int</span> maxevents, <span class="keyword">int</span> timeout)</span></span>;</span><br></pre></td></tr></table></figure>
<p>这是 epoll 模型的主要函数，功能相当于 select。</p>
<p>参数说明：</p>
<ul>
<li>epfd 即 epoll_create 返回的文件描述符，指向一个 epoll 实例</li>
<li>events 是一个数组，保存就绪状态的文件描述符，其空间由调用者负责申请</li>
<li>maxevents 指定 events 的大小</li>
<li>timeout 类似于 select 中的 timeout。如果没有文件描述符就绪，即就绪队列为空，则 epoll_wait 会阻塞 timeout 毫秒。如果 timeout 设为 -1，则 epoll_wait 会一直阻塞，直到有文件描述符就绪；如果 timeout 设为 0，则 epoll_wait 会立即返回</li>
<li>返回值表示 events 中存储的就绪描述符个数，最大不超过 maxevents。</li>
</ul>
<h2 id="epoll-的优点"><a href="#epoll-的优点" class="headerlink" title="epoll 的优点"></a>epoll 的优点</h2><p>对于“文件描述符数量少”，select 使用整型数组存储文件描述符集合，而 epoll 使用红黑树存储，数量较大。</p>
<p>对于“性能开销大”，epoll_ctl 中为每个文件描述符指定了回调函数，并在就绪时将其加入到就绪列表，因此 epoll 不需要像 select 那样遍历检测每个文件描述符，只需要判断就绪列表是否为空即可。这样，在没有描述符就绪时，epoll 能更早地让出系统资源。</p>
<p>此外，每次调用 select 时都需要向内核拷贝所有要监听的描述符集合，而 epoll 对于每个描述符，只需要在 epoll_ctl 传递一次，之后 epoll_wait 不需要再次传递。这也大大提高了效率。</p>
<h2 id="三者对比"><a href="#三者对比" class="headerlink" title="三者对比"></a>三者对比</h2><ul>
<li>select：调用开销大（需要复制集合）；集合大小有限制；需要遍历整个集合找到就绪的描述符</li>
<li>poll：poll 采用链表的方式存储文件描述符，没有最大存储数量的限制，其他方面和 select 没有区别</li>
<li>epoll：调用开销小（不需要复制）；集合大小无限制；采用回调机制，不需要遍历整个集合</li>
</ul>
<p>select、poll 都是在用户态维护文件描述符集合，因此每次需要将完整集合传给内核；epoll 由操作系统在内核中维护文件描述符集合，因此只需要在创建的时候传入文件描述符。</p>
<p>此外 select 只支持水平触发，epoll 支持边缘触发。</p>
<p>当连接数较多并且有很多的不活跃连接时，epoll 的效率比其它两者高很多。当连接数较少并且都十分活跃的情况下，由于 epoll 需要很多回调，因此性能可能低于其它两者。</p>
<h2 id="水平触发、边缘触发"><a href="#水平触发、边缘触发" class="headerlink" title="水平触发、边缘触发"></a>水平触发、边缘触发</h2><p>水平触发（LT，Level Trigger）：当文件描述符就绪时，会触发通知，如果用户程序没有一次性把数据读/写完，下次还会发出可读/可写信号进行通知。<br>边缘触发（ET，Edge Trigger）：仅当描述符从未就绪变为就绪时，通知一次，之后不会再通知。</p>
<h2 id="简述操作系统如何进行内存管理"><a href="#简述操作系统如何进行内存管理" class="headerlink" title="简述操作系统如何进行内存管理"></a>简述操作系统如何进行内存管理</h2><p><strong>1. 虚拟内存</strong><br>内存管理就在程序和物理内存之间引入了虚拟内存的概念；对进程地址和物理地址进行隔离。</p>
<p><strong>2. 内存分区</strong><br>Linux 对内存节点进行分区；将节点分为DMA、Normal、High Memory 内存区。DMA内存区：直接内存访问区，通常为物理内存的起始16M；主要供I/O外设使用，无需CPU参与的外设和内存DMA。Normal内存区：从16M到896M内存区；内核可以直接使用。Hight Memory内存区：896M以后的内存区；高端内存，内核不能直接使用。</p>
<p><strong>3. 内核空间和用户空间</strong><br>Linux 操作系统，将虚拟内存划分为内核空间和用户空间；用户进程只能访问用户空间的虚拟地址，只有通过系统调用、外设中断或异常才能访问内核空间。</p>
<p>Linux内核空间 1G容量，包括：内核镜像、物理页面表、驱动程序等，其分区包括：</p>
<ul>
<li>直接映射区</li>
<li>高端内存线性地址空间</li>
<li>动态内存映射区（vmalloc region）：由内核函数vmalloc 分配；</li>
<li>永久内存映射区：alloc_page、 kmap</li>
<li>固定映射区：特定用途，如 ACPI_BASE 等</li>
</ul>
<p>用户空间：分为5个不同内存区域：</p>
<ul>
<li>代码段：只读，存放可执行文件的操作指令；镜像；</li>
<li>数据段：存放可执行文件中已初始化全局变量；存放静态变量和全局变量；</li>
<li>BSS段：未初始化全局变量</li>
<li>堆：存放被动态分配的内存段；</li>
<li>栈：存放临时创建的局部变量；</li>
</ul>
<p><strong>4. 内存地址映射</strong><br>CPU生成的地址是逻辑地址，而内存单元中的地址为物理地址；执行时地址绑定方案会生成不同的逻辑地址和物理地址，这时，逻辑地址通常被称为虚拟地址。</p>
<p>物理地址空间是有限的，虚拟地址空间可以是任意大小；程序可以通过操作虚拟地址，把虚拟地址空间映射到物理地址空间； Linux通过缺页中断和swap机制，实现虚拟地址映射。</p>
<p>虚拟地址和物理地址，主要通过分段和分页技术，进行映射；程序地址：段号+页号+页内偏移。</p>
<p>段是信息的逻辑单位，根据用户的需要划分，段对用户是可见的； 页时信息的物理单位，为管理内存方便和划分的，对用户透明的。分段：将程序分为代码段、数据段、堆栈段等；分页：将段分成均匀的小块，通过页表映射物理内存。</p>
]]></content>
      <tags>
        <tag>面试 操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title>为hexo-next添加背景</title>
    <url>/2022/01/20/%E4%B8%BAhexo-next%E6%B7%BB%E5%8A%A0%E8%83%8C%E6%99%AF/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote class="blockquote-center">
<p>^ _ ^ </p>

</blockquote>
<a id="more"></a>

<h1 id="Step1-修改-next-主题的-config-yml"><a href="#Step1-修改-next-主题的-config-yml" class="headerlink" title="Step1: 修改 next 主题的 _config.yml"></a>Step1: 修改 next 主题的 _config.yml</h1><p>文件路径：<code>$root/themes/next/source/_config.yml</code></p>
<p><img src="/2022/01/20/%E4%B8%BAhexo-next%E6%B7%BB%E5%8A%A0%E8%83%8C%E6%99%AF/1.png" alt></p>
<h1 id="Step2-添加图片"><a href="#Step2-添加图片" class="headerlink" title="Step2: 添加图片"></a>Step2: 添加图片</h1><ol>
<li>在 <code>$root/source/</code> 目录下新建 <strong>images</strong> 文件夹。</li>
<li>在 images 文件夹添加希望作为背景图的图片</li>
</ol>
<h1 id="Step3-添加自定义样式"><a href="#Step3-添加自定义样式" class="headerlink" title="Step3: 添加自定义样式"></a>Step3: 添加自定义样式</h1><ol>
<li>在 <code>$root/source/</code> 目录下新建 <strong>_data</strong> 文件夹。</li>
<li>在 <code>_data</code> 文件夹下新建文件 <code>styles.styl</code></li>
</ol>
<p><strong>styles.styl</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>:<span class="built_in">url</span>(/images/sky.jpeg);</span><br><span class="line">    <span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line">    background-attachment:fixed; //不重复</span><br><span class="line">    background-size: cover;      //填充</span><br><span class="line">    <span class="selector-tag">background-position</span><span class="selector-pseudo">:50</span>% 50%;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 修改主体透明度</span><br><span class="line"><span class="selector-class">.main-inner</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0.8</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//侧边框的透明度设置</span><br><span class="line"><span class="selector-class">.sidebar</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0.9</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//菜单栏的透明度设置</span><br><span class="line"><span class="selector-class">.header-inner</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">0.9</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//搜索框（local-search）的透明度设置</span><br><span class="line"><span class="selector-class">.popup</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0.7</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Step4-重新生成"><a href="#Step4-重新生成" class="headerlink" title="Step4: 重新生成"></a>Step4: 重新生成</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>volatile</title>
    <url>/2020/09/23/volatile/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote class="blockquote-center">
<p>^ _ ^ </p>

</blockquote>
<a id="more"></a>

<h1 id="JMM"><a href="#JMM" class="headerlink" title="JMM"></a>JMM</h1><blockquote>
<p>Java Memory Model，Java内存模型，本身是一种抽象概念，描述的是一组规则或规范，通过这组规范定义了程序中各个变量的访问方式</p>
</blockquote>
<h2 id="JMM关于同步的规定"><a href="#JMM关于同步的规定" class="headerlink" title="JMM关于同步的规定"></a>JMM关于同步的规定</h2><ol>
<li>线程解锁前，必须把共享变量的值刷新回主内存</li>
<li>线程加锁前，必须读取主内存的最新值到自己的工作内存</li>
<li>加锁和解锁是同一把锁</li>
</ol>
<p><strong>工作内存</strong>：线程的私有数据区域（栈空间）<br><strong>主内存</strong>：进程中所有线程的共享区域</p>
<p>线程对主内存中的变量进行读写时，必须在工作内存中进行。首先要将变量从主内存拷贝到自己的工作内存，然后对变量进行操作，操作完成后再将变量写回主内存。</p>
<h2 id="JMM需要保证的特性"><a href="#JMM需要保证的特性" class="headerlink" title="JMM需要保证的特性"></a>JMM需要保证的特性</h2><ol>
<li>可见性</li>
<li>原子性</li>
<li>有序性</li>
</ol>
<h1 id="volatile"><a href="#volatile" class="headerlink" title="volatile"></a>volatile</h1><blockquote>
<p>Java虚拟机提供的轻量级同步机制</p>
</blockquote>
<p><strong>特点</strong></p>
<ul>
<li>保证可见性</li>
<li>不保证原子性</li>
<li>禁止指令重排</li>
</ul>
<p><strong>可见性实现原理</strong><br>进程是资源分配的基本单位，进程中的变量都存储在主内存中。每个线程使用进程中的变量时，会将变量的值拷贝一份放入自己的工作内存中。但对于不加volatile修饰的变量，一个线程在自己的工作内存中对其进行修改后，不会立即写回主内存中，因此其他线程也就不知道这个变量发生的更改，造成了不可见性。</p>
<p><strong>禁止指令重排实现原理</strong><br>通过插入Memory Barrier指令（内存屏障）来禁止内存屏障前后的指令执行重排序优化。</p>
<ul>
<li>在volatile写指令之前，插入<code>StoreStore</code>屏障，禁止上面可能的普通写和下面的volatile写重排序；在volatile写指令之后插入<code>StoreLoad</code>屏障，禁止上面的volatile写和下面可能的读/写进行重排序</li>
<li>在volatile读后面插入<code>LoadLoad</code>屏障，禁止下面所有的普通读操作和上面的volatile读重排序；然后插入<code>LoadStore</code>屏障，禁止下面所有的写操作和上面的volatile读重排序</li>
</ul>
<h2 id="volatile应用场景"><a href="#volatile应用场景" class="headerlink" title="volatile应用场景"></a>volatile应用场景</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. memory &#x3D; allocate() &#x2F;&#x2F; 分配对象内存空间</span><br><span class="line">2. instance(memory)    &#x2F;&#x2F; 初始化对象</span><br><span class="line">3. instance &#x3D; memory   &#x2F;&#x2F; 设置instance指向刚分配的内存地址，此时instance !&#x3D; null</span><br></pre></td></tr></table></figure>

<p>由于2和3不存在数据依赖关系，而且无论重排前还是重排后程序的执行结果在单线程中没有改变，因此这种重排序优化是允许的。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. memory &#x3D; allocate() &#x2F;&#x2F; 分配对象内存空间</span><br><span class="line">3. instance &#x3D; memory   &#x2F;&#x2F; 设置instance指向刚分配的内存地址，此时instance !&#x3D; null，但初始化还没完成</span><br><span class="line">2. instance(memory)    &#x2F;&#x2F; 初始化对象</span><br></pre></td></tr></table></figure>

<p>所以当一条线程访问instance不为null时，由于instance实例未初始化完成，也就造成了线程安全问题。</p>
]]></content>
      <categories>
        <category>Java基础</category>
      </categories>
  </entry>
  <entry>
    <title>从3dmax中导出x文件</title>
    <url>/2020/07/12/%E4%BB%8E3dmax%E4%B8%AD%E5%AF%BC%E5%87%BAx%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote class="blockquote-center">
<p>从3dmax中导出x文件 </p>

</blockquote>
<a id="more"></a>

<h1 id="x文件"><a href="#x文件" class="headerlink" title="x文件"></a>x文件</h1><p>以X为文件扩展名的文件是微软定义的文件格式，用来存放3D模型。<br>在3dsmax中建模完成的模型导出为x文件后，就可以在DirectX中进行导入然后使用。</p>
<h1 id="从3dmax中导出x文件"><a href="#从3dmax中导出x文件" class="headerlink" title="从3dmax中导出x文件"></a>从3dmax中导出x文件</h1><p>3dsmax自带的导出文件类型中并没有x文件类型，所以需要下载插件。</p>
<p>插件下载网站为<a href="http://www.cgdev.net/" target="_blank" rel="noopener">http://www.cgdev.net/</a></p>
<p>选择箭头所指向的模块<br><img src="/2020/07/12/%E4%BB%8E3dmax%E4%B8%AD%E5%AF%BC%E5%87%BAx%E6%96%87%E4%BB%B6/1.jpg" alt></p>
<p>选择对应3dmax版本的插件进行下载<br><img src="/2020/07/12/%E4%BB%8E3dmax%E4%B8%AD%E5%AF%BC%E5%87%BAx%E6%96%87%E4%BB%B6/2.jpg" alt></p>
<p>下载得到压缩包，对其进行解压<br><img src="/2020/07/12/%E4%BB%8E3dmax%E4%B8%AD%E5%AF%BC%E5%87%BAx%E6%96%87%E4%BB%B6/3.jpg" alt></p>
<p>把dle文件复制到3dsmax安装目录下的Plugins文件夹下<br><img src="/2020/07/12/%E4%BB%8E3dmax%E4%B8%AD%E5%AF%BC%E5%87%BAx%E6%96%87%E4%BB%B6/4.jpg" alt></p>
<p>打开3dsmax软件，选择导出<br><img src="/2020/07/12/%E4%BB%8E3dmax%E4%B8%AD%E5%AF%BC%E5%87%BAx%E6%96%87%E4%BB%B6/5.jpg" alt></p>
<p>导出类型选项中就出现x文件了<br><img src="/2020/07/12/%E4%BB%8E3dmax%E4%B8%AD%E5%AF%BC%E5%87%BAx%E6%96%87%E4%BB%B6/6.jpg" alt></p>
<h2 id="参考博客"><a href="#参考博客" class="headerlink" title="参考博客"></a>参考博客</h2><p><a href="https://blog.csdn.net/xingkwe/article/details/86658465" target="_blank" rel="noopener">使用Axe_free_v2.2.5_max2018.dle插件从3d max中导出.x文件</a><br><a href="https://blog.csdn.net/puppet_master/article/details/48978317" target="_blank" rel="noopener">3d max插件的基本知识和安装方法</a></p>
]]></content>
      <tags>
        <tag>DirectX</tag>
        <tag>x文件</tag>
      </tags>
  </entry>
  <entry>
    <title>做个端午节小视频</title>
    <url>/2021/06/13/%E5%81%9A%E4%B8%AA%E7%AB%AF%E5%8D%88%E8%8A%82%E5%B0%8F%E8%A7%86%E9%A2%91/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote class="blockquote-center">
<p>^ _ ^ </p>

</blockquote>
<a id="more"></a>

<h1 id="修图"><a href="#修图" class="headerlink" title="修图"></a>修图</h1><p>通过 PS 技术将手机拍摄的 JLU 校园图片进行图像加工，使其更符合人眼美感。</p>
<p>参考视频链接：</p>
<ul>
<li>图片去水印：<a href="https://www.bilibili.com/video/BV15s411A79Y?p=3" target="_blank" rel="noopener">https://www.bilibili.com/video/BV15s411A79Y?p=3</a></li>
<li>风景修图：<a href="https://www.bilibili.com/video/BV1fD4y1X7eA" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1fD4y1X7eA</a></li>
<li>校正透视：<a href="https://www.bilibili.com/video/BV1LT4y1N7Tp?from=search&seid=6974037562294657012" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1LT4y1N7Tp?from=search&amp;seid=6974037562294657012</a></li>
</ul>
<h2 id="去水印思路"><a href="#去水印思路" class="headerlink" title="去水印思路"></a>去水印思路</h2><p>框选去水印区域进行内容填充， PS 图像处理算法将自动用周围区域的内容对水印区域进行填充，从而去除水印。</p>
<h2 id="风景修图思路"><a href="#风景修图思路" class="headerlink" title="风景修图思路"></a>风景修图思路</h2><ol>
<li>正确的黑白灰关系来确保画面的通透感。</li>
<li>正确的色彩搭配来确保画面的冲击感。</li>
<li>画面清晰度的提升。</li>
</ol>
<h2 id="校正透视思路"><a href="#校正透视思路" class="headerlink" title="校正透视思路"></a>校正透视思路</h2><p>校正是对因为拍摄原因导致照片呈现倾斜感觉的图片进行一个拉直操作，降低它的倾斜感。<br>透视是一个正常现象，是一种三维视觉下的图像呈现效果。但是，有时会想把这种三维效果转换为二维，就需要用到透视变换。具体做法是利用 PS 工具对原图像进行一个透视变换，然后对于变换后的留白区域进行裁剪。</p>
<h2 id="一个栗子"><a href="#一个栗子" class="headerlink" title="一个栗子"></a>一个栗子</h2><p>选了一张很拉胯的图片：<img src="/2021/06/13/%E5%81%9A%E4%B8%AA%E7%AB%AF%E5%8D%88%E8%8A%82%E5%B0%8F%E8%A7%86%E9%A2%91/1.jpg" alt></p>
<h3 id="Step1-去除水印"><a href="#Step1-去除水印" class="headerlink" title="Step1: 去除水印"></a>Step1: 去除水印</h3><ol>
<li>文件 –&gt; 打开 –&gt; 选择图片 ， 然后导入的图片就自动成为 <strong>背景图层</strong> ；</li>
<li>在 <strong>背景图层</strong> 处使用 <code>Ctrl + J</code> 复制图层，不妨命名该图层为 <strong>去除水印图层</strong> ， 然后在该图层上执行去除水印操作 ；</li>
<li>利用 <strong>矩形选框</strong> 工具框选需要去除水印处 ；</li>
<li>编辑 –&gt; 填充 –&gt; 内容识别 ， 然后框选处水印就被去除了。此时使用 <code>Ctrl + D</code> 可以取消选框。</li>
</ol>
<p>去除效果：<img src="/2021/06/13/%E5%81%9A%E4%B8%AA%E7%AB%AF%E5%8D%88%E8%8A%82%E5%B0%8F%E8%A7%86%E9%A2%91/2.jpg" alt></p>
<h3 id="Step2：黑白灰处理"><a href="#Step2：黑白灰处理" class="headerlink" title="Step2：黑白灰处理"></a>Step2：黑白灰处理</h3><ol>
<li>在 <strong>去除水印图层</strong> 处使用 <code>Ctrl + J</code> 复制图层，不妨命名该图层为 <strong>Camera处理图层</strong> ， 然后在该图层上执行Camera滤镜处理操作 。</li>
<li>右键，选择将 <strong>Camera处理图层</strong> 转换为 <strong>智能对象</strong> 。</li>
<li>打开 滤镜 –&gt; Camera Raw 滤镜。</li>
<li>提高曝光，使图片整体变 <strong>亮</strong> 。</li>
<li>提高 <strong>阴影</strong> 和 <strong>黑色</strong> 的值，使暗部细节显现出来。</li>
<li>降低 <strong>高光</strong> 和 <strong>白色</strong> 的值。因为第4步的曝光操作是对图片整体增亮，所以可能会导致本来就比较亮的区域 <strong>过曝</strong> ， 所以通过这一步对亮部区域进行一个调整。</li>
</ol>
<h3 id="Step3：通透化处理"><a href="#Step3：通透化处理" class="headerlink" title="Step3：通透化处理"></a>Step3：通透化处理</h3><ol>
<li>利用 <strong>曲线</strong> 面板分别对 R、G、B 三个通道进行处理，将其曲线图形转换为 <strong>S</strong> 形来增强对比度（也不一定是S型，根据图片视感自由调整就好）。<blockquote>
<p>虽然 <strong>基本</strong> 面板里的 <strong>对比度</strong> 选项卡也可以调整对比度，但其自由度比较低，因此还是使用曲线调整比较好。</p>
</blockquote>
</li>
<li>使用 <strong>基本面板</strong> 中的 <strong>去除薄雾</strong> 选项卡对图片进行去除薄雾操作，可以减少图片的朦胧感。</li>
</ol>
<h3 id="Step4：调色处理"><a href="#Step4：调色处理" class="headerlink" title="Step4：调色处理"></a>Step4：调色处理</h3><ol>
<li>在 <strong>混合器</strong> 面板中选择 <strong>HSL</strong> 调整，根据图像中本有的色调对图像进行调整。比如原有图中有蓝色，将蓝色色相往青色移，图像中蓝色区域就会变得偏青。</li>
<li>可以使用 <strong>工具栏</strong> 中的 <strong>径向渐变</strong> 工具框选出一定区域，然后对这个区域进行图像处理，是不会影响其他区域的。</li>
<li>点击确认，保存在 <strong>Camera Raw 滤镜</strong> 中的修改。</li>
</ol>
<p>以上几步操作后综合处理效果：<img src="/2021/06/13/%E5%81%9A%E4%B8%AA%E7%AB%AF%E5%8D%88%E8%8A%82%E5%B0%8F%E8%A7%86%E9%A2%91/3.jpg" alt></p>
<h3 id="Step5-加锐化清晰度"><a href="#Step5-加锐化清晰度" class="headerlink" title="Step5: 加锐化清晰度"></a>Step5: 加锐化清晰度</h3><ol>
<li>在 <strong>Camera处理图层</strong> 处使用 <code>Ctrl + J</code> 复制图层，不妨命名该图层为 <strong>清晰度处理图层</strong> ， 然后在该图层上执行锐化和清晰度处理操作 。</li>
<li>选择 滤镜–&gt;其他–&gt;高反差保留，将半径设置为3。</li>
<li>将该图层的模式改为 <strong>线性光模式</strong>。</li>
<li>将 <strong>清晰度处理图层</strong> 和 <strong>Camera处理图层</strong> 合并为同一个图层。</li>
</ol>
<p>增加清晰度后的效果：<img src="/2021/06/13/%E5%81%9A%E4%B8%AA%E7%AB%AF%E5%8D%88%E8%8A%82%E5%B0%8F%E8%A7%86%E9%A2%91/4.jpg" alt></p>
<h3 id="Step6：校正透视"><a href="#Step6：校正透视" class="headerlink" title="Step6：校正透视"></a>Step6：校正透视</h3><ol>
<li>在 <strong>清晰度处理图层</strong> 处使用 <code>Ctrl + J</code> 复制图层，不妨命名该图层为 <strong>校正透视图层</strong> ， 然后在该图层上执行校正透视处理操作 。</li>
<li>选择 <strong>标尺工具</strong>（点击原吸管工具所在处右下角的小三角进行切换），在图片中选择一个参照物拉出一条<strong>直线</strong>作为<strong>标尺</strong> ，然后点击属性栏中的 <strong>拉直图层</strong> 按钮，图像就会以将标尺变为水平所需要旋转的角度对图像进行一个整体旋转。</li>
<li>旋转后图像会多出一些空白区域，使用 <strong>裁剪工具</strong> 对图像进行裁剪，去除周围的空白区域。</li>
<li>选择 <strong>透视裁剪工具</strong>（点击原裁剪工具所在处右下角的小三角进行切换），框选图像后，图像上层会出现一个 <strong>半透明网格</strong>，网格的每个角上都有一个手柄，可以通过拖动手柄来改变网格的形状。调整左右竖直网格线（按住 <code>Shift</code> 拖动），使其倾斜角度与图像中物体倾斜角度平行。</li>
</ol>
<p>校正透视后的效果：<img src="/2021/06/13/%E5%81%9A%E4%B8%AA%E7%AB%AF%E5%8D%88%E8%8A%82%E5%B0%8F%E8%A7%86%E9%A2%91/5.jpg" alt></p>
<h1 id="图片漫画化"><a href="#图片漫画化" class="headerlink" title="图片漫画化"></a>图片漫画化</h1><p>有一个很 nb 的图像漫画化算法，叫做 <strong>White-box-Cartoonization</strong> ，用机器学习实现。这个算法还在2020年被 CVPR 录用了。</p>
<p>项目地址：<a href="https://github.com/SystemErrorWang/White-box-Cartoonization" target="_blank" rel="noopener">https://github.com/SystemErrorWang/White-box-Cartoonization</a></p>
<p>论文地址：<a href="https://github.com/SystemErrorWang/White-box-Cartoonization/blob/master/paper/06791.pdf" target="_blank" rel="noopener">https://github.com/SystemErrorWang/White-box-Cartoonization/blob/master/paper/06791.pdf</a></p>
<p>作者还很贴心的做了一个网站给小白使用这个算法（就是我啦），网站地址：<a href="https://cartoonize-lkqov62dia-de.a.run.app/cartoonize" target="_blank" rel="noopener">https://cartoonize-lkqov62dia-de.a.run.app/cartoonize</a></p>
<p>通过这个网站，可以将图片转换为漫画，效果如下：<img src="/2021/06/13/%E5%81%9A%E4%B8%AA%E7%AB%AF%E5%8D%88%E8%8A%82%E5%B0%8F%E8%A7%86%E9%A2%91/6.jpg" alt></p>
<h1 id="搬砖工作"><a href="#搬砖工作" class="headerlink" title="搬砖工作"></a>搬砖工作</h1><p>接下来的工作就是按照上述步骤将所有收集要使用的素材图做图像处理，得到n张漫画图。经过辛苦又胡乱的搬砖后我准备了10张漫画图。</p>
<p>以下图为例，分别是原图、ps乱修后的图和漫画化的图。<br><img src="/2021/06/13/%E5%81%9A%E4%B8%AA%E7%AB%AF%E5%8D%88%E8%8A%82%E5%B0%8F%E8%A7%86%E9%A2%91/7.jpg" alt></p>
<h1 id="图像大小统一化"><a href="#图像大小统一化" class="headerlink" title="图像大小统一化"></a>图像大小统一化</h1><p>做视频需要所有图像的大小相同，所以编写一个python脚本来将所有图像大小统一为一个值，我选择了宽为1000，高为720的设置。值得注意的是，在脚本执行目录，需要建立两个文件夹，分别是 dw_src 和 dw_res。前者用于保存需要进行转换的漫画图片，后者是转换后的结果。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">process</span><span class="params">(src, dst, width, height)</span>:</span></span><br><span class="line">    files = os.listdir(src)</span><br><span class="line">    <span class="keyword">for</span> file_name <span class="keyword">in</span> files:</span><br><span class="line">        file = os.path.join(src, file_name)</span><br><span class="line">        <span class="keyword">if</span> file.endswith(<span class="string">"jpeg"</span>):</span><br><span class="line">            img = cv.imread(file)</span><br><span class="line">            targetImg = cv.resize(img, (width, height))</span><br><span class="line">            targetPath = os.path.join(dst, file_name)</span><br><span class="line">            cv.imwrite(targetPath, targetImg)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    process(<span class="string">"./dw_src/"</span>, <span class="string">"./dw_res"</span>, <span class="number">1000</span>, <span class="number">720</span>)</span><br></pre></td></tr></table></figure>

<h1 id="仿漫威效果"><a href="#仿漫威效果" class="headerlink" title="仿漫威效果"></a>仿漫威效果</h1><p>基于上述得到的漫画图片利用 PR 做一个仿照漫威开头动画。<br>参考资料：<a href="https://www.bilibili.com/video/BV1Jk4y1z7Wf" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1Jk4y1z7Wf</a></p>
<h2 id="栗子"><a href="#栗子" class="headerlink" title="栗子"></a>栗子</h2><ol>
<li>将所有漫画图片拖入 PR 的 <strong>素材箱</strong> 中。</li>
<li><code>Ctrl + A</code> 选择所有图片拖入到 <strong>时间轴</strong> 中。</li>
<li>选中时间轴的 <strong>选择工具</strong> ，然后框选住时间轴中的各图片，按住 <code>Alt</code> 键拖动，将图片多复制几次，本例中复制了4次。</li>
<li>框选时间轴中所有图片，右键 –&gt; 速度/持续时间，将持续时间改为 0.5 ms（即00:00:00:05），并同时勾选 <strong>波纹编辑</strong>。</li>
<li>按住 <code>Alt</code> 键拖拽出一层作为第二组放在旁边供后续使用。</li>
<li>点击第一组最开始的一张图片，在 <strong>效果</strong> 中搜索 <strong>变换</strong>，将 <strong>扭曲</strong> 中的 <strong>变换</strong> 拖到第一张图中。</li>
<li>选择第一张图片进入到 <strong>效果控件</strong> 面板，将 <strong>变换</strong> 下的 <strong>位置</strong> 打上 <strong>关键帧</strong>，然后更改y值使图片向上移出画框。同时将 <strong>使用合成快门角度</strong> 取消勾选，将 <strong>快门角度</strong> 改为200。</li>
<li>点击第一张图片结束的前一帧，将 <strong>变换</strong> 下的 <strong>位置</strong> 参数进行 <strong>重置</strong>（点击最右边的旋转按钮）。</li>
<li>右键点击第一张图片，选择 <strong>复制</strong>。然后框选第一组中第一张图片之后的所有图片，右键 –&gt; 粘贴属性。</li>
<li>将第一组照片移动到上一层（即从 V1 轴移动到 V2 轴），将第二组图片往前移动，直到第二组的第一张图片和第一组的第二张图片对齐。</li>
<li>文件 –&gt; 新建 –&gt; 旧版标题，将打开一个字幕添加浮动面板。在面板中添加标题文字，字体可自由设定。选中 <strong>背景</strong> ，可添加背景色；选择 <strong>阴影</strong> ，可添加文字阴影。</li>
<li>将刚才建立的字幕拖到一条新的视频轴的合适位置上（与下方视频轴中你想让字幕开始出现的位置对齐）。</li>
<li>效果 –&gt; 搜索 <strong>超级键</strong>，将 <strong>超级键</strong> 拖到字幕上，在 <strong>效果控件</strong> 中，使用 <strong>超级键</strong> 中 <strong>主要颜色</strong> 的 <strong>吸管工具</strong> ，吸取字幕中的字体颜色，就能将字体变为透明的。在 <strong>遮罩清除</strong> 中将 <strong>抑制</strong> 调到45以去除文字周围的毛边。</li>
<li>找到字幕层最开始的一帧，进入 <strong>效果控件</strong> 面板。将 <strong>缩放</strong> 和 <strong>不透明度</strong> 都打上 <strong>关键帧</strong>。将缩放调整到一个合适的位置，大概为6倍；将不透明度降为0。在你认为字幕可以完全显现的一帧将缩放和不透明度都 <strong>重置</strong>。</li>
<li>在 <strong>项目</strong> 面板，新建项 –&gt; 颜色遮罩 –&gt; 选择白色，得到一个白色的层。</li>
<li>将字幕层上移一个轴，将白色遮罩层放在原来字幕层所在的那个轴，白色层的第一帧和字幕完全显性帧的后一帧对齐。</li>
<li>进入颜色遮罩层的效果控件面板，将第一帧的 <strong>不透明度</strong> 改为0，然后在快要结束的地方重置参数。</li>
<li>导出视频：<code>Ctrl + M</code> 打开导出窗口，格式选择 <strong>H.264</strong>（即MP4）；预设可以选择匹配源（就是和你的序列的设置一样），也可以选择其他格式（高清可以选择HD1080P 25 ）；目标比特率可以选择4-6，最大可以是6以上，目标比特率越大，视频就越清晰，一般目标比特率4-8都可以很清晰了；其他设置默认即可，选择一下导出的位置，最后点一下右下角的导出即可。</li>
</ol>
<blockquote>
<p>这是第一个视频素材，记为 <strong>Video1</strong></p>
</blockquote>
<h1 id="神奇宝贝我是谁"><a href="#神奇宝贝我是谁" class="headerlink" title="神奇宝贝我是谁"></a>神奇宝贝我是谁</h1><p>这是神奇宝贝里的一个视频片段，大概就是先出现一个神奇宝贝的轮廓让观众猜测是哪个神奇宝贝，隔几秒后显示正确答案这样。</p>
<h2 id="“神奇宝贝”"><a href="#“神奇宝贝”" class="headerlink" title="“神奇宝贝”"></a>“神奇宝贝”</h2><p>本项目中拟选取两个角色当做“神奇宝贝”，一个是 <strong>搭小船的屈原</strong>（御龙舟而行的动漫屈原），一个是 <strong>蜡笔小青蛙</strong>（穿青蛙套装的蜡笔小新）。搭小船的屈原是为了呼应 <strong>端午</strong> 这个主题，而蜡笔小青蛙是因为王哥曾经有个头像是穿青蛙套装的蜡笔小新，但是我找不到这个图了，又不敢直接搜索怕给我关联到一些可怕的青蛙图片，就以“蜡笔小新头像”为关键词进行搜索，逛了逛，找到了一张骚气十足的，虽然和以前的不同，但姑且可以拿来一用。</p>
<h3 id="搭小船的屈原"><a href="#搭小船的屈原" class="headerlink" title="搭小船的屈原"></a>搭小船的屈原</h3><p><img src="/2021/06/13/%E5%81%9A%E4%B8%AA%E7%AB%AF%E5%8D%88%E8%8A%82%E5%B0%8F%E8%A7%86%E9%A2%91/8.jpg" alt></p>
<p><strong>具体步骤</strong>：</p>
<ol>
<li>在 PS 软件中打开 <strong>龙舟</strong> 图片，用矩形选框工具框选中间的 <strong>水印花</strong>，按 <code>Shift + F5</code> 打开填充工具，选择 <strong>内容填充</strong>，去除水印。</li>
<li>将 <strong>屈原</strong> 图片拖入 PS 后，会自动生成 <strong>屈原图层</strong>。取消 <strong>背景图层</strong> 的可视性（点击左侧的小眼睛）。在屈原图层中，使用 <strong>快速选择工具</strong> 将屈原人物从马赛克背景中抠出来，然后 <code>Ctrl + J</code> 将抠图结果复制到一个新的图层。得到这个新图层后原图层就可以删除了。</li>
<li>显示 <strong>背景图层</strong>。选中 <strong>屈原图层</strong>，<code>Ctrl + T</code> 进入图形变换模式，右键 –&gt; 水平翻转。移动、缩放屈原到合适的位置。</li>
</ol>
<h3 id="蜡笔小青蛙"><a href="#蜡笔小青蛙" class="headerlink" title="蜡笔小青蛙"></a>蜡笔小青蛙</h3><p><img src="/2021/06/13/%E5%81%9A%E4%B8%AA%E7%AB%AF%E5%8D%88%E8%8A%82%E5%B0%8F%E8%A7%86%E9%A2%91/9.jpg" alt><br>步骤是 <strong>搭小船的屈原</strong> 的子集，因此不再赘述。</p>
<h3 id="抠图"><a href="#抠图" class="headerlink" title="抠图"></a>抠图</h3><p>简单来说就是把上面两个步骤得到的合成图去除背景，得到单纯的人物图。另外，因为视频制作的需要，还要做一个黑底人物图。黑底的话也是把目标人物选出来后使用 <strong>套索工具</strong>，右键 –&gt; 填充 –&gt; 前景色（前提是前景色为黑色）。</p>
<p>得到如下四张图作为视频中的素材。<br><img src="/2021/06/13/%E5%81%9A%E4%B8%AA%E7%AB%AF%E5%8D%88%E8%8A%82%E5%B0%8F%E8%A7%86%E9%A2%91/10.jpg" alt></p>
<h2 id="音频素材"><a href="#音频素材" class="headerlink" title="音频素材"></a>音频素材</h2><p>视频中需要几句话，分别是：</p>
<ol>
<li>“我是谁”</li>
<li>“搭小船的屈原”</li>
<li>“蜡笔小青蛙”</li>
</ol>
<p>制作方式是使用手机上的 <strong>剪映APP</strong> 中自带的文本朗读功能，使用的是蜡笔小新的音色。然后把剪映中导出的视频文件由手机端发送到PC端，再在 PC 端使用 EV 录制视频中的声音得到音频素材。</p>
<blockquote>
<p>可以把多句话录到一个文件里，最后在 PR 里再剪辑。</p>
</blockquote>
<h2 id="视频制作"><a href="#视频制作" class="headerlink" title="视频制作"></a>视频制作</h2><p><strong>参考资料</strong></p>
<ul>
<li>制作流程：<a href="https://www.bilibili.com/video/BV13r4y1w7ea" target="_blank" rel="noopener">https://www.bilibili.com/video/BV13r4y1w7ea</a></li>
<li>模板：<a href="https://www.bilibili.com/video/BV1qV411671t" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1qV411671t</a></li>
</ul>
<p><strong>制作步骤</strong></p>
<ol>
<li>首先利用 EV 录屏将 Up 主提供的模板给录下来。</li>
<li>将模板、四张图片素材、录音文件拖入 PR 素材箱中。</li>
<li>将模板拖入到 <strong>时间轴</strong> 中，系统会自动建立序列，不妨称为 <strong>模板图层</strong>。在菜单中的 <strong>序列</strong> 下的 <strong>序列设置</strong> ，找到“视频”设置菜单栏下的“帧大小”设置，将帧大小设置为和上个视频相同的帧大小。在模板图层处右键，选择 <strong>缩放为帧大小</strong>。</li>
<li>在视频中 <strong>问号</strong> 完全出现的下一帧拖入 <strong>黑底图片</strong>，建立 <strong>图片图层</strong>。在该图层的 <strong>效果控件</strong> 下调整 <strong>速度</strong> 下的 <strong>位置</strong> 和 <strong>缩放</strong> 使图片恰好能在神奇宝贝框中显示。</li>
<li>用 <strong>文字工具</strong> 添加 <strong>我是谁</strong> 的文字，系统会自动在视频轴中添加 <strong>字幕图层</strong>，在 <strong>基本图形</strong> 中可设置字属性。</li>
<li>在视频中答案显示的上一帧拖入 <strong>黑底图片</strong> 和 <strong>彩色图片</strong> ，并在两者之间添加 <strong>交叉溶解</strong>（在效果中搜索 <strong>视频过渡</strong> 即可找到）。同时对 <strong>彩色图片</strong> 的粘贴从 <strong>黑底图片</strong> 中复制而来的属性。</li>
<li>添加文字答案。</li>
<li>为添加的两个文字添加滑动显示的效果。方法是在 <strong>效果控件</strong> 的 <strong>不透明</strong> 度中添加 <strong>矩形蒙版</strong> ，然后设置蒙版路径。</li>
<li>最后将录制的音频拖入到合适的位置。</li>
<li>导出视频。</li>
</ol>
<blockquote>
<p>这是第二个视频素材，记为 <strong>Video2</strong></p>
</blockquote>
<h1 id="小新喊话"><a href="#小新喊话" class="headerlink" title="小新喊话"></a>小新喊话</h1><ol>
<li>观看两集蜡笔小新，找到其中的喊话片段，用 EV 录屏录制下来。</li>
<li>利用剪映APP的 <strong>文本朗读</strong> 功能以蜡笔小新的语气生成要说的话。</li>
<li>选择第一部分的某一张风景图作为背景图。</li>
<li>将以上素材拖入 PR 的素材箱中，将视频拖入到时间轴中建立序列，使用 <strong>剃刀</strong> 工具将一些多余的画面进行删除。初始时，片段的视频和音频是连接在一起的，需要在序列处 <strong>右键–&gt;取消链接</strong>。然后就可以单独删除原音频，并将需要用到的新音频拖入到音频轨道。</li>
<li>将视频图层移上一层，将背景图拖入到原视频图层所在视频轴。使 <strong>背景序列</strong> 和 <strong>视频序列</strong> 长度对齐。</li>
<li>使用 <strong>超级键</strong> 对视频序列进行一个简单的抠图（虽然效果一般般）。</li>
<li>导出视频</li>
</ol>
<blockquote>
<p>这是第三个视频素材，记为 <strong>Video3</strong></p>
</blockquote>
<h1 id="整合"><a href="#整合" class="headerlink" title="整合"></a>整合</h1><p>最终将三个视频进行拼接，得到最终效果。</p>

<video src="final_long.mp4" type="video/mp4" controls="controls" width="100%" height="100%">
</video>


<h1 id="后言"><a href="#后言" class="headerlink" title="后言"></a>后言</h1><p>因为做视频前期是一边写博文一边做，所以写的比较详细。后来，发现时间有点不够了，就直接做，赶在端午节的尾巴做出了这个小视频。但是做完视频后就不太想写博文了，甚至想直接断尾。玩了两天后就更不想写了，于是草草收场。^_^</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>日记</tag>
      </tags>
  </entry>
  <entry>
    <title>力扣刷题之【Line Sweep】</title>
    <url>/2020/12/29/%E5%8A%9B%E6%89%A3%E5%88%B7%E9%A2%98%E4%B9%8B%E3%80%90Line-Sweep%E3%80%91/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote class="blockquote-center">
<p>^ _ ^ </p>

</blockquote>
<a id="more"></a>

<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>在计算几何中，扫描线算法（Sweep Line Algorithm）或平面扫描算法（Plane Sweep Algorithm）是一种算法范例，它使用虚拟扫描线或扫描面来解决欧几里德空间中的各种问题。它是计算几何中的关键技术之一。</p>
<p>这种算法背后的想法是想象一条线（通常是一条垂直线）在平面上扫过或移动，在某些点停止。几何操作仅限于几何对象，无论何时停止，它们都与扫描线相交或紧邻扫描线，并且一旦线穿过所有对象，就可以获得完整的解。</p>
<h1 id="391-完美矩形"><a href="#391-完美矩形" class="headerlink" title="391.完美矩形"></a>391.完美矩形</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p><img src="/2020/12/29/%E5%8A%9B%E6%89%A3%E5%88%B7%E9%A2%98%E4%B9%8B%E3%80%90Line-Sweep%E3%80%91/1.png" alt></p>
<p>题目链接：<a href="https://leetcode-cn.com/problems/perfect-rectangle/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/perfect-rectangle/</a></p>
<h2 id="题目理解"><a href="#题目理解" class="headerlink" title="题目理解"></a>题目理解</h2><p>根据题意，完美矩形应具有的条件如下：</p>
<ul>
<li>所有小矩形构成一个大矩形</li>
<li>大矩形是完整的，中间不能有空缺</li>
<li>小矩形之间不能有覆盖</li>
</ul>
<h2 id="思路1：面积累加-坐标消融"><a href="#思路1：面积累加-坐标消融" class="headerlink" title="思路1：面积累加 + 坐标消融"></a>思路1：面积累加 + 坐标消融</h2><p>对于一个完美矩形，应该满足如下两个条件：</p>
<ul>
<li>小矩形的面积之和 == 大矩形的面积</li>
<li>在小矩形所有顶点组成的序列中，出现次数为1的顶点就是最后完美矩形的四个顶点，其他的顶点都出现了两次，如下图所示<br><img src="/2020/12/29/%E5%8A%9B%E6%89%A3%E5%88%B7%E9%A2%98%E4%B9%8B%E3%80%90Line-Sweep%E3%80%91/2.png" alt></li>
</ul>
<h3 id="第一次尝试"><a href="#第一次尝试" class="headerlink" title="第一次尝试"></a>第一次尝试</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">isRectangleCover</span><span class="params">(rectangles)</span> -&gt; bool:</span></span><br><span class="line">    area = <span class="number">0</span></span><br><span class="line">    points = []</span><br><span class="line">    <span class="keyword">for</span> rectangle <span class="keyword">in</span> rectangles:</span><br><span class="line">        leftDown = rectangle[<span class="number">0</span>:<span class="number">2</span>]</span><br><span class="line">        rightUp = rectangle[<span class="number">2</span>:<span class="number">4</span>]</span><br><span class="line">        leftUp = [leftDown[<span class="number">0</span>],rightUp[<span class="number">1</span>]]</span><br><span class="line">        rightDown = [rightUp[<span class="number">0</span>],leftDown[<span class="number">1</span>]]</span><br><span class="line"></span><br><span class="line">        points.remove(leftDown) <span class="keyword">if</span> leftDown <span class="keyword">in</span> points <span class="keyword">else</span> points.append(leftDown)</span><br><span class="line">        points.remove(rightUp) <span class="keyword">if</span> rightUp <span class="keyword">in</span> points <span class="keyword">else</span> points.append(rightUp)</span><br><span class="line">        points.remove(leftUp) <span class="keyword">if</span> leftUp <span class="keyword">in</span> points <span class="keyword">else</span> points.append(leftUp)</span><br><span class="line">        points.remove(rightDown) <span class="keyword">if</span> rightDown <span class="keyword">in</span> points <span class="keyword">else</span> points.append(rightDown)</span><br><span class="line"></span><br><span class="line">        area += (rectangle[<span class="number">3</span>]-rectangle[<span class="number">1</span>])*(rectangle[<span class="number">2</span>]-rectangle[<span class="number">0</span>])</span><br><span class="line">    <span class="comment"># print(f"points:&#123;points&#125;")</span></span><br><span class="line">    <span class="keyword">if</span> len(points) != <span class="number">4</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    points = sorted(points,key=<span class="keyword">lambda</span> kv:(kv[<span class="number">0</span>],kv[<span class="number">1</span>]))</span><br><span class="line">    <span class="comment"># print(f"sortedPoints:&#123;points&#125;")</span></span><br><span class="line">    <span class="keyword">if</span> (points[<span class="number">3</span>][<span class="number">0</span>]-points[<span class="number">0</span>][<span class="number">0</span>])*(points[<span class="number">3</span>][<span class="number">1</span>]-points[<span class="number">0</span>][<span class="number">1</span>]) == area:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/12/29/%E5%8A%9B%E6%89%A3%E5%88%B7%E9%A2%98%E4%B9%8B%E3%80%90Line-Sweep%E3%80%91/3.png" alt></p>
<h3 id="第二次尝试"><a href="#第二次尝试" class="headerlink" title="第二次尝试"></a>第二次尝试</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">isRectangleCover</span><span class="params">(rectangles)</span> -&gt; bool:</span></span><br><span class="line">    area = <span class="number">0</span></span><br><span class="line">    points = []</span><br><span class="line">    <span class="comment"># X1,Y1,X2,Y2为大矩形的坐标</span></span><br><span class="line">    X1,Y1,X2,Y2 = sys.maxsize,sys.maxsize,-sys.maxsize,-sys.maxsize</span><br><span class="line">    <span class="keyword">for</span> x1,y1,x2,y2 <span class="keyword">in</span> rectangles:</span><br><span class="line">        X1,Y1,X2,Y2 = min(x1,X1),min(y1,Y1),max(x2,X2),max(y2,Y2)</span><br><span class="line"></span><br><span class="line">        rectangle = [(x1,y1),(x2,y2),(x1,y2),(x2,y1)]</span><br><span class="line">        <span class="keyword">for</span> point <span class="keyword">in</span> rectangle:</span><br><span class="line">            points.remove(point) <span class="keyword">if</span> point <span class="keyword">in</span> points <span class="keyword">else</span> points.append(point)</span><br><span class="line"></span><br><span class="line">        area += (y2 - y1)*(x2 - x1)</span><br><span class="line">    <span class="keyword">if</span> len(points) != <span class="number">4</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> all([point <span class="keyword">in</span> points <span class="keyword">for</span> point <span class="keyword">in</span> [(X1,Y1),(X2,Y2),(X1,Y2),(X2,Y1)]]):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span> <span class="keyword">if</span> (Y2 - Y1)*(X2 - X1) == area <span class="keyword">else</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/12/29/%E5%8A%9B%E6%89%A3%E5%88%B7%E9%A2%98%E4%B9%8B%E3%80%90Line-Sweep%E3%80%91/4.png" alt></p>
<h3 id="第三次尝试"><a href="#第三次尝试" class="headerlink" title="第三次尝试"></a>第三次尝试</h3><blockquote>
<p>将保存点的points由list换成了set，带来了效率的显著提升</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">isRectangleCover</span><span class="params">(rectangles)</span> -&gt; bool:</span></span><br><span class="line">    area = <span class="number">0</span></span><br><span class="line">    points = set()</span><br><span class="line">    <span class="comment"># X1,Y1,X2,Y2为大矩形的坐标</span></span><br><span class="line">    X1,Y1,X2,Y2 = sys.maxsize,sys.maxsize,-sys.maxsize,-sys.maxsize</span><br><span class="line">    <span class="keyword">for</span> x1,y1,x2,y2 <span class="keyword">in</span> rectangles:</span><br><span class="line">        X1,Y1,X2,Y2 = min(x1,X1),min(y1,Y1),max(x2,X2),max(y2,Y2)</span><br><span class="line"></span><br><span class="line">        rectangle = [(x1,y1),(x2,y2),(x1,y2),(x2,y1)]</span><br><span class="line">        <span class="keyword">for</span> point <span class="keyword">in</span> rectangle:</span><br><span class="line">            points.remove(point) <span class="keyword">if</span> point <span class="keyword">in</span> points <span class="keyword">else</span> points.add(point)</span><br><span class="line"></span><br><span class="line">        area += (y2 - y1)*(x2 - x1)</span><br><span class="line">    <span class="keyword">if</span> (Y2 - Y1)*(X2 - X1) != area:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">if</span> len(points) != <span class="number">4</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> all([point <span class="keyword">in</span> points <span class="keyword">for</span> point <span class="keyword">in</span> [(X1,Y1),(X2,Y2),(X1,Y2),(X2,Y1)]])</span><br></pre></td></tr></table></figure>

<p><img src="/2020/12/29/%E5%8A%9B%E6%89%A3%E5%88%B7%E9%A2%98%E4%B9%8B%E3%80%90Line-Sweep%E3%80%91/5.png" alt></p>
<p><strong>关于set的补充</strong></p>
<ul>
<li>集合能如此高效，和它的内部的数据结构密不可分。不同于其他数据结构，集合的内部结构是一张哈希表。</li>
<li>当向集合中插入数据时，Python会根据通过 hash(valuse) 函数，计算该元素对应的哈希值。得到哈希值（例如为 hash）之后，再结合集合要存储数据的个数（例如 n），就可以得到该元素应该插入到哈希表中的位置<ul>
<li>如果哈希表中此位置是空的，那么此元素就可以直接插入其中</li>
<li>反之，如果此位置已被其他元素占用，那么 Python 会比较这两个元素的哈希值是否相等<ul>
<li>如果相等，则表明该元素已经存在，再比较他们的值，不相等就进行更新</li>
<li>如果不相等，这种情况称为哈希冲突（即两个元素的键不同，但求得的哈希值相同）。这种情况下，Python 会使用开放定址法、再哈希法等继续寻找哈希表中空余的位置，直到找到位置</li>
</ul>
</li>
</ul>
</li>
<li>在哈希表中查找数据，和插入操作类似，Python 会根据哈希值，找到该元素应该存储到哈希表中的位置，然后和该位置的元素比较元素值<ul>
<li>如果相等，则证明找到</li>
<li>反之，则证明当初存储该元素时，遇到了哈希冲突，需要继续使用当初解决哈希冲突的方法进行查找，直到找到该元素或者找到空位为止。 </li>
<li>这里的找到空位，表示哈希表中没有存储目标元素</li>
</ul>
</li>
<li>对于删除操作，Python 会暂时对这个位置的元素赋于一个特殊的值，等到重新调整哈希表的大小时，再将其删除<ul>
<li>需要注意的是，哈希冲突的发生往往会降低字典和集合操作的速度</li>
<li>因此，为了保证其高效性，字典和集合内的哈希表，通常会保证其至少留有 1/3 的剩余空间</li>
<li>随着元素的不停插入，当剩余空间小于 1/3 时，Python 会重新获取更大的内存空间，扩充哈希表，与此同时，表内所有的元素位置都会被重新排放</li>
</ul>
</li>
<li>虽然哈希冲突和哈希表大小的调整，都会导致速度减缓，但是这种情况发生的次数极少。所以，平均情况下，仍能保证插入、查找和删除的时间复杂度为 O(1)。</li>
<li>set的去重是通过两个函数<strong>hash</strong>和<strong>eq</strong>结合实现的<ul>
<li>当两个元素的哈希值不相同时，就认为这两个变量是不同的</li>
<li>当两个元素哈希值一样时，调用<strong>eq</strong>方法，当返回值为True时认为这两个变量是同一个，应该去除一个。返回FALSE时，不去重</li>
</ul>
</li>
</ul>
<h2 id="思路2：扫描线算法"><a href="#思路2：扫描线算法" class="headerlink" title="思路2：扫描线算法"></a>思路2：扫描线算法</h2>]]></content>
      <categories>
        <category>力扣</category>
      </categories>
      <tags>
        <tag>Line-Sweep</tag>
      </tags>
  </entry>
  <entry>
    <title>分享音乐</title>
    <url>/2021/05/26/%E5%88%86%E4%BA%AB%E9%9F%B3%E4%B9%90/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote class="blockquote-center">
<p>无聊的一天，听听歌 ^ _ ^ </p>

</blockquote>

<a id="more"></a>

<h1 id="没有理想的人不伤心"><a href="#没有理想的人不伤心" class="headerlink" title="没有理想的人不伤心"></a>没有理想的人不伤心</h1><div id="aplayer-TrVjwonI" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;">
				<pre class="aplayer-lrc-content">[00:00.00]没有理想的人不伤心 声活版
[00:00.00]Remix by：卓越

[00:00.00]我最爱去的唱片店
[00:03.15]昨天是她的最后一天
[00:06.96]曾经让我陶醉的碎片
[00:10.16]全都散落在街边

[00:14.31]我最爱去的书店
[00:17.76]她也没撑过这个夏天
[00:21.30]回忆文字流淌着怀念
[00:24.94]可是已没什么好怀念
[00:28.85]可是你曾经的那些梦
[00:32.38]都已变得模糊看不见
[00:35.92]那些为了理想的战斗
[00:39.66]也不过为了钱
[00:43.28]可是我最恨的那个人
[00:47.40]他始终没死在我面前
[00:50.85]还没年轻就变得苍老
[00:54.52]这一生无解

[00:56.87]没有我的空间
[01:01.82]没有我的空间
[01:05.52]没有我的空间
[01:09.39]没有我的空间

[01:12.90]你曾热爱的那个人
[01:16.75]这一生也不会再见面
[01:20.41]你等在这文化的废墟上
[01:24.08]已没人觉得你狂野
[01:27.83]那些让人敬仰的神殿
[01:31.51]只在无知的人心中灵验
[01:33.07](旁白：大家晚上好，这里是正在直播的午夜新闻 欢迎收看)
[01:36.11]我住在属于我的猪圈
[01:39.02]这一夜无眠

[01:41.59]我不要在失败孤独中死去
[01:46.05]我不要一直活在地下里
[01:49.49]物质的骗局
[01:51.90]匆匆的蚂蚁
[01:53.63]没有文化的人不伤心
[01:57.05]我不要在失败孤独中死去
[02:00.53]我不要一直活在地下里
[02:04.28]物质的骗局
[02:06.75]匆匆的蚂蚁
[02:08.68]没有文化的人不伤心
[02:11.80]他不伤心

[02:24.60]（背景音：欢迎乘坐武汉轨道交通4号线 本次列车终点站黄金口）

[02:28.24]我最爱去的唱片店
[02:30.87]昨天是她的最后一天
[02:34.51]曾经让我陶醉的碎片
[02:38.00]全都散落在街边

[02:42.30]我最爱去的书店
[02:45.42]她也没撑过这个夏天
[02:49.07]回忆文字流淌着怀念
[02:53.01]已不能怀念

[02:55.85]我不要在失败孤独中死去
[02:59.61]我不要一直活在地下里
[03:03.46]物质的骗局
[03:05.76]匆匆的蚂蚁
[03:07.64]没有文化的人不伤心
[03:11.02]我不要在失败孤独中死去
[03:14.39]我不要一直活在地下里
[03:17.91]物质的骗局
[03:20.46]匆匆的蚂蚁
[03:22.58]没有文化的人不伤心
[03:25.58]他不会伤心
[03:29.54]他不会伤心
[03:33.02]他不会伤心
[03:36.70]他不会伤心
[03:40.79]他也会伤心
[03:43.47]他也会伤心
[03:47.62]他也会伤心
[03:51.72]伤心

[04:12.15]我最爱去的唱片店
[04:14.23]昨天是她的最后一天
[04:17.95]曾经让我陶醉的碎片
[04:21.55]全都散落在街边</pre>
			</div>
			<script>
				var ap = new APlayer({
					element: document.getElementById("aplayer-TrVjwonI"),
					narrow: false,
					autoplay: false,
					showlrc: 2,
					music: {
						title: "没有理想的人不伤心",
						author: "新裤子",
						url: "http://music.163.com/song/media/outer/url?id=1305364671.mp3",
						pic: "http://p2.music.126.net/GW7sRVT4sfm8P0kwkMlQlg==/109951163522768092.jpg?param=130y130",
					}
				});
				window.aplayers || (window.aplayers = []);
				window.aplayers.push(ap);
			</script>

<h1 id="梦一场"><a href="#梦一场" class="headerlink" title="梦一场"></a>梦一场</h1><div id="aplayer-PIghMIgC" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;">
				<pre class="aplayer-lrc-content">[01:00.943]我们都曾经寂寞而给对方承诺
[01:05.199]我们都因为折磨而厌倦了生活
[01:10.201]只是这样的日子
[01:12.696]同样的方式
[01:15.194]还要多久
[01:21.443]我们改变了态度而接纳了对方
[01:26.202]我们委屈了自己成全谁的梦想
[01:30.692]只是这样的日子
[01:33.199]还剩下多少
[01:35.448]已不重要
[01:41.700]时常想起过去的温存
[01:46.447]它让我在夜里不会冷
[01:50.947]你说一个人的美丽是认真
[01:55.194]两个人能在一起是缘份
[02:01.700]早知道是这样
[02:05.699]像梦一场
[02:06.692]我才不会把爱都放在同一个地方
[02:11.193]我能原谅
[02:14.692]你的荒唐
[02:15.951]荒唐的是我没有办法遗忘
[02:20.195]早知道是这样
[02:22.947]如梦一场
[02:25.197]我又何必把泪都锁在自己的眼眶
[02:29.700]让你去疯
[02:32.195]让你去狂
[02:34.199]让你在没有我的地方坚强
[02:58.947]时常想起过去的温存
[03:03.450]它让我在夜里不会冷
[03:07.952]你说一个人的美丽是认真
[03:12.442]两个人能在一起是缘份
[03:18.948]早知道是这样
[03:21.700]像梦一场
[03:23.694]我才不会把爱都放在同一个地方
[03:28.695]我能原谅
[03:30.948]你的荒唐
[03:32.943]荒唐的是我没有办法遗忘
[03:36.943]早知道是这样
[03:39.695]如梦一场
[03:41.700]我又何必把泪都锁在自己的眼眶
[03:46.690]让你去疯
[03:49.199]让你去狂
[03:50.947]让你在没有我的地方坚强
[03:57.445]让我在没有你的地方疗伤</pre>
			</div>
			<script>
				var ap = new APlayer({
					element: document.getElementById("aplayer-PIghMIgC"),
					narrow: false,
					autoplay: false,
					showlrc: 2,
					music: {
						title: "梦一场（治愈版）（翻自 李健）",
						author: "大西瓜",
						url: "http://music.163.com/song/media/outer/url?id=1500524338.mp3",
						pic: "http://p1.music.126.net/9FQAAw6QhxqCLu86IwVK3g==/109951165203197669.jpg?param=130y130",
					}
				});
				window.aplayers || (window.aplayers = []);
				window.aplayers.push(ap);
			</script>


<h1 id="她和她和她"><a href="#她和她和她" class="headerlink" title="她和她和她"></a>她和她和她</h1><div id="aplayer-MKdsgnNp" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;">
				<pre class="aplayer-lrc-content">[00:02.35]词曲：于贞

[00:04.90]
[00:05.53]她也是谁的妈妈
[00:11.51]女儿啊，妻子啊，朋友姐妹啊
[00:17.63]她和她们的想法
[00:23.16]梦想啊，自由啊，不可爱吗？
[00:29.35]
[00:29.76]她名字叫做Lisa
[00:31.58]Lisa她想留长发
[00:33.20]想了很久要是留了
[00:34.52]也只能藏在手术帽下
[00:36.13]用发卡大褂不怕回答
[00:38.29]外面质疑强压
[00:39.79]内心不安想法
[00:41.89]我说oh
[00:43.10]别太在意no
[00:43.97]你不仅善良可爱面对专业你是Pro
[00:46.89] oh oh no就
[00:48.68]往前走别往后
[00:50.14]头发留不留
[00:51.40]你做决定就够了
[00:52.19]
[00:54.00]（ah oh ah oh ah-oh-ah-oh）
[00:57.07]（ah oh ah oh ah-oh-ah-oh）
[01:00.93]想那么多干嘛？
[01:02.34]你别听谁的话
[01:03.87]你已经很棒啦
[01:06.46]（ah oh ah oh ah-oh-ah-oh）
[01:09.07]（ah oh ah oh ah-oh-ah-oh）
[01:12.72]专心工作，我等你回家轰趴
[01:14.51]
[01:17.32]她也是谁的妈妈
[01:23.65]女儿啊，妻子啊，朋友姐妹啊
[01:29.29]她和她们的想法
[01:35.70]梦想啊，自由啊，不可爱吗？
[01:41.51]
[01:42.00]现在是Lina在庭上
[01:45.18]陪审团表情严肃的打量
[01:48.32]长裤运动鞋梳油头的姑娘
[01:50.66]我知道，其实她很紧张
[01:53.97]要穿正装最好画个淡妆
[01:56.71]但她字里间行 通宵苦想
[01:59.58]把案例主张全部通通摆上
[02:02.41]没回应，但应该有不错走向
[02:05.33]
[02:05.93]（ah oh ah oh ah-oh-ah-oh）
[02:09.05]（ah oh ah oh ah-oh-ah-oh）
[02:12.54]想那么多干嘛？
[02:14.11]你别听谁的话
[02:15.72]你已经很棒啦
[02:18.01]（ah oh ah oh ah-oh-ah-oh）
[02:21.00]（ah oh ah oh ah-oh-ah-oh）
[02:24.60]专心工作，我等你回家轰趴
[02:28.18]
[02:28.68]她也是谁的妈妈
[02:35.70]女儿啊，妻子啊，朋友姐妹啊
[02:41.24]她和她们的想法
[02:47.66]梦想啊，自由啊，不可爱吗？
[02:51.83]
[02:54.10]一堆人说着aiue外国话
[02:56.89]Rita在旁边奋笔疾书头皮发麻
[03:00.52]轻微腹痛，会场有风
[03:03.03]汗流到手中，手不受控，气氛沉重
[03:06.12]她的爸妈早就说让她回家
[03:08.91]不去相亲不谈恋爱不听话
[03:11.38]这次会议很重要
[03:13.01]不能分心被毁掉
[03:14.15]不要做一般要做更好
[03:15.40]要他们看到要他们骄傲
[03:17.97]
[03:18.28]（ah oh ah oh ah-oh-ah-oh）
[03:20.98]（ah oh ah oh ah-oh-ah-oh）
[03:24.47]想那么多干嘛？
[03:26.00]你别听谁的话
[03:28.40]你已经很棒啦
[03:30.08]（ah oh ah oh ah-oh-ah-oh）
[03:33.44]（ah oh ah oh ah-oh-ah-oh）
[03:36.53]专心工作，我等你回家轰趴
[03:40.20]
[03:41.31]她也是谁的妈妈
[03:47.44]女儿啊，妻子啊，朋友姐妹啊
[03:53.16]她和她们的想法
[03:59.64]梦想啊，自由啊，不可爱吗？</pre>
			</div>
			<script>
				var ap = new APlayer({
					element: document.getElementById("aplayer-MKdsgnNp"),
					narrow: false,
					autoplay: false,
					showlrc: 2,
					music: {
						title: "她和她和她",
						author: "于贞",
						url: "http://music.163.com/song/media/outer/url?id=1428243603.mp3",
						pic: "http://p2.music.126.net/DOwVTi9i1aEY1vsQZfe84A==/109951164768868674.jpg?param=130y130",
					}
				});
				window.aplayers || (window.aplayers = []);
				window.aplayers.push(ap);
			</script>

<h1 id="独家记忆"><a href="#独家记忆" class="headerlink" title="独家记忆"></a>独家记忆</h1><div id="aplayer-GrSLaYTS" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;">
				<pre class="aplayer-lrc-content"> 
[00:24.880]忘记分开后的第几天起
[00:30.030]喜欢一个人 看下大雨
[00:35.680]没联络 孤单就像连锁反应
[00:41.600]想要快乐都没力气
[00:47.190]
[00:49.530]雷雨世界像场灾难电影
[00:54.680]让现在的我 可怜到底
[01:00.160]对不起 谁也没有时光机器
[01:06.110]已经结束的 没有商量的余地
[01:14.280]
[01:15.280]我希望你 是我独家的记忆
[01:21.110]摆在心底
[01:23.560]不管别人说的多么难听
[01:29.130]现在我拥有的事情
[01:32.900]是你 是给我一半的爱情
[01:37.790]
[01:38.490]我喜欢你 是我独家的记忆
[01:44.500]谁也不行
[01:47.020]从我这个身体中拿走你
[01:52.590]在我感情的封锁区
[01:56.390]有关于你 绝口不提 没问题
[02:06.560]
[02:28.830]雷雨世界像场灾难电影
[02:33.490]让现在的我 可怜到底
[02:39.240]对不起 谁也没有时光机器
[02:46.010]已经结束的 没有商量的余地
[02:53.770]我希望你 是我独家的记忆
[02:53.970]
[02:59.500]摆在心底
[03:02.160]不管别人说的多么难听
[03:07.900]现在我拥有的事情
[03:11.890]是你 是给我一半的爱情
[03:16.770]
[03:17.470]我喜欢你 是我独家的记忆
[03:23.440]谁也不行
[03:26.200]从我这个身体中拿走你
[03:31.900]在我感情的封锁区
[03:36.580]有关于你 绝口不提 没关系
[03:44.930]
[03:44.430]我喜欢你 是我独家的记忆
[03:50.240]摆在心底
[03:52.980]不管别人说的多么难听
[03:58.610]现在我拥有的事情
[04:02.590]是你 是给我一半的爱情
[04:07.530]
[04:08.230]我喜欢你 是我独家的记忆
[04:14.180]谁也不行
[04:16.830]从我这个身体中拿走你
[04:22.480]在我感情的封锁区
[04:29.370]有关于你 绝口不提 没限期
[04:40.950]</pre>
			</div>
			<script>
				var ap = new APlayer({
					element: document.getElementById("aplayer-GrSLaYTS"),
					narrow: false,
					autoplay: false,
					showlrc: 2,
					music: {
						title: "独家记忆",
						author: "陈小春",
						url: "http://music.163.com/song/media/outer/url?id=63650.mp3",
						pic: "http://p1.music.126.net/D_e8zPgwkKCk1uSF-HSgbw==/18806046883327256.jpg?param=130y130",
					}
				});
				window.aplayers || (window.aplayers = []);
				window.aplayers.push(ap);
			</script>

<h1 id="单车"><a href="#单车" class="headerlink" title="单车"></a>单车</h1><div id="aplayer-FgMndPye" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;">
				<pre class="aplayer-lrc-content">
[00:19.261]不要不要假设我知道
[00:25.160]一切一切也都是为我而做
[00:30.206]为何这么伟大
[00:34.149]如此感觉不到
[00:36.720]不说一句的爱有多好
[00:40.752]只有一次记得实在接触到
[00:45.748]骑着单车的我俩
[00:50.035]怀紧贴背的拥抱
[00:52.408]难离难舍想抱紧些
[00:56.134]茫茫人生好像荒野
[01:00.372]如孩儿能伏于爸爸的肩膊
[01:04.454]谁要下车
[01:08.544]难离难舍总有一些
[01:12.480]常情如此不可推卸
[01:17.260]任世间再冷酷
[01:18.531]想起这单车还有幸福可借
[01:40.467]经已给我怎会看不到
[01:44.045]虽说演你角色实在有难度
[01:48.887]从来虚位以待
[01:52.771]何不给个拥抱
[01:55.343]想我怎去相信这一套
[01:59.340]多疼惜我却不便让我知道
[02:03.531]怀念单车给你我
[02:07.714]唯一有过的拥抱
[02:09.882]难离难舍想抱紧些
[02:13.466]茫茫人生好像荒野
[02:17.394]如孩儿能伏于爸爸的肩膊
[02:20.874]哪怕遥遥长路多斜
[02:25.562]你爱我爱多些
[02:27.579]让我他朝走得坚壮些
[02:32.718]你介意来爱护
[02:34.992]又靠谁施舍
[03:10.382]难离难舍想抱紧些
[03:15.170]茫茫人生好像荒野
[03:20.266]如孩儿能伏于爸爸的肩膊
[03:26.214]谁要下车
[03:31.310]难离难舍总有一些
[03:35.395]常情如此不可推卸
[03:39.274]任世间怨我坏可知我只得你
[03:44.774]承受我的狂或野</pre>
			</div>
			<script>
				var ap = new APlayer({
					element: document.getElementById("aplayer-FgMndPye"),
					narrow: false,
					autoplay: false,
					showlrc: 2,
					music: {
						title: "单车（Live）",
						author: "陈奕迅",
						url: "http://music.163.com/song/media/outer/url?id=64561.mp3",
						pic: "http://p2.music.126.net/7dbK-A_In2Wol92TDMYIGw==/6636652185368776.jpg?param=130y130",
					}
				});
				window.aplayers || (window.aplayers = []);
				window.aplayers.push(ap);
			</script>

<h1 id="娱乐天空"><a href="#娱乐天空" class="headerlink" title="娱乐天空"></a>娱乐天空</h1><div id="aplayer-WzIdLLHR" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;">
				<pre class="aplayer-lrc-content">[00:03.000] 制作人 : 火星电台 (Radio Mars)
[00:04.000]
[01:30.675] 天色将晚 在我看着你的眼里色彩斑斓
[01:37.837] 有人装作善良
[01:39.780] 正在靠近你的身旁 要做你的伴
[01:46.053] 怕你太孤单
[01:49.371] 请你努力地习惯
[01:53.430] 噢 小心娱乐版
[01:56.338] 说你的表演还不够自然
[02:01.384] 阳光多灿烂
[02:04.002] 可我的自由行驶地缓慢
[02:09.068] 欲望难躲闪
[02:11.651] 我终于还是失去了判断
[02:16.715] 阳光多灿烂
[02:19.314] 可我的理想在慢慢腐烂
[02:24.403] 欲望难躲闪
[02:27.044] 我终于还是失去了判断
[02:32.094] 突如其来的崇拜
[02:34.710] 让你的心跳慢不下来
[02:39.832] 来不及释放情感
[02:42.393] 这儿没人管你喜欢不喜欢
[02:47.469] 不要怕伤害
[02:50.123] 噢 BABY SORRY 你是偶像派
[02:54.598] 请你心中的真爱
[02:57.993] 自动消失在人海
[03:03.137]
[03:18.169] 阳光多灿烂
[03:20.788] 可我的自由行驶地缓慢
[03:25.863] 欲望难躲闪
[03:28.437] 我终于还是失去了判断
[03:33.497] 阳光多灿烂
[03:36.134] 可我的理想在慢慢腐烂
[03:41.126] 生活多艰难
[03:43.775] 再见了我的冲动和浪漫
[03:49.451]
[04:04.196] 阳光多灿烂
[04:06.875] 可我的自由行驶地缓慢
[04:11.918] 欲望难躲闪
[04:14.509] 我终于还是失去了判断
[04:19.601] 阳光多灿烂
[04:22.223] 可我的理想在慢慢腐烂
[04:27.217] 生活多艰难
[04:29.909] 再见了我的冲动和浪漫
[04:34.967] 啦…
[05:00.621] 再见了我的冲动和浪漫
[05:07.780] 心里装着一片海
[05:11.850] 可眼前的路越走越窄
[05:19.237] 也许是成熟的不够快
[05:24.441] 眼看这乐趣变成了负担
[05:32.743] 表现得无奈
[05:38.668] 又舍不得离开
[05:44.876] 用自由来交换
[05:52.207] 这奢侈的晚餐</pre>
			</div>
			<script>
				var ap = new APlayer({
					element: document.getElementById("aplayer-WzIdLLHR"),
					narrow: false,
					autoplay: false,
					showlrc: 2,
					music: {
						title: "娱乐天空",
						author: "陈奕迅",
						url: "http://music.163.com/song/media/outer/url?id=28481104.mp3",
						pic: "http://p2.music.126.net/7dbK-A_In2Wol92TDMYIGw==/6636652185368776.jpg?param=130y130",
					}
				});
				window.aplayers || (window.aplayers = []);
				window.aplayers.push(ap);
			</script>

<h1 id="最佳损友"><a href="#最佳损友" class="headerlink" title="最佳损友"></a>最佳损友</h1><div id="aplayer-vNMLkCyk" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;">
				<pre class="aplayer-lrc-content">
[00:00.500]
[00:00.900]朋友 我当你一秒朋友
[00:07.081]朋友 我当你一世朋友
[00:13.691]奇怪 过去再不堪回首
[00:20.460]怀缅 时时其实还有
[00:25.599]
[00:27.047]朋友 你试过将我营救
[00:33.797]朋友 你试过把我批斗
[00:40.401]无法 再与你交心联手
[00:46.241]毕竟 难得有过最佳损友
[00:51.737]
[00:52.169]从前共你 促膝把酒
[00:54.987]倾通宵都不够
[00:56.531]我有痛快过 你有没有
[01:00.851]很多东西今生只可给你
[01:03.210]保守至到永久
[01:05.004]别人如何明白透
[01:07.441]实实在在 踏入过我宇宙
[01:09.849]即使相处到 有个裂口
[01:13.343]命运决定了 以后再没法聚头
[01:16.908]但说过去 却那样厚
[01:19.171]
[01:19.631]问我有没有 确实也没有
[01:22.851]一直躲避的藉口 非什么大仇
[01:26.145]为何旧知己 在最后
[01:29.574]变不到老友
[01:32.844]不知你是我敌友 已没法望透
[01:36.573]被推着走 跟着生活流
[01:39.493]来年陌生的
[01:41.617]是昨日最亲的某某
[01:47.021]
[01:50.868]生死之交当天不知罕有
[01:53.298]到你变节了 至觉未够
[01:57.411]多想一天 彼此都不追究
[01:59.923]相邀再次喝酒
[02:01.629]待 葡萄成熟透
[02:04.106]但是命运入面 每个邂逅
[02:06.537]一起走到了 某个路口
[02:09.955]是敌与是友 各自也没有自由
[02:13.506]位置变了 各有队友
[02:15.903]
[02:16.234]问我有没有 确实也没有
[02:19.554]一直躲避的藉口 非什么大仇
[02:22.767]为何旧知己 在最后
[02:26.142]变不到老友
[02:29.481]不知你是我敌友 已没法望透
[02:33.258]被推着走 跟着生活流
[02:36.138]来年陌生的
[02:38.199]是昨日最亲的某某
[02:41.528]早知解散后 各自有际遇作导游
[02:46.188]奇就奇在 接受了 各自有路走
[02:49.493]却没人像你 让我 眼泪背着流
[02:52.794]严重似情侣 讲分手
[02:57.690]
[03:10.314]有没有 确实也没有
[03:12.832]一直躲避的藉口 非什么大仇
[03:16.127]为何旧知己 在最后 变不到老友
[03:22.075]
[03:22.820]不知你又有没有 挂念这旧友
[03:26.647]或者自己 早就想通透
[03:29.442]来年陌生的 是昨日 最亲的某某
[03:34.779]总好于 那日我 没有
[03:39.925]没有 遇过 某某</pre>
			</div>
			<script>
				var ap = new APlayer({
					element: document.getElementById("aplayer-vNMLkCyk"),
					narrow: false,
					autoplay: false,
					showlrc: 2,
					music: {
						title: "最佳损友",
						author: "陈奕迅",
						url: "http://music.163.com/song/media/outer/url?id=65800.mp3",
						pic: "http://p2.music.126.net/boWAPs40gk82egE4khgGSA==/109951165810982908.jpg?param=130y130",
					}
				});
				window.aplayers || (window.aplayers = []);
				window.aplayers.push(ap);
			</script>

<h1 id="世界上不存在的歌"><a href="#世界上不存在的歌" class="headerlink" title="世界上不存在的歌"></a>世界上不存在的歌</h1><div id="aplayer-wCBFOhLN" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;">
				<pre class="aplayer-lrc-content">[00:04.434]编曲：梁翘柏
[00:18.139]有一首老歌
[00:21.884]曾经陪着我上课
[00:26.284]来自草蜢组合
[00:30.512]叫做失恋阵线联盟
[00:35.628]有一个女孩
[00:38.974]总是把歌名记错
[00:43.583]每次问我
[00:45.496]都说成失败者联盟
[00:52.314]我们再也没见过
[00:56.724]可我一直都记得
[01:00.833]这首世上并不存在的歌
[01:09.747]也许你已经忘了
[01:14.167]这个无心的过错
[01:18.761]却在我心里
[01:21.237]越来越深刻
[01:27.739]在某个角落
[01:31.601]也许真的有这首歌
[01:35.908]如果你听过
[01:38.056]会不会想起我
[02:01.967]我们再也没见过
[02:05.935]可我一直都记得
[02:10.075]这首世上并不存在的歌
[02:18.124]也许你已经忘了
[02:22.707]这个无心的过错
[02:26.911]却在我心里
[02:29.512]越来越深刻
[02:35.323]我们再也没见过
[02:39.379]你现在哪里生活
[02:43.719]是谁送你回家听怎样的歌
[02:51.887]也许你已经忘了
[02:56.412]临别羞涩的沉默
[03:00.453]就像一阵风
[03:03.271]遥远的吹过
[03:11.468]在某个角落
[03:15.434]也许真的有这首歌
[03:19.875]如果你听过
[03:21.956]会不会想起我
[03:27.502]如果你听过
[03:30.142]请记得嘲笑我</pre>
			</div>
			<script>
				var ap = new APlayer({
					element: document.getElementById("aplayer-wCBFOhLN"),
					narrow: false,
					autoplay: false,
					showlrc: 2,
					music: {
						title: "世界上不存在的歌",
						author: "陈奕迅",
						url: "http://music.163.com/song/media/outer/url?id=1468192805.mp3",
						pic: "http://p2.music.126.net/Abad3IaAzddLUQtGQk4izw==/109951165321788804.jpg?param=130y130",
					}
				});
				window.aplayers || (window.aplayers = []);
				window.aplayers.push(ap);
			</script>]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>音乐</tag>
      </tags>
  </entry>
  <entry>
    <title>咬得菜根，百事可做</title>
    <url>/2022/01/16/%E5%92%AC%E5%BE%97%E8%8F%9C%E6%A0%B9%EF%BC%8C%E7%99%BE%E4%BA%8B%E5%8F%AF%E5%81%9A/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote class="blockquote-center">
<p>^ _ ^ </p>

</blockquote>
<a id="more"></a>

<blockquote>
<p>以积财货之心积学问，以求功名之念求道德，以爱妻子之心爱父母，以保爵位之策保国家。</p>
</blockquote>
<blockquote>
<p>当是非邪正之交，不可少迁就，少迁就则失从违之正；值利害得失之会，不可太分明，分明则起趋避之私。</p>
</blockquote>
]]></content>
      <tags>
        <tag>文学</tag>
      </tags>
  </entry>
  <entry>
    <title>卷积神经网络</title>
    <url>/2022/01/16/%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote class="blockquote-center">
<p>^ _ ^ </p>

</blockquote>
<a id="more"></a>

<h1 id="Motivation"><a href="#Motivation" class="headerlink" title="Motivation"></a>Motivation</h1><p>In MLP, if in a layer, every input item needs to multiply a independent weight, the layer will be named <strong>Fully Connected Layer</strong> or <strong>Dense Layer</strong>. However, it is not appropriate for some tasks, such as:</p>
<ul>
<li><strong>Image Recognition</strong>: The same picture with different image transformation will have very different results.</li>
<li><strong>Emotion Classfication</strong>: The emotional polarity of a sentence is usually determined by some words or phrases. But the position of these decisive words are not fixed.</li>
</ul>
<p>Overall, the Fully Connected Layer is hard to <strong>capture critical local information</strong>.</p>
<p>To solve the problem, an idea is <strong>using a small dense layer to extract those local features</strong>, such as <strong>pixels in fixed-size window</strong>, <strong>n-gram in text</strong>. The small dense layer is called <strong>Kernel</strong> or <strong>Filter</strong>.</p>
<p>Inputs with different dimension will extract local features with different dimensions. We can use <strong>Pooling</strong> operation to retain features what we want. <strong>Pooling</strong> operation can solve the problem of <strong>inconsistent size of input samples</strong>.</p>
<p>Additionally, we can use multiple kernels to extract multiple groups of features. There are 2 ways to construct kernels:</p>
<ol>
<li>Use different initialization params.</li>
<li>Extract diffrent scale of local features.</li>
</ol>
<p>Finally, we can stacking many convolution layer and pooling layer to construct a deeper network. Those networks are called <strong>Convolutional Neural Network</strong>.</p>
<h1 id="Structure"><a href="#Structure" class="headerlink" title="Structure"></a>Structure</h1><h2 id="Simplest-Start"><a href="#Simplest-Start" class="headerlink" title="Simplest Start"></a>Simplest Start</h2><p><img src="/2022/01/16/%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/cnn.png" alt></p>
<ol>
<li>Mapping every word into a vector.</li>
<li>Use 4 kernels to extract local features. <ul>
<li>kernel size: N</li>
<li>input length: L</li>
<li>output length: L - N + 1</li>
</ul>
</li>
<li>Different kernel get different output. Input these output to pooling layer and get output with same dimension.</li>
<li>Concat these output into one feature vector.</li>
<li>Finally through Fully Connected Layer to classify.</li>
</ol>
<p>The CNN which slides in a single direction is called <strong>One-Dimension Convolution</strong>. One Dimension Convolution is suitable for NLP data. When we need to deal with image data, we need <strong>Two-Demension Convolution</strong>, which slides both horizantol and vertical.</p>
<h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><h2 id="Convolution"><a href="#Convolution" class="headerlink" title="Convolution"></a>Convolution</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch.nn <span class="keyword">import</span> Conv1d</span><br><span class="line"></span><br><span class="line"><span class="comment"># Conv1d(in_channels, out_channels, kernel_size)</span></span><br><span class="line">conv1 = Conv1d(<span class="number">5</span>, <span class="number">2</span>, <span class="number">4</span>)</span><br><span class="line">conv2 = Conv1d(<span class="number">5</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># input size: (batch, in_channels, seq_len)</span></span><br><span class="line"><span class="comment"># in nlp, in_channels represents the dimension of word vector.</span></span><br><span class="line">inputs = torch.rand(<span class="number">2</span>, <span class="number">5</span>, <span class="number">6</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># output size: (batch, out_channels, seq_len)</span></span><br><span class="line"><span class="comment"># batch: 2; out_channels: 2</span></span><br><span class="line">outputs1 = conv1(inputs) <span class="comment"># seq_len: 3 = 6 - 4 + 1</span></span><br><span class="line">outputs2 = conv2(inputs) <span class="comment"># seq_len: 4 = 6 - 3 + 1</span></span><br></pre></td></tr></table></figure>

<h2 id="Pooling"><a href="#Pooling" class="headerlink" title="Pooling"></a>Pooling</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> torch.nn <span class="keyword">import</span> MaxPool1d</span><br><span class="line">pool1 = MaxPool1d(<span class="number">3</span>) <span class="comment"># 3 is the seq_len of outputs1</span></span><br><span class="line">pool2 = MaxPool1d(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># outputs_pool1 size: [batch, out_channels, 1]</span></span><br><span class="line">outputs_pool1 = pool1(outputs1)</span><br><span class="line">outputs_pool2 = pool2(outputs2)</span><br></pre></td></tr></table></figure>

<p>Pool can also use as a function. The advantage of this method is we don’t need know the pool size in advance.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch.nn.functional <span class="keyword">as</span> F</span><br><span class="line"></span><br><span class="line">output_pool1 = F.max_pool1d(outputs1, kernel_size=outputs1.shape[<span class="number">2</span>])</span><br><span class="line">output_pool2 = F.max_pool1d(outputs2, kernel_size=outputs2.shape[<span class="number">2</span>])</span><br></pre></td></tr></table></figure>

<h2 id="Squeeze-amp-Concat"><a href="#Squeeze-amp-Concat" class="headerlink" title="Squeeze &amp; Concat"></a>Squeeze &amp; Concat</h2><p>We need to concat <code>outputs_pool1</code> and <code>outputs_pool2</code>. Before that operation, we need to delete dimension which is 1, named <strong>squeeze</strong>.</p>
<p><strong>Squeeze</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># if outputs_pool1[2] == 1, the delete dimension 2</span></span><br><span class="line">outputs_pool_squeeze1 = outputs_pool1.squeeze(dim=<span class="number">2</span>)</span><br><span class="line">outputs_pool_squeeze2 = outputs_pool2.squeeze(dim=<span class="number">2</span>)</span><br></pre></td></tr></table></figure>

<p><strong>Concat</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">outputs_pool = torch.cat([outputs_pool_squeeze1, outputs_pool_squeeze2], dim=<span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<h2 id="Fully-Connected-Layer"><a href="#Fully-Connected-Layer" class="headerlink" title="Fully Connected Layer"></a>Fully Connected Layer</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> torch.nn <span class="keyword">import</span> Linear</span><br><span class="line"></span><br><span class="line">linear = Linear(<span class="number">4</span>, <span class="number">2</span>)</span><br><span class="line">output_linear = liner(output_pool)</span><br><span class="line">print(outputs_linear)</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>Deep Learning</tag>
      </tags>
  </entry>
  <entry>
    <title>力扣刷题之【栈】</title>
    <url>/2021/01/12/%E5%8A%9B%E6%89%A3%E5%88%B7%E9%A2%98%E4%B9%8B%E3%80%90%E6%A0%88%E3%80%91/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote class="blockquote-center">
<p>^ _ ^ </p>

</blockquote>
<a id="more"></a>

<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>栈是一种先进后出的数据结构。</p>
<h1 id="简单题"><a href="#简单题" class="headerlink" title="简单题"></a>简单题</h1><h2 id="20-有效的括号"><a href="#20-有效的括号" class="headerlink" title="20 有效的括号"></a>20 有效的括号</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p><img src="/2021/01/12/%E5%8A%9B%E6%89%A3%E5%88%B7%E9%A2%98%E4%B9%8B%E3%80%90%E6%A0%88%E3%80%91/1.png" alt></p>
<p>题目链接：<a href="https://leetcode-cn.com/problems/valid-parentheses/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/valid-parentheses/</a></p>
<h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ol>
<li>用dict保存(右括号，左括号)之间的映射关系</li>
<li>用一个栈保存当前还未匹配的字符</li>
<li>逐步读入字符串中的每个字符<ul>
<li>如果该字符不属于dict的键，则直接入栈（不在dict中说明当前符号属于左括号）</li>
<li>否则，（当前符号属于右括号）<ul>
<li>如果此时栈为空，匹配失败</li>
<li>如果该键在dict中对应的值和栈顶元素相同，则出栈栈顶元素；不然匹配失败</li>
</ul>
</li>
</ul>
</li>
<li>字符串中字符读入完毕，若栈为空，匹配成功；否则，匹配失败</li>
</ol>
<h3 id="第一次尝试"><a href="#第一次尝试" class="headerlink" title="第一次尝试"></a>第一次尝试</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">isValid</span><span class="params">(s)</span>:</span></span><br><span class="line">    bracketMap = &#123;<span class="string">'&#125;'</span>:<span class="string">'&#123;'</span>,<span class="string">']'</span>:<span class="string">'['</span>,<span class="string">')'</span>:<span class="string">'('</span>&#125;</span><br><span class="line">    tokenStack = []</span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> s:</span><br><span class="line">        <span class="keyword">if</span> c <span class="keyword">not</span> <span class="keyword">in</span> bracketMap:</span><br><span class="line">            tokenStack.append(c)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> len(tokenStack) == <span class="number">0</span> <span class="keyword">or</span> tokenStack[<span class="number">-1</span>] != bracketMap[c]:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            tokenStack.pop()</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">not</span> tokenStack</span><br></pre></td></tr></table></figure>

<p><strong>复杂度分析</strong></p>
<ul>
<li>时间复杂度：O(n), n为字符串长度</li>
<li>空间复杂度：O(n + 6)，n为字符串长度，n为括号字符集大小</li>
</ul>
<h2 id="155-最小栈"><a href="#155-最小栈" class="headerlink" title="155 最小栈"></a>155 最小栈</h2><h3 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h3><p><img src="/2021/01/12/%E5%8A%9B%E6%89%A3%E5%88%B7%E9%A2%98%E4%B9%8B%E3%80%90%E6%A0%88%E3%80%91/2.png" alt></p>
<p>题目链接：<a href="https://leetcode-cn.com/problems/min-stack/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/min-stack/</a></p>
<h3 id="解题思路1"><a href="#解题思路1" class="headerlink" title="解题思路1"></a>解题思路1</h3><ol>
<li>类内部保存两个栈，一个是普通栈，一个是最小栈</li>
<li>对于最小栈，本质上是一个普通栈，只是入栈和出栈条件发生了改变，最小栈规则如下：<ul>
<li>最小栈为空时，入最小栈</li>
<li>当前入栈元素小于等于最小栈栈顶元素时，入最小栈</li>
<li>当前出栈元素与最小栈栈顶元素相同时，出最小栈</li>
</ul>
</li>
</ol>
<h3 id="第一次尝试-1"><a href="#第一次尝试-1" class="headerlink" title="第一次尝试"></a>第一次尝试</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MinStack</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.stack = []</span><br><span class="line">        self.minStack = []</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">push</span><span class="params">(self, x: int)</span> -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        self.stack.append(x)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.minStack <span class="keyword">or</span> self.minStack[<span class="number">-1</span>] &gt;= x:</span><br><span class="line">            self.minStack.append(x)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pop</span><span class="params">(self)</span> -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        x = self.stack.pop()</span><br><span class="line">        <span class="keyword">if</span> self.minStack <span class="keyword">and</span> self.minStack[<span class="number">-1</span>] == x:</span><br><span class="line">            self.minStack.pop()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">top</span><span class="params">(self)</span> -&gt; int:</span></span><br><span class="line">        <span class="keyword">return</span> self.stack[<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getMin</span><span class="params">(self)</span> -&gt; int:</span></span><br><span class="line">        <span class="keyword">return</span> self.minStack[<span class="number">-1</span>]</span><br></pre></td></tr></table></figure>

<p><strong>复杂度</strong></p>
<ul>
<li>时间复杂度：O(1)</li>
<li>空间复杂度：O(n)</li>
</ul>
<h3 id="解题思路2"><a href="#解题思路2" class="headerlink" title="解题思路2"></a>解题思路2</h3><ol>
<li>类内部只保存一个栈，栈中元素是元组形式(元素值，当前栈中最小值)</li>
<li>入栈和出栈条件如下：<ul>
<li>栈为空时，入栈元素(x,x)</li>
<li>栈不为空时，入栈元素(x,min(stack))</li>
<li>出栈则直接出栈</li>
</ul>
</li>
</ol>
<h3 id="第二次尝试"><a href="#第二次尝试" class="headerlink" title="第二次尝试"></a>第二次尝试</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MinStack</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.stack = []</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">push</span><span class="params">(self, x: int)</span> -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.stack:</span><br><span class="line">            self.stack.append((x,x))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.stack.append((x,min(x,self.stack[<span class="number">-1</span>][<span class="number">-1</span>])))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pop</span><span class="params">(self)</span> -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        self.stack.pop()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">top</span><span class="params">(self)</span> -&gt; int:</span></span><br><span class="line">        <span class="keyword">return</span> self.stack[<span class="number">-1</span>][<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getMin</span><span class="params">(self)</span> -&gt; int:</span></span><br><span class="line">        <span class="keyword">return</span> self.stack[<span class="number">-1</span>][<span class="number">-1</span>]</span><br></pre></td></tr></table></figure>

<p><strong>复杂度</strong></p>
<ul>
<li>时间复杂度：O(1)</li>
<li>空间复杂度：O(n)</li>
</ul>
<h2 id="225-用队列实现栈"><a href="#225-用队列实现栈" class="headerlink" title="225 用队列实现栈"></a>225 用队列实现栈</h2>]]></content>
      <categories>
        <category>力扣</category>
      </categories>
      <tags>
        <tag>栈</tag>
      </tags>
  </entry>
  <entry>
    <title>图像处理算法演示系统的收录</title>
    <url>/2021/05/19/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E7%AE%97%E6%B3%95%E6%BC%94%E7%A4%BA%E7%B3%BB%E7%BB%9F%E7%9A%84%E6%94%B6%E5%BD%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote class="blockquote-center">
<p>^ _ ^ </p>

</blockquote>

<a id="more"></a>

<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>毕业设计题目是做一个图像处理教学辅助工具，我把它设计为B/S结构的在线工具了。这完全是我凭空想出来的一个形式，但是我觉得这个形式比当初文献调研时看到别人实现的都要好一些。直到最近可以访问Github了，看到了几个更好的项目，自己的项目瞬间就不香了，早看到这些项目然后进行魔改该多好…</p>
<h1 id="仓库收录"><a href="#仓库收录" class="headerlink" title="仓库收录"></a>仓库收录</h1><h2 id="ImageTest"><a href="#ImageTest" class="headerlink" title="ImageTest"></a>ImageTest</h2><p><strong>github仓库地址</strong>：<a href="https://github.com/HuangBingjian/ImageProcessing" target="_blank" rel="noopener">https://github.com/HuangBingjian/ImageProcessing</a></p>
<p>这是一个用QT搭建平台，用OpenCV实现图像处理算法的软件。虽然我的在线平台可以动态添加算法什么的更加灵活，但是成也在线，败也在线，做Web不考虑并发就是玩具项目。而我的项目现在就是承受不住并发…</p>
<p><strong>效果</strong>：<img src="/2021/05/19/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E7%AE%97%E6%B3%95%E6%BC%94%E7%A4%BA%E7%B3%BB%E7%BB%9F%E7%9A%84%E6%94%B6%E5%BD%95/2.jpg" alt></p>
<hr>

<h2 id="Algorithm-Visualizer"><a href="#Algorithm-Visualizer" class="headerlink" title="Algorithm Visualizer"></a>Algorithm Visualizer</h2><p><strong>github仓库地址</strong>：<a href="https://github.com/algorithm-visualizer/algorithm-visualizer" target="_blank" rel="noopener">https://github.com/algorithm-visualizer/algorithm-visualizer</a></p>
<p>这是一个算法可视化的在线网站，做到了每一步都可视化。不过它的算法内容是数据结构相关的，但我觉得这种形式非常好，研究一下实现思路后可以改成图像处理相关算法的可视化。</p>
<p><strong>在线网址</strong>：<a href="https://algorithm-visualizer.org/" target="_blank" rel="noopener">https://algorithm-visualizer.org/</a></p>
<p><strong>效果</strong>：<img src="/2021/05/19/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E7%AE%97%E6%B3%95%E6%BC%94%E7%A4%BA%E7%B3%BB%E7%BB%9F%E7%9A%84%E6%94%B6%E5%BD%95/1.jpg" alt></p>
<hr>

<h2 id="Image-processing-algorithm"><a href="#Image-processing-algorithm" class="headerlink" title="Image-processing-algorithm"></a>Image-processing-algorithm</h2><p><strong>github仓库地址</strong>：<a href="https://github.com/BBuf/Image-processing-algorithm" target="_blank" rel="noopener">https://github.com/BBuf/Image-processing-algorithm</a></p>
<p>这个仓库记录了一些基于C++的图像处理算法复现，大多数是论文的复现。我一开始的计划本来也包含看一些论文，根据算法原理实现一些算法添加进系统。但是后来发现这工作量也太大了，就改成opencv实现算法了。这个仓库很有启发性，而且将收录论文整理得很整洁，也许今后我可以用python对论文实现一遍。</p>
<p><strong>效果</strong>：<img src="/2021/05/19/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E7%AE%97%E6%B3%95%E6%BC%94%E7%A4%BA%E7%B3%BB%E7%BB%9F%E7%9A%84%E6%94%B6%E5%BD%95/3.jpg" alt></p>
<hr>

<h2 id="PaperWeekly"><a href="#PaperWeekly" class="headerlink" title="PaperWeekly"></a>PaperWeekly</h2><p><strong>github仓库地址</strong>：<a href="https://github.com/Mycenae/PaperWeekly" target="_blank" rel="noopener">https://github.com/Mycenae/PaperWeekly</a></p>
<p>这个仓库记录了图像处理、计算机视觉方面的一些论文，包含两部分：一个是论文的链接，一个是作者自己整理论文内容写的markdown文件。</p>
<hr>

<h2 id="deep-learning-for-image-processing"><a href="#deep-learning-for-image-processing" class="headerlink" title="deep-learning-for-image-processing"></a>deep-learning-for-image-processing</h2><p><strong>github仓库地址</strong>：<a href="https://github.com/WZMIAOMIAO/deep-learning-for-image-processing" target="_blank" rel="noopener">https://github.com/WZMIAOMIAO/deep-learning-for-image-processing</a></p>
<p>深度学习在图像处理中的应用教程。</p>
<hr>

<h2 id="Image-Processing-Algorithm"><a href="#Image-Processing-Algorithm" class="headerlink" title="Image-Processing-Algorithm"></a>Image-Processing-Algorithm</h2><p><strong>github仓库地址</strong>：<a href="https://github.com/2209520576/Image-Processing-Algorithm" target="_blank" rel="noopener">https://github.com/2209520576/Image-Processing-Algorithm</a></p>
<p>图像处理经典常用算法及论文复现。</p>
<p><strong>效果</strong>：<img src="/2021/05/19/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E7%AE%97%E6%B3%95%E6%BC%94%E7%A4%BA%E7%B3%BB%E7%BB%9F%E7%9A%84%E6%94%B6%E5%BD%95/4.jpg" alt></p>
<hr>

<h2 id="ImageProcessing"><a href="#ImageProcessing" class="headerlink" title="ImageProcessing"></a>ImageProcessing</h2><p><strong>github仓库地址</strong>：<a href="https://github.com/BichengLUO/ImageProcessing" target="_blank" rel="noopener">https://github.com/BichengLUO/ImageProcessing</a></p>
<p>基于C++的MFC框架实现了一个图像处理软件。其中的画笔功能很不错。</p>
<p><strong>效果</strong>：<img src="/2021/05/19/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E7%AE%97%E6%B3%95%E6%BC%94%E7%A4%BA%E7%B3%BB%E7%BB%9F%E7%9A%84%E6%94%B6%E5%BD%95/5.jpg" alt></p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>Github仓库收录</tag>
      </tags>
  </entry>
  <entry>
    <title>基于Electron的番茄钟</title>
    <url>/2021/06/06/%E5%9F%BA%E4%BA%8EElectron%E7%9A%84%E7%95%AA%E8%8C%84%E9%92%9F/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote class="blockquote-center">
<p>^ _ ^ </p>

</blockquote>
<a id="more"></a>

<h1 id="应用搭建"><a href="#应用搭建" class="headerlink" title="应用搭建"></a>应用搭建</h1><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> tomato_clock</span><br><span class="line"><span class="built_in">cd</span> tomato_clock</span><br><span class="line">npm init</span><br><span class="line">cnpm install electron --save-dev</span><br></pre></td></tr></table></figure>

<p>在<code>package.json</code>中添加</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line">    "start": "electron ."</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="渲染页面index-html"><a href="#渲染页面index-html" class="headerlink" title="渲染页面index.html"></a>渲染页面index.html</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html"</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"timer-container"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- You can also require other files to run in this process --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./renderer.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="渲染进程renderer-js"><a href="#渲染进程renderer-js" class="headerlink" title="渲染进程renderer.js"></a>渲染进程renderer.js</h1><p>首先需要下载 <code>timer.js</code> 模块</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;ipcRenderer&#125; = <span class="built_in">require</span>(<span class="string">'electron'</span>)</span><br><span class="line"><span class="keyword">const</span> Timer = <span class="built_in">require</span>(<span class="string">'timer.js'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">startWork</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> workTimer = <span class="keyword">new</span> Timer(&#123;</span><br><span class="line">        onclick: <span class="function">(<span class="params">ms</span>) =&gt;</span> &#123;</span><br><span class="line">            updateTime(ms)</span><br><span class="line">        &#125;,</span><br><span class="line">        onend: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            notification()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// 启动10s</span></span><br><span class="line">    workTimer.start(<span class="number">10</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateTime</span>(<span class="params">ms</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> timeContainer = <span class="built_in">document</span>.getElementById(<span class="string">'timer-container'</span>)</span><br><span class="line">    <span class="keyword">let</span> s = (ms / <span class="number">1000</span>).toFixed(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">let</span> ss = s % <span class="number">60</span></span><br><span class="line">    <span class="keyword">let</span> mm = (s / <span class="number">60</span>).toFixed(<span class="number">0</span>)</span><br><span class="line">    timeContainer.innerText = <span class="string">`<span class="subst">$&#123;mm.toString().padStart(<span class="number">2</span>, <span class="number">0</span>)&#125;</span>: <span class="subst">$&#123;ss.toString.padStart(<span class="number">2</span>, <span class="number">0</span>)&#125;</span>`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">notification</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> res = <span class="keyword">await</span> ipcRenderer.invoke(<span class="string">'work-notification'</span>)</span><br><span class="line">    <span class="keyword">if</span>(res === <span class="string">'rest'</span>)&#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            alert(<span class="string">'休息'</span>)</span><br><span class="line">        &#125;, <span class="number">5</span> * <span class="number">1000</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(res === <span class="string">'work'</span>)&#123;</span><br><span class="line">        startWork()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">startWork()</span><br></pre></td></tr></table></figure>

<h1 id="主进程main-js"><a href="#主进程main-js" class="headerlink" title="主进程main.js"></a>主进程main.js</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;app, BrowserWindow, Notification, ipcMain&#125; = <span class="built_in">require</span>(<span class="string">'electron'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> win</span><br><span class="line">app.on(<span class="string">'ready'</span>, () =&gt; &#123;</span><br><span class="line">    win = <span class="keyword">new</span> BrowserWindow(&#123;</span><br><span class="line">        width: <span class="number">300</span>,</span><br><span class="line">        height: <span class="number">300</span>,</span><br><span class="line">        webPreferences: &#123;</span><br><span class="line">            nodeIntegration: <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    win.loadFile(<span class="string">'./index.html'</span>)</span><br><span class="line">    handleIPC()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleIPC</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    ipcMain.handle(<span class="string">'work-notification'</span>, <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> res = <span class="keyword">await</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> notification = <span class="keyword">new</span> Notification(&#123;</span><br><span class="line">                title: <span class="string">'任务结束'</span>,</span><br><span class="line">                body: <span class="string">'是否开始休息'</span>,</span><br><span class="line">                actions: [&#123;<span class="attr">text</span>: <span class="string">'开始休息'</span>, <span class="attr">type</span>: <span class="string">'button'</span>&#125;],</span><br><span class="line">                closeButtonText: <span class="string">'继续工作'</span></span><br><span class="line">            &#125;)</span><br><span class="line">            notification.show()</span><br><span class="line">            notification.on(<span class="string">'action'</span>, () =&gt; &#123;</span><br><span class="line">                resolve(<span class="string">'rest'</span>)</span><br><span class="line">            &#125;)</span><br><span class="line">            notification.on(<span class="string">'close'</span>, () =&gt; &#123;</span><br><span class="line">                resolve(<span class="string">'work'</span>)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="启动进程"><a href="#启动进程" class="headerlink" title="启动进程"></a>启动进程</h1><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">npm <span class="built_in">start</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>electron</category>
      </categories>
      <tags>
        <tag>nodejs electron</tag>
      </tags>
  </entry>
  <entry>
    <title>基于DirectX的茶壶模型绘制</title>
    <url>/2020/06/29/%E5%9F%BA%E4%BA%8EDirectX%E7%9A%84%E8%8C%B6%E5%A3%B6%E6%A8%A1%E5%9E%8B%E7%BB%98%E5%88%B6/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote class="blockquote-center">
<p>从一个绘制茶壶的例子开始入门DirectX编程 </p>

</blockquote>

<a id="more"></a>

<h1 id="1-新建一个DirectX项目"><a href="#1-新建一个DirectX项目" class="headerlink" title="1 新建一个DirectX项目"></a>1 新建一个DirectX项目</h1><blockquote>
<p>在Visual Studio 2017中新建一个DirectX项目</p>
</blockquote>
<ol>
<li><p>解决方案处右键–》添加–》项目，打开新建项目向导</p>
</li>
<li><p>选择<code>Visual C++</code>/<code>Windows桌面</code>下的Windows桌面向导<br><img src="/2020/06/29/%E5%9F%BA%E4%BA%8EDirectX%E7%9A%84%E8%8C%B6%E5%A3%B6%E6%A8%A1%E5%9E%8B%E7%BB%98%E5%88%B6/1.jpg" alt></p>
</li>
<li><p>在弹出窗口中选择<code>桌面应用程序</code>，并勾选<code>空项目</code><br><img src="/2020/06/29/%E5%9F%BA%E4%BA%8EDirectX%E7%9A%84%E8%8C%B6%E5%A3%B6%E6%A8%A1%E5%9E%8B%E7%BB%98%E5%88%B6/2.jpg" alt></p>
</li>
<li><p>设置项目属性</p>
</li>
</ol>
<ul>
<li>项目处右键–》属性</li>
<li>VC++目录–》包含目录–》添加 D:\DirectX\Include</li>
<li>VC++目录–》库目录–》添加 D:\DirectX\Lib\x86</li>
<li>链接器–》输入–》附加依赖项–》添加d3d9.lib d3dx9.lib winmm.lib（每行显示一个）</li>
</ul>
<h1 id="2-思路分析"><a href="#2-思路分析" class="headerlink" title="2 思路分析"></a>2 思路分析</h1><h2 id="初始化Direct3D"><a href="#初始化Direct3D" class="headerlink" title="初始化Direct3D"></a>初始化Direct3D</h2><p>需要四个步骤：</p>
<h3 id="1-创建Direct3D对象，获取IDirect3D9接口指针"><a href="#1-创建Direct3D对象，获取IDirect3D9接口指针" class="headerlink" title="1. 创建Direct3D对象，获取IDirect3D9接口指针"></a>1. 创建Direct3D对象，获取IDirect3D9接口指针</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; LPDIRECT3D9 是 Direct3D9* 的宏定义</span><br><span class="line">&#x2F;&#x2F; 该函数只有一个参数，该参数必须设置为D3D_SDK_VERSION</span><br><span class="line">LPDIRECT3D9 g_pD3D &#x3D; Direct3DCreate9(D3D_SDK_VERSION);</span><br><span class="line">if (g_pD3D &#x3D;&#x3D; NULL)</span><br><span class="line">    return E_FAIL;</span><br></pre></td></tr></table></figure>

<h3 id="2-检查设备性能"><a href="#2-检查设备性能" class="headerlink" title="2. 检查设备性能"></a>2. 检查设备性能</h3><ul>
<li>通过GetDeviceCaps方法填充一个D3DCAP9结构</li>
<li>通过检查D3DCAP9结构的各个成员，可以判断当前硬件是否支持某项功能</li>
</ul>
<p><strong>使用方式</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">D3DCAPS9  caps;</span><br><span class="line">&#x2F;&#x2F; 填充caps</span><br><span class="line">g_pD3D-&gt;GetDeviceCaps(D3DADAPTER_DEFAULT, D3DDEVTYPE_HAL, &amp;caps);</span><br><span class="line">&#x2F;&#x2F; 根据caps判断支持顶点处理类型</span><br><span class="line">int vp &#x3D; 0;</span><br><span class="line">if (caps.DevCaps &amp; D3DDEVCAPS_HWTRANSFORMANDLIGHT)</span><br><span class="line">&#123;</span><br><span class="line">    vp &#x3D; D3DCREATE_HARDWARE_VERTEXPROCESSING;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">    vp &#x3D; D3DCREATE_SOFTWARE_VERTEXPROCESSING;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>GetDeviceCaps函数原型</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">HRESULT GetDeviceCaps(</span><br><span class="line">    UINT Adapter,           &#x2F;&#x2F; 显示适配器的序号，D3DADAPTER_DEFAULT始终是主要的显示适配器</span><br><span class="line">    D3DDEVTYPE DeviceType,  &#x2F;&#x2F; 设备类型，D3DDEVTYPE是枚举类型</span><br><span class="line">    D3DCAPS9 * pCaps  );    &#x2F;&#x2F; 指向D3DCAPS9结构的指针，该结构将填充描述设备功能的信息</span><br></pre></td></tr></table></figure>

<p>返回值取值：</p>
<ul>
<li>成功：D3D_OK</li>
<li>失败：D3DERR_INVALIDCALL|D3DERR_INVALIDDEVICE|D3DERR_OUTOFVIDEOMEMORY|D3DERR_NOTAVAILABLE</li>
</ul>
<p>D3DDEVTYPE原型：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">typedef enum D3DDEVTYPE</span><br><span class="line">&#123;</span><br><span class="line">    D3DDEVTYPE_HAL &#x3D; 1,     &#x2F;&#x2F; HAL设备，硬件栅格化</span><br><span class="line">    D3DDEVTYPE_REF &#x3D; 2,     &#x2F;&#x2F; REF设备，参考栅格化程序</span><br><span class="line">    D3DDEVTYPE_SW &#x3D; 3,      &#x2F;&#x2F; 软件设备(很少使用），可插拔软件设备</span><br><span class="line">    D3DDEVTYPE_NULLREF &#x3D; 4, &#x2F;&#x2F; 在既没有硬件也没有参考栅格化的计算机上初始化Direct3D</span><br><span class="line">    D3DDEVTYPE_FORCE_DWORD &#x3D; 0xffffffff,    &#x2F;&#x2F; 强制将此枚举编译为32位大小</span><br><span class="line">&#125; D3DDEVTYPE, *LPD3DDEVTYPE;</span><br></pre></td></tr></table></figure>

<p><strong>顶点运行方法</strong></p>
<ul>
<li><code>D3DCREATE_SOFTWARE_VERTEXPROCESSING</code>：硬件顶点处理（处理能力可变）</li>
<li><code>D3DCREATE_HARDWARE_VERTEXPROCESSING</code>：软件顶点处理（处理能力不可变）</li>
<li><code>D3DCREATE_MIXED_VERTEXPROCESSING</code> ：软硬件混合顶点处理</li>
</ul>
<h3 id="3-填充D3DPRESENT-PARAMETERS结构"><a href="#3-填充D3DPRESENT-PARAMETERS结构" class="headerlink" title="3. 填充D3DPRESENT_PARAMETERS结构"></a>3. 填充D3DPRESENT_PARAMETERS结构</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">D3DPRESENT_PARAMETERS d3dpp;</span><br><span class="line">ZeroMemory(&amp;d3dpp, sizeof(d3dpp));</span><br><span class="line">d3dpp.Windowed &#x3D; TRUE;</span><br><span class="line">d3dpp.SwapEffect &#x3D; D3DSWAPEFFECT_DISCARD;</span><br><span class="line">d3dpp.BackBufferFormat &#x3D; D3DFMT_UNKNOWN;</span><br><span class="line">d3dpp.EnableAutoDepthStencil &#x3D; TRUE;</span><br><span class="line">d3dpp.AutoDepthStencilFormat &#x3D; D3DFMT_D16;</span><br><span class="line">d3dpp.PresentationInterval &#x3D; D3DPRESENT_INTERVAL_IMMEDIATE;</span><br></pre></td></tr></table></figure>

<p><a href="https://docs.microsoft.com/en-us/windows/win32/direct3d9/d3dpresent-parameters" target="_blank" rel="noopener">MSDN完整定义</a></p>
<p><strong>D3DPRESENT_PARAMETERS结构原型</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">typedef struct D3DPRESENT_PARAMETERS &#123;</span><br><span class="line">  UINT                BackBufferWidth;      &#x2F;&#x2F; 新交换链的后缓冲区的宽度</span><br><span class="line">  UINT                BackBufferHeight;     &#x2F;&#x2F; 新交换链的后缓冲区的高度</span><br><span class="line">  D3DFORMAT           BackBufferFormat;     &#x2F;&#x2F; 后台缓冲区格式</span><br><span class="line">  UINT                BackBufferCount;      &#x2F;&#x2F; 后台缓冲区个数</span><br><span class="line">  D3DMULTISAMPLE_TYPE MultiSampleType;      &#x2F;&#x2F; 多级采样类型（级别）</span><br><span class="line">  DWORD               MultiSampleQuality;   &#x2F;&#x2F; 多样采样质量</span><br><span class="line">  D3DSWAPEFFECT       SwapEffect;           &#x2F;&#x2F; 交换效果</span><br><span class="line">  HWND                hDeviceWindow;        &#x2F;&#x2F; 设备窗口确定屏幕上后台缓冲区的位置和大小</span><br><span class="line">  BOOL                Windowed;             &#x2F;&#x2F; 如果应用程序运行在窗口中，则为TRUE;全屏为FALSE</span><br><span class="line">  BOOL                EnableAutoDepthStencil;   &#x2F;&#x2F; 是否创建深度模板缓冲区</span><br><span class="line">  D3DFORMAT           AutoDepthStencilFormat;   &#x2F;&#x2F; 自动深度模具表面的格式</span><br><span class="line">  DWORD               Flags;                    &#x2F;&#x2F; D3DPRESENTFLAG常数</span><br><span class="line">  UINT                FullScreen_RefreshRateInHz;   &#x2F;&#x2F; 显示适配器刷新屏幕的速率</span><br><span class="line">  UINT                PresentationInterval; &#x2F;&#x2F; 交换链的后缓冲区可以提供给前缓冲区的最大速率</span><br><span class="line">&#125; D3DPRESENT_PARAMETERS, *LPD3DPRESENT_PARAMETERS;</span><br></pre></td></tr></table></figure>
<p><code>D3DFORMAT</code><br>是一个枚举类，表示表面格式，包含的格式种类有：</p>
<ul>
<li><a href="https://docs.microsoft.com/en-us/windows/win32/direct3d9/d3dformat#backbuffer-or-display-formats" target="_blank" rel="noopener">BackBuffer或显示格式</a></li>
<li><a href="https://docs.microsoft.com/en-us/windows/win32/direct3d9/d3dformat#buffer-formats" target="_blank" rel="noopener">缓冲区格式</a></li>
<li><a href="https://docs.microsoft.com/en-us/windows/win32/direct3d9/d3dformat#dxtn-compressed-texture-formats" target="_blank" rel="noopener">DXTn压缩纹理格式</a></li>
<li><a href="https://docs.microsoft.com/en-us/windows/win32/direct3d9/d3dformat#floating-point-formats" target="_blank" rel="noopener">浮点格式</a></li>
<li><a href="https://docs.microsoft.com/en-us/windows/win32/direct3d9/d3dformat#fourcc-formats" target="_blank" rel="noopener">FOURCC格式</a></li>
<li><a href="https://docs.microsoft.com/en-us/windows/win32/direct3d9/d3dformat#ieee-formats" target="_blank" rel="noopener">IEEE格式</a></li>
<li><a href="https://docs.microsoft.com/en-us/windows/win32/direct3d9/d3dformat#mixed-formats" target="_blank" rel="noopener">混合格式</a></li>
<li><a href="https://docs.microsoft.com/en-us/windows/win32/direct3d9/d3dformat#signed-formats" target="_blank" rel="noopener">签名格式</a></li>
<li><a href="https://docs.microsoft.com/en-us/windows/win32/direct3d9/d3dformat#unsigned-formats" target="_blank" rel="noopener">无符号格式</a></li>
<li><a href="https://docs.microsoft.com/en-us/windows/win32/direct3d9/d3dformat#other" target="_blank" rel="noopener">其他</a></li>
</ul>
<p><strong>常用取值举例</strong> </p>
<ul>
<li>D3DFMT_UNKNOWN：未知像素格式</li>
<li>D3DFMT_R8G8B8：每个像素由8位R、G、B组成</li>
<li>D3DFMT_X8R8G8B8：每个像素由8位R、G、B和8位保留位组成</li>
<li>D3DFMT_A8R8G8B8：每个像素由8位R、G、B、A(Alpha)组成</li>
<li>D3DFMT_R5G6B5：每个像素由5位R、6位G、5位B组成</li>
<li>D3DFMT_D32：32位z缓冲区的位深度</li>
<li>D3DFMT_D16：16位z缓冲区的位深度</li>
</ul>
<p><strong>交换链与表现翻转</strong><br>大多数三维图形程序拥有2个或更多颜色缓存。用于当前屏幕刷新的颜色缓存称为前台缓存，用于图形绘制的其他颜色缓存称为后台缓存。<br>当在后台缓存绘制完图形后，就需要将后台缓存移动到前台缓存进行显示，这个过程称为<strong>表面翻转</strong>。<br><strong>交换链</strong>是按顺序逐个提交到前台显示的多个后台缓存的集合。在Direct3D中创建的每个渲染设备至少有一个交换链。 </p>
<p><code>D3DSWAPEFFECT</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">typedef enum D3DSWAPEFFECT &#123; </span><br><span class="line">  D3DSWAPEFFECT_DISCARD      &#x3D; 1,</span><br><span class="line">  D3DSWAPEFFECT_FLIP         &#x3D; 2,</span><br><span class="line">  D3DSWAPEFFECT_COPY         &#x3D; 3,</span><br><span class="line">  D3DSWAPEFFECT_OVERLAY      &#x3D; 4,</span><br><span class="line">  D3DSWAPEFFECT_FLIPEX       &#x3D; 5,</span><br><span class="line">  D3DSWAPEFFECT_FORCE_DWORD  &#x3D; 0xFFFFFFFF</span><br><span class="line">&#125; D3DSWAPEFFECT, *LPD3DSWAPEFFECT;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>D3DSWAPEFFECT_FLIP</code>：交换链上包含多个缓存。用一个循环队列来实现，队头指针指向的是前台缓存，这种方式通过队头指针移动来更新队头缓存，以此来实现翻转。</li>
<li><code>D3DSWAPEFFECT_COPY</code>：交换链上只包含两个缓存。通过将后台缓存的数据复制到前台缓存的方式来进行翻转。</li>
<li><code>D3DSWAPEFFECT_DISCARD</code>：交换链上包含多个缓存。是<code>D3DSWAPEFFECT_FLIP</code>的改进版，可以避免以上两种在不合适情况下造成的大量开销。</li>
<li><code>D3DSWAPEFFECT_OVERLAY</code>：使用可覆盖在主表面上的显存专用区域。当显示覆盖时，不执行复制。覆盖操作在硬件中执行，而不修改主表面中的数据。</li>
<li><code>D3DSWAPEFFECT_FORCE_DWORD</code>：强制将此枚举编译为32位的大小。如果没有此值，一些编译器将允许此枚举编译到32位以外的大小。不使用此值。</li>
</ul>
<h3 id="4-创建Direct3D设备对象，获取IDirect3DDevice9接口指针"><a href="#4-创建Direct3D设备对象，获取IDirect3DDevice9接口指针" class="headerlink" title="4. 创建Direct3D设备对象，获取IDirect3DDevice9接口指针"></a>4. 创建Direct3D设备对象，获取IDirect3DDevice9接口指针</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">g_pD3D-&gt;CreateDevice(D3DADAPTER_DEFAULT, D3DDEVTYPE_HAL, hWnd, vp, &amp;d3dpp, &amp;g_pd3dDevice)</span><br></pre></td></tr></table></figure>

<p><strong>CreateDevice函数原型</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">HRESULT CreateDevice(</span><br><span class="line">  UINT                  Adapter,	\\ 显示适配器的序号</span><br><span class="line">  D3DDEVTYPE            DeviceType,	\\ 所需的设备类型</span><br><span class="line">  HWND                  hFocusWindow,	\\ 焦点窗口</span><br><span class="line">  DWORD                 BehaviorFlags,	\\ 控制设备创建的一个或多个选项的组合</span><br><span class="line">  D3DPRESENT_PARAMETERS *pPresentationParameters,	\\ 要创建的设备的显示参数</span><br><span class="line">  IDirect3DDevice9      **ppReturnedDeviceInterface	\\ 指向返回的IDirect3DDevice9接口的指针的地址，该接口代表创建的设备</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p>返回值：</p>
<ul>
<li>如果该方法成功，则返回值为D3D_OK</li>
<li>如果方法失败，则返回值可以是以下值之一：D3DERR_DEVICELOST，D3DERR_INVALIDCALL，D3DERR_NOTAVAILABLE，D3DERR_OUTOFVIDEOMEMORY</li>
</ul>
<h3 id="额外功能"><a href="#额外功能" class="headerlink" title="额外功能"></a>额外功能</h3><h4 id="创建字体对象"><a href="#创建字体对象" class="headerlink" title="创建字体对象"></a>创建字体对象</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">D3DXCreateFont(g_pd3dDevice, 0, 0, 0, 0, 0, 0, 0, 0, 0, L&quot;Arial&quot;, &amp;g_pFont)</span><br></pre></td></tr></table></figure>

<p><strong>D3DXCreateFont函数原型</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">HRESULT D3DXCreateFont(</span><br><span class="line">  _In_  LPDIRECT3DDEVICE9 pDevice,	\\ 指向IDirect3DDevice9接口的指针，该接口与字体对象关联</span><br><span class="line">  _In_  INT               Height,	\\ 字符的高度，以逻辑单位表示</span><br><span class="line">  _In_  UINT              Width,	\\ 字符的宽度，以逻辑单位表示</span><br><span class="line">  _In_  UINT              Weight,	\\ 字符粗细</span><br><span class="line">  _In_  UINT              MipLevels,\\ mipmap级别数</span><br><span class="line">  _In_  BOOL              Italic,	\\ 斜体字体为true，否则为false</span><br><span class="line">  _In_  DWORD             CharSet,	\\ 字体的字符集</span><br><span class="line">  _In_  DWORD             OutputPrecision,	\\ 指定Windows应如何尝试将所需的字体大小和特征与实际字体进行匹配。以确保始终获得TrueType字体。</span><br><span class="line">  _In_  DWORD             Quality,	\\ 指定Windows如何将所需字体与实际字体匹配。它仅适用于光栅字体，不应影响TrueType字体。</span><br><span class="line">  _In_  DWORD             PitchAndFamily,</span><br><span class="line">  _In_  LPCTSTR           pFacename,\\ 包含字体名称的字符串</span><br><span class="line">  _Out_ LPD3DXFONT        *ppFont	\\返回一个指向ID3DXFont接口的指针，该接口代表创建的字体对象</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>返回值：</p>
<ul>
<li>如果函数成功，则返回值为S_OK</li>
<li>如果该函数失败，则返回值可以是以下之一：D3DERR_INVALIDCALL，D3DXERR_INVALIDDATA，E_OUTOFMEMORY</li>
</ul>
<h4 id="获取窗口客户区"><a href="#获取窗口客户区" class="headerlink" title="获取窗口客户区"></a>获取窗口客户区</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GetClientRect(hWnd, &amp;g_ClientRect);</span><br></pre></td></tr></table></figure>

<p><strong>GetClientRect函数原型</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">BOOL GetClientRect(</span><br><span class="line">  HWND   hWnd,		\\ 要获取其客户区坐标的窗口的句柄</span><br><span class="line">  LPRECT lpRect		\\ 指向接收客户坐标的RECT结构的指针。</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p>返回值：</p>
<ul>
<li>如果函数成功，则返回值为非零</li>
<li>如果函数失败，则返回值为零</li>
</ul>
<h2 id="设置观察和投影矩阵"><a href="#设置观察和投影矩阵" class="headerlink" title="设置观察和投影矩阵"></a>设置观察和投影矩阵</h2><h3 id="观察矩阵设置"><a href="#观察矩阵设置" class="headerlink" title="观察矩阵设置"></a>观察矩阵设置</h3><blockquote>
<p>观察变换使世界坐标系的坐标转换成观察坐标系的坐标</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">D3DXVECTOR3 vEyePt(0.0f, 0.0f, -5.0f);</span><br><span class="line">D3DXVECTOR3 vLookatPt(0.0f, 0.0f, 0.0f);</span><br><span class="line">D3DXVECTOR3 vUpVec(0.0f, 1.0f, 0.0f);</span><br><span class="line">D3DXMATRIXA16 matView;</span><br><span class="line">D3DXMatrixLookAtLH(&amp;matView, &amp;vEyePt, &amp;vLookatPt, &amp;vUpVec);</span><br><span class="line">g_pd3dDevice-&gt;SetTransform(D3DTS_VIEW, &amp;matView);</span><br></pre></td></tr></table></figure>

<p><strong>D3DXMATRIXA16类</strong><br>一个 4x4 , 16位对齐的矩阵。</p>
<p><strong>DirectX常用坐标系</strong><br><img src="/2020/06/29/%E5%9F%BA%E4%BA%8EDirectX%E7%9A%84%E8%8C%B6%E5%A3%B6%E6%A8%A1%E5%9E%8B%E7%BB%98%E5%88%B6/3.jpg" alt></p>
<p><strong>D3DXMatrixLookAtLH函数原型</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">D3DXMATRIX* D3DXMatrixLookAtLH(</span><br><span class="line">  _Inout_       D3DXMATRIX  *pOut,	\\ 观察矩阵（结果）</span><br><span class="line">  _In_    const D3DXVECTOR3 *pEye,	\\ 观察点（摄像机所处位置）</span><br><span class="line">  _In_    const D3DXVECTOR3 *pAt,	\\ 观察目标</span><br><span class="line">  _In_    const D3DXVECTOR3 *pUp	\\ 上方向，通常为[0,1,0]</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p><strong>D3DXMatrixLookAtLH函数原理说明</strong></p>
<blockquote>
<p>齐次坐标表示法就是用n+1维向量表示一个n维向量<br>应用齐次坐标可以有效地用矩阵运算把二维、三维甚至更高维空间中点集从一个坐标系转换到另一个坐标系中</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">zaxis &#x3D; normal(At - Eye)</span><br><span class="line">xaxis &#x3D; normal(cross(Up, zaxis))</span><br><span class="line">yaxis &#x3D; cross(zaxis, xaxis)</span><br><span class="line">    </span><br><span class="line"> xaxis.x           yaxis.x           zaxis.x          0</span><br><span class="line"> xaxis.y           yaxis.y           zaxis.y          0</span><br><span class="line"> xaxis.z           yaxis.z           zaxis.z          0</span><br><span class="line">-dot(xaxis, eye)  -dot(yaxis, eye)  -dot(zaxis, eye)  1</span><br></pre></td></tr></table></figure>
<p>由此可知，在观察坐标系里，z轴方向代表实现方向，y轴代表上方向。</p>
<h3 id="变换设置"><a href="#变换设置" class="headerlink" title="变换设置"></a>变换设置</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">g_pd3dDevice-&gt;SetTransform(D3DTS_VIEW, &amp;matView);</span><br></pre></td></tr></table></figure>

<p><strong>SetTransform函数原型</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">HRESULT SetTransform(</span><br><span class="line">  D3DTRANSFORMSTATETYPE State,		\\ 被修改的设备状态</span><br><span class="line">  const D3DMATRIX       *pMatrix	\\ 指向当前变换矩阵的指针</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p><strong>D3DTRANSFORMSTATETYPE结构</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">typedef enum D3DTRANSFORMSTATETYPE &#123; </span><br><span class="line">  D3DTS_VIEW         &#x3D; 2,	\\ 观察变换</span><br><span class="line">  D3DTS_PROJECTION   &#x3D; 3,	\\ 投影变换</span><br><span class="line">  D3DTS_TEXTURE0     &#x3D; 16,	\\ 纹理变换</span><br><span class="line">  D3DTS_TEXTURE1     &#x3D; 17,</span><br><span class="line">  D3DTS_TEXTURE2     &#x3D; 18,</span><br><span class="line">  D3DTS_TEXTURE3     &#x3D; 19,</span><br><span class="line">  D3DTS_TEXTURE4     &#x3D; 20,</span><br><span class="line">  D3DTS_TEXTURE5     &#x3D; 21,</span><br><span class="line">  D3DTS_TEXTURE6     &#x3D; 22,</span><br><span class="line">  D3DTS_TEXTURE7     &#x3D; 23,</span><br><span class="line">  D3DTS_FORCE_DWORD  &#x3D; 0x7fffffff	&#x2F;&#x2F; 强制将此枚举编译为32位大小</span><br><span class="line">&#125; D3DTRANSFORMSTATETYPE, *LPD3DTRANSFORMSTATETYPE;</span><br></pre></td></tr></table></figure>

<h3 id="投影矩阵设置"><a href="#投影矩阵设置" class="headerlink" title="投影矩阵设置"></a>投影矩阵设置</h3><blockquote>
<p>投影变换将三维坐标变换成二维坐标</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">D3DXMATRIXA16 matProj;</span><br><span class="line">float aspect &#x3D; (float)(g_ClientRect.right - g_ClientRect.left) &#x2F; (g_ClientRect.bottom - g_ClientRect.top);</span><br><span class="line">D3DXMatrixPerspectiveFovLH(&amp;matProj, D3DX_PI &#x2F; 4, aspect, 1.0f, 100.0f);</span><br><span class="line">g_pd3dDevice-&gt;SetTransform(D3DTS_PROJECTION, &amp;matProj);</span><br></pre></td></tr></table></figure>

<p><strong>D3DXMatrixPerspectiveFovLH函数原型</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">D3DXMATRIX* D3DXMatrixPerspectiveFovLH(</span><br><span class="line">  _Inout_ D3DXMATRIX *pOut,		\\ 指向投影矩阵的指针（结果）</span><br><span class="line">  _In_    FLOAT      fovy,		\\ y方向上的视场，以弧度为单位</span><br><span class="line">  _In_    FLOAT      Aspect,	\\ 长宽比，定义为视图空间的宽度除以高度</span><br><span class="line">  _In_    FLOAT      zn,		\\ 近视平面的Z值</span><br><span class="line">  _In_    FLOAT      zf			\\ 远视平面的Z值</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p><img src="/2020/06/29/%E5%9F%BA%E4%BA%8EDirectX%E7%9A%84%E8%8C%B6%E5%A3%B6%E6%A8%A1%E5%9E%8B%E7%BB%98%E5%88%B6/4.jpg" alt></p>
<h2 id="创建场景图形"><a href="#创建场景图形" class="headerlink" title="创建场景图形"></a>创建场景图形</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">HRESULT InitGeometry()</span><br><span class="line">&#123;</span><br><span class="line">	HRESULT hr;</span><br><span class="line">	V_RETURN(D3DXCreateTeapot(g_pd3dDevice, &amp;g_pTeapotMesh, NULL));</span><br><span class="line">	return S_OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>D3DXCreateTeapot函数原型</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">HRESULT D3DXCreateTeapot(</span><br><span class="line">  _In_  LPDIRECT3DDEVICE9 pDevice,		\\ 该接口表示与创建的茶壶网格关联的设备</span><br><span class="line">  _Out_ LPD3DXMESH        *ppMesh,		\\ 指向输出形状的指针的地址</span><br><span class="line">  _Out_ LPD3DXBUFFER      *ppAdjacency	\\ 指向ID3DXBuffer接口的指针的地址。</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p>当方法返回时，ppAdjacency参数将由每个面三个DWORD的数组填充，这些数组为网格中的每个面指定三个邻居。可以指定NULL</p>
<p>返回值：</p>
<ul>
<li>如果函数成功，则返回值为D3D_OK</li>
<li>如果函数失败，则返回值可以是以下之一：D3DERR_INVALIDCALL，D3DXERR_INVALIDDATA，E_OUTOFMEMORY</li>
</ul>
<h2 id="图形渲染"><a href="#图形渲染" class="headerlink" title="图形渲染"></a>图形渲染</h2><p><strong>渲染步骤</strong></p>
<ul>
<li>先通过IDirect3DDevice9接口进行相关的渲染状态设置</li>
<li>然后渲染图形【所有渲染操作必须在BeginScene()和EndScene()之间进行】</li>
</ul>
<h3 id="1-清空后台缓存"><a href="#1-清空后台缓存" class="headerlink" title="1. 清空后台缓存"></a>1. 清空后台缓存</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">g_pd3dDevice-&gt;Clear(0, NULL, D3DCLEAR_TARGET | D3DCLEAR_ZBUFFER, D3DCOLOR_XRGB(45, 50, 170), 1.0f, 0);</span><br></pre></td></tr></table></figure>

<p><strong>Clear函数原型</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">HRESULT Clear(</span><br><span class="line">  DWORD         Count,		&#x2F;&#x2F; 数组pRects中元素的个数</span><br><span class="line">  const D3DRECT *pRects,	&#x2F;&#x2F; 指向所有需要清除区域组成数组的指针</span><br><span class="line">  DWORD         Flags,		&#x2F;&#x2F; 指定要清除的表面的一个或多个D3DCLEAR标志的组合</span><br><span class="line">  D3DCOLOR      Color,		&#x2F;&#x2F; 将渲染目标清除为这个ARGB颜色。</span><br><span class="line">  float         Z,			&#x2F;&#x2F; 将深度缓冲区清除为新的z值(z值的范围从0到1)</span><br><span class="line">  DWORD         Stencil		&#x2F;&#x2F; 将模板缓存清除为新的值(n是模板缓存深度，0~2^n-1是取值范围)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p>返回值：</p>
<ul>
<li>成功，返回D3D_OK</li>
<li>失败，返回D3DERR_INVALIDCALL</li>
</ul>
<p>Flags取值：</p>
<ul>
<li><code>D3DCLEAR_STENCIL</code>：清除模板缓冲区</li>
<li><code>D3DCLEAR_TARGET</code>：清除渲染目标</li>
<li><code>D3DCLEAR_ZBUFFER</code>：清除深度缓冲区</li>
</ul>
<h3 id="2-绘制图形"><a href="#2-绘制图形" class="headerlink" title="2. 绘制图形"></a>2. 绘制图形</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">g_pd3dDevice-&gt;BeginScene()	&#x2F;&#x2F; 开始在后台缓存绘制图形</span><br><span class="line">...							&#x2F;&#x2F; 绘制步骤</span><br><span class="line">g_pd3dDevice-&gt;EndScene()	&#x2F;&#x2F; 结束在后台缓存渲染图形</span><br></pre></td></tr></table></figure>

<h4 id="设置灯光"><a href="#设置灯光" class="headerlink" title="设置灯光"></a>设置灯光</h4><h5 id="方向光"><a href="#方向光" class="headerlink" title="方向光"></a>方向光</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">D3DXVECTOR3 vecDir;</span><br><span class="line">D3DLIGHT9 light;</span><br><span class="line">ZeroMemory(&amp;light, sizeof(D3DLIGHT9));</span><br><span class="line">light.Type &#x3D; D3DLIGHT_DIRECTIONAL;</span><br><span class="line">light.Diffuse.r &#x3D; 1.0f;</span><br><span class="line">light.Diffuse.g &#x3D; 1.0f;</span><br><span class="line">light.Diffuse.b &#x3D; 1.0f;</span><br><span class="line">vecDir &#x3D; D3DXVECTOR3(1, -1, 1);</span><br><span class="line">D3DXVec3Normalize((D3DXVECTOR3*)&amp;light.Direction, &amp;vecDir);</span><br><span class="line">light.Range &#x3D; 1000.0f;</span><br><span class="line">g_pd3dDevice-&gt;SetLight(0, &amp;light);</span><br><span class="line">g_pd3dDevice-&gt;LightEnable(0, TRUE);</span><br><span class="line">g_pd3dDevice-&gt;SetRenderState(D3DRS_LIGHTING, true);</span><br></pre></td></tr></table></figure>

<p><strong>结构体D3DLIGHT9原型</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">typedef struct D3DLIGHT9 &#123;</span><br><span class="line">  D3DLIGHTTYPE  Type;			\\ 光源类型</span><br><span class="line">  D3DCOLORVALUE Diffuse;		\\ 光线发出的漫反射色</span><br><span class="line">  D3DCOLORVALUE Specular;		\\ 光发出的镜面颜色</span><br><span class="line">  D3DCOLORVALUE Ambient;		\\ 光线发出的环境颜色</span><br><span class="line">  D3DVECTOR     Position;		\\ 光线在世界空间中的位置(对定向灯没有意义)</span><br><span class="line">  D3DVECTOR     Direction;		\\ 光线在世界空间中指向的方向(仅对定向和聚光灯有意义)</span><br><span class="line">  float         Range;			\\ 光线范围(不影响定向灯)</span><br><span class="line">  float         Falloff;		\\ 衰减(大多数开发人员将此值设置为1.0)</span><br><span class="line">  float         Attenuation0;	\\ 衰减常数</span><br><span class="line">  float         Attenuation1;	\\ 衰减常数</span><br><span class="line">  float         Attenuation2;	\\ 衰减常数</span><br><span class="line">  float         Theta;			\\ 聚光灯内锥（即完全照明的聚光锥）的弧度角（以弧度为单位）</span><br><span class="line">  float         Phi;			\\ 以弧度表示的角度，它定义了聚光灯的外部圆锥的外部边缘</span><br><span class="line">&#125; D3DLIGHT9, *LPD3DLIGHT;</span><br></pre></td></tr></table></figure>
<p><strong>聚光灯模型</strong><br><img src="/2020/06/29/%E5%9F%BA%E4%BA%8EDirectX%E7%9A%84%E8%8C%B6%E5%A3%B6%E6%A8%A1%E5%9E%8B%E7%BB%98%E5%88%B6/5.jpg" alt></p>
<p><strong>D3DLIGHTTYPE类定义</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">typedef enum D3DLIGHTTYPE &#123; </span><br><span class="line">  D3DLIGHT_POINT        &#x3D; 1,	\\ 点光源，光线在空间中具有一定位置，并向各个方向辐射光</span><br><span class="line">  D3DLIGHT_SPOT         &#x3D; 2,	\\ 聚光灯，该光源类似于点光源，但照明仅限于锥形</span><br><span class="line">  D3DLIGHT_DIRECTIONAL  &#x3D; 3,	\\ 光是定向光源</span><br><span class="line">  D3DLIGHT_FORCE_DWORD  &#x3D; 0x7fffffff	\\ 强制将此枚举编译为32位大小</span><br><span class="line">&#125; D3DLIGHTTYPE, *LPD3DLIGHTTYPE;</span><br></pre></td></tr></table></figure>

<p><strong>光源比较</strong></p>
<table>
<thead>
<tr>
<th>光源</th>
<th>包含属性</th>
<th>特性</th>
</tr>
</thead>
<tbody><tr>
<td>点光源</td>
<td>颜色、位置</td>
<td>发出的光的强度会虽随着距离物体的远近而衰减</td>
</tr>
<tr>
<td>定向光</td>
<td>颜色、方向</td>
<td>所有光线平行地沿着某个特定方向传播，不会衰减</td>
</tr>
<tr>
<td>聚光灯</td>
<td>颜色、位置、方向</td>
<td>聚光灯发出的光线由一个明亮的内锥体和大一点的外锥体组成且光线强度从内锥体到外锥体逐渐衰减</td>
</tr>
</tbody></table>
<ul>
<li>定向光要比点光源快一点</li>
<li>但点光看起来要好一些</li>
<li>聚光灯提供有趣的视觉效果，但计算耗时</li>
</ul>
<h5 id="全局环境光"><a href="#全局环境光" class="headerlink" title="全局环境光"></a>全局环境光</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">g_pd3dDevice-&gt;SetRenderState(D3DRS_AMBIENT, 0xff505050);</span><br></pre></td></tr></table></figure>

<p><strong>SetRenderState函数原型</strong></p>
<blockquote>
<p>设置单个设备的渲染状态参数</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">HRESULT SetRenderState(</span><br><span class="line">  D3DRENDERSTATETYPE State,	\\ 正在修改的设备状态变量</span><br><span class="line">  DWORD              Value	\\ 要设置的设备渲染状态的新值</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p><strong>D3DRENDERSTATETYPE类</strong><br><a href="https://docs.microsoft.com/en-us/windows/win32/direct3d9/d3drenderstatetype" target="_blank" rel="noopener">MSDN官方定义</a></p>
<h4 id="设置材质"><a href="#设置材质" class="headerlink" title="设置材质"></a>设置材质</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">D3DMATERIAL9 mtrl;</span><br><span class="line">ZeroMemory(&amp;mtrl, sizeof(D3DMATERIAL9));</span><br><span class="line">mtrl.Diffuse.r &#x3D; mtrl.Ambient.r &#x3D; 1.0f;</span><br><span class="line">mtrl.Diffuse.g &#x3D; mtrl.Ambient.g &#x3D; 0.0f;</span><br><span class="line">mtrl.Diffuse.b &#x3D; mtrl.Ambient.b &#x3D; 0.0f;</span><br><span class="line">mtrl.Diffuse.a &#x3D; mtrl.Ambient.a &#x3D; 1.0f;</span><br><span class="line">g_pd3dDevice-&gt;SetMaterial(&amp;mtrl);</span><br></pre></td></tr></table></figure>

<p><strong>D3DMATERIAL9类结构</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">typedef struct D3DMATERIAL9 &#123;</span><br><span class="line">  D3DCOLORVALUE Diffuse;  	\\ 指定材质的漫反射颜色的值</span><br><span class="line">  D3DCOLORVALUE Ambient;	\\ 指定材料环境颜色的值</span><br><span class="line">  D3DCOLORVALUE Specular;	\\ 指定材质的镜面反射颜色的值</span><br><span class="line">  D3DCOLORVALUE Emissive;	\\ 指定材料的发射颜色的值</span><br><span class="line">  float         Power;		\\ 指定镜面高光的清晰度</span><br><span class="line">&#125; D3DMATERIAL9, *LPD3DMATERIAL9;</span><br></pre></td></tr></table></figure>

<h4 id="设置世界矩阵"><a href="#设置世界矩阵" class="headerlink" title="设置世界矩阵"></a>设置世界矩阵</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">D3DXMATRIXA16 matWorld;</span><br><span class="line">float  time &#x3D; timeGetTime() * 0.001f;</span><br><span class="line">float fAngle &#x3D; time * D3DX_PI &#x2F; 2;</span><br><span class="line">&#x2F;&#x2F;fAngle &#x3D; 0;</span><br><span class="line">D3DXMatrixRotationY(&amp;matWorld, fAngle);     &#x2F;&#x2F;绕y轴旋转fAngle度</span><br><span class="line">g_pd3dDevice-&gt;SetTransform(D3DTS_WORLD, &amp;matWorld);</span><br></pre></td></tr></table></figure>

<h4 id="绘制茶壶"><a href="#绘制茶壶" class="headerlink" title="绘制茶壶"></a>绘制茶壶</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">g_pTeapotMesh-&gt;DrawSubset(0);</span><br></pre></td></tr></table></figure>

<p><strong>DrawSubset函数原型</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">HRESULT DrawSubset(</span><br><span class="line">  [in] DWORD AttribId \\ 指定要绘制网格的哪个子集。该值用于区分网格中属于一个或多个属性组的面</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h4 id="帧速率"><a href="#帧速率" class="headerlink" title="帧速率"></a>帧速率</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">static float  fps &#x3D; 0;</span><br><span class="line">static int    frameCount &#x3D; 0;</span><br><span class="line">static float  currentTime &#x3D; 0.0f;</span><br><span class="line">static float  lastTime &#x3D; 0.0f;</span><br><span class="line"></span><br><span class="line">frameCount++;</span><br><span class="line">currentTime &#x3D; timeGetTime()*0.001f;</span><br><span class="line"></span><br><span class="line">if (currentTime - lastTime &gt; 1.0f)</span><br><span class="line">&#123;</span><br><span class="line">	fps &#x3D; (float)frameCount &#x2F; (currentTime - lastTime);</span><br><span class="line">	lastTime &#x3D; currentTime;</span><br><span class="line">	frameCount &#x3D; 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return fps;</span><br></pre></td></tr></table></figure>

<p><strong>timeGetTime函数</strong></p>
<ul>
<li>检索系统时间，以毫秒为单位</li>
<li>系统时间是自Windows启动以来经过的时间</li>
</ul>
<h3 id="将在后台缓存绘制的图形提交到前台缓存显示"><a href="#将在后台缓存绘制的图形提交到前台缓存显示" class="headerlink" title="将在后台缓存绘制的图形提交到前台缓存显示"></a>将在后台缓存绘制的图形提交到前台缓存显示</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">g_pd3dDevice-&gt;Present(NULL, NULL, NULL, NULL);</span><br></pre></td></tr></table></figure>

<h1 id="3-完整代码"><a href="#3-完整代码" class="headerlink" title="3 完整代码"></a>3 完整代码</h1><h2 id="头文件UtilMacro-h"><a href="#头文件UtilMacro-h" class="headerlink" title="头文件UtilMacro.h"></a>头文件UtilMacro.h</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; UtilMacro.h</span><br><span class="line">&#x2F;&#x2F;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">&#x2F;&#x2F; Desc: 辅助宏定义</span><br><span class="line">&#x2F;&#x2F;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line"></span><br><span class="line">#pragma once</span><br><span class="line"></span><br><span class="line">#ifndef V</span><br><span class="line">#define V(x)           &#123; hr &#x3D; x; &#125;</span><br><span class="line">#endif</span><br><span class="line"></span><br><span class="line">#ifndef V_RETURN</span><br><span class="line">#define V_RETURN(x)    &#123; hr &#x3D; x; if( FAILED(hr) ) &#123; return hr; &#125; &#125;</span><br><span class="line">#endif</span><br><span class="line"></span><br><span class="line">#ifndef SAFE_DELETE</span><br><span class="line">#define SAFE_DELETE(p)       &#123; if(p) &#123; delete (p);     (p)&#x3D;NULL; &#125; &#125;</span><br><span class="line">#endif    </span><br><span class="line">#ifndef SAFE_DELETE_ARRAY</span><br><span class="line">#define SAFE_DELETE_ARRAY(p) &#123; if(p) &#123; delete[] (p);   (p)&#x3D;NULL; &#125; &#125;</span><br><span class="line">#endif    </span><br><span class="line">#ifndef SAFE_RELEASE</span><br><span class="line">#define SAFE_RELEASE(p)      &#123; if(p) &#123; (p)-&gt;Release(); (p)&#x3D;NULL; &#125; &#125;</span><br><span class="line">#endif</span><br></pre></td></tr></table></figure>

<h2 id="源文件Main-cpp"><a href="#源文件Main-cpp" class="headerlink" title="源文件Main.cpp"></a>源文件Main.cpp</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; Main.cpp</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">&#x2F;&#x2F; Desc: 绘制茶壶模型</span><br><span class="line">&#x2F;&#x2F;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">#include &lt;d3dx9.h&gt;  &#x2F;&#x2F;该头文件中又包含了d3d9.h头文件</span><br><span class="line">#include &lt;tchar.h&gt;</span><br><span class="line">#include &lt;d3dx9core.h&gt;</span><br><span class="line">#include &quot;UtilMacro.h&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;-----------------------------------------------------------------------------</span><br><span class="line">&#x2F;&#x2F; Desc: 全局变量</span><br><span class="line">&#x2F;&#x2F;-----------------------------------------------------------------------------</span><br><span class="line">LPDIRECT3D9             g_pD3D &#x3D; NULL;    &#x2F;&#x2F;Direct3D对象</span><br><span class="line">LPDIRECT3DDEVICE9       g_pd3dDevice &#x3D; NULL;    &#x2F;&#x2F;Direct3D设备对象</span><br><span class="line">LPD3DXFONT              g_pFont &#x3D; 0;       &#x2F;&#x2F;字体对象</span><br><span class="line">LPD3DXMESH              g_pTeapotMesh &#x3D; NULL;   &#x2F;&#x2F;茶壶网格模型</span><br><span class="line"></span><br><span class="line">RECT   g_ClientRect;    &#x2F;&#x2F;窗口客户区</span><br><span class="line">float  g_FPS &#x3D; 0;       &#x2F;&#x2F;帧速率</span><br><span class="line">WCHAR  g_strFPS[20];    &#x2F;&#x2F;包含帧速率的字符数组</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;-----------------------------------------------------------------------------</span><br><span class="line">&#x2F;&#x2F; Desc: 顶点结构和顶点格式</span><br><span class="line">&#x2F;&#x2F;-----------------------------------------------------------------------------</span><br><span class="line">struct CUSTOMVERTEX</span><br><span class="line">&#123;</span><br><span class="line">	D3DXVECTOR3 position;</span><br><span class="line">	DWORD color;</span><br><span class="line">&#125;;</span><br><span class="line">#define D3DFVF_CUSTOMVERTEX (D3DFVF_XYZ | D3DFVF_DIFFUSE)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;-----------------------------------------------------------------------------</span><br><span class="line">&#x2F;&#x2F; Desc: 设置世界矩阵</span><br><span class="line">&#x2F;&#x2F;-----------------------------------------------------------------------------</span><br><span class="line">void SetWorldMatrix()</span><br><span class="line">&#123;</span><br><span class="line">	&#x2F;&#x2F;创建并设置世界矩阵</span><br><span class="line">	D3DXMATRIXA16 matWorld;</span><br><span class="line">	float  time &#x3D; timeGetTime() * 0.001f;</span><br><span class="line">	float fAngle &#x3D; time * D3DX_PI &#x2F; 2;</span><br><span class="line">	&#x2F;&#x2F;fAngle &#x3D; 0;</span><br><span class="line">	D3DXMatrixRotationY(&amp;matWorld, fAngle);     &#x2F;&#x2F;旋转	</span><br><span class="line">	g_pd3dDevice-&gt;SetTransform(D3DTS_WORLD, &amp;matWorld);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;-----------------------------------------------------------------------------</span><br><span class="line">&#x2F;&#x2F; Desc: 设置观察矩阵和投影矩阵</span><br><span class="line">&#x2F;&#x2F;-----------------------------------------------------------------------------</span><br><span class="line">void SetViewandProjMatrices()</span><br><span class="line">&#123;</span><br><span class="line">	&#x2F;&#x2F;建立并设置观察矩阵</span><br><span class="line">	D3DXVECTOR3 vEyePt(0.0f, 0.0f, -5.0f);</span><br><span class="line">	D3DXVECTOR3 vLookatPt(0.0f, 0.0f, 0.0f);</span><br><span class="line">	D3DXVECTOR3 vUpVec(0.0f, 1.0f, 0.0f);</span><br><span class="line">	D3DXMATRIXA16 matView;</span><br><span class="line">	D3DXMatrixLookAtLH(&amp;matView, &amp;vEyePt, &amp;vLookatPt, &amp;vUpVec);</span><br><span class="line">	g_pd3dDevice-&gt;SetTransform(D3DTS_VIEW, &amp;matView);</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F;建立并设置投影矩阵</span><br><span class="line">	D3DXMATRIXA16 matProj;</span><br><span class="line">	float aspect &#x3D; (float)(g_ClientRect.right - g_ClientRect.left) &#x2F; (g_ClientRect.bottom - g_ClientRect.top);</span><br><span class="line">	D3DXMatrixPerspectiveFovLH(&amp;matProj, D3DX_PI &#x2F; 4, aspect, 1.0f, 100.0f);</span><br><span class="line">	g_pd3dDevice-&gt;SetTransform(D3DTS_PROJECTION, &amp;matProj);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;-----------------------------------------------------------------------------</span><br><span class="line">&#x2F;&#x2F; Desc: 设置灯光</span><br><span class="line">&#x2F;&#x2F;-----------------------------------------------------------------------------</span><br><span class="line">void SetLights()</span><br><span class="line">&#123;</span><br><span class="line">	&#x2F;&#x2F;方向光</span><br><span class="line">	D3DXVECTOR3 vecDir;</span><br><span class="line">	D3DLIGHT9 light;</span><br><span class="line">	ZeroMemory(&amp;light, sizeof(D3DLIGHT9));</span><br><span class="line">	light.Type &#x3D; D3DLIGHT_DIRECTIONAL;</span><br><span class="line">	light.Diffuse.r &#x3D; 1.0f;</span><br><span class="line">	light.Diffuse.g &#x3D; 1.0f;</span><br><span class="line">	light.Diffuse.b &#x3D; 1.0f;</span><br><span class="line">	vecDir &#x3D; D3DXVECTOR3(1, -1, 1);</span><br><span class="line">	D3DXVec3Normalize((D3DXVECTOR3*)&amp;light.Direction, &amp;vecDir);</span><br><span class="line">	light.Range &#x3D; 1000.0f;</span><br><span class="line">	g_pd3dDevice-&gt;SetLight(0, &amp;light);</span><br><span class="line">	g_pd3dDevice-&gt;LightEnable(0, TRUE);</span><br><span class="line">	g_pd3dDevice-&gt;SetRenderState(D3DRS_LIGHTING, true);</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F;全局环境光</span><br><span class="line">	g_pd3dDevice-&gt;SetRenderState(D3DRS_AMBIENT, 0xff505050);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;-----------------------------------------------------------------------------</span><br><span class="line">&#x2F;&#x2F; Desc: 设置灯光</span><br><span class="line">&#x2F;&#x2F;-----------------------------------------------------------------------------</span><br><span class="line">void SetMaterial()</span><br><span class="line">&#123;</span><br><span class="line">	D3DMATERIAL9 mtrl;</span><br><span class="line">	ZeroMemory(&amp;mtrl, sizeof(D3DMATERIAL9));</span><br><span class="line">	mtrl.Diffuse.r &#x3D; mtrl.Ambient.r &#x3D; 1.0f;</span><br><span class="line">	mtrl.Diffuse.g &#x3D; mtrl.Ambient.g &#x3D; 0.0f;</span><br><span class="line">	mtrl.Diffuse.b &#x3D; mtrl.Ambient.b &#x3D; 0.0f;</span><br><span class="line">	mtrl.Diffuse.a &#x3D; mtrl.Ambient.a &#x3D; 1.0f;</span><br><span class="line">	g_pd3dDevice-&gt;SetMaterial(&amp;mtrl);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;-----------------------------------------------------------------------------</span><br><span class="line">&#x2F;&#x2F; Desc: 初始化Direct3D</span><br><span class="line">&#x2F;&#x2F;-----------------------------------------------------------------------------</span><br><span class="line">HRESULT InitD3D(HWND hWnd)</span><br><span class="line">&#123;</span><br><span class="line">	HRESULT hr;</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F;创建Direct3D对象, 该对象用来创建Direct3D设备对象</span><br><span class="line">	g_pD3D &#x3D; Direct3DCreate9(D3D_SDK_VERSION);</span><br><span class="line">	if (g_pD3D &#x3D;&#x3D; NULL)</span><br><span class="line">		return E_FAIL;</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F;检查设备性能</span><br><span class="line">	D3DCAPS9  caps;</span><br><span class="line">	g_pD3D-&gt;GetDeviceCaps(D3DADAPTER_DEFAULT, D3DDEVTYPE_HAL, &amp;caps);</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F;检查设备是否支持硬件顶点处理</span><br><span class="line">	int vp &#x3D; 0;</span><br><span class="line">	if (caps.DevCaps &amp; D3DDEVCAPS_HWTRANSFORMANDLIGHT)</span><br><span class="line">	&#123;</span><br><span class="line">		vp &#x3D; D3DCREATE_HARDWARE_VERTEXPROCESSING;</span><br><span class="line">	&#125;</span><br><span class="line">	else</span><br><span class="line">	&#123;</span><br><span class="line">		vp &#x3D; D3DCREATE_SOFTWARE_VERTEXPROCESSING;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F;设置D3DPRESENT_PARAMETERS结构</span><br><span class="line">	D3DPRESENT_PARAMETERS d3dpp;</span><br><span class="line">	ZeroMemory(&amp;d3dpp, sizeof(d3dpp));</span><br><span class="line">	d3dpp.Windowed &#x3D; TRUE;</span><br><span class="line">	d3dpp.SwapEffect &#x3D; D3DSWAPEFFECT_DISCARD;</span><br><span class="line">	d3dpp.BackBufferFormat &#x3D; D3DFMT_UNKNOWN;</span><br><span class="line">	d3dpp.EnableAutoDepthStencil &#x3D; TRUE;</span><br><span class="line">	d3dpp.AutoDepthStencilFormat &#x3D; D3DFMT_D16;</span><br><span class="line">	d3dpp.PresentationInterval &#x3D; D3DPRESENT_INTERVAL_IMMEDIATE;</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F;创建Direct3D设备对象</span><br><span class="line">	V_RETURN(g_pD3D-&gt;CreateDevice(D3DADAPTER_DEFAULT, D3DDEVTYPE_HAL, hWnd, vp, &amp;d3dpp, &amp;g_pd3dDevice));</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F;创建字体对象</span><br><span class="line">	V_RETURN(D3DXCreateFont(g_pd3dDevice, 0, 0, 0, 0, 0, 0, 0, 0, 0, L&quot;Arial&quot;, &amp;g_pFont));</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F;获取窗口客户区</span><br><span class="line">	GetClientRect(hWnd, &amp;g_ClientRect);</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F;设置观察和投影矩阵</span><br><span class="line">	SetViewandProjMatrices();</span><br><span class="line"></span><br><span class="line">	return S_OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;-----------------------------------------------------------------------------</span><br><span class="line">&#x2F;&#x2F; Desc: 创建场景图形</span><br><span class="line">&#x2F;&#x2F;-----------------------------------------------------------------------------</span><br><span class="line">HRESULT InitGeometry()</span><br><span class="line">&#123;</span><br><span class="line">	HRESULT hr;</span><br><span class="line">	V_RETURN(D3DXCreateTeapot(g_pd3dDevice, &amp;g_pTeapotMesh, NULL));</span><br><span class="line">	return S_OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;-----------------------------------------------------------------------------</span><br><span class="line">&#x2F;&#x2F; Desc: 计算帧速率</span><br><span class="line">&#x2F;&#x2F;-----------------------------------------------------------------------------</span><br><span class="line">float GetFPS()</span><br><span class="line">&#123;</span><br><span class="line">	static float  fps &#x3D; 0;</span><br><span class="line">	static int    frameCount &#x3D; 0;</span><br><span class="line">	static float  currentTime &#x3D; 0.0f;</span><br><span class="line">	static float  lastTime &#x3D; 0.0f;</span><br><span class="line"></span><br><span class="line">	frameCount++;</span><br><span class="line">	currentTime &#x3D; timeGetTime()*0.001f;</span><br><span class="line"></span><br><span class="line">	if (currentTime - lastTime &gt; 1.0f)</span><br><span class="line">	&#123;</span><br><span class="line">		fps &#x3D; (float)frameCount &#x2F; (currentTime - lastTime);</span><br><span class="line">		lastTime &#x3D; currentTime;</span><br><span class="line">		frameCount &#x3D; 0;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	return fps;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;-----------------------------------------------------------------------------</span><br><span class="line">&#x2F;&#x2F; Desc: 渲染图形 </span><br><span class="line">&#x2F;&#x2F;-----------------------------------------------------------------------------</span><br><span class="line">void Render()</span><br><span class="line">&#123;</span><br><span class="line">	&#x2F;&#x2F;清空后台缓存</span><br><span class="line">	g_pd3dDevice-&gt;Clear(0, NULL, D3DCLEAR_TARGET | D3DCLEAR_ZBUFFER, D3DCOLOR_XRGB(45, 50, 170), 1.0f, 0);</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F;开始在后台缓存绘制图形</span><br><span class="line">	if (SUCCEEDED(g_pd3dDevice-&gt;BeginScene()))</span><br><span class="line">	&#123;</span><br><span class="line">		&#x2F;&#x2F;设置灯光和材质</span><br><span class="line">		SetLights();</span><br><span class="line">		SetMaterial();</span><br><span class="line"></span><br><span class="line">		&#x2F;&#x2F;设置世界矩阵</span><br><span class="line">		SetWorldMatrix();</span><br><span class="line"></span><br><span class="line">		&#x2F;&#x2F;绘制茶壶</span><br><span class="line">		g_pTeapotMesh-&gt;DrawSubset(0);</span><br><span class="line"></span><br><span class="line">		&#x2F;&#x2F;在窗口左上角绘制文本</span><br><span class="line">		int charCount &#x3D; swprintf_s(g_strFPS, 20, L&quot;FPS: %0.2f&quot;, GetFPS());</span><br><span class="line">		g_pFont-&gt;DrawText(NULL, g_strFPS, charCount, &amp;g_ClientRect, DT_TOP | DT_LEFT, 0xffffffff);</span><br><span class="line"></span><br><span class="line">		&#x2F;&#x2F;结束在后台缓存渲染图形</span><br><span class="line">		g_pd3dDevice-&gt;EndScene();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F;将在后台缓存绘制的图形提交到前台缓存显示</span><br><span class="line">	g_pd3dDevice-&gt;Present(NULL, NULL, NULL, NULL);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;-----------------------------------------------------------------------------</span><br><span class="line">&#x2F;&#x2F; Desc: 释放创建的对象</span><br><span class="line">&#x2F;&#x2F;-----------------------------------------------------------------------------</span><br><span class="line">void Cleanup()</span><br><span class="line">&#123;</span><br><span class="line">	SAFE_RELEASE(g_pTeapotMesh);</span><br><span class="line">	SAFE_RELEASE(g_pFont);</span><br><span class="line">	SAFE_RELEASE(g_pd3dDevice);</span><br><span class="line">	SAFE_RELEASE(g_pD3D);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;-----------------------------------------------------------------------------</span><br><span class="line">&#x2F;&#x2F; Desc: 消息处理</span><br><span class="line">&#x2F;&#x2F;-----------------------------------------------------------------------------</span><br><span class="line">LRESULT WINAPI WndProc(HWND hWnd, UINT msg, WPARAM wParam, LPARAM lParam)</span><br><span class="line">&#123;</span><br><span class="line">	switch (msg)</span><br><span class="line">	&#123;</span><br><span class="line">	case WM_KEYDOWN:</span><br><span class="line">		if (wParam &#x3D;&#x3D; VK_ESCAPE)</span><br><span class="line">			PostQuitMessage(0);</span><br><span class="line">		break;</span><br><span class="line"></span><br><span class="line">	case WM_DESTROY:</span><br><span class="line">		PostQuitMessage(0);</span><br><span class="line">		break;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	return DefWindowProc(hWnd, msg, wParam, lParam);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;-----------------------------------------------------------------------------</span><br><span class="line">&#x2F;&#x2F; Desc: 程序入口</span><br><span class="line">&#x2F;&#x2F;-----------------------------------------------------------------------------</span><br><span class="line">int _stdcall _tWinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance,</span><br><span class="line">	PTSTR szCmdLine, int iCmdShow)</span><br><span class="line">&#123;</span><br><span class="line">	&#x2F;&#x2F;定义窗口类</span><br><span class="line">	WNDCLASSEX wndClassEx;</span><br><span class="line">	wndClassEx.cbSize &#x3D; sizeof(WNDCLASSEX);</span><br><span class="line">	wndClassEx.style &#x3D; CS_CLASSDC;</span><br><span class="line">	wndClassEx.lpfnWndProc &#x3D; WndProc;</span><br><span class="line">	wndClassEx.cbClsExtra &#x3D; 0;</span><br><span class="line">	wndClassEx.cbWndExtra &#x3D; 0;</span><br><span class="line">	wndClassEx.hInstance &#x3D; hInstance;</span><br><span class="line">	wndClassEx.hIcon &#x3D; LoadIcon(NULL, IDI_APPLICATION);</span><br><span class="line">	wndClassEx.hCursor &#x3D; LoadCursor(NULL, IDC_ARROW);</span><br><span class="line">	wndClassEx.hbrBackground &#x3D; (HBRUSH)GetStockObject(WHITE_BRUSH);</span><br><span class="line">	wndClassEx.lpszMenuName &#x3D; NULL;</span><br><span class="line">	wndClassEx.lpszClassName &#x3D; L&quot;ClassName&quot;;</span><br><span class="line">	wndClassEx.hIconSm &#x3D; NULL;</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F;注册窗口类</span><br><span class="line">	if (!RegisterClassEx(&amp;wndClassEx))</span><br><span class="line">	&#123;</span><br><span class="line">		MessageBox(NULL, L&quot;注册窗口类失败!&quot;, L&quot;Teapot&quot;, 0);</span><br><span class="line">		return 0;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F;创建窗口</span><br><span class="line">	HWND hWnd &#x3D; NULL;</span><br><span class="line">	hWnd &#x3D; CreateWindowEx(NULL, &#x2F;&#x2F;窗口扩展风格</span><br><span class="line">		L&quot;ClassName&quot;,            &#x2F;&#x2F;窗口类名称</span><br><span class="line">		L&quot;Teapot&quot;,               &#x2F;&#x2F;窗口标题</span><br><span class="line">		WS_OVERLAPPEDWINDOW,     &#x2F;&#x2F;窗口风格</span><br><span class="line">		CW_USEDEFAULT,           &#x2F;&#x2F;窗口初始X位置</span><br><span class="line">		CW_USEDEFAULT,           &#x2F;&#x2F;窗口初始Y位置</span><br><span class="line">		600,                     &#x2F;&#x2F;窗口初始宽度</span><br><span class="line">		480,                     &#x2F;&#x2F;窗口初始高度</span><br><span class="line">		NULL,                    &#x2F;&#x2F;父窗口句柄</span><br><span class="line">		NULL,                    &#x2F;&#x2F;窗口菜单句柄</span><br><span class="line">		hInstance,               &#x2F;&#x2F;程序实例句柄</span><br><span class="line">		NULL);                  &#x2F;&#x2F; 创建参数</span><br><span class="line"></span><br><span class="line">	if (hWnd &#x3D;&#x3D; NULL)</span><br><span class="line">	&#123;</span><br><span class="line">		MessageBox(NULL, L&quot;创建窗口失败!&quot;, L&quot;Teapot&quot;, 0);</span><br><span class="line">		return 0;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F;初始化Direct3D</span><br><span class="line">	if (SUCCEEDED(InitD3D(hWnd)))</span><br><span class="line">	&#123;</span><br><span class="line">		&#x2F;&#x2F;创建并填充顶点缓存</span><br><span class="line">		if (SUCCEEDED(InitGeometry()))</span><br><span class="line">		&#123;</span><br><span class="line">			&#x2F;&#x2F;显示窗口</span><br><span class="line">			ShowWindow(hWnd, SW_SHOWDEFAULT);</span><br><span class="line">			UpdateWindow(hWnd);</span><br><span class="line"></span><br><span class="line">			&#x2F;&#x2F;进入消息循环</span><br><span class="line">			MSG msg;</span><br><span class="line">			ZeroMemory(&amp;msg, sizeof(msg));</span><br><span class="line">			while (msg.message !&#x3D; WM_QUIT)</span><br><span class="line">			&#123;</span><br><span class="line">				if (PeekMessage(&amp;msg, NULL, 0U, 0U, PM_REMOVE))</span><br><span class="line">				&#123;</span><br><span class="line">					TranslateMessage(&amp;msg);</span><br><span class="line">					DispatchMessage(&amp;msg);</span><br><span class="line">				&#125;</span><br><span class="line">				else</span><br><span class="line">				&#123;</span><br><span class="line">					Render();  &#x2F;&#x2F;渲染图形</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F;释放创建的相关对象</span><br><span class="line">	Cleanup();</span><br><span class="line"></span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>DirectX</category>
      </categories>
      <tags>
        <tag>DirectX</tag>
        <tag>Visual Studio</tag>
      </tags>
  </entry>
  <entry>
    <title>创建x文件网格模型</title>
    <url>/2020/07/13/%E5%88%9B%E5%BB%BAx%E6%96%87%E4%BB%B6%E7%BD%91%E6%A0%BC%E6%A8%A1%E5%9E%8B/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote class="blockquote-center">
<p>由3dmax模型到DirectX模型 </p>

</blockquote>
<a id="more"></a>

<h1 id="思路简述"><a href="#思路简述" class="headerlink" title="思路简述"></a>思路简述</h1><p>三维文本网格模型的绘制流程和茶壶模型绘制基本相同，在InitGeometry部分作出一定修改即可。</p>
<h1 id="InitGeometry"><a href="#InitGeometry" class="headerlink" title="InitGeometry"></a>InitGeometry</h1><blockquote>
<p>创建场景图形</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">HRESULT InitGeometry()</span><br><span class="line">&#123;</span><br><span class="line">	HRESULT hr;</span><br><span class="line"></span><br><span class="line">	LPD3DXBUFFER pD3DXMtrlBuffer;  &#x2F;&#x2F;存储网格模型材质的缓存对象</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F;从磁盘文件加载网格模型</span><br><span class="line">	V_RETURN(D3DXLoadMeshFromX(L&quot;plane.x&quot;, D3DXMESH_MANAGED, g_pd3dDevice, NULL,</span><br><span class="line">		&amp;pD3DXMtrlBuffer, NULL, &amp;g_dwNumMaterials, &amp;g_pMesh));</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F;从网格模型中提取材质属性和纹理文件名 </span><br><span class="line">	D3DXMATERIAL* d3dxMaterials &#x3D; (D3DXMATERIAL*)pD3DXMtrlBuffer-&gt;GetBufferPointer();</span><br><span class="line">	g_pMeshMaterials &#x3D; new D3DMATERIAL9[g_dwNumMaterials];</span><br><span class="line"></span><br><span class="line">	if (g_pMeshMaterials &#x3D;&#x3D; NULL)</span><br><span class="line">		return E_OUTOFMEMORY;</span><br><span class="line"></span><br><span class="line">	g_pMeshTextures &#x3D; new LPDIRECT3DTEXTURE9[g_dwNumMaterials];</span><br><span class="line">	if (g_pMeshTextures &#x3D;&#x3D; NULL)</span><br><span class="line">		return E_OUTOFMEMORY;</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F;逐块提取网格模型材质属性和纹理文件名</span><br><span class="line">	for (DWORD i &#x3D; 0; i &lt; g_dwNumMaterials; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		&#x2F;&#x2F;材料属性</span><br><span class="line">		g_pMeshMaterials[i] &#x3D; d3dxMaterials[i].MatD3D;</span><br><span class="line"></span><br><span class="line">		&#x2F;&#x2F;设置模型材料的环境光反射系数, 因为模型材料本身没有设置环境光反射系数</span><br><span class="line">		g_pMeshMaterials[i].Ambient &#x3D; g_pMeshMaterials[i].Diffuse;</span><br><span class="line"></span><br><span class="line">		g_pMeshTextures[i] &#x3D; NULL;</span><br><span class="line">		if (d3dxMaterials[i].pTextureFilename !&#x3D; NULL &amp;&amp;</span><br><span class="line">			strlen(d3dxMaterials[i].pTextureFilename) &gt; 0)</span><br><span class="line">		&#123;</span><br><span class="line">			&#x2F;&#x2F;获取纹理文件名</span><br><span class="line">			WCHAR filename[256];</span><br><span class="line">			RemovePathFromFileName(d3dxMaterials[i].pTextureFilename, filename);</span><br><span class="line"></span><br><span class="line">			&#x2F;&#x2F;创建纹理</span><br><span class="line">			if (FAILED(D3DXCreateTextureFromFile(g_pd3dDevice, filename,</span><br><span class="line">				&amp;g_pMeshTextures[i])))</span><br><span class="line">			&#123;</span><br><span class="line">				MessageBox(NULL, L&quot;没有找到纹理文件!&quot;, L&quot;FileMesh&quot;, MB_OK);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F;释放在加载模型文件时创建的保存模型材质和纹理数据的缓存对象</span><br><span class="line">	pD3DXMtrlBuffer-&gt;Release();</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F;为网格模型计算法线信息</span><br><span class="line">	if (!(g_pMesh-&gt;GetFVF() &amp; D3DFVF_NORMAL))</span><br><span class="line">	&#123;</span><br><span class="line">		&#x2F;&#x2F;克隆网格模型</span><br><span class="line">		LPD3DXMESH pTempMesh &#x3D; NULL;</span><br><span class="line">		g_pMesh-&gt;CloneMeshFVF(D3DXMESH_MANAGED, g_pMesh-&gt;GetFVF() | D3DFVF_NORMAL, g_pd3dDevice, &amp;pTempMesh);</span><br><span class="line"></span><br><span class="line">		&#x2F;&#x2F;为网格模型计算法线</span><br><span class="line">		D3DXComputeNormals(pTempMesh, NULL);</span><br><span class="line"></span><br><span class="line">		&#x2F;&#x2F;释放原来的网格模型对象, 并保存新网格模型</span><br><span class="line">		g_pMesh-&gt;Release();</span><br><span class="line">		g_pMesh &#x3D; pTempMesh;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	return S_OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="D3DXLoadMeshFromX"><a href="#D3DXLoadMeshFromX" class="headerlink" title="D3DXLoadMeshFromX"></a>D3DXLoadMeshFromX</h2><blockquote>
<p>从DirectX .x文件加载网格</p>
</blockquote>
<h3 id="函数原型"><a href="#函数原型" class="headerlink" title="函数原型"></a>函数原型</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">HRESULT D3DXLoadMeshFromX(</span><br><span class="line">  _In_  LPCTSTR           pFilename,    \\ 指向指定文件名的字符串的指针</span><br><span class="line">  _In_  DWORD             Options,      \\ D3DXMESH枚举中的一个或多个标志的组合，用于指定网格的创建选项</span><br><span class="line">  _In_  LPDIRECT3DDEVICE9 pD3DDevice,   \\ 指向IDirect3DDevice9接口的指针，该接口是与网格关联的设备对象</span><br><span class="line">  _Out_ LPD3DXBUFFER      *ppAdjacency, \\指向包含邻接数据的缓冲区的指针</span><br><span class="line">  _Out_ LPD3DXBUFFER      *ppMaterials, \\ 指向包含物料数据的缓冲区的指针</span><br><span class="line">  _Out_ LPD3DXBUFFER      *ppEffectInstances,   \\ 指向一个缓冲区的指针，该缓冲区包含一个效果实例数组</span><br><span class="line">  _Out_ DWORD             *pNumMaterials,\\ 当方法返回时，指向ppMaterials数组中D3DXMATERIAL结构的数量的指针   </span><br><span class="line">  _Out_ LPD3DXMESH        *ppMesh         \\ 指向ID3DXMesh接口的指针的地址，表示加载的网格</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h4 id="ID3DXBuffer"><a href="#ID3DXBuffer" class="headerlink" title="ID3DXBuffer"></a>ID3DXBuffer</h4><blockquote>
<p>ID3DXBuffer接口是一个通用的数据缓存，D3DX用它来保存一块连续内存区域中的数据，可用于保存mesh的信息</p>
</blockquote>
<p><strong>创建ID3DXBuffer接口的对象</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">HRESULT  D3DXCreateBuffer</span><br><span class="line">(</span><br><span class="line">    DWORD NumBytes,	&#x2F;&#x2F; 缓存大小</span><br><span class="line">    LPD3DXBUFFER *ppBuffer	 &#x2F;&#x2F; 返回指针</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h4 id="D3DXMESH"><a href="#D3DXMESH" class="headerlink" title="D3DXMESH"></a>D3DXMESH</h4><p><a href="https://docs.microsoft.com/en-us/windows/win32/direct3d9/d3dxmesh" target="_blank" rel="noopener">MSDN官方定义</a></p>
<h2 id="D3DXCreateTextureFromFile"><a href="#D3DXCreateTextureFromFile" class="headerlink" title="D3DXCreateTextureFromFile"></a>D3DXCreateTextureFromFile</h2><blockquote>
<p>从文件创建纹理</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">D3DXCreateTextureFromFile(g_pd3dDevice, filename,&amp;g_pMeshTextures[i])</span><br></pre></td></tr></table></figure>

<h3 id="函数原型-1"><a href="#函数原型-1" class="headerlink" title="函数原型"></a>函数原型</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">HRESULT D3DXCreateTextureFromFile(</span><br><span class="line">  _In_  LPDIRECT3DDEVICE9  pDevice,     \\ 指向IDirect3DDevice9接口的指针，该接口表示要与纹理关联的设备</span><br><span class="line">  _In_  LPCTSTR            pSrcFile,    \\ 指向指定文件名的字符串的指针</span><br><span class="line">  _Out_ LPDIRECT3DTEXTURE9 *ppTexture   \\ 该指针表示创建的纹理对象</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h2 id="RemovePathFromFileName"><a href="#RemovePathFromFileName" class="headerlink" title="RemovePathFromFileName"></a>RemovePathFromFileName</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">void RemovePathFromFileName(LPSTR fullPath, LPWSTR fileName)</span><br><span class="line">&#123;</span><br><span class="line">	&#x2F;&#x2F;先将fullPath的类型变换为LPWSTR</span><br><span class="line">	WCHAR wszBuf[MAX_PATH];</span><br><span class="line">	MultiByteToWideChar(CP_ACP, 0, fullPath, -1, wszBuf, MAX_PATH);</span><br><span class="line">	wszBuf[MAX_PATH - 1] &#x3D; L&#39;\0&#39;;</span><br><span class="line">	WCHAR* wszFullPath &#x3D; wszBuf;</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F;从绝对路径中提取文件名</span><br><span class="line">	LPWSTR pch &#x3D; wcsrchr(wszFullPath, &#39;\\&#39;);</span><br><span class="line">	if (pch)</span><br><span class="line">	lstrcpy(fileName, ++pch);</span><br><span class="line">	else</span><br><span class="line">	lstrcpy(fileName, wszFullPath);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="MultiByteToWideChar"><a href="#MultiByteToWideChar" class="headerlink" title="MultiByteToWideChar"></a>MultiByteToWideChar</h3><blockquote>
<p>将字符串映射到UTF-16（宽字符）字符串</p>
</blockquote>
<p><a href="https://docs.microsoft.com/en-us/windows/win32/api/stringapiset/nf-stringapiset-multibytetowidechar" target="_blank" rel="noopener">MSDN官方定义</a></p>
<h3 id="lstrcpyA"><a href="#lstrcpyA" class="headerlink" title="lstrcpyA"></a>lstrcpyA</h3><blockquote>
<p>将字符串复制到缓冲区</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">LPSTR lstrcpyA(</span><br><span class="line">  LPSTR  lpString1, \\ 目标缓冲区</span><br><span class="line">  LPCSTR lpString2  \\ 源缓冲区</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h1 id="Render部分增加"><a href="#Render部分增加" class="headerlink" title="Render部分增加"></a>Render部分增加</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;逐子集渲染网格模型</span><br><span class="line">for (DWORD i &#x3D; 0; i &lt; g_dwNumMaterials; i++)</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F;设置材料和纹理</span><br><span class="line">    g_pd3dDevice-&gt;SetMaterial(&amp;g_pMeshMaterials[i]);</span><br><span class="line">    g_pd3dDevice-&gt;SetTexture(0, g_pMeshTextures[i]);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;渲染模型</span><br><span class="line">    g_pMesh-&gt;DrawSubset(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Cleanup部分增加"><a href="#Cleanup部分增加" class="headerlink" title="Cleanup部分增加"></a>Cleanup部分增加</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;释放网格模型材质</span><br><span class="line">SAFE_DELETE_ARRAY(g_pMeshMaterials);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;释放网格模型纹理</span><br><span class="line">if (g_pMeshTextures)</span><br><span class="line">&#123;</span><br><span class="line">    for (DWORD i &#x3D; 0; i &lt; g_dwNumMaterials; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        SAFE_RELEASE(g_pMeshTextures[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    delete[] g_pMeshTextures;</span><br><span class="line">&#125;</span><br><span class="line">SAFE_RELEASE(g_pMesh);</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>DirectX</category>
      </categories>
      <tags>
        <tag>DirectX</tag>
      </tags>
  </entry>
  <entry>
    <title>创建三维文本网格模型</title>
    <url>/2020/07/12/%E5%88%9B%E5%BB%BA%E4%B8%89%E7%BB%B4%E6%96%87%E6%9C%AC%E7%BD%91%E6%A0%BC%E6%A8%A1%E5%9E%8B/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote class="blockquote-center">
<p>调用函数实现立体文本效果 </p>

</blockquote>
<a id="more"></a>

<h1 id="思路简述"><a href="#思路简述" class="headerlink" title="思路简述"></a>思路简述</h1><p>三维文本网格模型的绘制流程和茶壶模型绘制基本相同，都是调用系统自带的绘制函数，但由于绘制函数的参数不同，因此在InitGeometry部分作出一定修改即可。</p>
<h1 id="为指定的文本创建网格模型"><a href="#为指定的文本创建网格模型" class="headerlink" title="为指定的文本创建网格模型"></a>为指定的文本创建网格模型</h1><blockquote>
<p>用户自定义函数</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">HRESULT CreateTextMesh( WCHAR* pText )</span><br><span class="line">&#123;</span><br><span class="line">	HRESULT hr;</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F;创建设备描述表</span><br><span class="line">	HDC hdc &#x3D; CreateCompatibleDC( NULL );</span><br><span class="line">	if( hdc &#x3D;&#x3D; NULL )</span><br><span class="line">		return E_OUTOFMEMORY;</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F;创建字体</span><br><span class="line">	HFONT hFont &#x3D; CreateFont(0, 0, 0, 0, FW_BOLD , false, false, false, </span><br><span class="line">		DEFAULT_CHARSET,OUT_DEFAULT_PRECIS, CLIP_DEFAULT_PRECIS, </span><br><span class="line">		DEFAULT_QUALITY, DEFAULT_PITCH | FF_DONTCARE, L&quot;Arial&quot;);   </span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F;将字体选进设备描述表</span><br><span class="line">	SelectObject(hdc, hFont); </span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F;创建三维文本网格模型</span><br><span class="line">	V_RETURN( D3DXCreateText( g_pd3dDevice, hdc, pText, 0.001f, 0.4f, &amp;g_pTextMesh, NULL, NULL ));</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F;释放字体和设备描述表</span><br><span class="line">	DeleteObject( hFont );</span><br><span class="line">	DeleteDC( hdc );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="CreateFont"><a href="#CreateFont" class="headerlink" title="CreateFont"></a>CreateFont</h2><blockquote>
<p>系统字体创建函数</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">HFONT hFont &#x3D; CreateFont(0, 0, 0, 0, FW_BOLD , false, false, false, </span><br><span class="line">		DEFAULT_CHARSET,OUT_DEFAULT_PRECIS, CLIP_DEFAULT_PRECIS, </span><br><span class="line">		DEFAULT_QUALITY, DEFAULT_PITCH | FF_DONTCARE, L&quot;Arial&quot;);</span><br></pre></td></tr></table></figure>

<p><strong>函数原型</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">HRESULT D3DXCreateFont(</span><br><span class="line">  _In_  LPDIRECT3DDEVICE9 pDevice,	\\ 指向IDirect3DDevice9接口的指针，该接口与字体对象关联</span><br><span class="line">  _In_  INT               Height,	\\ 字符的高度，以逻辑单位表示</span><br><span class="line">  _In_  UINT              Width,	\\ 字符的宽度，以逻辑单位表示</span><br><span class="line">  _In_  UINT              Weight,	\\ 字体重量。一个例子是粗体。</span><br><span class="line">  _In_  UINT              MipLevels,\\ mipmap级别数</span><br><span class="line">  _In_  BOOL              Italic,	\\ 斜体字体为true，否则为false</span><br><span class="line">  _In_  DWORD             CharSet,	\\ 字体的字符集</span><br><span class="line">  _In_  DWORD             OutputPrecision,	\\ 指定Windows应如何尝试将所需的字体大小和特征与实际字体进行匹配</span><br><span class="line">  _In_  DWORD             Quality,	\\指定Windows如何将所需字体与实际字体匹配</span><br><span class="line">  _In_  DWORD             PitchAndFamily,	\\ </span><br><span class="line">  _In_  LPCTSTR           pFacename, \\ 包含字体名称的字符串</span><br><span class="line">  _Out_ LPD3DXFONT        *ppFont	\\ 返回一个指向ID3DXFont接口的指针，该接口代表创建的字体对象</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h2 id="D3DXCreateText"><a href="#D3DXCreateText" class="headerlink" title="D3DXCreateText"></a>D3DXCreateText</h2><blockquote>
<p>系统三维文本绘制函数</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">D3DXCreateText( g_pd3dDevice, hdc, pText, 0.001f, 0.4f, &amp;g_pTextMesh, NULL, NULL )</span><br></pre></td></tr></table></figure>

<p><strong>函数原型</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">HRESULT D3DXCreateText(</span><br><span class="line">  _In_  LPDIRECT3DDEVICE9   pDevice,    \\ 指向创建网格的设备的指针</span><br><span class="line">  _In_  HDC                 hDC,        \\ 设备上下文，包含用于输出的字体</span><br><span class="line">  _In_  LPCTSTR             pText,      \\ 指向指定要生成的文本的字符串的指针</span><br><span class="line">  _In_  FLOAT               Deviation,  \\ 与TrueType字体轮廓的最大弦偏差</span><br><span class="line">  _In_  FLOAT               Extrusion,  \\ 沿负z方向挤出文本的量</span><br><span class="line">  _Out_ LPD3DXMESH          *ppMesh,    \\ 指向返回的网格的指针</span><br><span class="line">  _Out_ LPD3DXBUFFER        *ppAdjacency,\\ 指向包含邻接信息的缓冲区的指针</span><br><span class="line">  _Out_ LPGLYPHMETRICSFLOAT pGlyphMetrics\\ 指向包含字形指标数据的GLYPHMETRICSFLOAT结构数组的指针</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p>返回值：</p>
<ul>
<li>如果函数成功，则返回值为D3D_OK</li>
<li>如果函数失败，则返回值可以是以下之一：D3DERR_INVALIDCALL，D3DXERR_INVALIDDATA，E_OUTOFMEMORY</li>
</ul>
<h1 id="文件源码"><a href="#文件源码" class="headerlink" title="文件源码"></a>文件源码</h1><h2 id="Main-cpp"><a href="#Main-cpp" class="headerlink" title="Main.cpp"></a>Main.cpp</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">&#x2F;&#x2F; Desc: 三维文本绘制示例程序</span><br><span class="line">&#x2F;&#x2F;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">#include &lt;d3dx9.h&gt; </span><br><span class="line">#include &lt;tchar.h&gt;</span><br><span class="line">#include &lt;d3dx9core.h&gt;</span><br><span class="line">#include &quot;UtilMacro.h&quot;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;-----------------------------------------------------------------------------</span><br><span class="line">&#x2F;&#x2F; Desc: 全局变量</span><br><span class="line">&#x2F;&#x2F;-----------------------------------------------------------------------------</span><br><span class="line">LPDIRECT3D9             g_pD3D       &#x3D; NULL;    &#x2F;&#x2F;Direct3D对象</span><br><span class="line">LPDIRECT3DDEVICE9       g_pd3dDevice &#x3D; NULL;    &#x2F;&#x2F;Direct3D设备对象</span><br><span class="line">LPD3DXFONT              g_pFont      &#x3D; 0;       &#x2F;&#x2F;字体对象</span><br><span class="line">LPD3DXMESH              g_pTextMesh  &#x3D; NULL;    &#x2F;&#x2F;三维字体网格模型</span><br><span class="line"></span><br><span class="line">RECT   g_ClientRect;    &#x2F;&#x2F;窗口客户区</span><br><span class="line">float  g_FPS &#x3D; 0;       &#x2F;&#x2F;帧速率</span><br><span class="line">WCHAR  g_strFPS[20];    &#x2F;&#x2F;包含帧速率的字符数组</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;-----------------------------------------------------------------------------</span><br><span class="line">&#x2F;&#x2F; Desc: 顶点结构和顶点格式</span><br><span class="line">&#x2F;&#x2F;-----------------------------------------------------------------------------</span><br><span class="line">struct CUSTOMVERTEX</span><br><span class="line">&#123;</span><br><span class="line">	D3DXVECTOR3 position;</span><br><span class="line">	DWORD color;</span><br><span class="line">&#125;;</span><br><span class="line">#define D3DFVF_CUSTOMVERTEX (D3DFVF_XYZ | D3DFVF_DIFFUSE)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;-----------------------------------------------------------------------------</span><br><span class="line">&#x2F;&#x2F; Desc: 设置世界矩阵</span><br><span class="line">&#x2F;&#x2F;-----------------------------------------------------------------------------</span><br><span class="line">void SetWorldMatrix()</span><br><span class="line">&#123;</span><br><span class="line">	&#x2F;&#x2F;创建并设置世界矩阵</span><br><span class="line">	D3DXMATRIXA16 matWorld, matTrans, matRotate;</span><br><span class="line">	float  time  &#x3D; timeGetTime() * 0.001f;</span><br><span class="line">	float fAngle &#x3D; time * D3DX_PI &#x2F; 2;</span><br><span class="line">	&#x2F;&#x2F;fAngle &#x3D;  -D3DX_PI&#x2F;4;</span><br><span class="line"></span><br><span class="line">	D3DXMatrixTranslation(&amp;matTrans,-3.0f,0.0f,0.0f);  &#x2F;&#x2F;平移</span><br><span class="line">	D3DXMatrixRotationY( &amp;matRotate, fAngle );         &#x2F;&#x2F;旋转</span><br><span class="line">	matWorld &#x3D; matTrans * matRotate;                   &#x2F;&#x2F;先平移, 后旋转</span><br><span class="line">	g_pd3dDevice-&gt;SetTransform( D3DTS_WORLD, &amp;matWorld );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;-----------------------------------------------------------------------------</span><br><span class="line">&#x2F;&#x2F; Desc: 设置观察矩阵和投影矩阵</span><br><span class="line">&#x2F;&#x2F;-----------------------------------------------------------------------------</span><br><span class="line">void SetViewandProjMatrices()</span><br><span class="line">&#123;</span><br><span class="line">	&#x2F;&#x2F;建立并设置观察矩阵</span><br><span class="line">	D3DXVECTOR3 vEyePt( 0.0f, 0.0f,-8.0f );</span><br><span class="line">	D3DXVECTOR3 vLookatPt( 0.0f, 0.0f, 0.0f );</span><br><span class="line">	D3DXVECTOR3 vUpVec( 0.0f, 1.0f, 0.0f );</span><br><span class="line">	D3DXMATRIXA16 matView;</span><br><span class="line">	D3DXMatrixLookAtLH( &amp;matView, &amp;vEyePt, &amp;vLookatPt, &amp;vUpVec );</span><br><span class="line">	g_pd3dDevice-&gt;SetTransform( D3DTS_VIEW, &amp;matView );</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F;建立并设置投影矩阵</span><br><span class="line">	D3DXMATRIXA16 matProj;</span><br><span class="line">	float aspect &#x3D; (float)(g_ClientRect.right - g_ClientRect.left)&#x2F;(g_ClientRect.bottom - g_ClientRect.top);</span><br><span class="line">	D3DXMatrixPerspectiveFovLH( &amp;matProj, D3DX_PI&#x2F;4, aspect, 1.0f, 100.0f );</span><br><span class="line">	g_pd3dDevice-&gt;SetTransform( D3DTS_PROJECTION, &amp;matProj );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;-----------------------------------------------------------------------------</span><br><span class="line">&#x2F;&#x2F; Desc: 设置灯光</span><br><span class="line">&#x2F;&#x2F;-----------------------------------------------------------------------------</span><br><span class="line">void SetLights()</span><br><span class="line">&#123;</span><br><span class="line">	&#x2F;&#x2F;方向光</span><br><span class="line">	D3DXVECTOR3 vecDir;</span><br><span class="line">	D3DLIGHT9 light;</span><br><span class="line">	ZeroMemory( &amp;light, sizeof(D3DLIGHT9) );</span><br><span class="line">	light.Type       &#x3D; D3DLIGHT_DIRECTIONAL;</span><br><span class="line">	light.Diffuse.r  &#x3D; 1.0f;</span><br><span class="line">	light.Diffuse.g  &#x3D; 1.0f;</span><br><span class="line">	light.Diffuse.b  &#x3D; 1.0f;</span><br><span class="line">	vecDir &#x3D; D3DXVECTOR3(-1, -1, 1);</span><br><span class="line">	D3DXVec3Normalize( (D3DXVECTOR3*)&amp;light.Direction, &amp;vecDir );</span><br><span class="line">	light.Range       &#x3D; 1000.0f;</span><br><span class="line">	g_pd3dDevice-&gt;SetLight( 0, &amp;light );</span><br><span class="line">	g_pd3dDevice-&gt;LightEnable( 0, TRUE );</span><br><span class="line">	g_pd3dDevice-&gt;SetRenderState( D3DRS_LIGHTING, true );</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F;全局环境光</span><br><span class="line">	g_pd3dDevice-&gt;SetRenderState( D3DRS_AMBIENT, 0xff505050);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;-----------------------------------------------------------------------------</span><br><span class="line">&#x2F;&#x2F; Desc: 设置灯光</span><br><span class="line">&#x2F;&#x2F;-----------------------------------------------------------------------------</span><br><span class="line">void SetMaterial()</span><br><span class="line">&#123;</span><br><span class="line">	&#x2F;&#x2F;设置材质</span><br><span class="line">	D3DMATERIAL9 mtrl;</span><br><span class="line">	ZeroMemory( &amp;mtrl, sizeof(D3DMATERIAL9) );</span><br><span class="line">	mtrl.Diffuse.r &#x3D; mtrl.Ambient.r &#x3D; 1.0f;</span><br><span class="line">	mtrl.Diffuse.g &#x3D; mtrl.Ambient.g &#x3D; 1.0f;</span><br><span class="line">	mtrl.Diffuse.b &#x3D; mtrl.Ambient.b &#x3D; 0.0f;</span><br><span class="line">	mtrl.Diffuse.a &#x3D; mtrl.Ambient.a &#x3D; 1.0f;</span><br><span class="line">	g_pd3dDevice-&gt;SetMaterial( &amp;mtrl );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;-----------------------------------------------------------------------------</span><br><span class="line">&#x2F;&#x2F; Desc: 为指定的文本创建网格模型</span><br><span class="line">&#x2F;&#x2F;-----------------------------------------------------------------------------</span><br><span class="line">HRESULT CreateTextMesh( WCHAR* pText )</span><br><span class="line">&#123;</span><br><span class="line">	HRESULT hr;</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F;创建设备描述表</span><br><span class="line">	HDC hdc &#x3D; CreateCompatibleDC( NULL );</span><br><span class="line">	if( hdc &#x3D;&#x3D; NULL )</span><br><span class="line">		return E_OUTOFMEMORY;</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F;创建字体</span><br><span class="line">	HFONT hFont &#x3D; CreateFont(0, 0, 0, 0, FW_BOLD , false, false, false, </span><br><span class="line">		DEFAULT_CHARSET,OUT_DEFAULT_PRECIS, CLIP_DEFAULT_PRECIS, </span><br><span class="line">		DEFAULT_QUALITY, DEFAULT_PITCH | FF_DONTCARE, L&quot;Arial&quot;);   </span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F;将字体选进设备描述表</span><br><span class="line">	SelectObject(hdc, hFont); </span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F;创建三维文本网格模型</span><br><span class="line">	V_RETURN( D3DXCreateText( g_pd3dDevice, hdc, pText, 0.001f, 0.4f, &amp;g_pTextMesh, NULL, NULL ));</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F;释放字体和设备描述表</span><br><span class="line">	DeleteObject( hFont );</span><br><span class="line">	DeleteDC( hdc );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;-----------------------------------------------------------------------------</span><br><span class="line">&#x2F;&#x2F; Desc: 初始化Direct3D</span><br><span class="line">&#x2F;&#x2F;-----------------------------------------------------------------------------</span><br><span class="line">HRESULT InitD3D( HWND hWnd )</span><br><span class="line">&#123;</span><br><span class="line">	HRESULT hr;</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F;创建Direct3D对象, 该对象用来创建Direct3D设备对象</span><br><span class="line">	g_pD3D &#x3D; Direct3DCreate9( D3D_SDK_VERSION );</span><br><span class="line">	if( g_pD3D &#x3D;&#x3D; NULL)</span><br><span class="line">		return E_FAIL;</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F;检查设备性能</span><br><span class="line">	D3DCAPS9  caps;</span><br><span class="line">	g_pD3D-&gt;GetDeviceCaps(D3DADAPTER_DEFAULT, D3DDEVTYPE_HAL, &amp;caps);</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F;检查设备是否支持硬件顶点处理</span><br><span class="line">	int vp&#x3D;0;</span><br><span class="line">	if(caps.DevCaps &amp; D3DDEVCAPS_HWTRANSFORMANDLIGHT)</span><br><span class="line">	&#123; </span><br><span class="line">		vp&#x3D;D3DCREATE_HARDWARE_VERTEXPROCESSING;</span><br><span class="line">	&#125;</span><br><span class="line">	else</span><br><span class="line">	&#123;</span><br><span class="line">		vp&#x3D;D3DCREATE_SOFTWARE_VERTEXPROCESSING;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F;设置D3DPRESENT_PARAMETERS结构</span><br><span class="line">	D3DPRESENT_PARAMETERS d3dpp;</span><br><span class="line">	ZeroMemory( &amp;d3dpp, sizeof(d3dpp) );</span><br><span class="line">	d3dpp.Windowed &#x3D; TRUE;</span><br><span class="line">	d3dpp.SwapEffect &#x3D; D3DSWAPEFFECT_DISCARD;</span><br><span class="line">	d3dpp.BackBufferFormat &#x3D; D3DFMT_UNKNOWN;</span><br><span class="line">	d3dpp.EnableAutoDepthStencil &#x3D; TRUE;</span><br><span class="line">	d3dpp.AutoDepthStencilFormat &#x3D; D3DFMT_D16;</span><br><span class="line">	d3dpp.PresentationInterval &#x3D; D3DPRESENT_INTERVAL_IMMEDIATE;</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F;创建Direct3D设备对象</span><br><span class="line">	V_RETURN( g_pD3D-&gt;CreateDevice( D3DADAPTER_DEFAULT, D3DDEVTYPE_HAL, hWnd, vp,  &amp;d3dpp, &amp;g_pd3dDevice ));</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F;创建字体对象</span><br><span class="line">	V_RETURN( D3DXCreateFont(g_pd3dDevice,0,0,0,0,0,0,0,0,0, L&quot;Arial&quot;, &amp;g_pFont ));</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F;获取窗口客户区</span><br><span class="line">	GetClientRect(hWnd, &amp;g_ClientRect);</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F;设置观察和投影矩阵</span><br><span class="line">	SetViewandProjMatrices( );</span><br><span class="line"></span><br><span class="line">	return S_OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;-----------------------------------------------------------------------------</span><br><span class="line">&#x2F;&#x2F; Desc: 创建文本网格模型</span><br><span class="line">&#x2F;&#x2F;-----------------------------------------------------------------------------</span><br><span class="line">HRESULT InitGeometry()</span><br><span class="line">&#123;</span><br><span class="line">	HRESULT hr;</span><br><span class="line">	V_RETURN (CreateTextMesh(L&quot;Hello Direct3D!&quot; ));</span><br><span class="line">	return S_OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;-----------------------------------------------------------------------------</span><br><span class="line">&#x2F;&#x2F; Desc: 计算帧速率</span><br><span class="line">&#x2F;&#x2F;-----------------------------------------------------------------------------</span><br><span class="line">float GetFPS()</span><br><span class="line">&#123;</span><br><span class="line">	static float  fps &#x3D; 0;</span><br><span class="line">	static int    frameCount &#x3D; 0;</span><br><span class="line">	static float  currentTime &#x3D;0.0f;</span><br><span class="line">	static float  lastTime &#x3D; 0.0f;</span><br><span class="line"></span><br><span class="line">	frameCount++;</span><br><span class="line">	currentTime &#x3D; timeGetTime()*0.001f;</span><br><span class="line"></span><br><span class="line">	if(currentTime - lastTime &gt; 1.0f)</span><br><span class="line">	&#123;</span><br><span class="line">		fps &#x3D; (float)frameCount &#x2F;(currentTime - lastTime);</span><br><span class="line">		lastTime &#x3D; currentTime;</span><br><span class="line">		frameCount    &#x3D; 0;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	return fps;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;-----------------------------------------------------------------------------</span><br><span class="line">&#x2F;&#x2F; Desc: 渲染图形 </span><br><span class="line">&#x2F;&#x2F;-----------------------------------------------------------------------------</span><br><span class="line">void Render()</span><br><span class="line">&#123;</span><br><span class="line">	&#x2F;&#x2F;清空后台缓存</span><br><span class="line">	g_pd3dDevice-&gt;Clear( 0, NULL, D3DCLEAR_TARGET|D3DCLEAR_ZBUFFER, D3DCOLOR_XRGB(45, 50, 170), 1.0f, 0 );</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F;开始在后台缓存绘制图形</span><br><span class="line">	if( SUCCEEDED( g_pd3dDevice-&gt;BeginScene() ) )</span><br><span class="line">	&#123;</span><br><span class="line">		&#x2F;&#x2F;设置灯光和材质</span><br><span class="line">		SetLights();</span><br><span class="line">		SetMaterial();</span><br><span class="line"></span><br><span class="line">		&#x2F;&#x2F;设置世界矩阵</span><br><span class="line">		SetWorldMatrix();</span><br><span class="line"></span><br><span class="line">		&#x2F;&#x2F;绘制三维文本</span><br><span class="line">		g_pTextMesh-&gt;DrawSubset(0);</span><br><span class="line"></span><br><span class="line">		&#x2F;&#x2F;在窗口左上角绘制文本</span><br><span class="line">		int charCount &#x3D; swprintf_s(g_strFPS, 20, L&quot;FPS: %0.2f&quot;, GetFPS() );</span><br><span class="line">		g_pFont-&gt;DrawText(NULL, g_strFPS, charCount, &amp;g_ClientRect, DT_TOP | DT_LEFT, 0xffffffff);</span><br><span class="line"></span><br><span class="line">		&#x2F;&#x2F;结束在后台缓存渲染图形</span><br><span class="line">		g_pd3dDevice-&gt;EndScene();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F;将在后台缓存绘制的图形提交到前台缓存显示</span><br><span class="line">	g_pd3dDevice-&gt;Present( NULL, NULL, NULL, NULL );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;-----------------------------------------------------------------------------</span><br><span class="line">&#x2F;&#x2F; Desc: 释放创建的对象</span><br><span class="line">&#x2F;&#x2F;-----------------------------------------------------------------------------</span><br><span class="line">void Cleanup()</span><br><span class="line">&#123;</span><br><span class="line">	SAFE_RELEASE(g_pTextMesh);</span><br><span class="line">	SAFE_RELEASE(g_pFont);</span><br><span class="line">	SAFE_RELEASE(g_pd3dDevice);</span><br><span class="line">	SAFE_RELEASE(g_pD3D);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;-----------------------------------------------------------------------------</span><br><span class="line">&#x2F;&#x2F; Desc: 消息处理</span><br><span class="line">&#x2F;&#x2F;-----------------------------------------------------------------------------</span><br><span class="line">LRESULT WINAPI WndProc( HWND hWnd, UINT msg, WPARAM wParam, LPARAM lParam )</span><br><span class="line">&#123;</span><br><span class="line">	switch( msg )</span><br><span class="line">	&#123;</span><br><span class="line">	case WM_KEYDOWN:</span><br><span class="line">		if( wParam &#x3D;&#x3D; VK_ESCAPE )</span><br><span class="line">			PostQuitMessage( 0 );</span><br><span class="line">		break;</span><br><span class="line"></span><br><span class="line">	case WM_DESTROY:</span><br><span class="line">		PostQuitMessage( 0 );</span><br><span class="line">		break;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	return DefWindowProc( hWnd, msg, wParam, lParam );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;-----------------------------------------------------------------------------</span><br><span class="line">&#x2F;&#x2F; Desc: 程序入口</span><br><span class="line">&#x2F;&#x2F;-----------------------------------------------------------------------------</span><br><span class="line">int _stdcall _tWinMain ( HINSTANCE hInstance, HINSTANCE hPrevInstance,</span><br><span class="line">						PTSTR szCmdLine, int iCmdShow )</span><br><span class="line">&#123;</span><br><span class="line">	&#x2F;&#x2F;定义窗口类</span><br><span class="line">	WNDCLASSEX wndClassEx;</span><br><span class="line">	wndClassEx.cbSize        &#x3D; sizeof(WNDCLASSEX);</span><br><span class="line">	wndClassEx.style         &#x3D; CS_CLASSDC;</span><br><span class="line">	wndClassEx.lpfnWndProc   &#x3D; WndProc;</span><br><span class="line">	wndClassEx.cbClsExtra    &#x3D; 0;</span><br><span class="line">	wndClassEx.cbWndExtra    &#x3D; 0;</span><br><span class="line">	wndClassEx.hInstance     &#x3D; hInstance;</span><br><span class="line">	wndClassEx.hIcon         &#x3D; LoadIcon (NULL, IDI_APPLICATION);</span><br><span class="line">	wndClassEx.hCursor       &#x3D; LoadCursor (NULL, IDC_ARROW);</span><br><span class="line">	wndClassEx.hbrBackground &#x3D; (HBRUSH) GetStockObject (WHITE_BRUSH);</span><br><span class="line">	wndClassEx.lpszMenuName  &#x3D; NULL;</span><br><span class="line">	wndClassEx.lpszClassName &#x3D; L&quot;ClassName&quot; ;</span><br><span class="line">	wndClassEx.hIconSm &#x3D; NULL;</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F;注册窗口类</span><br><span class="line">	if(!RegisterClassEx (&amp;wndClassEx))</span><br><span class="line">	&#123;</span><br><span class="line">		MessageBox(NULL, L&quot;注册窗口类失败!&quot;, L&quot;Text3D&quot;, 0);</span><br><span class="line">		return 0;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F;创建窗口</span><br><span class="line">	HWND hWnd &#x3D; NULL;</span><br><span class="line">	hWnd &#x3D; CreateWindowEx( NULL, &#x2F;&#x2F;窗口扩展风格</span><br><span class="line">		L&quot;ClassName&quot;,            &#x2F;&#x2F;窗口类名称</span><br><span class="line">		L&quot;Text3D&quot;,               &#x2F;&#x2F;窗口标题</span><br><span class="line">		WS_OVERLAPPEDWINDOW,     &#x2F;&#x2F;窗口风格</span><br><span class="line">		CW_USEDEFAULT,           &#x2F;&#x2F;窗口初始X位置</span><br><span class="line">		CW_USEDEFAULT,           &#x2F;&#x2F;窗口初始Y位置</span><br><span class="line">		600,                     &#x2F;&#x2F;窗口初始宽度</span><br><span class="line">		480,                     &#x2F;&#x2F;窗口初始高度</span><br><span class="line">		NULL,                    &#x2F;&#x2F;父窗口句柄</span><br><span class="line">		NULL,                    &#x2F;&#x2F;窗口菜单句柄</span><br><span class="line">		hInstance,               &#x2F;&#x2F;程序实例句柄</span><br><span class="line">		NULL );                  &#x2F;&#x2F; 创建参数</span><br><span class="line"></span><br><span class="line">	if(hWnd &#x3D;&#x3D; NULL)</span><br><span class="line">	&#123;</span><br><span class="line">		MessageBox(NULL, L&quot;创建窗口失败!&quot;, L&quot;Text3D&quot;, 0);</span><br><span class="line">		return 0;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F;初始化Direct3D</span><br><span class="line">	if( SUCCEEDED( InitD3D( hWnd ) ) )</span><br><span class="line">	&#123;</span><br><span class="line">		&#x2F;&#x2F;创建并填充顶点缓存</span><br><span class="line">		if( SUCCEEDED( InitGeometry() ) )</span><br><span class="line">		&#123;</span><br><span class="line">			&#x2F;&#x2F;显示窗口</span><br><span class="line">			ShowWindow( hWnd, SW_SHOWDEFAULT );</span><br><span class="line">			UpdateWindow( hWnd );</span><br><span class="line"></span><br><span class="line">			&#x2F;&#x2F;进入消息循环</span><br><span class="line">			MSG msg;</span><br><span class="line">			ZeroMemory( &amp;msg, sizeof(msg) );</span><br><span class="line">			while( msg.message!&#x3D;WM_QUIT )</span><br><span class="line">			&#123;</span><br><span class="line">				if( PeekMessage( &amp;msg, NULL, 0U, 0U, PM_REMOVE ) )</span><br><span class="line">				&#123;</span><br><span class="line">					TranslateMessage(&amp;msg);</span><br><span class="line">					DispatchMessage(&amp;msg);</span><br><span class="line">				&#125;</span><br><span class="line">				else</span><br><span class="line">				&#123;</span><br><span class="line">					Render();  &#x2F;&#x2F;渲染图形</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F;释放创建的相关对象</span><br><span class="line">	Cleanup();</span><br><span class="line"></span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="UtilMacro-h"><a href="#UtilMacro-h" class="headerlink" title="UtilMacro.h"></a>UtilMacro.h</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">&#x2F;&#x2F; Desc: 辅助宏定义</span><br><span class="line">&#x2F;&#x2F;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line"></span><br><span class="line">#pragma once</span><br><span class="line"></span><br><span class="line">#ifndef V</span><br><span class="line">#define V(x)           &#123; hr &#x3D; x; &#125;</span><br><span class="line">#endif</span><br><span class="line"></span><br><span class="line">#ifndef V_RETURN</span><br><span class="line">#define V_RETURN(x)    &#123; hr &#x3D; x; if( FAILED(hr) ) &#123; return hr; &#125; &#125;</span><br><span class="line">#endif</span><br><span class="line"></span><br><span class="line">#ifndef SAFE_DELETE</span><br><span class="line">#define SAFE_DELETE(p)       &#123; if(p) &#123; delete (p);     (p)&#x3D;NULL; &#125; &#125;</span><br><span class="line">#endif    </span><br><span class="line">#ifndef SAFE_DELETE_ARRAY</span><br><span class="line">#define SAFE_DELETE_ARRAY(p) &#123; if(p) &#123; delete[] (p);   (p)&#x3D;NULL; &#125; &#125;</span><br><span class="line">#endif    </span><br><span class="line">#ifndef SAFE_RELEASE</span><br><span class="line">#define SAFE_RELEASE(p)      &#123; if(p) &#123; (p)-&gt;Release(); (p)&#x3D;NULL; &#125; &#125;</span><br><span class="line">#endif</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>DirectX</category>
      </categories>
      <tags>
        <tag>DirectX</tag>
      </tags>
  </entry>
  <entry>
    <title>基于Electron的远程控制软件</title>
    <url>/2021/06/06/%E5%9F%BA%E4%BA%8EElectron%E7%9A%84%E8%BF%9C%E7%A8%8B%E6%8E%A7%E5%88%B6%E8%BD%AF%E4%BB%B6/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote class="blockquote-center">
<p>^ _ ^ </p>

</blockquote>
<a id="more"></a>

<h1 id="技术关键点"><a href="#技术关键点" class="headerlink" title="技术关键点"></a>技术关键点</h1><ol>
<li>怎么捕获画面？ ==&gt; Electron desktopCapture</li>
<li>怎么完成用户间连接、画面+指令传输？ ==&gt; WebRTC</li>
<li>怎么相应控制指令？ ==&gt; robotjs</li>
</ol>
<h1 id="目录架构"><a href="#目录架构" class="headerlink" title="目录架构"></a>目录架构</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">|------- package.json</span><br><span class="line">|------- app</span><br><span class="line">|   |--- common</span><br><span class="line">|   |   |--- ipc-channel.js</span><br><span class="line">|   |   |--- util.js</span><br><span class="line">|   |--- main</span><br><span class="line">|   |   |--- index.js</span><br><span class="line">|   |   |--- ipc.js</span><br><span class="line">|   |   |--- windows</span><br><span class="line">|   |   |   |--- control.js</span><br><span class="line">|   |   |   |--- main.js</span><br><span class="line">|   |--- renderer</span><br><span class="line">|   |   |--- pages</span><br><span class="line">|   |   |   |--- control</span><br><span class="line">|   |   |   |   |--- index.html</span><br><span class="line">|   |   |   |--- main</span><br><span class="line">|   |   |--- src</span><br><span class="line">|------- resource</span><br><span class="line">|------- release</span><br><span class="line">|------- dist</span><br></pre></td></tr></table></figure>

<h1 id="搭建项目结构"><a href="#搭建项目结构" class="headerlink" title="搭建项目结构"></a>搭建项目结构</h1><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> remote-control</span><br><span class="line"><span class="built_in">cd</span> remote-control</span><br><span class="line">npm init -y</span><br><span class="line"><span class="built_in">mkdir</span> app</span><br><span class="line"><span class="built_in">cd</span> app</span><br><span class="line"><span class="built_in">mkdir</span> main </span><br><span class="line"><span class="built_in">mkdir</span> renderer</span><br><span class="line"><span class="built_in">cd</span> renderer</span><br><span class="line"><span class="built_in">mkdir</span> src </span><br><span class="line"><span class="built_in">mkdir</span> pages</span><br><span class="line"><span class="built_in">cd</span> pages</span><br><span class="line"><span class="built_in">mkdir</span> control</span><br><span class="line"></span><br><span class="line"># 进入src目录</span><br><span class="line"><span class="built_in">cd</span> ../src</span><br><span class="line">npx create-react-app main --use-npm</span><br><span class="line"># 下载完成后进入main目录</span><br><span class="line"><span class="built_in">cd</span> main</span><br><span class="line"># 启动程序</span><br><span class="line">npm <span class="built_in">start</span></span><br><span class="line"># 打开localhost:<span class="number">3000</span>可以看到应用创建成功</span><br><span class="line"></span><br><span class="line"># 进入app下的main目录</span><br><span class="line"><span class="built_in">cd</span> ../../../main</span><br><span class="line"># 添加index.js文件</span><br></pre></td></tr></table></figure>

<h1 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h1><p>进入项目根目录</p>
<h2 id="electron依赖"><a href="#electron依赖" class="headerlink" title="electron依赖"></a>electron依赖</h2><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">cnpm install electron --save-dev</span><br></pre></td></tr></table></figure>

<h2 id="electron-is-dev依赖"><a href="#electron-is-dev依赖" class="headerlink" title="electron-is-dev依赖"></a>electron-is-dev依赖</h2><blockquote>
<p>用于生产环境和开发环境的判断</p>
</blockquote>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">cnpm install electron-is-dev --save</span><br></pre></td></tr></table></figure>

<h1 id="index-js文件"><a href="#index-js文件" class="headerlink" title="index.js文件"></a>index.js文件</h1><blockquote>
<p>在目录 app/main下</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; app, BrowserWindow &#125; = <span class="built_in">require</span>(<span class="string">'electron'</span>)</span><br><span class="line"></span><br><span class="line">app.on(<span class="string">'ready'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> win = <span class="keyword">new</span> BrowserWindow(&#123;</span><br><span class="line">        width: <span class="number">800</span>,</span><br><span class="line">        height: <span class="number">600</span>,</span><br><span class="line">        webPreferences: &#123;</span><br><span class="line">          nodeIntegration: <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">      win.loadURL(<span class="string">"http://localhost:3000"</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>修改项目根目录下的<strong>package.json</strong>文件</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">"main": "app/main/index.js",</span><br><span class="line">"scripts": &#123;</span><br><span class="line">    "start:main": "electron",</span><br><span class="line">    "start:render": "cd app/renderer/src/main &amp;&amp; npm start"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>启动命令：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">npm run <span class="built_in">start</span>:render</span><br><span class="line">npm run <span class="built_in">start</span>:main</span><br></pre></td></tr></table></figure>

<p>输入两次命令可能会比较麻烦，想要一步操作需要进行一些配置。</p>
<ol>
<li>首先是在项目根目录下安装 <code>concurrently</code> 和 <code>wait-on</code> 模块<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">cnpm install concurrently --save-dev</span><br><span class="line">cnpm install wait-on --save-dev</span><br></pre></td></tr></table></figure></li>
<li>在根目录的 <code>package.json</code> 下的 scripts 中增加一条 start 命令<figure class="highlight"><table><tr><td class="code"><pre><span class="line">"start": "concurrently \"npm run start:render\" \"wait-on http://localhost:3000 &amp;&amp; npm run start:main\"",</span><br></pre></td></tr></table></figure></li>
<li>终端输入命令<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">npm <span class="built_in">start</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h1 id="App-js文件"><a href="#App-js文件" class="headerlink" title="App.js文件"></a>App.js文件</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> logo <span class="keyword">from</span> <span class="string">'./logo.svg'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'./App.css'</span>;</span><br><span class="line"><span class="keyword">import</span> React, &#123;useState, useEffect&#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="comment">// import &#123;ipcRenderer&#125; from 'electron';</span></span><br><span class="line"><span class="keyword">const</span> &#123;ipcRenderer&#125; = <span class="built_in">window</span>.require(<span class="string">'electron'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [remoteCode, setRemoteCode] = useState(<span class="string">''</span>)</span><br><span class="line">  <span class="keyword">const</span> [localCode, setLocalCode] = useState(<span class="string">''</span>)</span><br><span class="line">  <span class="keyword">const</span> [controlText, setControlText] = useState(<span class="string">''</span>)</span><br><span class="line">  <span class="keyword">const</span> login = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> code = <span class="keyword">await</span> ipcRenderer.invoke(<span class="string">'login'</span>)</span><br><span class="line">    setLocalCode(code)</span><br><span class="line">  &#125;</span><br><span class="line">  useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    login()</span><br><span class="line">    ipcRenderer.on(<span class="string">'control-state-change'</span>, handleControlState)</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      ipcRenderer.removeListener(<span class="string">'control-state-change'</span>, handleControlState)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, [])</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> startControl = <span class="function">(<span class="params">remoteCode</span>) =&gt;</span> &#123;</span><br><span class="line">    ipcRenderer.send(<span class="string">'control'</span>, remoteCode)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> handleControlState = <span class="function">(<span class="params">e, name, type</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> text = <span class="string">''</span></span><br><span class="line">    <span class="keyword">if</span>(type == <span class="number">1</span>)&#123;</span><br><span class="line">      text = <span class="string">`正在远程控制<span class="subst">$&#123;name&#125;</span>`</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(type == <span class="number">2</span>)&#123;</span><br><span class="line">      text = <span class="string">`被<span class="subst">$&#123;name&#125;</span>控制中`</span></span><br><span class="line">    &#125;</span><br><span class="line">    setControlText(text)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div className=<span class="string">"App"</span>&gt;</span><br><span class="line">      &#123;</span><br><span class="line">        controlText === <span class="string">''</span> ? <span class="xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">div</span>&gt;</span>你的控制码 &#123;localCode&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">          &lt;input type="text" value=&#123;remoteCode&#125; onChange=&#123;e =&gt; setRemoteCode(e.target.value)&#125;/&gt;</span><br><span class="line">          &lt;button onClick=&#123;() =&gt; startControl(remoteCode)&#125;&gt;确认&lt;/button&gt;</span><br><span class="line">        &lt;/&gt; : &lt;div&gt;&#123;controlText&#125;&lt;/div&gt;</span><br><span class="line">      &#125;</span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">  );</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">export default App;</span></span><br></pre></td></tr></table></figure>

<h1 id="ipc-js"><a href="#ipc-js" class="headerlink" title="ipc.js"></a>ipc.js</h1><blockquote>
<p>在目录 app/main下</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;ipcMain&#125; = <span class="built_in">require</span>(<span class="string">'electron'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    ipcMain.handle(<span class="string">'login'</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">        <span class="comment">// 先 mock，返回一个code</span></span><br><span class="line">        <span class="keyword">let</span> code = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * (<span class="number">999999</span> - <span class="number">100000</span>)) + <span class="number">100000</span></span><br><span class="line">        <span class="keyword">return</span> code</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="main-js"><a href="#main-js" class="headerlink" title="main.js"></a>main.js</h1><blockquote>
<p>在 app/main/windows 目录下</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>electron</category>
      </categories>
      <tags>
        <tag>nodejs electron</tag>
      </tags>
  </entry>
  <entry>
    <title>多层感知机</title>
    <url>/2022/01/15/%E5%A4%9A%E5%B1%82%E6%84%9F%E7%9F%A5%E6%9C%BA/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote class="blockquote-center">
<p>^ _ ^ </p>

</blockquote>
<a id="more"></a>

<h1 id="The-Composition-of-MLP"><a href="#The-Composition-of-MLP" class="headerlink" title="The Composition of MLP"></a>The Composition of MLP</h1><p>Multi Layer Perceptron, named MLP. It is a solution to the linear indivisible problem. Specifically, it can be prepresented by stacking multiple layer <strong>Linear Regressioner</strong>, and adding <strong>Activation Function</strong> between layers.</p>
<h1 id="Linear-Regression"><a href="#Linear-Regression" class="headerlink" title="Linear Regression"></a>Linear Regression</h1><p>Standard Linear Regression Model:<br>$y = w_1x_1 + w_2x_2 + \cdots + w_nx_n + b = wx + b$</p>
<p>Standard Linear Regression Model can solve <strong>regression problems</strong>, which is to predict continues values. We can also solve classification problem by simply adding threshold choose layer behind the output of y.<br>e.g.</p>

$$y=
\left\{\begin{matrix}
    1, & w \cdot x + b \geq t \\
    0, & otherwise
\end{matrix}\right.
$$



<p>There are two import problem need to be solved when using linear regression:</p>
<ol>
<li><strong>Feature Extraction</strong>: Raw Input –&gt; Vector x</li>
<li><strong>Parameter Learning</strong>: How to choose the fittest param w, b</li>
</ol>
<h1 id="Activation-Function"><a href="#Activation-Function" class="headerlink" title="Activation Function"></a>Activation Function</h1><p>The codomain of the output of linearn function is infinite, sometimes we need to <strong>limit the codomain to a fixed range</strong>. Many functions can satisfy the demands.</p>
<h2 id="Logistic"><a href="#Logistic" class="headerlink" title="Logistic"></a>Logistic</h2><p>$y = \frac{L}{1+e^{-k(z-z_0)}}$</p>
<p>Properties:</p>
<ol>
<li>The function can limit the codimain of y in the range (0, L)</li>
<li>k control the <strong>steep degree</strong> of the function.</li>
<li>When $z = w \cdot x + b$, we named it <strong>Logistic Regression Model</strong>.</li>
<li>When $L = 1, k = 1, z_0 = 0$, we named it <strong>Sigmoid Function</strong>.<ul>
<li>The derivative of Sigmoid Function is $y^{‘} = y(1-y)$, which is convenient for params optimization.</li>
</ul>
</li>
</ol>
<h2 id="Softmax"><a href="#Softmax" class="headerlink" title="Softmax"></a>Softmax</h2><p>Sigmoid Function can only deal with binary classfication, while <strong>Softmax Regression</strong> can solve multiple classfication.</p>
<p>$y_i = Softmax(z)_i = \frac{e^{z_i}}{e^{z_1} + e^{z_2} + \cdots + e^{z_m}}$</p>
<p>$z = [z_1, z_2, \cdots, z_m]$, where $m$ is the number of categories; $y_i$ is the probability of category i; $z_i = w_{i_1}x_1 + w_{i_2}x_2 + \cdots w_{i_n}x_n + b_i$</p>
<p><img src="/2022/01/15/%E5%A4%9A%E5%B1%82%E6%84%9F%E7%9F%A5%E6%9C%BA/softmax.png" alt></p>
<p>$y = Softmax(Wx + b)$ can matrixly represent as:<br><img src="/2022/01/15/%E5%A4%9A%E5%B1%82%E6%84%9F%E7%9F%A5%E6%9C%BA/softmax_matrix.png" alt></p>
<h2 id="ReLU"><a href="#ReLU" class="headerlink" title="ReLU"></a>ReLU</h2><p>$ReLU(z) = max(0, z)$</p>
<h1 id="Multi-Layer-Perceptron"><a href="#Multi-Layer-Perceptron" class="headerlink" title="Multi-Layer Perceptron"></a>Multi-Layer Perceptron</h1><p>Combine <strong>Linear Regressor</strong> and <strong>Activation Function</strong>, we can design MLP to solve <strong>non-linearity</strong> problem.</p>
<p>For example, a XOR problem can be solved by MLP with 1 hidden layer.</p>

$$
\begin{matrix}
z = W^1 x + b^1 \\
h = ReLU(z) \\
y = W^2h + b^2
\end{matrix}
$$


<p>where</p>

$$
W^1 = 
\begin{bmatrix}
 1 & 1\\
 1 & 1
\end{bmatrix},
b^1 = [0, -1]^T,
W^2 = [1, -2],
b^2 = [0]
$$


<p><img src="/2022/01/15/%E5%A4%9A%E5%B1%82%E6%84%9F%E7%9F%A5%E6%9C%BA/xor_neural.png" alt></p>
<p>The more hidden layers, the stronger presentation skills and the more difficult to learn. So we need to find the balanced point between <strong>model scale</strong> and <strong>learning difficulty</strong>.</p>
<h1 id="MLP-Code"><a href="#MLP-Code" class="headerlink" title="MLP Code"></a>MLP Code</h1><h2 id="Linear-Model"><a href="#Linear-Model" class="headerlink" title="Linear Model"></a>Linear Model</h2><p>Create a Linear Model</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line">linear = nn.Linear(in_features, out_features)</span><br></pre></td></tr></table></figure>
<p>Generally, we might input multiple examples at once, which called <strong>batch</strong>. So the dimension of <strong>inputs</strong> can be <code>(batch, in_features)</code>. In the same way, the dimention of <strong>outputs</strong> can be <code>(batch, out_features)</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># in_features=32, out_features=</span></span><br><span class="line">linear = nn.Linear(<span class="number">32</span>, <span class="number">2</span>)</span><br><span class="line">inputs = torch.rand(<span class="number">3</span>, <span class="number">32</span>)</span><br><span class="line">outputs = linear(inputs)</span><br></pre></td></tr></table></figure>

<h2 id="Activation-Function-1"><a href="#Activation-Function-1" class="headerlink" title="Activation Function"></a>Activation Function</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> torch.nn <span class="keyword">import</span> functional <span class="keyword">as</span> F</span><br><span class="line">activation = F.sigmoid(outputs)</span><br><span class="line">activation = F.relu(outputs)</span><br><span class="line">activation = F.softmax(outputs, dim=<span class="number">1</span>) <span class="comment"># dim represents the axis </span></span><br><span class="line">activation = F.tanh(outputs)</span><br></pre></td></tr></table></figure>
<p>There are 3 ways to use activation function:</p>
<ol>
<li><code>torch.sigmoid()</code></li>
<li><code>torch.nn.functional.sigmoid()</code></li>
<li><code>torch.Sigmoid</code></li>
</ol>
<p>1,2 is a function, while 3 is a class. So 1, 2 can use directly, but 1 is preferred. When use 3, you should init it first, then use it.</p>
<h2 id="Custom-MLP"><a href="#Custom-MLP" class="headerlink" title="Custom MLP"></a>Custom MLP</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MLP</span><span class="params">(nn.Module)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, input_dim, hidden_dim, output_dim)</span>:</span></span><br><span class="line">        super(MLP, self).__init__()</span><br><span class="line">        self.linear1 = nn.Linear(input_dim, hidden_dim)</span><br><span class="line">        self.activation = torch.nn.ReLU()</span><br><span class="line">        self.linear2 = nn.Linear(hidden_dim, output_dim)</span><br><span class="line">        self.softmax = torch.nn.Softmax(dim=<span class="number">1</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self, inputs)</span>:</span></span><br><span class="line">        hidden = self.linear1(inputs)</span><br><span class="line">        activation = self.activation(hidden)</span><br><span class="line">        output = self.linear2(activation)</span><br><span class="line">        probs = self.softmax(output)</span><br><span class="line">        <span class="keyword">return</span> probs</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    mlp = MLP(input_dim=<span class="number">4</span>, hidden_dim=<span class="number">5</span>, output_dim=<span class="number">2</span>)</span><br><span class="line">    inputs = torch.rand(<span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">    probs = mlp(inputs)</span><br><span class="line">    print(probs)</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>Deep Learning</tag>
      </tags>
  </entry>
  <entry>
    <title>基于python3的OpenCV图像处理</title>
    <url>/2020/12/29/%E5%9F%BA%E4%BA%8Epython3%E7%9A%84OpenCV%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote class="blockquote-center">
<p>^ _ ^ </p>

</blockquote>
<a id="more"></a>

<h1 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h1><ol>
<li><p>B站视频【基于python3的Opencv图像处理教程(从零到实践)】：<a href="https://www.bilibili.com/video/BV1CJ411D7Yj?from=search&seid=14244991535486395451" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1CJ411D7Yj?from=search&amp;seid=14244991535486395451</a></p>
</li>
<li><p>opencv3.4文档：<a href="https://docs.opencv.org/master/" target="_blank" rel="noopener">https://docs.opencv.org/master/</a></p>
</li>
<li><p>opencv官网：<a href="[https://opencv.org/">https://opencv.org/</a></p>
</li>
<li><p>opencv中文网论坛：<a href="http://www.opencv.org.cn/" target="_blank" rel="noopener">http://www.opencv.org.cn/</a></p>
</li>
<li><p>opencv库各版本下载地址：<a href="https://sourceforge.net/projects/opencvlibrary/files/" target="_blank" rel="noopener">https://sourceforge.net/projects/opencvlibrary/files/</a></p>
</li>
</ol>
<h1 id="opencv简介"><a href="#opencv简介" class="headerlink" title="opencv简介"></a>opencv简介</h1><p>OpenCV（Open Source Computer Vision Library）开放源代码计算机视觉库，主要算法涉及图像处理、计算机视觉和机器学习相关方法。OpenCV 其实就是一堆 C 和 C++语言的源代码文件，这些源代码文件中实现了许多常用的计算机视觉算法。</p>
<p><strong>图像处理、数字图像处理、计算机视觉</strong></p>
<ul>
<li>图像处理（Image Processing）：一般包括图像压缩，增强和复原，匹配、描述和识别3个部分</li>
<li>数字图像处理（Digital Image Processing）：通过计算机对图像进行去除噪声、增强、复原、分割、提取特征等处理的方法和技术</li>
<li>计算机视觉（Computer Vision）：是指用摄像机和电脑代替人眼对目标进行识别、跟踪和测量等机器视觉，并进一步做图形处理，使之成为更适合人眼观察或仪器检测图像的一门学科</li>
</ul>
<h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h2><p><img src="/2020/12/29/%E5%9F%BA%E4%BA%8Epython3%E7%9A%84OpenCV%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/1.png" alt></p>
<p>opencv的框架与各模块功能介绍：<a href="https://blog.csdn.net/u012679707/article/details/79505279" target="_blank" rel="noopener">https://blog.csdn.net/u012679707/article/details/79505279</a></p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><strong>目前python版本</strong></p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">PS E:\Github\Blog&gt; python --version</span><br><span class="line">Python <span class="number">3</span>.<span class="number">6</span>.<span class="number">6</span></span><br></pre></td></tr></table></figure>

<p><strong>opencv依赖库</strong></p>
<blockquote>
<p>将python需要安装的依赖库写入requirements.txt中</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">opencv-python</span><br><span class="line">opencv-contrib-python</span><br><span class="line">pytesseract</span><br></pre></td></tr></table></figure>

<p><strong>安装依赖库</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 升级python版本（如果出现pip version版本过低的Warning则执行此步骤）</span></span><br><span class="line">python -m pip install -i https://mirrors.aliyun.com/pypi/simple/ --upgrade pip </span><br><span class="line"><span class="comment"># 安装requirements.txt中说明的各依赖库</span></span><br><span class="line">python -m pip install -i https://mirrors.aliyun.com/pypi/simple/ \</span><br><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure>

<h1 id="图像的加载和保存"><a href="#图像的加载和保存" class="headerlink" title="图像的加载和保存"></a>图像的加载和保存</h1><h1 id="numpy"><a href="#numpy" class="headerlink" title="numpy"></a>numpy</h1><h1 id="色彩空间"><a href="#色彩空间" class="headerlink" title="色彩空间"></a>色彩空间</h1><ul>
<li>RGB</li>
<li>HSV<br><img src="/2020/12/29/%E5%9F%BA%E4%BA%8Epython3%E7%9A%84OpenCV%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/2.png" alt></li>
<li>HLS</li>
<li>YCrCb</li>
<li>YUV</li>
</ul>
<h1 id="像素运算"><a href="#像素运算" class="headerlink" title="像素运算"></a>像素运算</h1><h2 id="算术运算"><a href="#算术运算" class="headerlink" title="算术运算"></a>算术运算</h2><h2 id="逻辑运算"><a href="#逻辑运算" class="headerlink" title="逻辑运算"></a>逻辑运算</h2><h1 id="ROI和泛洪填充"><a href="#ROI和泛洪填充" class="headerlink" title="ROI和泛洪填充"></a>ROI和泛洪填充</h1><h2 id="ROI"><a href="#ROI" class="headerlink" title="ROI"></a>ROI</h2><blockquote>
<p>Region of Interest</p>
</blockquote>
<ul>
<li>FLOODFILL_FIXED_RANGE : 改变图像，泛洪填充</li>
<li>FLOODFILL_MASK_ONLY ：不改变图像，只填充遮罩层本身</li>
</ul>
<h1 id="模糊操作"><a href="#模糊操作" class="headerlink" title="模糊操作"></a>模糊操作</h1><h2 id="卷积原理"><a href="#卷积原理" class="headerlink" title="卷积原理"></a>卷积原理</h2><h2 id="中值模糊"><a href="#中值模糊" class="headerlink" title="中值模糊"></a>中值模糊</h2><h2 id="均值模糊"><a href="#均值模糊" class="headerlink" title="均值模糊"></a>均值模糊</h2><h3 id="基于平均值"><a href="#基于平均值" class="headerlink" title="基于平均值"></a>基于平均值</h3><h3 id="高斯模糊（基于权重）"><a href="#高斯模糊（基于权重）" class="headerlink" title="高斯模糊（基于权重）"></a>高斯模糊（基于权重）</h3><h2 id="自定义模糊"><a href="#自定义模糊" class="headerlink" title="自定义模糊"></a>自定义模糊</h2><h1 id="边缘保留滤波（EPF）"><a href="#边缘保留滤波（EPF）" class="headerlink" title="边缘保留滤波（EPF）"></a>边缘保留滤波（EPF）</h1><h2 id="高斯双边"><a href="#高斯双边" class="headerlink" title="高斯双边"></a>高斯双边</h2><h2 id="均值迁移"><a href="#均值迁移" class="headerlink" title="均值迁移"></a>均值迁移</h2><h1 id="直方图"><a href="#直方图" class="headerlink" title="直方图"></a>直方图</h1><h2 id="直方图均衡化"><a href="#直方图均衡化" class="headerlink" title="直方图均衡化"></a>直方图均衡化</h2><ul>
<li>equalizeHist</li>
<li>createCLAHE</li>
</ul>
<h2 id="直方图比较"><a href="#直方图比较" class="headerlink" title="直方图比较"></a>直方图比较</h2><ul>
<li>巴氏距离</li>
<li>相关性</li>
<li>卡方</li>
</ul>
<h2 id="反向投影"><a href="#反向投影" class="headerlink" title="反向投影"></a>反向投影</h2><h1 id="模板匹配"><a href="#模板匹配" class="headerlink" title="模板匹配"></a>模板匹配</h1><h1 id="二值化"><a href="#二值化" class="headerlink" title="二值化"></a>二值化</h1><h2 id="全局二值化"><a href="#全局二值化" class="headerlink" title="全局二值化"></a>全局二值化</h2><h2 id="局部二值化"><a href="#局部二值化" class="headerlink" title="局部二值化"></a>局部二值化</h2><h2 id="超大图像二值化"><a href="#超大图像二值化" class="headerlink" title="超大图像二值化"></a>超大图像二值化</h2><h2 id="空白图像过滤"><a href="#空白图像过滤" class="headerlink" title="空白图像过滤"></a>空白图像过滤</h2><h1 id="图像金字塔"><a href="#图像金字塔" class="headerlink" title="图像金字塔"></a>图像金字塔</h1><ul>
<li>pyrdown : 降采样</li>
<li>pyrup : 还原</li>
</ul>
<h2 id="高斯金字塔"><a href="#高斯金字塔" class="headerlink" title="高斯金字塔"></a>高斯金字塔</h2><h2 id="拉普拉斯金字塔"><a href="#拉普拉斯金字塔" class="headerlink" title="拉普拉斯金字塔"></a>拉普拉斯金字塔</h2><h1 id="图像梯度"><a href="#图像梯度" class="headerlink" title="图像梯度"></a>图像梯度</h1><ul>
<li>Sobel算子</li>
<li>拉普拉斯算子</li>
</ul>
<h1 id="Canny边缘提取"><a href="#Canny边缘提取" class="headerlink" title="Canny边缘提取"></a>Canny边缘提取</h1><p><strong>Canny算法步骤</strong></p>
<ol>
<li>高斯模糊：GaussianBlur</li>
<li>灰度转换：cvtColor</li>
<li>计算梯度：Sobel/Scharr</li>
<li>非最大信号抑制</li>
<li>高低阈值输出二值图像</li>
</ol>
<h1 id="直线检测"><a href="#直线检测" class="headerlink" title="直线检测"></a>直线检测</h1><h2 id="霍夫直线变换"><a href="#霍夫直线变换" class="headerlink" title="霍夫直线变换"></a>霍夫直线变换</h2><h1 id="圆检测"><a href="#圆检测" class="headerlink" title="圆检测"></a>圆检测</h1><h2 id="霍夫圆检测"><a href="#霍夫圆检测" class="headerlink" title="霍夫圆检测"></a>霍夫圆检测</h2><h1 id="轮廓发现"><a href="#轮廓发现" class="headerlink" title="轮廓发现"></a>轮廓发现</h1><h1 id="对象测量"><a href="#对象测量" class="headerlink" title="对象测量"></a>对象测量</h1><h1 id="形态学操作"><a href="#形态学操作" class="headerlink" title="形态学操作"></a>形态学操作</h1><h2 id="膨胀与腐蚀"><a href="#膨胀与腐蚀" class="headerlink" title="膨胀与腐蚀"></a>膨胀与腐蚀</h2><h2 id="开闭操作"><a href="#开闭操作" class="headerlink" title="开闭操作"></a>开闭操作</h2><ul>
<li>开操作：腐蚀 + 膨胀</li>
<li>闭操作：膨胀 + 腐蚀</li>
</ul>
<h2 id="其他形态学操作"><a href="#其他形态学操作" class="headerlink" title="其他形态学操作"></a>其他形态学操作</h2><ul>
<li>顶帽（tophat）: 原图像与开操作之间的差值图像</li>
<li>黑帽（blackhat） : 闭操作与原图像之间的差值图像</li>
</ul>
<h2 id="形态学梯度"><a href="#形态学梯度" class="headerlink" title="形态学梯度"></a>形态学梯度</h2><ul>
<li>基本梯度 : 膨胀之后的图像减去腐蚀之后的图像得到的差值图像</li>
<li>内部梯度 : 原图减去腐蚀之后的图像得到的差值图像</li>
<li>外部梯度 : 膨胀之后的图像减去原图得到的差值图像</li>
</ul>
<h1 id="分水岭算法"><a href="#分水岭算法" class="headerlink" title="分水岭算法"></a>分水岭算法</h1><p>基于距离的分水岭分割流程<br><img src="/2020/12/29/%E5%9F%BA%E4%BA%8Epython3%E7%9A%84OpenCV%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/3.png" alt></p>
<h1 id="人脸检测"><a href="#人脸检测" class="headerlink" title="人脸检测"></a>人脸检测</h1><h1 id="验证码识别"><a href="#验证码识别" class="headerlink" title="验证码识别"></a>验证码识别</h1>]]></content>
      <categories>
        <category>图像处理</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>opencv</tag>
      </tags>
  </entry>
  <entry>
    <title>多线程学习记录</title>
    <url>/2021/05/23/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote class="blockquote-center">
<p>^ _ ^ </p>

</blockquote>
<a id="more"></a>

<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ol>
<li>狂神说的课程 : <a href="https://www.bilibili.com/video/BV1V4411p7EF?p=3" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1V4411p7EF?p=3</a></li>
<li>还是狂神说的课程 : <a href="https://www.bilibili.com/video/BV1B7411L7tE?p=2" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1B7411L7tE?p=2</a></li>
</ol>
<h1 id="进程和线程"><a href="#进程和线程" class="headerlink" title="进程和线程"></a>进程和线程</h1><p>程序是存储在磁盘上的静态代码段。我们平常所说的“运行程序”的意思实际上是指将磁盘中的程序代码加载到内存中，操作系统开启一个进程来执行程序。可以说，进程是运行的程序。进程运行时，操作系统会为它分配一定的内存空间用于保存运行时数据，内存空间属于一种资源，所以说进程是资源分配的基本单位。一个进程中可以有很多线程，但至少有一个线程。线程有自己的工作内存，也有和其他线程共享的进程主内存，在只有一个核的CPU中，CPU的使用时间只能轮流分给各个线程，即一次只能有一个线程使用CPU。所以说，线程是CPU调度的基本单位。</p>
<h2 id="并发和并行"><a href="#并发和并行" class="headerlink" title="并发和并行"></a>并发和并行</h2><p><strong>并发</strong> : 多个线程操作同一资源。CPU一核的情况下，通过为不同线程分配时间片实现快速交替，模拟出多线程同时执行的效果。并发编程的本质是充分利用CPU的资源。<br><strong>并行</strong> : CPU多核情况下，不同线程可运行在不同的核中，实现真正的同时执行。</p>
<h1 id="创建线程"><a href="#创建线程" class="headerlink" title="创建线程"></a>创建线程</h1><p>在Java中，创建线程有三种方式，分别是：</p>
<ol>
<li>继承<strong>Thread</strong>类，并重写它的<strong>run</strong>方法。</li>
<li>实现<strong>Runnable</strong>接口，并重写它的<strong>run</strong>方法。</li>
<li>实现<strong>Callable</strong>接口，并重写它的<strong>call</strong>方法。</li>
</ol>
<h1 id="线程状态"><a href="#线程状态" class="headerlink" title="线程状态"></a>线程状态</h1><ol>
<li>start : 创建状态，已创建但未启动的线程。 –&gt; Thread.NEW</li>
<li>ready : 就绪状态的线程，等待CPU的使用权。</li>
<li>run : 运行状态的线程，已获得CPU的使用权。–&gt; Thread.RUNNABLE</li>
<li>block : 阻塞状态的线程，可能正在等待某项资源的就绪。 –&gt; Thread.BLOCKED || Thread.WAITING || Thread.TIMED_WATING</li>
<li>die : 已经结束的线程。 –&gt; Thread.TERMINATED</li>
</ol>
<h1 id="线程操作"><a href="#线程操作" class="headerlink" title="线程操作"></a>线程操作</h1><ol>
<li>sleep : 线程休眠一段时间，但不释放锁。</li>
<li>stop : 线程停止，一般使用标志位实现而不是stop或destroy函数。</li>
<li>yield : 礼让，当前运行线程主动让出CPU使用权，从运行状态转为就绪状态。但下一个CPU的使用者是由CPU决定，也有可能仍然为礼让者。</li>
<li>join : 插队，join的调用者将强势取得当前CPU的使用权直到该线程执行完成。这种方法会阻塞其他线程，不建议使用。</li>
</ol>
<h1 id="线程优先级"><a href="#线程优先级" class="headerlink" title="线程优先级"></a>线程优先级</h1><ul>
<li>线程的优先级用数字表示，范围从1~10。</li>
<li>需要先设置优先级再启动线程，否则设置的优先级将无效。</li>
<li>优先级低只意味着获得调度的概率低，并不代表优先级高的线程一定会比优先级低的线程更先执行。</li>
<li>默认值为<code>Thread.NORMAL_PRIORITY</code>–5。</li>
</ul>
<h1 id="守护线程"><a href="#守护线程" class="headerlink" title="守护线程"></a>守护线程</h1><p>线程可分为<strong>用户线程</strong>和<strong>守护线程</strong>，虚拟机需要确保用户线程执行完毕而不需要等待守护线程执行完毕。常见的守护线程有后台记录日志、监控内存、垃圾回收等。java中设置守护线程的方法是<code>Thread.setDaemon(true)</code>。</p>
<h1 id="线程同步"><a href="#线程同步" class="headerlink" title="线程同步"></a>线程同步</h1><p>线程同步是为了解决多个线程想访问同一个资源时，保证线程安全的一种机制。它本质上是一种等待机制+锁进制，访问对象时需要获得该对象的锁，没有获得锁且需要访问该对象的线程进入这个对象的等待池形成队列，等待前面一个线程使用完毕释放锁，下一个线程再获取锁使用资源。</p>
<h2 id="不安全案例"><a href="#不安全案例" class="headerlink" title="不安全案例"></a>不安全案例</h2><ol>
<li>不安全的买票</li>
<li>不安全的银行</li>
<li>不安全的集合</li>
</ol>
<h2 id="synchronized"><a href="#synchronized" class="headerlink" title="synchronized"></a>synchronized</h2><p><strong>同步方法</strong><br>同步方法即加了<code>synchronized</code>修饰的方法。同步方法控制对“对象”的访问。每个对象对应一把锁，每个同步方法都必须获得调用该方法的对象的锁才能执行，否则线程会阻塞。方法一旦执行，就独占该锁，直到方法返回才释放锁。</p>
<p><strong>同步块</strong><br>形如<code>synchronized(obj){}</code>的代码块称为同步块。其中<strong>obj</strong>称为<strong>同步监视器</strong>。理论上obj可以是任何对象，但是推荐使用共享资源作为监视器。在同步方法中无需指定同步监视器，因为同步方法中默认使用对象本身（即<code>this</code>）或<code>class</code>作为同步监视器</p>
<h2 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h2><p>多个线程各自占有一些资源，并且互相等待其他线程占有的资源才能运行。两个或多个线程都在等待对方释放资源，因此都处于阻塞状态时的情形被称为<strong>死锁</strong>。</p>
<p><strong>产生死锁的四个必要条件</strong></p>
<ol>
<li>资源互斥：一个资源每次只能被一个线程使用。</li>
<li>请求与保持：一个线程因请求资源而阻塞时，对已获得的资源保持不放。</li>
<li>不可剥夺：进程已获得的资源，在未使用完之前，不能强行剥夺。</li>
<li>循环等待：在若干进程之间形成一种头尾相接的循环等待资源关系。</li>
</ol>
<blockquote>
<p>只要想办法破坏四个必要条件中的一个或多个，就可以避免死锁的发生。</p>
</blockquote>
<h2 id="Lock"><a href="#Lock" class="headerlink" title="Lock"></a>Lock</h2><p>从<strong>JDK5.0</strong>开始，Java提供了更强大的线程同步机制–通过显示定义同步锁对象来实现同步。<code>ReentrantLock</code>类实现了<code>Lock</code>接口，拥有与<strong>synchronized</strong>相同的并发性和内存语义，常用于实现线程安全的控制中。<br>使用Lock锁，JVM将花费较少的时间来调度线程，性能更好。因此选择同步控制方式的优先级应该是：Lock &gt; 同步代码块 &gt; 同步方法。</p>
<p><strong>Synchronized和Lock的区别</strong></p>
<ul>
<li>Synchronized 是关键字，而 Lock 是 Java 接口。</li>
<li>Synchronized 无法判断获取锁的状态，Lock 可以判断是否获得了锁。</li>
<li>Synchronized 会自动释放锁，Lock 必须手动释放。</li>
<li>如果有两个线程A,B获取同一个资源，Synchronized 下A获得锁后如果阻塞了，B就会一直等待；而 Lock 锁下B不一定会一直等待。</li>
<li>虽然 Synchronized 和 Lock 都是可重入锁，但 Synchronized 是不可中断的非公平锁；而 Lock 是可中断的，且是否为公平锁可以通过构造函数的传参指定，类似<code>Reentrant(true)</code>将创建一个公平锁，默认参数为false，即非公平锁。</li>
<li>Synchronized 适合锁少量的同步代码，Lock 适合锁大量的同步代码。</li>
</ul>
<h3 id="Condition"><a href="#Condition" class="headerlink" title="Condition"></a>Condition</h3><blockquote>
<p>用于精准的通知和唤醒线程</p>
</blockquote>
<p>可通过<code>Lock.newConditon()</code>得到一个Condition对象。</p>
<h3 id="ReentrantLock"><a href="#ReentrantLock" class="headerlink" title="ReentrantLock"></a>ReentrantLock</h3><p>ReentrantLock可以设置为公平锁或非公平锁：</p>
<ul>
<li>公平锁：采用<strong>先来后到</strong>规则获取锁。</li>
<li>非公平锁：不必遵守先来后到的规则，可以<strong>插队</strong>获取锁。默认是非公平锁。</li>
</ul>
<h3 id="7锁现象"><a href="#7锁现象" class="headerlink" title="7锁现象"></a>7锁现象</h3><ol>
<li>2个同步方法，1个对象。</li>
<li>1个同步方法，1个普通方法，1个对象。</li>
<li>1个同步方法，2个对象。</li>
<li>2个静态同步方法，1个对象。</li>
<li>2个静态同步方法，2个对象。</li>
<li>1个静态同步方法，1个普通同步方法，1个对象。</li>
<li>1个静态同步方法，1个普通同步方法，2个对象</li>
</ol>
<h1 id="线程通信"><a href="#线程通信" class="headerlink" title="线程通信"></a>线程通信</h1><p><strong>Java提供的解决线程通信的方法</strong></p>
<ol>
<li>wait : 表示线程一直等待，直到其他线程通知。其与sleep函数的不同之处在于该操作会释放锁。</li>
<li>notify : 唤醒一个处于等待状态的线程。</li>
<li>notifyAll : 唤醒同一个对象上处于等待状态的所有线程</li>
</ol>
<blockquote>
<p>以上方法均是Object方法，都只能在同步方法或同步代码块中使用</p>
</blockquote>
<h2 id="生产者消费者问题"><a href="#生产者消费者问题" class="headerlink" title="生产者消费者问题"></a>生产者消费者问题</h2><ol>
<li>管程法 : 通过缓冲区实现生产者和消费者之间的通信。</li>
<li>信号量法 : 通过标志位实现生产者和消费者之间的通信。</li>
</ol>
<h3 id="虚假唤醒"><a href="#虚假唤醒" class="headerlink" title="虚假唤醒"></a>虚假唤醒</h3><p>当场景中出现多个消费者和多个生产者时，用if判断而不是while判断而带来的紊乱。<br>举个栗子，假设Data类有increase和decrease两个方法，两个方法都由synchronized修饰；有一个成员变量num。写一个程序希望能够实现当num等于0时加1，当num等于1时减1的效果。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Data</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">increase</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(num != <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        num++;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">"执行加1操作，num = "</span> + num);</span><br><span class="line">        <span class="keyword">this</span>.notifyAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">decrease</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(num == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        num--;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">"执行减1操作，num = "</span> + num);</span><br><span class="line">        <span class="keyword">this</span>.notifyAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>分别设置两个生产者、两个消费者线程来进行实验。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FakeNotifyTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Data data = <span class="keyword">new</span> Data();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= <span class="number">2</span>; k++)&#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++)&#123;</span><br><span class="line">                    data.increase();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,<span class="string">"IncreaseThread"</span> + k).start();</span><br><span class="line">    </span><br><span class="line">            <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++)&#123;</span><br><span class="line">                    data.decrease();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,<span class="string">"DecreaseThread"</span> + k).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后出现了迷惑结果：<br><img src="/2021/05/23/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/1.jpg" alt><br>分析造成这种结果的原因是：<br><img src="/2021/05/23/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/2.jpg" alt></p>
<ol>
<li>DecreaseThread1 执行，此时因为 num=1，因此 DecreaseThread1 不会被阻塞，走到了 num– 这一步，完成后 num=0。</li>
<li>此时，CPU使用权交给了 DecreaseThread2，因为 num=0，所以经过 if 判断时 DecreaseThread2 调用 <code>wait</code> 进行阻塞。</li>
<li>DecreaseThread2 处于阻塞状态当然不能继续执行，时间片耗尽后CPU使用权又交给了 DecreaseThread1。此时 DecreaseThread1 调用<code>notifyAll</code> 来唤醒所有的 wait 线程，包括 DecreaseThread2。</li>
<li>然后 DecreaseThread2 被唤醒，出了 if 判断，执行 num– 操作，使 num=-1</li>
</ol>
<p>综上，要想解决这个虚假唤醒的问题，只要将原来的 if 判断 换成 while 循环判断即可。</p>
<h1 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h1><p>频繁创建和销毁线程会带来性能的损耗，通过线程池的思想：提前创建好多个线程，放入线程池中，使用时直接获取，使用完放回池中，可以避免频繁的创建和销毁，实现重复利用。</p>
<p><strong>ExecutorService</strong>是线程池接口，常见的子类有<code>ThreadPoolExecutor</code>，常用方法有：</p>
<ul>
<li>void executor(Runnable command) : 执行任务/命令，没有返回值。</li>
<li><T> Future<T> submit(Callable<T> task) : 执行任务，有返回值。</T></T></T></li>
<li>void shutdown : 关闭连接池。</li>
</ul>
<p><strong>Executors</strong>是线程池的工厂类，用于创建并返回不同类型的线程池。</p>
<h2 id="Executors"><a href="#Executors" class="headerlink" title="Executors"></a>Executors</h2><ul>
<li>newSingleThreadExecutor – 单个线程</li>
<li>newFixedThreadPool – 固定大小</li>
<li>newCachedThreadPool – 可伸缩大小，遇强则强</li>
</ul>
<h2 id="自定义线程池-–-ThreadPoolExecutor"><a href="#自定义线程池-–-ThreadPoolExecutor" class="headerlink" title="自定义线程池 – ThreadPoolExecutor"></a>自定义线程池 – ThreadPoolExecutor</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ThreadPoolExecutor</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">int</span> corePoolSize,       // 核心线程池大小</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">int</span> maximumPoolSize,    // 最大核心线程池大小</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">long</span> keepAliveTime,     // 超时时间，空闲时间超时的线程会被释放</span></span></span><br><span class="line"><span class="function"><span class="params">    TimeUnit unit,          // 超时单位</span></span></span><br><span class="line"><span class="function"><span class="params">    BlockingQueue&lt;Runnable&gt; workQueue, // 阻塞队列</span></span></span><br><span class="line"><span class="function"><span class="params">    ThreadFactory threadFactory,       // 线程工厂</span></span></span><br><span class="line"><span class="function"><span class="params">    RejectedExecutionHandler handler;  // 拒绝策略</span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span></span><br></pre></td></tr></table></figure>

<p>最大承载 = 阻塞队列容量 + 最大核心线程池大小</p>
<h3 id="线程拒绝策略"><a href="#线程拒绝策略" class="headerlink" title="线程拒绝策略"></a>线程拒绝策略</h3><ul>
<li>AbortPolicy : 阻塞队列满了，仍有请求时，不处理这个请求，并抛出异常。</li>
<li>CallerRunsPolicy : 阻塞队列满了，仍有请求时，这个请求交给提交请求的线程处理（哪来的回哪去）。</li>
<li>DiscardPolicy : 阻塞队列满了，仍有请求时，不处理这个请求，直接丢掉该请求，不抛出异常。</li>
<li>DiscardOldestPolicy : 阻塞队列满了，仍有请求时，该请求和最早的请求进行竞争，也不会抛出异常。</li>
</ul>
<h3 id="最大线程如何定义"><a href="#最大线程如何定义" class="headerlink" title="最大线程如何定义"></a>最大线程如何定义</h3><ul>
<li>CPU密集型：获取CPU的核数，n核的CPU就定义最大线程数为n。CPU核数可以通过 <code>Runtime.getRuntime().availableProcessors()</code>进行获取。</li>
<li>IO密集型：判断程序中十分耗IO的线程，最大线程应该大于这个值。</li>
</ul>
<h1 id="集合类不安全"><a href="#集合类不安全" class="headerlink" title="集合类不安全"></a>集合类不安全</h1><h2 id="List"><a href="#List" class="headerlink" title="List"></a>List</h2><p>以<strong>ArrayList</strong>为例，它是并发不安全的，如果并发修改的话会出现<code>java.util.ConcurrentModificationException</code>异常。</p>
<p>常见解决方案有：</p>
<ol>
<li>以Vector代替ArrayList，Vector中的add方法是加了synchronized的同步方法，而ArrayList中的add方法只是普通方法。</li>
<li>利用<code>Collections.synchronizedList</code>方法对普通ArrayList进行转换。</li>
<li>使用<strong>CopyOnWriteArrayList</strong>。</li>
</ol>
<h2 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h2><p>以<strong>HashSet</strong>为例，它是并发不安全的，如果并发修改的话会出现<code>java.util.ConcurrentModificationException</code>异常。（PS：HashSet的底层是使用HashMap实现）。</p>
<p>常见解决方案有：</p>
<ol>
<li>利用<code>Collections.synchronizedSet</code>方法对普通HashSet进行转换。</li>
<li>使用<strong>CopyOnWriteArraySet</strong>。</li>
</ol>
<h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><p>以<strong>HashSet</strong>为例，它是并发不安全的，如果并发修改的话会出现<code>java.util.ConcurrentModificationException</code>异常。</p>
<p>常见解决方案有：</p>
<ol>
<li>利用<code>Collections.synchronizedMap</code>方法对普通HashMap进行转换。</li>
<li>使用<strong>ConcurrentHashMap</strong>。</li>
</ol>
<h1 id="Callable"><a href="#Callable" class="headerlink" title="Callable"></a>Callable</h1><p>Callable是一个泛型接口，需要重写call方法，方法的返回值是泛型。</p>
<p><strong>细节</strong>：</p>
<ol>
<li>有缓存。</li>
<li>结果可能需要等待，会阻塞。</li>
</ol>
<h2 id="FutureTask"><a href="#FutureTask" class="headerlink" title="FutureTask"></a>FutureTask</h2><ul>
<li><code>new Thread(new FutureTask&lt;V&gt;(Callable)).start()</code></li>
<li><code>futureTask.get()</code> – 可能会产生阻塞</li>
</ul>
<h1 id="常用辅助类"><a href="#常用辅助类" class="headerlink" title="常用辅助类"></a>常用辅助类</h1><h2 id="CountDownLatch"><a href="#CountDownLatch" class="headerlink" title="CountDownLatch"></a>CountDownLatch</h2><ul>
<li><code>new CountDownLatch(num)</code> – 初始化计数值</li>
<li><code>countDown()</code> – 计数值-1</li>
<li><code>await()</code> – 等待计数器归0，然后再向下执行</li>
</ul>
<h2 id="CyclicBarrier"><a href="#CyclicBarrier" class="headerlink" title="CyclicBarrier"></a>CyclicBarrier</h2><ul>
<li><code>new CyclicBarrier(num, Runnable)</code> – 初始化计数目标值,Runnable为达到目标值后的回调函数</li>
<li><code>await()</code> – 等待</li>
</ul>
<h2 id="Semaphore"><a href="#Semaphore" class="headerlink" title="Semaphore"></a>Semaphore</h2><blockquote>
<p>类似停车位，可用于限流场景</p>
</blockquote>
<ul>
<li><code>new Semaphore(num)</code> – 许可进入的线程数量</li>
<li><code>acquire()</code> – 得到一个许可证</li>
<li><code>release()</code> – 释放一个许可证</li>
</ul>
<h1 id="读写锁"><a href="#读写锁" class="headerlink" title="读写锁"></a>读写锁</h1><p><strong>ReadWriteLock</strong>是一个接口，拥有一个唯一的实现类<strong>ReentrantReadWriteLock</strong>。</p>
<ul>
<li>独占锁：写锁，一次只能被一个线程占有。</li>
<li>共享锁：读锁，多个线程可以同时占有。</li>
</ul>
<h1 id="阻塞队列"><a href="#阻塞队列" class="headerlink" title="阻塞队列"></a>阻塞队列</h1><p><strong>BlockingQueue</strong>是一个接口，它的实现类有<strong>LinkedBlockingQueue</strong>和<strong>ArrayBlockingQueue</strong>等。</p>
<h2 id="BlockingQueue"><a href="#BlockingQueue" class="headerlink" title="BlockingQueue"></a>BlockingQueue</h2><p><strong>API</strong></p>
<table>
<thead>
<tr>
<th>方式</th>
<th>抛出异常</th>
<th>有返回值，不抛出异常</th>
<th>阻塞等待</th>
<th>超时等待</th>
</tr>
</thead>
<tbody><tr>
<td>添加</td>
<td>add</td>
<td>offer</td>
<td>put</td>
<td>offer(,,)</td>
</tr>
<tr>
<td>移除</td>
<td>remove</td>
<td>poll</td>
<td>take</td>
<td>poll(,)</td>
</tr>
<tr>
<td>队首</td>
<td>element</td>
<td>peek</td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h2 id="SynchronousQueue"><a href="#SynchronousQueue" class="headerlink" title="SynchronousQueue"></a>SynchronousQueue</h2><blockquote>
<p>同步队列，是BlockingQueue接口的一个实现类。不存储元素，往队列里put一个元素后必须从里面先take出来，否则不能再put进去值</p>
</blockquote>
<h1 id="四大函数式接口"><a href="#四大函数式接口" class="headerlink" title="四大函数式接口"></a>四大函数式接口</h1><p>函数式接口：只有一个方法的接口。</p>
<blockquote>
<p>@FunctionInterface</p>
</blockquote>
<h2 id="函数型接口-–-Function"><a href="#函数型接口-–-Function" class="headerlink" title="函数型接口 – Function"></a>函数型接口 – Function</h2><blockquote>
<p>有一个输入参数，一个输出参数</p>
</blockquote>
<h2 id="断定型接口-–-Predicate"><a href="#断定型接口-–-Predicate" class="headerlink" title="断定型接口 – Predicate"></a>断定型接口 – Predicate</h2><blockquote>
<p>有一个输入参数，输出参数只能是布尔值</p>
</blockquote>
<h2 id="消费型接口-–-Consumer"><a href="#消费型接口-–-Consumer" class="headerlink" title="消费型接口 – Consumer"></a>消费型接口 – Consumer</h2><blockquote>
<p>有一个输入参数，没有返回值</p>
</blockquote>
<h2 id="供给型接口-–-Supplier"><a href="#供给型接口-–-Supplier" class="headerlink" title="供给型接口 – Supplier"></a>供给型接口 – Supplier</h2><blockquote>
<p>没有输入参数，只有返回值</p>
</blockquote>
<h1 id="Stream流式计算"><a href="#Stream流式计算" class="headerlink" title="Stream流式计算"></a>Stream流式计算</h1><p><strong>题目</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">题目要求：用一行代码实现以下要求</span><br><span class="line">现有5个用户，按如下条件进行筛选：</span><br><span class="line">1. ID 必须为偶数；</span><br><span class="line">2. 年龄必须大于23岁；</span><br><span class="line">3. 用户名转为大写字母；</span><br><span class="line">4. 按用户名字母倒序；</span><br><span class="line">5. 只输出一个用户</span><br></pre></td></tr></table></figure>

<h1 id="ForkJoin"><a href="#ForkJoin" class="headerlink" title="ForkJoin"></a>ForkJoin</h1><blockquote>
<p>把大任务拆分为小任务</p>
</blockquote>
<h2 id="工作窃取"><a href="#工作窃取" class="headerlink" title="工作窃取"></a>工作窃取</h2><p>维护的都是双端队列</p>
<h1 id="异步回调"><a href="#异步回调" class="headerlink" title="异步回调"></a>异步回调</h1><p><strong>CompletableFuture<V></V></strong></p>
<ul>
<li>runAsync()  – 无返回值</li>
<li>supplyAsync() – 有返回值</li>
<li>get()</li>
<li>whenComplete</li>
<li>exceptionally</li>
</ul>
<h1 id="JMM"><a href="#JMM" class="headerlink" title="JMM"></a>JMM</h1><p>JMM 是 Java 内存模型，它拥有的一些同步约定如下：</p>
<ol>
<li>线程解锁前，必须把共享变量立刻刷回主内存。</li>
<li>线程加锁前，必须读取主内存中的最新值到工作内存中。</li>
<li>加锁和解锁是同一把锁。</li>
</ol>
<p><strong>8种内存交互操作</strong>：read、load、use、assign、write、store、lock、unlock</p>
<h2 id="volatile"><a href="#volatile" class="headerlink" title="volatile"></a>volatile</h2><blockquote>
<p>是Java虚拟机提供的轻量级的同步机制。</p>
</blockquote>
<ul>
<li>保证可见性；</li>
<li>不保证原子性；</li>
<li>禁止指令重排。</li>
</ul>
<p><strong>指令重排</strong>：计算机并不是按编码顺序去执行代码。</p>
<p>源代码 –&gt; 编译器优化的重排 –&gt; 指令并行也可能重排 –&gt; 内存系统也会重排 –&gt; 执行</p>
<p>处理器在进行指令重排的时候，会考虑数据之间的依赖性。</p>
<p><strong>指令重排导致乱序例子</strong></p>
<p>假设a,b,c,d这四个值默认都为0；</p>
<table>
<thead>
<tr>
<th>线程A</th>
<th>线程B</th>
</tr>
</thead>
<tbody><tr>
<td>x=a</td>
<td>y=b</td>
</tr>
<tr>
<td>b=1</td>
<td>a=2</td>
</tr>
</tbody></table>
<p>正常结果为x=0,y=0；但是由于可能指令重排为下列情况</p>
<table>
<thead>
<tr>
<th>线程A</th>
<th>线程B</th>
</tr>
</thead>
<tbody><tr>
<td>b=1</td>
<td>a=2</td>
</tr>
<tr>
<td>x=a</td>
<td>y=b</td>
</tr>
</tbody></table>
<p>得到x=2；y=1的错误结果。</p>
<p><strong>volatile避免指令重排的原理</strong></p>
<blockquote>
<p>内存屏障，CPU指令。</p>
</blockquote>
<p>对一个用volatile声明过的变量，在执行它的写指令时，CPU会在指令的上下各加一条内存屏障指令，禁止上面指令和下面指令顺序交换。</p>
<h1 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h1><h2 id="饿汉式单例"><a href="#饿汉式单例" class="headerlink" title="饿汉式单例"></a>饿汉式单例</h2><p>类创建时就创建单例，缺点是可能会浪费空间。</p>
<h2 id="懒汉式"><a href="#懒汉式" class="headerlink" title="懒汉式"></a>懒汉式</h2><p>用一个对象获取单例时，才去创建这个单例。缺点是多线程时会可能会出现重复创建的问题。</p>
<h2 id="DCL懒汉式"><a href="#DCL懒汉式" class="headerlink" title="DCL懒汉式"></a>DCL懒汉式</h2><p>双重检测锁模式的懒汉式。</p>
<p>缺点是new操作时可能会发生指令重排。解决方法是volatile。</p>
<h2 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h2><h2 id="枚举类"><a href="#枚举类" class="headerlink" title="枚举类"></a>枚举类</h2><h1 id="CAS"><a href="#CAS" class="headerlink" title="CAS"></a>CAS</h1><blockquote>
<p>CompareAndSet : 比较并交换</p>
</blockquote>
<p>比较当前工作内存中的值和主内存中的值，如果这个值是期望的，那么执行操作。如果不是，则一直循环。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">AtomicInteger atomicInteger = <span class="keyword">new</span> AtomicInteger(initialValue);</span><br><span class="line">atomicInteger.compareAndSet();</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// expect : 期望，update : 更新</span></span><br><span class="line"><span class="comment">// 如果期望的值达到了，就更新；否则，就不更新</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">compareAndSet</span><span class="params">(<span class="keyword">int</span> expect, <span class="keyword">int</span> update)</span></span>;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>CAS 是 CPU的操作原语</p>
</blockquote>
<p>Java无法操作内存，C++可以操作内存，所以Java操作内存的方法是通过native方法调用C++。其中Unsafe类相当于C++的一个后门，供Java使用。</p>
<p>CAS的缺点：</p>
<ul>
<li>循环会耗时。</li>
<li>一次性只能保证一个共享变量的原子性。</li>
<li>会产生ABA问题</li>
</ul>
<h2 id="ABA问题"><a href="#ABA问题" class="headerlink" title="ABA问题"></a>ABA问题</h2><h3 id="原子引用"><a href="#原子引用" class="headerlink" title="原子引用"></a>原子引用</h3><p>AtomicReference</p>
<p>思想：乐观锁</p>
<h1 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h1><h2 id="公平锁和非公平锁"><a href="#公平锁和非公平锁" class="headerlink" title="公平锁和非公平锁"></a>公平锁和非公平锁</h2><p>取决于是否可被抢占</p>
<h2 id="可重入锁"><a href="#可重入锁" class="headerlink" title="可重入锁"></a>可重入锁</h2><h2 id="自旋锁"><a href="#自旋锁" class="headerlink" title="自旋锁"></a>自旋锁</h2><h1 id="死锁排查"><a href="#死锁排查" class="headerlink" title="死锁排查"></a>死锁排查</h1><ol>
<li>使用 <code>jps -l</code> 定位进程号</li>
<li>使用 <code>jstack 进程号</code> 找到死锁问题</li>
</ol>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>线程</tag>
      </tags>
  </entry>
  <entry>
    <title>微服务</title>
    <url>/2020/09/22/%E5%BE%AE%E6%9C%8D%E5%8A%A1/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote class="blockquote-center">
<p>^ _ ^ </p>

</blockquote>
<a id="more"></a>

<h1 id="微服务概念"><a href="#微服务概念" class="headerlink" title="微服务概念"></a>微服务概念</h1><p><img src="/2020/09/22/%E5%BE%AE%E6%9C%8D%E5%8A%A1/1.jpg" alt></p>
<p><img src="/2020/09/22/%E5%BE%AE%E6%9C%8D%E5%8A%A1/2.jpg" alt></p>
<ul>
<li><strong>服务注册中心</strong>：每个服务实例在启动时，向注册中心注册自己的IP地址等信息。这样，服务在调用别的服务的接口时，就可以通过注册中心，查询到其他服务的实例，向实例发起请求。</li>
<li><strong>负载均衡</strong>：由于一个服务可以有多个实例，所以不管是来自外部客户端的请求，还是微服务系统内部服务之间发起的请求，都需要引入负载均衡的机制，来发挥多实例集群的作用。两种负载均衡为服务器端负载均衡和客户端负载均衡，各自具有代表性意义的实现分别是Nginx和Ribbon。</li>
<li><strong>API Gateway</strong>：它就像整个微服务系统的门面，所有请求，都要先经过它的处理，才会转发到对应的服务<ul>
<li><strong>请求路由</strong>：一个外部请求过来之后，我们需要知道这个请求是发给哪个服务的</li>
<li><strong>请求过滤</strong>：不是所有请求都可以被我们系统处理的，我们需要判断这个请求是否携带一些必要的鉴权信息，并对其进行鉴权</li>
</ul>
</li>
</ul>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://www.zhihu.com/search?type=content&q=%E5%BE%AE%E6%9C%8D%E5%8A%A1" target="_blank" rel="noopener">如何给老婆解释什么是微服务</a><br><a href="https://www.zhihu.com/question/65502802" target="_blank" rel="noopener">什么是微服务架构</a></p>
<h1 id="微服务相关技术"><a href="#微服务相关技术" class="headerlink" title="微服务相关技术"></a>微服务相关技术</h1><h2 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h2><h2 id="SpringMVC"><a href="#SpringMVC" class="headerlink" title="SpringMVC"></a>SpringMVC</h2><h2 id="SpringBoot"><a href="#SpringBoot" class="headerlink" title="SpringBoot"></a>SpringBoot</h2><h2 id="SpringCloud"><a href="#SpringCloud" class="headerlink" title="SpringCloud"></a>SpringCloud</h2>]]></content>
      <categories>
        <category>JavaEE</category>
      </categories>
      <tags>
        <tag>JavaEE</tag>
      </tags>
  </entry>
  <entry>
    <title>大厂面试参考指南</title>
    <url>/2020/11/14/%E5%A4%A7%E5%8E%82%E9%9D%A2%E8%AF%95%E5%8F%82%E8%80%83%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote class="blockquote-center">
<p>^ _ ^ </p>

</blockquote>
<a id="more"></a>

<h1 id="分布式"><a href="#分布式" class="headerlink" title="分布式"></a>分布式</h1><h2 id="大型网站系统的特点"><a href="#大型网站系统的特点" class="headerlink" title="大型网站系统的特点"></a>大型网站系统的特点</h2><ul>
<li><strong>高并发、大流量</strong>：通常有大量用户同时访问、同时在线。</li>
<li><strong>高可用</strong>：服务器必须保持 7 * 24 无间断运行。</li>
<li><strong>海量数据</strong>：大型网站需要存储、操作海量数据，需要大量服务器。</li>
<li><strong>用户分布广泛，网络复杂</strong>：许多大型网站为全球用户提供服务。用户分布范围广泛，各地网络情况不同。在国内，还有不同运营商网络互通难的问题。</li>
<li><strong>安全威胁</strong>：许多大型网站几乎每天都会遭受到黑客的攻击。</li>
<li><strong>需求变更块，发布频繁</strong>：互联网产品快速适应市场，满足客户需求，产品发布频率高。</li>
<li><strong>渐进式发展</strong>：几乎所有的大型互联网网站都是从一个小网站开始，慢慢发展起来的。</li>
</ul>
<h2 id="大型网站架构演化发展历程"><a href="#大型网站架构演化发展历程" class="headerlink" title="大型网站架构演化发展历程"></a>大型网站架构演化发展历程</h2><h3 id="（一）初始阶段"><a href="#（一）初始阶段" class="headerlink" title="（一）初始阶段"></a>（一）初始阶段</h3><p>应用程序、文件、数据库等所有资源都在一台服务器上。</p>
<p><img src="/2020/11/14/%E5%A4%A7%E5%8E%82%E9%9D%A2%E8%AF%95%E5%8F%82%E8%80%83%E6%8C%87%E5%8D%97/1.png" alt="初始网站架构"></p>
<h3 id="（二）应用服务和数据服务分离"><a href="#（二）应用服务和数据服务分离" class="headerlink" title="（二）应用服务和数据服务分离"></a>（二）应用服务和数据服务分离</h3><p>应用和数据分离后整个网站使用3台服务器：应用服务器、文件服务器、数据库服务器，这3台服务器对硬件资源有不同的要求：</p>
<ul>
<li>应用服务器：需要处理大量业务逻辑，因此需要更快的CPU</li>
<li>文件服务器：需要存储大量用户上传的文件，因此需要更大的硬盘</li>
<li>数据库服务器：需要快速磁盘检索和数据缓存，因此需要更快的磁盘和更大的内存</li>
</ul>
<p><img src="/2020/11/14/%E5%A4%A7%E5%8E%82%E9%9D%A2%E8%AF%95%E5%8F%82%E8%80%83%E6%8C%87%E5%8D%97/2.png" alt="应用服务和数据服务分离"></p>
<h3 id="（三）使用缓存"><a href="#（三）使用缓存" class="headerlink" title="（三）使用缓存"></a>（三）使用缓存</h3><p>网络访问遵循二八定律：80%的访问集中在20%的数据上。因此将一小部分数据缓存在内存中，有利于提高整体访问速率、减轻数据库压力。<br>缓存分为本地缓存和远程缓存：</p>
<ul>
<li>本地缓存：受应用服务器内存限制，且会与应用程序争夺内存，但访问速度稍快</li>
<li>远程缓存：可使用集群的方式，部署大内存服务器作为专门的缓存服务器</li>
</ul>
<p><img src="/2020/11/14/%E5%A4%A7%E5%8E%82%E9%9D%A2%E8%AF%95%E5%8F%82%E8%80%83%E6%8C%87%E5%8D%97/3.png" alt="使用缓存"></p>
<h3 id="（四）应用服务器集群"><a href="#（四）应用服务器集群" class="headerlink" title="（四）应用服务器集群"></a>（四）应用服务器集群</h3><p>单一应用服务器能处理的并发连接有限，在网站访问高峰期，应用服务器称为网站的瓶颈。<br>集群后，通过应用服务器负载均衡调度器，可以将来自用户浏览器的访问请求分发到服务器集群中的任何一台服务器上，如果有更多用户，则可通过在集群中添加服务器来改善系统性能。</p>
<p><img src="/2020/11/14/%E5%A4%A7%E5%8E%82%E9%9D%A2%E8%AF%95%E5%8F%82%E8%80%83%E6%8C%87%E5%8D%97/4.png" alt="应用服务器集群"></p>
<h3 id="（五）数据库读写分离"><a href="#（五）数据库读写分离" class="headerlink" title="（五）数据库读写分离"></a>（五）数据库读写分离</h3><p>网站在使用缓存后，大部分操作可以不通过数据库就能完成。但仍然有一部分操作需要访问数据库（如缓存不命中、缓存过期和全部写操作）。当用户达到一定规模后，数据库因为负载过高而成为网站的瓶颈。</p>
<p>目前大多数数据库都提供主从热备功能（通过配置两台数据库主从关系，可以将一台数据库服务器的数据同步更新到另一台数据库服务器上）。利用这项技术，可以实现数据库的读写分离：</p>
<ul>
<li>应用服务器写数据时，访问主数据库。主数据库更新外数据后将数据同步到从数据库</li>
<li>应用服务器读数据时，访问从数据库。</li>
<li>通常应用程序后端使用专门的数据访问模块，使得读写分离对应用程序透明。</li>
</ul>
<p><img src="/2020/11/14/%E5%A4%A7%E5%8E%82%E9%9D%A2%E8%AF%95%E5%8F%82%E8%80%83%E6%8C%87%E5%8D%97/5.png" alt="数据库读写分离"></p>
<h3 id="（六）使用反向代理和CDN"><a href="#（六）使用反向代理和CDN" class="headerlink" title="（六）使用反向代理和CDN"></a>（六）使用反向代理和CDN</h3><p>由于网站用户分布范围广，网络环境复杂。各地网络环境各异，不同地区用户访问速度差别很大。一般离应用服务器越远的用户访问速度越慢。如果网站响应过慢，就很有可能丢失客户。</p>
<p><strong>CDN</strong><br>CDN（Content Delivery Network）内容分发网络，就是为了改善互联网服务质量的，具体来说就是提高访问速度。<br>服务器上的资源分为两种：</p>
<ul>
<li>静态资源：这种资源很少变动，如image,css,js,html</li>
<li>动态资源：这种资源不同用户不同时刻访问通常是不一样的，比如jsp。</li>
</ul>
<p>如果通过在全国各地部署服务器，使得每个服务器上都有相同的动态资源的话，则还需要配置相应的数据库，还需涉及多个数据库之间的数据同步问题，这会导致成本很高。<br>而如果通过在全国各地部署服务器，但每个服务器上只部署静态资源的话，则不需要涉及数据库，而且也能提高用户的访问速度。</p>
<p>CDN专用DNS服务器可以帮助客户端找到离它最近的一台服务器供其访问。<br><img src="/2020/11/14/%E5%A4%A7%E5%8E%82%E9%9D%A2%E8%AF%95%E5%8F%82%E8%80%83%E6%8C%87%E5%8D%97/6.png" alt="CDN专用DNS服务器"></p>
<p><strong>反向代理</strong></p>
<ul>
<li>正向代理<ul>
<li>客户端非常明确要访问的服务器地址；</li>
<li>而服务器只清楚请求来自哪个代理服务器，而不知道来自哪个具体的客户端；</li>
<li>正向代理屏蔽或隐藏了真实的客户端信息</li>
</ul>
</li>
<li>反向代理<ul>
<li>多个客户端发送请求，反向代理服务器收到后，按照一定的规则分配给服务器集群中的某个服务器进行处理</li>
<li>客户端也是明确的，但具体由哪台服务器处理并不明确</li>
<li>主要用于服务器集群分布式部署情况下，反向代理隐藏了服务端信息</li>
</ul>
</li>
</ul>
<p><strong>CDN和反向代理</strong></p>
<ul>
<li>CDN部署在网络提供商的机房：用户请求网站服务时，可以从距离自己最近的网络提供商机房获取数据</li>
<li>反向代理部署在网站的中心机房：当用户请求到达中心机房时，首先访问的服务器是反向代理服务器，如果反向代理服务器中缓存中用户请求的资源，则直接返回给用户。</li>
<li>CDN和反向代理的基本原理都是缓存</li>
<li>CDN和反向代理的目的都是尽早返回数据给用户</li>
</ul>
<p><img src="/2020/11/14/%E5%A4%A7%E5%8E%82%E9%9D%A2%E8%AF%95%E5%8F%82%E8%80%83%E6%8C%87%E5%8D%97/7.png" alt="使用反向代理和CDN"></p>
<h3 id="（七）分布式文件系统和分布式数据库"><a href="#（七）分布式文件系统和分布式数据库" class="headerlink" title="（七）分布式文件系统和分布式数据库"></a>（七）分布式文件系统和分布式数据库</h3><p><img src="/2020/11/14/%E5%A4%A7%E5%8E%82%E9%9D%A2%E8%AF%95%E5%8F%82%E8%80%83%E6%8C%87%E5%8D%97/8.png" alt="分布式文件系统和分布式数据库"></p>
<p>分布式数据库是数据库拆分的最后手段，只有在单表数据规模非常庞大时才使用。不到不得已时，网站更常用的数据库拆分手段时<code>业务分库</code>（将不同业务的数据部署在不同的物理服务器上）</p>
<h3 id="（八）NoSQL和搜索引擎"><a href="#（八）NoSQL和搜索引擎" class="headerlink" title="（八）NoSQL和搜索引擎"></a>（八）NoSQL和搜索引擎</h3><p><img src="/2020/11/14/%E5%A4%A7%E5%8E%82%E9%9D%A2%E8%AF%95%E5%8F%82%E8%80%83%E6%8C%87%E5%8D%97/9.png" alt="分布式文件系统和分布式数据库"></p>
<p>NoSQL和搜索引擎都是来源于互联网的技术手段，可对可伸缩的分布式特性具有更好的支持。应用服务器则通过一个统一的数据访问模块访问各种资源，减轻管理诸多数据源的麻烦。</p>
<h3 id="（九）业务拆分"><a href="#（九）业务拆分" class="headerlink" title="（九）业务拆分"></a>（九）业务拆分</h3><p>大网站为了应对日益复杂的应用场景，采用分而治之的方式将网站业务分成不同的产品线。具体到技术上，也会根据产品线划分，将网站拆分成不同的应用。每个应用独立部署，应用之间可以通过超链接建立关系，也可以通过消息队列分发数据，最多的还是通过访问同一个数据库存储系统来构建一个完整的系统。</p>
<p><img src="/2020/11/14/%E5%A4%A7%E5%8E%82%E9%9D%A2%E8%AF%95%E5%8F%82%E8%80%83%E6%8C%87%E5%8D%97/10.png" alt="业务拆分"></p>
<h3 id="（十）分布式微服务"><a href="#（十）分布式微服务" class="headerlink" title="（十）分布式微服务"></a>（十）分布式微服务</h3><p>随着业务拆分越来越小，存储系统越来越大，应用系统整体复杂度指数级增加。由于所有应用都需要与数据库建立连接，连接的数目是服务器规模的平方。当服务器规模过大时，数据库资源不足，将拒绝服务。</p>
<p>解决策略是将各个应用中共有的业务操作抽取出来，独立部署。由这些可复用的业务连接数据库，提供业务服务。而应用系统只需要管理用户界面，通过分布式服务调用共用业务服务完成具体操作。</p>
<p><img src="/2020/11/14/%E5%A4%A7%E5%8E%82%E9%9D%A2%E8%AF%95%E5%8F%82%E8%80%83%E6%8C%87%E5%8D%97/11.png" alt="分布式微服务"></p>
<h2 id="概念辨析"><a href="#概念辨析" class="headerlink" title="概念辨析"></a>概念辨析</h2><h3 id="拆分和集群"><a href="#拆分和集群" class="headerlink" title="拆分和集群"></a>拆分和集群</h3><p><strong>拆分</strong>：不同的服务器上部署不同的服务模块。模块之间通过RPC通信和调用，用于拆分业务功能。独立部署，多个服务器共同组成一个整体对外提供服务。</p>
<p><strong>集群</strong>：不同的服务器上部署相同的服务模块。通过分布式调度软件进行统一调度。用于分流容灾，降低单个服务器的访问压力。</p>
<h3 id="微服务和SOA"><a href="#微服务和SOA" class="headerlink" title="微服务和SOA"></a>微服务和SOA</h3><ul>
<li>微服务是一种架构风格，一个大型复杂软件应用由一个或多个微服务组成。</li>
<li>系统中各个微服务是独立部署的，各个微服务之间是松耦合的。</li>
<li>每个微服务仅关注于完成一个任务</li>
</ul>
<p>微服务从本质意义上来看还是SOA架构。但内涵有所不同，微服务并不绑定某一特定技术。在一个微服务系统中，可以有Java编写的服务，也可以有Python编写的服务。它们是靠Restful风格统一成一个系统的。所以微服务本身与具体的实现技术无关，扩展性强。</p>
<h3 id="前后端完全分离和Rest规范"><a href="#前后端完全分离和Rest规范" class="headerlink" title="前后端完全分离和Rest规范"></a>前后端完全分离和Rest规范</h3><p><strong>Rest操作最佳实践</strong><br>现在在很多企业中，虽然都支持Rest规范，但是真正严格遵守的几乎没有。因为按照Rest规范，删除需要发送Delete请求，插入需要发送PUT请求，过于繁琐。再者，对于某些框架（如Ajax，SpringMVC等），对于Delete和Put的支持不太友好。所以实际中还是很少使用这两种请求，一般还是使用Get和Post请求，使用接口名字来区分。所以对于Rest规范，只需要记住传递数据只使用JSON，而不是后端去渲染模板，从而实现前后端分离。</p>
<h2 id="CAP三进二和Base定理"><a href="#CAP三进二和Base定理" class="headerlink" title="CAP三进二和Base定理"></a>CAP三进二和Base定理</h2><h3 id="ACID"><a href="#ACID" class="headerlink" title="ACID"></a>ACID</h3><p>关系型数据库遵循ACID原则：</p>
<ul>
<li>Atomicity：原子性。事务是操作的序列，这些操作按序执行。要么全部操作执行成功，要么如果中间有某个操作出现错误，则整个事务回滚，事务中已完成操作对数据库的影响将会撤销。</li>
<li>Consistency：一致性。事务执行前后数据库处于一致状态。一般是指语义上的正确状态，比如说转账时转账方钱减少多少，收款方账户就应该增加相同的数目。</li>
<li>Isolution：隔离性。事务之间互不影响。</li>
<li>Durability：持久性。提交成功的事务所做的修改将持久化存储在数据库中。</li>
</ul>
<h3 id="CAP三进二"><a href="#CAP三进二" class="headerlink" title="CAP三进二"></a>CAP三进二</h3><ul>
<li>Consistancy：强一致性</li>
<li>Availability：可用性</li>
<li>Partion Tolerance：分区容错性</li>
</ul>
<p><strong>CAP理论</strong>：一个分布式系统不可能同时很好的满足强一致性、可用性、分区容错性这三个需求，最多只能较好地满足其中的两个。</p>
<ul>
<li>CA：如传统的Oracle数据库</li>
<li>AP：大多数网站架构的选择</li>
<li>CP：Redis,MongoDB</li>
</ul>
<h3 id="BASE定理"><a href="#BASE定理" class="headerlink" title="BASE定理"></a>BASE定理</h3><ul>
<li>Basical Availiable：基本可用，支持分区失败</li>
<li>Soft State：软状态：状态可以有一段时间不同步（处于异步状态）</li>
<li>Eventually Consistent：最终一致（数据最终一致即可，不要求时时一致）</li>
</ul>
<p>BASE是为了解决关系型数据库强一致引起的问题导致可用性降低提出的解决方案。它的思想是通过放松系统对某一时刻一致性的要求来换取系统整体伸缩性和性能上的改观。</p>
<h1 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h1><h2 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h2>]]></content>
      <categories>
        <category>Java面试</category>
      </categories>
      <tags>
        <tag>javaEE</tag>
      </tags>
  </entry>
  <entry>
    <title>安装nextT主题</title>
    <url>/2022/01/10/%E5%AE%89%E8%A3%85next%E4%B8%BB%E9%A2%98/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote class="blockquote-center">
<p>nextT主题，从简陋到初具规模 </p>

</blockquote>
<a id="more"></a>
<h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><p>每次更改项目_config.yml后，需要重新启动网站才能生效。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure>
<p>而如果更改的是next里的_config.yml的话，只需要在浏览器里刷新页面。</p>
<h1 id="clone-项目"><a href="#clone-项目" class="headerlink" title="clone 项目"></a>clone 项目</h1><p>在hexo目录下打开Git Bash</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;next-theme&#x2F;hexo-theme-next themes&#x2F;next</span><br></pre></td></tr></table></figure>

<h1 id="更改项目配置"><a href="#更改项目配置" class="headerlink" title="更改项目配置"></a>更改项目配置</h1><ul>
<li>打开项目文件夹下的_config.yml</li>
<li>找到关键字theme，赋值为next</li>
</ul>
<p><img src="/2022/01/10/%E5%AE%89%E8%A3%85next%E4%B8%BB%E9%A2%98/1.jpg" alt="图1"></p>
<h1 id="语言配置"><a href="#语言配置" class="headerlink" title="语言配置"></a>语言配置</h1><p><strong>配置简体中文</strong></p>
<ul>
<li>打开项目的_config.yml文件</li>
<li>将下图所示的language设置为zh-CN</li>
<li>所有的语言设置可以在next/language中看到</li>
</ul>
<p><img src="/2022/01/10/%E5%AE%89%E8%A3%85next%E4%B8%BB%E9%A2%98/2.jpg" alt="图2"></p>
<h1 id="主题样式"><a href="#主题样式" class="headerlink" title="主题样式"></a>主题样式</h1><ul>
<li>打开themes/next文件夹下的_congif.yml</li>
<li>找到Schemes关键字</li>
<li>将选择的风格注释取消，不选择的加上注释</li>
</ul>
<p><img src="/2022/01/10/%E5%AE%89%E8%A3%85next%E4%B8%BB%E9%A2%98/4.jpg" alt="图4"></p>
<h1 id="菜单栏配置"><a href="#菜单栏配置" class="headerlink" title="菜单栏配置"></a>菜单栏配置</h1><h2 id="配置菜单栏选项"><a href="#配置菜单栏选项" class="headerlink" title="配置菜单栏选项"></a>配置菜单栏选项</h2><ul>
<li>打开themes/next文件夹下的_config.yml</li>
<li>将menu中需要出现的菜单项的注释取消</li>
</ul>
<p><img src="/2022/01/10/%E5%AE%89%E8%A3%85next%E4%B8%BB%E9%A2%98/3.jpg" alt="图3"></p>
<h2 id="菜单项页面设置"><a href="#菜单项页面设置" class="headerlink" title="菜单项页面设置"></a>菜单项页面设置</h2><h3 id="设置标签页面"><a href="#设置标签页面" class="headerlink" title="设置标签页面"></a>设置标签页面</h3><ol>
<li>在项目目录下执行如下命令：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo n page tags</span><br></pre></td></tr></table></figure></li>
<li>成功后Blog/source目录中将增加一个tags文件夹</li>
</ol>
<h3 id="设置分类页面"><a href="#设置分类页面" class="headerlink" title="设置分类页面"></a>设置分类页面</h3><ol>
<li>在项目目录下执行如下命令：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo n page categories</span><br></pre></td></tr></table></figure></li>
<li>成功后Blog/source目录中将增加一个categories文件夹</li>
</ol>
<h3 id="设置关于页面"><a href="#设置关于页面" class="headerlink" title="设置关于页面"></a>设置关于页面</h3><ol>
<li>在项目目录下执行如下命令：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo n page about</span><br></pre></td></tr></table></figure></li>
<li>成功后Blog/source目录中将增加一个about文件夹</li>
</ol>
<h1 id="侧栏配置"><a href="#侧栏配置" class="headerlink" title="侧栏配置"></a>侧栏配置</h1><h2 id="设置侧栏位置"><a href="#设置侧栏位置" class="headerlink" title="设置侧栏位置"></a>设置侧栏位置</h2><ul>
<li>打开themes/next文件夹下的_congif.yml</li>
<li>找到关键字Sidebar</li>
<li>选择侧栏靠左还是靠右</li>
</ul>
<p><img src="/2022/01/10/%E5%AE%89%E8%A3%85next%E4%B8%BB%E9%A2%98/5.jpg" alt="图5"></p>
<h2 id="设置侧栏显示时机"><a href="#设置侧栏显示时机" class="headerlink" title="设置侧栏显示时机"></a>设置侧栏显示时机</h2><blockquote>
<p>只在 Muse | Mist下有效</p>
</blockquote>
<ul>
<li>打开themes/next文件夹下的_congif.yml</li>
<li>找到关键字Sidebar Display</li>
</ul>
<h1 id="个人信息配置"><a href="#个人信息配置" class="headerlink" title="个人信息配置"></a>个人信息配置</h1><h2 id="网站title-作者姓名"><a href="#网站title-作者姓名" class="headerlink" title="网站title|作者姓名"></a>网站title|作者姓名</h2><ul>
<li>打开项目文件夹下的_congif.yml</li>
<li>在Site关键字下配置title和author的值</li>
</ul>
<h2 id="头像配置"><a href="#头像配置" class="headerlink" title="头像配置"></a>头像配置</h2><ul>
<li>打开themes/next文件夹下的_congif.yml</li>
<li>找到关键字avatar</li>
<li>图片存放的根目录是next/source，图片地址格式为/images/xxx.jpg</li>
<li>将url换成图片地址</li>
</ul>
<p><img src="/2022/01/10/%E5%AE%89%E8%A3%85next%E4%B8%BB%E9%A2%98/6.jpg" alt="图6"></p>
<h2 id="社交链接"><a href="#社交链接" class="headerlink" title="社交链接"></a>社交链接</h2><ul>
<li>打开themes/next文件夹下的_congif.yml</li>
<li>找到关键字social</li>
<li>将需要添加的社交链接取消注释，并赋值自己的社交账号地址</li>
</ul>
<h1 id="阅读全文"><a href="#阅读全文" class="headerlink" title="阅读全文"></a>阅读全文</h1><p>在md文件中加上如下注释，那么此注释下所有内容都会省略，并出现阅读全文按钮</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- more --&gt;</span><br></pre></td></tr></table></figure>

<h1 id="搜索功能"><a href="#搜索功能" class="headerlink" title="搜索功能"></a>搜索功能</h1><ol>
<li>安装hexo-generator-searchdb<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure></li>
<li>站点配置文件新增<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">search:</span><br><span class="line">    path: search.xml</span><br><span class="line">    field: post</span><br><span class="line">    format: html</span><br><span class="line">    limit: 10000</span><br></pre></td></tr></table></figure></li>
<li>主题配置文件<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Local Search</span><br><span class="line">Local_search:</span><br><span class="line">    enable: true</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h1 id="显示图片"><a href="#显示图片" class="headerlink" title="显示图片"></a>显示图片</h1><p>直接用相对路径访问图片是不能在网站上显示出来的<br>解决方案：<br><strong>前提</strong>   </p>
<ol>
<li>修改站点_config.yml<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">post_asset_folder: true</span><br></pre></td></tr></table></figure></li>
<li>安装插件<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install https:&#x2F;&#x2F;github.com&#x2F;CodeFalling&#x2F;hexo-asset-image --save</span><br></pre></td></tr></table></figure></li>
</ol>
<p><strong>方法</strong> </p>
<ol>
<li>在source/_post下新建一个和md文件同名的文件夹</li>
<li>将要添加的图片放入这个同名文件夹内</li>
<li>在md文件中按如下方式引用<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">![示例](.&#x2F;安装next主题&#x2F;1.jpg)</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h1 id="内置标签使用方法"><a href="#内置标签使用方法" class="headerlink" title="内置标签使用方法"></a>内置标签使用方法</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% centerquote %&#125; 可以是一句对文章有概括性的话 &#123;% endcenterquote %&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>NextT</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库详解</title>
    <url>/2020/09/10/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote class="blockquote-center">
<p>^ _ ^ </p>

</blockquote>

<a id="more"></a>

<h1 id="数据库基本概念"><a href="#数据库基本概念" class="headerlink" title="数据库基本概念"></a>数据库基本概念</h1><blockquote>
<p>DB–DataBase,用于存储和管理数据的仓库</p>
</blockquote>
<p><strong>特点</strong></p>
<ul>
<li>持久化存储数据，本质上是一个文件系统</li>
<li>使用统一的方式管理数据库 – <code>SQL</code></li>
</ul>
<h1 id="常见数据库"><a href="#常见数据库" class="headerlink" title="常见数据库"></a>常见数据库</h1><p><strong>关系型</strong></p>
<ul>
<li><code>MySQL</code>：免费开源的小型数据库</li>
<li><code>Orcal</code>：收费的大型数据库</li>
<li><code>DB2</code>：常用于银行系统</li>
<li><code>SQLServer</code>：MicroSoft公司中型数据库，C#,.net常用</li>
<li><code>SQLite</code>：嵌入式小型数据库，应用于手机端</li>
</ul>
<p><strong>非关系型（NoSQL）</strong></p>
<ul>
<li><code>Redis</code></li>
<li><code>MongoDB</code></li>
</ul>
<h2 id="关系型数据库和非关系型数据库"><a href="#关系型数据库和非关系型数据库" class="headerlink" title="关系型数据库和非关系型数据库"></a>关系型数据库和非关系型数据库</h2><p><strong>非关系型数据库的优势</strong></p>
<ol>
<li>性能：NoSQL基于键值对存储，不需要经过SQL层解析，所以性能很高；</li>
<li>可扩展性：键值对之间没有耦合性，容易进行水平扩展</li>
</ol>
<p><strong>关系型数据库的优势</strong></p>
<ol>
<li>复杂查询：可以使用SQL语句方便的在一个表或多个表之间进行非常复杂的查询</li>
<li>事务支持：使得对于安全性很高的数据访问要求得以实现</li>
</ol>
<h1 id="数据库引擎"><a href="#数据库引擎" class="headerlink" title="数据库引擎"></a>数据库引擎</h1><h2 id="MyIASM"><a href="#MyIASM" class="headerlink" title="MyIASM"></a>MyIASM</h2><ul>
<li>MySQL默认的存储引擎</li>
<li>不支持数据库事务、行级锁和外键，因此在INSERT或UPDATE数据即写操作时需要锁定整个表</li>
<li>优点是执行读取操作的速度快，且占用的内存和存储资源较少。它在设计之初就假设数据被组织成固定长度的记录，在查找数据时，MyISAM直接查找文件的OFFSET，定位比InnoDB快</li>
</ul>
<h2 id="InnoDB"><a href="#InnoDB" class="headerlink" title="InnoDB"></a>InnoDB</h2><ul>
<li>InnoDB为MySQL提供了事务支持、回滚、崩溃修复能力、多版本并发控制、事务安全的操作</li>
<li>InnoDB底层存储结构为B+树<ul>
<li>B+树的每个节点都对应InnoDB的一个Page，Page大小是固定的，一般设为16KB</li>
<li>其中，非叶子节点只有键值，叶子结点包含完整的数据</li>
</ul>
</li>
<li>InnoDB适用的场景：<ul>
<li>经常有数据更新的表，适合处理多重并发更新请求</li>
<li>支持灾难恢复（通过bin-log日志）</li>
<li>支持外键约束，只有InnoDB支持外键</li>
<li>支持自动增加列属性auto_increment</li>
</ul>
</li>
</ul>
<h1 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h1><blockquote>
<p>Structured Query Language,结构化查询语言，定义了操作所有关系型数据库的规则</p>
</blockquote>
<h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><ul>
<li><code>DDL</code>：数据库定义语言，如create,drop,alter</li>
<li><code>DML</code>：数据库操作语言，如insert,delete,update</li>
<li><code>DQL</code>：数据库查询语言，如select,where</li>
<li><code>DCL</code>：数据库控制语言，如grant,revoke</li>
</ul>
<h3 id="DDL"><a href="#DDL" class="headerlink" title="DDL"></a>DDL</h3><blockquote>
<p>CRUD</p>
</blockquote>
<h4 id="针对数据库"><a href="#针对数据库" class="headerlink" title="针对数据库"></a>针对数据库</h4><ol>
<li><p>C(Create):创建</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create database [数据库名]; -- 创建数据库</span><br><span class="line">create database [数据库名] if not exists [数据库名]; -- 如果某数据库不存在时创建</span><br><span class="line">create database [数据库名] character set [字符编码方式]; -- 创建数据库并指定编码方式</span><br></pre></td></tr></table></figure>
</li>
<li><p>R(Retrieve):查询</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show database; -- 查询所有数据库名称</span><br><span class="line">show create database [数据库名]; -- 查询指定名称数据库</span><br></pre></td></tr></table></figure>
</li>
<li><p>U(Update):修改</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alter database [数据库名称] character set [编码方式]</span><br></pre></td></tr></table></figure>
</li>
<li><p>D(Drop):删除</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">drop database [数据库名];</span><br><span class="line">drop database [数据库名] if exists [数据库名];</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select database(); -- 查看当前使用的数据库</span><br><span class="line">use database [数据库名]; -- 选择当前使用的数据库</span><br></pre></td></tr></table></figure>


</li>
</ol>
<h4 id="针对数据表"><a href="#针对数据表" class="headerlink" title="针对数据表"></a>针对数据表</h4><ol>
<li><p>C(Create)：创建</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table [表名]( -- 创建表</span><br><span class="line">    [属性名1] [属性类型1] [约束1],</span><br><span class="line">    [属性名2] [属性类型1] [约束1]</span><br><span class="line">);</span><br><span class="line">create table tb( -- 创建表实例</span><br><span class="line">    name varchar(12) NOT NULL,</span><br><span class="line">    id int UNIQUE,</span><br><span class="line">    salary double(5,2)</span><br><span class="line">);</span><br><span class="line">create table [表名1] like [表名2]; -- 赋值表2</span><br></pre></td></tr></table></figure>
</li>
<li><p>R(Retrieve)：查询</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show tables; -- 显示数据库中所有表</span><br><span class="line">desc [表名]; -- 显示表结构</span><br></pre></td></tr></table></figure>
</li>
<li><p>U(Updata)：修改</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alter table [表名] rename to [新表名]; -- 修改表名</span><br><span class="line">alter table [表名] character set [字符集名]; -- 修改字符集</span><br><span class="line">alter table [表名] add [列名] [数据类型]; -- 新增一列</span><br><span class="line">alter table [表名] change [列名] [修改后的列名] [修改后的数据类型]; -- 修改列名称，类型</span><br><span class="line">alter table [表名] modify [列名] [修改后的数据类型]; -- 修改列的数据类型</span><br><span class="line">alter table [表名] drop [列名]; -- 删除列</span><br></pre></td></tr></table></figure>
</li>
<li><p>D(Drop)：删除</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">drop table [表名];</span><br><span class="line">drop table [表名] if exists [表名];</span><br></pre></td></tr></table></figure>


</li>
</ol>
<h3 id="DML"><a href="#DML" class="headerlink" title="DML"></a>DML</h3><ol>
<li><p>增加数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">insert into 【表名】(属性1,属性2) values(属性值1,属性值2); -- 向表中添加一行数据</span><br><span class="line">insert into 【表名】(属性1,属性2) values((属性值1,属性值2),(属性值3,属性值4),...); -- 向表中添加多行数据</span><br><span class="line">insert into 【表名】 values(属性1,属性2,..属性n); -- 默认为所有列添加属性值</span><br><span class="line">insert into tb(name,age) values(&quot;zhangsan&quot;,2),(&quot;lisi&quot;,3); -- 例子</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">update [表名] set 属性1&#x3D;属性值1,属性2&#x3D;属性值2 where [条件]; -- 对满足条件的数据进行更改</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">delete from [表名] where [条件]; -- 删除所有满足条件的数据</span><br><span class="line">delete from [表名]; -- 删除表中所有数据，原理是逐条删除所有数据</span><br><span class="line">truncate table [表名]; -- 删除表中所有数据，原理是drop掉原表并创立一个同名空表</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="DQL"><a href="#DQL" class="headerlink" title="DQL"></a>DQL</h3><ol start="0">
<li><p>基本查询</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select [属性1],[属性2] from [表名];</span><br><span class="line">select distinct [属性1],[属性2] from [表名]; -- 查询结果中(属性1，属性2)是不重复的;</span><br><span class="line">select ifnull([属性],[默认值]) from [表名]; -- 如果查询属性为空的话在结果中将替换成默认值</span><br></pre></td></tr></table></figure>
</li>
<li><p>排序查询</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * from [表名] order by [属性名1] asc,[属性名2] desc; -- 先按属性1升序再按属性2降序排列</span><br></pre></td></tr></table></figure>
</li>
<li><p>聚合函数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">count -- 计算个数</span><br><span class="line">min -- 最小值</span><br><span class="line">max -- 最大值</span><br><span class="line">avg -- 平均值</span><br><span class="line">sum -- 求和</span><br><span class="line">select count(IFNULL([属性],[默认值])) from [表名]; -- 当遇见值为Null的属性值时，默认其为0进行聚合</span><br></pre></td></tr></table></figure>
</li>
<li><p>分组查询</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select [属性] from [表名] group by [分组字段] having [条件]; -- 其中属性和条件只能为分组字段或聚合函数</span><br></pre></td></tr></table></figure>
<blockquote>
<p>having和where的区别？</p>
<ul>
<li>where在分组之前进行限定，不满足条件的数据行将不参与分组</li>
<li>having在分组之后进行限定，不满则条件的分组不会被查询出来</li>
</ul>
</blockquote>
</li>
</ol>
<ol start="4">
<li><p>分页查询</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * from [表名] limit [偏移量],[条数]; -- 取第[偏移量+1]~[偏移量+条数]的数据</span><br><span class="line">select * from tb limit 0,3; -- 取第1条到第3条共三条数据</span><br></pre></td></tr></table></figure>
</li>
<li><p>条件查询</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 关系运算符：&lt;、&gt;、&lt;&#x3D;、&gt;&#x3D;、&#x3D;、&lt;&gt;(不等于)、!&#x3D;</span><br><span class="line">2. 数值范围：between ... and ...</span><br><span class="line">3. 集合范围：in</span><br><span class="line">4. 模糊查询：like</span><br><span class="line">    - _:单字匹配</span><br><span class="line">    - %:任意匹配</span><br><span class="line">5. 是否为空：is null</span><br><span class="line">6. 条件连接词：AND、OR、&amp;&amp;、||、not、is、!</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="DCL"><a href="#DCL" class="headerlink" title="DCL"></a>DCL</h3><ol>
<li><p>管理用户</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">use mysql; -- 进入mysql数据库（为MySQL数据库自带的一个库）</span><br><span class="line">select * from user; -- 查询用户</span><br><span class="line">create user &#39;用户名&#39;@&#39;主机名&#39; identified by &#39;密码&#39;; -- 创建用户</span><br><span class="line">drop user &#39;用户名&#39;@&#39;主机名&#39;; -- 删除用户</span><br><span class="line">update user set password&#x3D;password(&#39;新密码&#39;) where user&#x3D;&#39;用户名&#39;;</span><br></pre></td></tr></table></figure>
</li>
<li><p>权限管理</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show grants for &#39;用户名&#39;@&#39;主机名&#39;; -- 查询权限</span><br><span class="line">grant [权限列表] on [数据库].[表名] to &#39;用户名&#39;@&#39;主机名&#39;; -- 授予权限</span><br><span class="line">grant all to *.* to &#39;用户名&#39;@&#39;主机名&#39;; -- 授予所有权限</span><br><span class="line">revoke [权限列表] on [数据库].[表名] from &#39;用户名&#39;@&#39;主机名&#39;; -- 撤销权限</span><br></pre></td></tr></table></figure>


</li>
</ol>
<h2 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h2><ol>
<li><p>主键约束</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table tb(</span><br><span class="line">    id int,</span><br><span class="line">    name varchar(12),</span><br><span class="line">    primary key id</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
</li>
<li><p>非空约束</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table tb(</span><br><span class="line">    id int not null,</span><br><span class="line">    name varchar(12),</span><br><span class="line">    primary key id</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
</li>
<li><p>唯一约束</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table tb(</span><br><span class="line">    id int unique,</span><br><span class="line">    name varchar(12),</span><br><span class="line">    primary key id</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
</li>
<li><p>外键约束</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table dept(</span><br><span class="line">    id int,</span><br><span class="line">    primary key (id)</span><br><span class="line">);</span><br><span class="line">create table employee(</span><br><span class="line">    id int,</span><br><span class="line">    name varchar(12),</span><br><span class="line">    dept_id int,</span><br><span class="line">    primary key (id),</span><br><span class="line">    constraint my_key foreign key (dept_id) references dept(id)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="约束的增加和删除"><a href="#约束的增加和删除" class="headerlink" title="约束的增加和删除"></a>约束的增加和删除</h3><ol>
<li><p>主键约束</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alter table [表名] modify [属性] [属性类型] PRIMARY KEY; -- 添加主键约束</span><br><span class="line">alter table [表名] drop primary key; -- 删除主键约束</span><br><span class="line">alter table [表名] modify [属性] [属性类型] [其他约束] AUTO_INCREMENT; -- 添加主键自动增长</span><br><span class="line">alter table [表名] modify [属性] [属性类型] [其他约束]; -- 删除自动增长</span><br></pre></td></tr></table></figure>
</li>
<li><p>非空约束</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alter table [表名] modify [属性] [类型] [其他约束] NOT NULL; -- 添加非空约束</span><br><span class="line">alter table [表名] modify [属性] [类型] [新约束]; -- 删除非空约束，新约束为可选项</span><br></pre></td></tr></table></figure>
</li>
<li><p>唯一约束</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alter table [表名] modify [属性] [类型] [其他约束] UNIQUE; -- 添加唯一约束</span><br><span class="line">alter table [表名] drop index [属性]; -- 删除唯一约束</span><br></pre></td></tr></table></figure>
</li>
<li><p>外键约束</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alter table [表名] add constraint emp_dept_key foreign key (id) references dept(id); -- 添加外键</span><br><span class="line">alter table [表名] drop foreign key [外键名]; -- 删除外键</span><br></pre></td></tr></table></figure>


</li>
</ol>
<h3 id="级联操作"><a href="#级联操作" class="headerlink" title="级联操作"></a>级联操作</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alter table [表名] add constraint emp_dept_key foreign key (id) references dept(id) on updata cascade; -- 添加级联操作</span><br></pre></td></tr></table></figure>

<p><strong>级联操作分类</strong>：</p>
<ul>
<li>级联更新：on update cascade;</li>
<li>级联删除：on delete cascade;</li>
</ul>
<h1 id="多表关系"><a href="#多表关系" class="headerlink" title="多表关系"></a>多表关系</h1><ol>
<li>一对一：外键可以设置在任意一方</li>
<li>一对多：外键设置在多的一方</li>
<li>多对多：设置一个单独的表来进行存储双方的外键</li>
</ol>
<h2 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h2><h3 id="内连接"><a href="#内连接" class="headerlink" title="内连接"></a>内连接</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * from [表1] a inner join [表2] b on a.[属性1]&#x3D;b.[属性1]; -- 内连接，那些在a中却不在b中的属性1和在b中却不在a中的属性1所在行都不会出现在结果中</span><br></pre></td></tr></table></figure>

<h3 id="外连接"><a href="#外连接" class="headerlink" title="外连接"></a>外连接</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * from [表1] a left join [表2] b on a.[属性1]&#x3D;b.[属性1]; -- 左外连接，表示a中属性1中的所有值都会出现结果中，即使没有b的属性1的值与其相等</span><br><span class="line">select * from [表1] a right join [表2] b on a.[属性1]&#x3D;b.[属性1]; -- 右外连接，表示b中属性1中的所有值都会出现结果中，即使没有a的属性1的值与其相等</span><br></pre></td></tr></table></figure>

<h3 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h3><ol>
<li><p>子查询结果是单行单列的</p>
<blockquote>
<p>可以作为数值查询的条件</p>
</blockquote>
</li>
<li><p>子查询结果是多行单列的</p>
<blockquote>
<p>可以作为集合查询的条件</p>
</blockquote>
</li>
<li><p>子查询结果是多行多列的</p>
<blockquote>
<p>可以作为表</p>
</blockquote>
</li>
</ol>
<h1 id="范式"><a href="#范式" class="headerlink" title="范式"></a>范式</h1><blockquote>
<p>设计数据库时遵循的一些规范，使得表结构具有最小冗余</p>
</blockquote>
<h2 id="码"><a href="#码" class="headerlink" title="码"></a>码</h2><ul>
<li>超码：一个或多个属性的集合，这些属性的组合可以使我们在一个关系中唯一地表识一个元组</li>
<li>候选码：任意真子集都不是超码的超码，候选码可能有多个</li>
<li>主码：数据库设计者选中用于一个关系的的候选码</li>
</ul>
<h2 id="1NF"><a href="#1NF" class="headerlink" title="1NF"></a>1NF</h2><blockquote>
<p>每一列都是不可分割的原子数据</p>
</blockquote>
<h2 id="2NF"><a href="#2NF" class="headerlink" title="2NF"></a>2NF</h2><blockquote>
<p>1NF的基础上，任何非主属性完全依赖于候选码（消除部分函数依赖）</p>
</blockquote>
<h2 id="3NF"><a href="#3NF" class="headerlink" title="3NF"></a>3NF</h2><blockquote>
<p>2NF的基础上，任何非主属性不依赖于其他非主属性（消除传递函数依赖）</p>
</blockquote>
<h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p>假设这样一个表，字段为（学号，姓名，系的系主任，课程，成绩）</p>
<ol>
<li>系的系主任违反了第一范式，因为物理系张主任，物理系王主任这样的数据既产生了“物理系”前缀带来的冗余，也会带来删除所有主任时导致物理系也随之消失的错误。因此，将表改为（学号，姓名，系，系主任，课程，成绩）</li>
<li>该表的候选码为（学号，课程），但对于姓名属性，并不依赖于课程属性，也就是不完全依赖于候选码，违反第二范式。因此，将表分为（学号，姓名，系，系主任）+（学号，课程，成绩）两个表</li>
<li>对于（学号，姓名，系，系主任）表，系主任属性依赖于系属性，而系属性并非主属性，违反了第三范式。因此，将表分为（学号，姓名）+（系，系主任）两个表</li>
</ol>
<h1 id="数据库的备份和还原"><a href="#数据库的备份和还原" class="headerlink" title="数据库的备份和还原"></a>数据库的备份和还原</h1><p><strong>备份</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysqldump -u用户名 -p密码 &gt; 保存的路径</span><br></pre></td></tr></table></figure>

<p><strong>还原</strong><br>执行备份得到的sql文件</p>
<h1 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h1><blockquote>
<p>帮助数据库高效获取数据的数据结构</p>
</blockquote>
<h2 id="创建索引的原则"><a href="#创建索引的原则" class="headerlink" title="创建索引的原则"></a>创建索引的原则</h2><ol>
<li>选择唯一性索引：一般基于Hash算法实现</li>
<li>为经常需要排序、分组核联合操作的字段建立索引</li>
<li>为常作为查询条件的字段建立索引</li>
<li>限制索引数量：索引越多，数据更新表越慢</li>
<li>尽量使用数据量少的索引：如果索引的值很长，则占用的磁盘变大，查询速度会受到影响</li>
<li>删除不再使用或很少使用的索引</li>
<li>索引列不能参与计算：带函数的查询不建议参与所以</li>
<li>尽量扩展现有索引：联合索引的查询效率比多个独立索引高</li>
</ol>
<h2 id="索引文件的结构"><a href="#索引文件的结构" class="headerlink" title="索引文件的结构"></a>索引文件的结构</h2><p><strong>hash</strong></p>
<ul>
<li>根据计算索引属性的hash值来确定数据的位置，如果产生了hash冲突，则利用拉链法进行解决</li>
<li>缺点：<ul>
<li>需要将所有的数据文件添加到内存，比较耗费内存空间</li>
<li>只适合等值查询，不适合范围查询</li>
</ul>
</li>
</ul>
<p><strong>二叉树</strong></p>
<ul>
<li>每个结点最多有两个子节点的树，用于数据库的其实是二叉查找树</li>
<li>缺点：会因为树的深度过深而造成io次数变多</li>
</ul>
<p><strong>红黑树</strong></p>
<ul>
<li>一种特殊的平衡二叉查找树</li>
<li>特征<ul>
<li>结点是红色或黑色</li>
<li>根是黑色的</li>
<li>所有叶子结点是黑色的</li>
<li>每个红色结点必须有两个黑色结点（从叶子到根的路径上不能有两个连续的红色结点）</li>
<li>从任一结点到其叶子结点的所有叶子结点上都包含相同数目的黑色结点</li>
</ul>
</li>
<li>缺点也是会因为树的深度过深而造成io次数变多</li>
</ul>
<p><strong>B树</strong></p>
<ul>
<li>多叉平衡树</li>
<li>特征<ul>
<li>所有键值分布在整棵树中</li>
<li>搜索有可能在非叶子节点结束，在关键字全集内做一次查找，性能接近二分查找</li>
<li>一棵m阶B树，每个结点最多有m个子树</li>
<li>根结点至少有2个子树</li>
<li>分支结点（除根结点和叶子结点之外的结点）至少拥有m/2棵子树</li>
<li>所有叶子结点都在同一层，每个结点最多有m-1个key</li>
</ul>
</li>
</ul>
<p><img src="/2020/09/10/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AF%A6%E8%A7%A3/4.png" alt></p>
<p><strong>B+树</strong></p>
<ul>
<li>键值只存储在叶子结点中</li>
<li>叶子结点之间通过链表相连，是一种链式环结构</li>
<li>一个结点大小一般是整数页</li>
<li>可以对B+树进行两种查找运算<ul>
<li>对于主键的范围查找和分页查找</li>
<li>从根结点开始的随机查找</li>
</ul>
</li>
<li>B+树中有两个头指针，一个指向根结点，另一个指向关键字最小的叶子结点</li>
</ul>
<p><img src="/2020/09/10/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AF%A6%E8%A7%A3/5.png" alt></p>
<h2 id="索引分类"><a href="#索引分类" class="headerlink" title="索引分类"></a>索引分类</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 显示所有的索引信息</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">index</span> <span class="keyword">from</span> [<span class="keyword">table</span>];</span><br></pre></td></tr></table></figure>

<h3 id="主键索引"><a href="#主键索引" class="headerlink" title="主键索引"></a>主键索引</h3><blockquote>
<p>主键作为索引</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建表时添加主键索引</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">test</span>(</span><br><span class="line">  <span class="keyword">id</span> <span class="built_in">int</span>,</span><br><span class="line">  <span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">12</span>),</span><br><span class="line">  primary <span class="keyword">key</span> (<span class="keyword">id</span>)</span><br><span class="line">)<span class="keyword">ENGINE</span>=<span class="keyword">INNODB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建表后为其删除主键</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> <span class="keyword">test</span> <span class="keyword">drop</span> primary <span class="keyword">key</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建表后为某列添加主键索引</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> <span class="keyword">test</span> <span class="keyword">add</span> primary <span class="keyword">key</span> (<span class="keyword">id</span>);</span><br></pre></td></tr></table></figure>

<h3 id="唯一索引"><a href="#唯一索引" class="headerlink" title="唯一索引"></a>唯一索引</h3><blockquote>
<p>索引列的所有值都只能出现一次，值可以为空</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建表时添加唯一索引</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">test</span>(</span><br><span class="line">  <span class="keyword">id</span> <span class="built_in">int</span>,</span><br><span class="line">  <span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">12</span>),</span><br><span class="line">  <span class="keyword">unique</span> <span class="keyword">key</span> index_id(<span class="keyword">id</span>) <span class="keyword">comment</span> <span class="string">'index_id是索引名，id是列名'</span></span><br><span class="line">)<span class="keyword">ENGINE</span>=<span class="keyword">INNODB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建表后为其删除主键</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> <span class="keyword">test</span> <span class="keyword">drop</span> <span class="keyword">index</span> index_id;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建表后为某列添加主键索引</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> <span class="keyword">test</span> <span class="keyword">add</span> <span class="keyword">unique</span> <span class="keyword">key</span> index_id(<span class="keyword">id</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 另一种添加索引的方式</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">unique</span> <span class="keyword">index</span> index_test_id <span class="keyword">on</span> <span class="keyword">test</span>(<span class="keyword">id</span>);</span><br></pre></td></tr></table></figure>

<h3 id="普通索引"><a href="#普通索引" class="headerlink" title="普通索引"></a>普通索引</h3><blockquote>
<p>基本的索引类型，没有唯一性的限制</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建表时添加普通索引</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">test</span>(</span><br><span class="line">  <span class="keyword">id</span> <span class="built_in">int</span>,</span><br><span class="line">  <span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">12</span>),</span><br><span class="line">  <span class="keyword">key</span> name_index(<span class="keyword">name</span>) <span class="keyword">comment</span> <span class="string">'name_index是索引名，name是列名'</span></span><br><span class="line">)<span class="keyword">ENGINE</span>=<span class="keyword">INNODB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建表后为其删除主键</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> <span class="keyword">test</span> <span class="keyword">drop</span> <span class="keyword">index</span> name_index;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建表后为某列添加主键索引</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> <span class="keyword">test</span> <span class="keyword">add</span> <span class="keyword">key</span> name_index(<span class="keyword">name</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 另一种添加索引的方式</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">index</span> index_test_id <span class="keyword">on</span> <span class="keyword">test</span>(<span class="keyword">id</span>);</span><br></pre></td></tr></table></figure>

<h3 id="全文索引"><a href="#全文索引" class="headerlink" title="全文索引"></a>全文索引</h3><blockquote>
<p>全文索引的索引类型为FULLTEXT。全文索引可以在varchar、char、text类型的列上创建</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建表时添加全文索引</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">test</span>(</span><br><span class="line">  <span class="keyword">id</span> <span class="built_in">int</span>,</span><br><span class="line">  <span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">12</span>),</span><br><span class="line">  fulltext <span class="keyword">key</span> name_index(<span class="keyword">name</span>) <span class="keyword">comment</span> <span class="string">'name_index是索引名，name是列名'</span></span><br><span class="line">)<span class="keyword">ENGINE</span>=<span class="keyword">INNODB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建表后为其删除主键</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> <span class="keyword">test</span> <span class="keyword">drop</span> <span class="keyword">index</span> name_index;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建表后为某列添加主键索引</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> <span class="keyword">test</span> <span class="keyword">add</span> fulltext <span class="keyword">key</span> name_index(<span class="keyword">name</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 另一种添加索引的方式</span></span><br><span class="line"><span class="keyword">create</span> fulltext <span class="keyword">index</span> id_test_name <span class="keyword">on</span> <span class="keyword">test</span>(<span class="keyword">name</span>);</span><br></pre></td></tr></table></figure>

<h3 id="组合索引"><a href="#组合索引" class="headerlink" title="组合索引"></a>组合索引</h3><blockquote>
<p>多列值组成一个索引，专门用于组合搜索</p>
</blockquote>
<h2 id="索引效果测试"><a href="#索引效果测试" class="headerlink" title="索引效果测试"></a>索引效果测试</h2><p><strong>1. 创建test表</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">test</span>(</span><br><span class="line">  <span class="keyword">id</span> <span class="built_in">bigint</span>(<span class="number">20</span>) <span class="keyword">unsigned</span> <span class="keyword">not</span> <span class="literal">null</span> auto_increment,</span><br><span class="line">  <span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">default</span> <span class="string">''</span>,</span><br><span class="line">  email <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">  phone <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">default</span> <span class="string">''</span>,</span><br><span class="line">  gender <span class="built_in">int</span>(<span class="number">4</span>) <span class="keyword">unsigned</span> <span class="keyword">default</span> <span class="number">0</span>,</span><br><span class="line">  <span class="keyword">password</span> <span class="built_in">varchar</span>(<span class="number">100</span>) <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">  age <span class="built_in">tinyint</span>(<span class="number">4</span>) <span class="keyword">default</span> <span class="number">0</span>,</span><br><span class="line">  createTime datetime <span class="keyword">default</span> <span class="keyword">current_timestamp</span>,</span><br><span class="line">  updateTime <span class="built_in">timestamp</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="keyword">current_timestamp</span> <span class="keyword">on</span> <span class="keyword">update</span> <span class="keyword">current_timestamp</span>,</span><br><span class="line">  primary <span class="keyword">key</span> (<span class="keyword">id</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">INNODB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br></pre></td></tr></table></figure>

<p><strong>2. 编写插入100万条数据的函数</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">DELIMITER $$ <span class="comment">-- 写函数前必须要写，标志</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">function</span> mock_data()</span><br><span class="line"><span class="keyword">returns</span> <span class="built_in">int</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">declare</span> <span class="keyword">num</span> <span class="built_in">int</span> <span class="keyword">default</span> <span class="number">1000000</span>;</span><br><span class="line">  <span class="keyword">declare</span> i <span class="built_in">int</span> <span class="keyword">default</span> <span class="number">0</span>;</span><br><span class="line">  while i&lt;num do</span><br><span class="line">    <span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">test</span>(<span class="keyword">name</span>,email,phone,gender,<span class="keyword">password</span>,age)</span><br><span class="line">      <span class="keyword">values</span>(<span class="keyword">concat</span>(<span class="string">'用户'</span>,i),<span class="string">'1220296312@qq.com'</span>,<span class="keyword">concat</span>(<span class="number">18</span>,</span><br><span class="line">      <span class="keyword">floor</span>(<span class="keyword">rand</span>()*(<span class="number">999999999</span><span class="number">-100000000</span>)+<span class="number">100000000</span>)),</span><br><span class="line">      <span class="keyword">floor</span>(<span class="keyword">rand</span>()*<span class="number">2</span>),<span class="keyword">uuid</span>(),<span class="keyword">floor</span>(<span class="keyword">rand</span>()*<span class="number">100</span>));</span><br><span class="line">    <span class="keyword">set</span> i = i + <span class="number">1</span>;          </span><br><span class="line">  <span class="keyword">end</span> <span class="keyword">while</span>;</span><br><span class="line">  return i;</span><br><span class="line"><span class="keyword">end</span> $$</span><br><span class="line">DELIMITER;</span><br></pre></td></tr></table></figure>

<p><strong>3. 执行函数插入100万条数据</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> mock_data();</span><br></pre></td></tr></table></figure>

<p><strong>4. 测试未添加索引时的查询</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">test</span> <span class="keyword">where</span> <span class="keyword">name</span> = <span class="string">'用户9999'</span>;</span><br></pre></td></tr></table></figure>

<p><img src="/2020/09/10/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AF%A6%E8%A7%A3/2.png" alt></p>
<p><strong>5. 创建索引后再测试相同的查询</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 为test的name字段添加索引</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">index</span> id_test_name <span class="keyword">on</span> <span class="keyword">test</span>(<span class="keyword">name</span>);</span><br><span class="line"><span class="comment">-- 搜索</span></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">test</span> <span class="keyword">where</span> <span class="keyword">name</span> = <span class="string">'用户9999'</span>;</span><br></pre></td></tr></table></figure>

<p><img src="/2020/09/10/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AF%A6%E8%A7%A3/3.png" alt></p>
<h1 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h1><h2 id="事务概述"><a href="#事务概述" class="headerlink" title="事务概述"></a>事务概述</h2><p>如果一个包含多个步骤的事务操作，被事务管理，那么这些操作要么同时成功，要么同时失败。</p>
<h2 id="事务的自动提交和手动提交"><a href="#事务的自动提交和手动提交" class="headerlink" title="事务的自动提交和手动提交"></a>事务的自动提交和手动提交</h2><ul>
<li>MySQL默认是自动提交<ul>
<li>select @@autocommit; – 1代表自动提交，0代表手动提交</li>
<li>set @@autocommit=1; – 设置提交方式</li>
</ul>
</li>
<li>操作方式<ol>
<li>开启事务：start transaction;</li>
<li>成功则提交：commit;</li>
<li>失败则回滚：rollback;</li>
</ol>
</li>
</ul>
<h2 id="事务的四大特征"><a href="#事务的四大特征" class="headerlink" title="事务的四大特征"></a>事务的四大特征</h2><ol>
<li>原子性(Atomicity)：一个事务的操作要么全部执行成功，要么全部回滚；</li>
<li>持久性(Consistency)：事务提交成功后或回滚后其结果会持久化保存在数据库中，即使电脑断电也不会消失；</li>
<li>隔离性(Isolation)：事务之间不能相互影响；</li>
<li>一致性(Durability)：事务执行前后，数据库中数据总量具有一致性</li>
</ol>
<h2 id="事务的隔离级别"><a href="#事务的隔离级别" class="headerlink" title="事务的隔离级别"></a>事务的隔离级别</h2><p><strong>问题类型</strong></p>
<ul>
<li>脏读：一个事务读取到另一个事务被回滚的数据；</li>
<li>不可重复读（虚读）：在同一个事务中，两次读取到的数据不一样；</li>
<li>幻读：一个事务操作数据表中所有记录，另一个事务添加了一条数据，则第一个事务查询不到自己的修改</li>
</ul>
<p><strong>隔离级别</strong></p>
<ol>
<li>read uncommitted：未提交读</li>
</ol>
<ul>
<li>一个事务可以读取到另一个事务未提交的更改</li>
<li>可能引起<code>脏读</code>，<code>不可重复读</code>、<code>幻读</code></li>
</ul>
<ol start="2">
<li>read commmitted：已提交读</li>
</ol>
<ul>
<li>一个事务只能读取到另一个事务已提交的结果</li>
<li>解决了<code>脏读</code>问题，但仍会产生<code>不可重复读问题</code>、<code>幻读</code></li>
<li>Orcal默认的隔离界别</li>
</ul>
<ol>
<li>repeatable read：可重复读</li>
</ol>
<ul>
<li>在一个事务中两次查询同一语句结果是一样的</li>
<li>解决了<code>不可重复读问题</code>，但仍会产生<code>幻读</code></li>
<li>MySQL默认的隔离级别</li>
</ul>
<ol start="4">
<li>serializable：串行化</li>
</ol>
<ul>
<li>可以解决所有问题，因为一个事务时会将这个表锁起来</li>
</ul>
<p><strong>设置隔离级别的方式</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select @@tx_isolation; -- 查询数据库隔离级别</span><br><span class="line">set global transaction isolation level [级别字符串]; -- 设置数据库隔离级别</span><br><span class="line">set tx_isolation&#x3D;[级别字符串]; -- 设置数据库隔离级别</span><br></pre></td></tr></table></figure>

<h2 id="InnoDB锁机制"><a href="#InnoDB锁机制" class="headerlink" title="InnoDB锁机制"></a>InnoDB锁机制</h2><h3 id="行锁与表锁"><a href="#行锁与表锁" class="headerlink" title="行锁与表锁"></a>行锁与表锁</h3><p>待补充….</p>
<h3 id="锁分类"><a href="#锁分类" class="headerlink" title="锁分类"></a>锁分类</h3><ol>
<li>共享锁</li>
</ol>
<ul>
<li>又称S锁，读锁</li>
<li>当一个事务为一个对象加上S锁后，在锁释放之前其他事务都不能够再对其加写锁或对其进行修改<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select ... lock in share mode; -- 加共享锁</span><br></pre></td></tr></table></figure>
</li>
</ul>
<ol start="2">
<li>排他锁：一个事务对某个表加上排他锁后，其他事务不能对这个表做任何操作； </li>
</ol>
<ul>
<li>又称X锁，写锁</li>
<li>当一个事务为一个对象加上X锁后，在锁释放之前其他事务都不能够对其进行任何操作<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select ... for update; -- 加排他锁</span><br></pre></td></tr></table></figure>
</li>
</ul>
<ol start="3">
<li><p>意向共享锁<br>事务想要在获得表中某些记录的共享锁，需要在表上先加意向共享锁。</p>
</li>
<li><p>意向排他锁<br>事务想要在获得表中某些记录的互斥锁，需要在表上先加意向互斥锁。</p>
</li>
<li><p>自增锁</p>
</li>
</ol>
<ol start="6">
<li>临键锁<br>临键锁，作用于非唯一索引上，是记录锁与间隙锁的组合<br><img src="/2020/09/10/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AF%A6%E8%A7%A3/near_key.jpg" alt></li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">UPDATE table SET name &#x3D; &#39;javaHuang&#39; WHERE age &#x3D; 4;</span><br><span class="line">SELECT * FROM table WHERE age &#x3D; 4 FOR UPDATE;</span><br><span class="line">这两个语句都会锁定（2,4]，(4,7)这两个区间。</span><br><span class="line">即， InnoDB 会获取该记录行的 临键锁 ，并同时获取该记录行下一个区间的间隙锁。</span><br></pre></td></tr></table></figure>

<ol start="7">
<li>间隙锁</li>
</ol>
<ul>
<li>作用于非唯一索引上，主要目的，就是为了防止其他事务在间隔中插入数据，以导致“不可重复读”；</li>
<li>如果把事务的隔离级别降级为读提交(Read Committed, RC)，间隙锁则会自动失效<br><img src="/2020/09/10/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AF%A6%E8%A7%A3/next_key.jpg" alt></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT * FROM table WHERE id &#x3D; 8 FOR UPDATE;</span><br><span class="line">----此时，（7,11）就会被锁定</span><br><span class="line">SELECT * FROM table WHERE id BETWEN 2 AND 5 FOR UPDATE;</span><br><span class="line">----此时，（1,4）和（4,7）就会被锁定</span><br></pre></td></tr></table></figure>

<ol start="8">
<li>记录锁<br>记录锁，它封锁索引记录，作用于唯一索引上<br><img src="/2020/09/10/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AF%A6%E8%A7%A3/record_key.jpg" alt></li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * from t where id&#x3D;4 for update;</span><br><span class="line">它会在id&#x3D;4的索引记录上加锁，以阻止其他事务插入，更新，删除id&#x3D;1的这一行。</span><br><span class="line">需要说明的是：</span><br><span class="line">select * from t where id&#x3D;4;</span><br><span class="line">则是快照读(SnapShot Read)，它并不加锁，不影响其他事务操作该数据。</span><br></pre></td></tr></table></figure>


<h1 id="阅读材料"><a href="#阅读材料" class="headerlink" title="阅读材料"></a>阅读材料</h1><ol>
<li><a href="https://blog.codinglabs.org/articles/theory-of-mysql-index.html" target="_blank" rel="noopener">MySQL索引背后的数据结构</a></li>
</ol>
]]></content>
      <categories>
        <category>数据库基础</category>
      </categories>
      <tags>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>最朴素的Windows窗口程序</title>
    <url>/2020/06/28/%E6%9C%80%E6%9C%B4%E7%B4%A0%E7%9A%84Windows%E7%AA%97%E5%8F%A3%E7%A8%8B%E5%BA%8F/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote class="blockquote-center">
<p>一个基于Visual Studio 2017的Windows窗口程序 </p>

</blockquote>
<blockquote>
<p>无装饰，超朴素，除了流程一无所有</p>
</blockquote>
<a id="more"></a>

<h1 id="1-新建项目"><a href="#1-新建项目" class="headerlink" title="1 新建项目"></a>1 新建项目</h1><blockquote>
<p>在Visual Studio 2017中新建一个Windows窗口程序</p>
</blockquote>
<ol start="0">
<li><p>新建一个解决方案</p>
</li>
<li><p>解决方案处右键–》添加–》项目，打开新建项目向导</p>
</li>
<li><p>选择<code>Visual C++</code>/<code>Windows桌面</code>下的Windows桌面向导<br><img src="/2020/06/28/%E6%9C%80%E6%9C%B4%E7%B4%A0%E7%9A%84Windows%E7%AA%97%E5%8F%A3%E7%A8%8B%E5%BA%8F/1.jpg" alt></p>
</li>
<li><p>在弹出窗口中选择<code>桌面应用程序</code>，并勾选<code>空项目</code><br><img src="/2020/06/28/%E6%9C%80%E6%9C%B4%E7%B4%A0%E7%9A%84Windows%E7%AA%97%E5%8F%A3%E7%A8%8B%E5%BA%8F/2.jpg" alt></p>
</li>
<li><p>在源文件夹下新建C++源文件simpleWinApp.cpp</p>
</li>
</ol>
<h1 id="2-编写Windows窗口程序"><a href="#2-编写Windows窗口程序" class="headerlink" title="2 编写Windows窗口程序"></a>2 编写Windows窗口程序</h1><h2 id="头文件"><a href="#头文件" class="headerlink" title="头文件"></a>头文件</h2><p><code>#include &lt;Windows.h&gt;</code></p>
<h2 id="程序结构"><a href="#程序结构" class="headerlink" title="程序结构"></a>程序结构</h2><h3 id="函数组成"><a href="#函数组成" class="headerlink" title="函数组成"></a>函数组成</h3><p><strong>1. 入口函数</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int _stdcall _tWinMain ( HINSTANCE hInstance,</span><br><span class="line">                         HINSTANCE hPrevInstance,</span><br><span class="line">						 PTSTR szCmdLine, </span><br><span class="line">                         int iCmdShow )</span><br></pre></td></tr></table></figure>
<ul>
<li>hInstance：实例句柄。当可执行文件加载到内存中时，操作系统使用该值来标识该可执行文件</li>
<li>hPrevInstance：没有任何意义。它曾在16位Windows中使用，但现在始终为零。</li>
<li>pCmdLine：作为Unicode字符串包含命令行参数。</li>
<li>nCmdShow：是一个标志，指示是否将主应用程序窗口最小化，最大化或正常显示。</li>
<li>返回值：操作系统不使用该返回值，但是可以使用该返回值将状态代码传送给您编写的其他程序。</li>
</ul>
<p><strong>2. 窗口过程</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 处理窗口消息</span><br><span class="line">LRESULT CALLBACK WndProc (HWND hwnd,        &#x2F;&#x2F; 窗口句柄</span><br><span class="line">                          UINT message,     &#x2F;&#x2F; 消息类型</span><br><span class="line">                          WPARAM wParam,    &#x2F;&#x2F; 第一个消息参数</span><br><span class="line">                          LPARAM lParam)    &#x2F;&#x2F; 第二个消息参数</span><br></pre></td></tr></table></figure>

<p><strong>宏定义和函数调用方式扫盲</strong></p>
<ol>
<li><code>__stdcall</code> 是 Standard Call 的缩写，是 C++ 的标准调用方式：所有参数从右到左依次入栈，如果是调用类成员的话，最后一个入栈的是 this 指针。</li>
<li><code>#define CALLBACK    __stdcall</code></li>
<li><code>LRESULT</code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">typedef LONG_PTR    LRESULT;</span><br><span class="line">typedef _W64 long LONG_PTR, *PLONG_PTR; &#x2F;&#x2F; _W64在VS2013后就取消了</span><br></pre></td></tr></table></figure></li>
<li><code>WPARAM</code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">typedef UINT_PTR    WPARAM;</span><br><span class="line">typedef _W64 unsigned int UINT_PTR, *PUINT_PTR;</span><br></pre></td></tr></table></figure></li>
<li><code>LPARAM</code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">typedef LONG_PTR    LPARAM;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="入口函数"><a href="#入口函数" class="headerlink" title="入口函数"></a>入口函数</h3><blockquote>
<p>_tWinMain</p>
</blockquote>
<h4 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int _stdcall _tWinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance,</span><br><span class="line">	PTSTR szCmdLine, int iCmdShow)</span><br><span class="line">&#123;</span><br><span class="line">	&#x2F;&#x2F;定义窗口类</span><br><span class="line">	WNDCLASSEX wndClassEx;</span><br><span class="line">	wndClassEx.cbSize &#x3D; sizeof(WNDCLASSEX);</span><br><span class="line">	wndClassEx.style &#x3D; CS_HREDRAW | CS_VREDRAW;</span><br><span class="line">	wndClassEx.lpfnWndProc &#x3D; WndProc;</span><br><span class="line">	wndClassEx.cbClsExtra &#x3D; 0;</span><br><span class="line">	wndClassEx.cbWndExtra &#x3D; 0;</span><br><span class="line">	wndClassEx.hInstance &#x3D; hInstance;</span><br><span class="line">	wndClassEx.hIcon &#x3D; LoadIcon(NULL, IDI_APPLICATION);</span><br><span class="line">	wndClassEx.hCursor &#x3D; LoadCursor(NULL, IDC_ARROW);</span><br><span class="line">	wndClassEx.hbrBackground &#x3D; (HBRUSH)GetStockObject(WHITE_BRUSH);</span><br><span class="line">	wndClassEx.lpszMenuName &#x3D; NULL;</span><br><span class="line">	wndClassEx.lpszClassName &#x3D; L&quot;SimWinClass&quot;;</span><br><span class="line">	wndClassEx.hIconSm &#x3D; NULL;</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F;注册窗口类</span><br><span class="line">	if (!RegisterClassEx(&amp;wndClassEx))</span><br><span class="line">	&#123;</span><br><span class="line">		MessageBox(NULL, L&quot;注册窗口类失败!&quot;, L&quot;SimpleWinApp&quot;, 0);</span><br><span class="line">		return 0;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F;创建窗口</span><br><span class="line">	HWND hwnd &#x3D; NULL;</span><br><span class="line">	hwnd &#x3D; CreateWindowEx(NULL, &#x2F;&#x2F;窗口扩展风格</span><br><span class="line">		L&quot;SimWinClass&quot;,          &#x2F;&#x2F;窗口类名称</span><br><span class="line">		L&quot;SimpleWinApp&quot;,         &#x2F;&#x2F;窗口标题</span><br><span class="line">		WS_OVERLAPPEDWINDOW,     &#x2F;&#x2F;窗口风格</span><br><span class="line">		CW_USEDEFAULT,           &#x2F;&#x2F;窗口初始X位置</span><br><span class="line">		CW_USEDEFAULT,           &#x2F;&#x2F;窗口初始Y位置</span><br><span class="line">		CW_USEDEFAULT,           &#x2F;&#x2F;窗口初始宽度</span><br><span class="line">		CW_USEDEFAULT,           &#x2F;&#x2F;窗口初始高度</span><br><span class="line">		NULL,                    &#x2F;&#x2F;父窗口句柄</span><br><span class="line">		NULL,                    &#x2F;&#x2F;窗口菜单句柄</span><br><span class="line">		hInstance,               &#x2F;&#x2F;程序实例句柄</span><br><span class="line">		NULL);                  &#x2F;&#x2F; 创建参数</span><br><span class="line"></span><br><span class="line">	if (hwnd &#x3D;&#x3D; NULL)</span><br><span class="line">	&#123;</span><br><span class="line">		MessageBox(NULL, L&quot;创建窗口失败!&quot;, L&quot;SimpleWinApp&quot;, 0);</span><br><span class="line">		return 0;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F;显示窗口</span><br><span class="line">	ShowWindow(hwnd, iCmdShow);</span><br><span class="line">	UpdateWindow(hwnd);</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F;消息循环</span><br><span class="line">	MSG  msg;</span><br><span class="line">	while (GetMessage(&amp;msg, NULL, 0, 0))</span><br><span class="line">	&#123;</span><br><span class="line">		TranslateMessage(&amp;msg);</span><br><span class="line">		DispatchMessage(&amp;msg);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F;另外一种消息循环</span><br><span class="line">	&#x2F;**</span><br><span class="line">	MSG  msg;</span><br><span class="line">	while(TRUE)</span><br><span class="line">	&#123;</span><br><span class="line">		if(PeekMessage(&amp;msg, NULL, 0, 0, PM_REMOVE))</span><br><span class="line">		&#123;</span><br><span class="line">			if(msg.message &#x3D;&#x3D; WM_QUIT)</span><br><span class="line">				break;</span><br><span class="line"></span><br><span class="line">			TranslateMessage( &amp;msg );</span><br><span class="line">			DispatchMessage( &amp;msg );</span><br><span class="line">		&#125;</span><br><span class="line">		else</span><br><span class="line">		&#123;</span><br><span class="line">			&#x2F;&#x2F;进行其它处理</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	**&#x2F;</span><br><span class="line"></span><br><span class="line">	return msg.wParam;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="相关类定义"><a href="#相关类定义" class="headerlink" title="相关类定义"></a>相关类定义</h4><h5 id="WNDCLASS"><a href="#WNDCLASS" class="headerlink" title="WNDCLASS"></a>WNDCLASS</h5><blockquote>
<p>窗口类</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">typedef struct tagWNDCLASSW &#123;</span><br><span class="line">    UINT        cbSize;         &#x2F;&#x2F; 窗口类所占字节数</span><br><span class="line">    UINT        style;          &#x2F;&#x2F; 指定窗口类型</span><br><span class="line">    WNDPROC     lpfnWndProc;    &#x2F;&#x2F; 指定窗口过程（必须是回调函数）</span><br><span class="line">    int         cbClsExtra;     &#x2F;&#x2F; 预留的额外空间，一般为 0</span><br><span class="line">    int         cbWndExtra;     &#x2F;&#x2F; 预留的额外空间，一般为 0</span><br><span class="line">    HINSTANCE   hInstance;      &#x2F;&#x2F; 应用程序的实例句柄</span><br><span class="line">    HICON       hIcon;          &#x2F;&#x2F; 为所有基于该窗口类的窗口设定一个图标</span><br><span class="line">    HCURSOR     hCursor;        &#x2F;&#x2F; 为所有基于该窗口类的窗口设定一个鼠标指针</span><br><span class="line">    HBRUSH      hbrBackground;  &#x2F;&#x2F; 指定窗口背景色</span><br><span class="line">    LPCWSTR     lpszMenuName;   &#x2F;&#x2F; 指定窗口菜单</span><br><span class="line">    LPCWSTR     lpszClassName;  &#x2F;&#x2F; 指定窗口类名</span><br><span class="line">&#125; WNDCLASSW, *PWNDCLASSW, NEAR *NPWNDCLASSW, FAR *LPWNDCLASSW;</span><br></pre></td></tr></table></figure>

<p><strong>常见style</strong>   </p>
<ul>
<li><code>CS_VREDRAW</code>：移动或者调整窗口的高度（垂直方向）时，重绘整个窗口</li>
<li><code>CS_HREDRAW</code>：移动或者调整窗口的宽度（水平方向）时，重绘整个窗口</li>
</ul>
<p><strong>宏定义扫盲</strong></p>
<ul>
<li><code>typedef unsigned int   UINT;</code></li>
<li><code>typedef LRESULT (CALLBACK* WNDPROC)(HWND, UINT, WPARAM, LPARAM);</code></li>
<li><code>LPCWSTR</code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">typedef _Null_terminated_ CONST WCHAR *LPCWSTR, *PCWSTR;</span><br><span class="line">typedef wchar_t WCHAR;    &#x2F;&#x2F; wc,   16-bit UNICODE character</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="相关函数定义"><a href="#相关函数定义" class="headerlink" title="相关函数定义"></a>相关函数定义</h4><h5 id="CreateWindow"><a href="#CreateWindow" class="headerlink" title="CreateWindow"></a>CreateWindow</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">HWND WINAPI CreateWindow(</span><br><span class="line">  _In_opt_  LPCTSTR lpClassName,    &#x2F;&#x2F; 窗口类名称</span><br><span class="line">  _In_opt_  LPCTSTR lpWindowName,   &#x2F;&#x2F; 窗口标题</span><br><span class="line">  _In_      DWORD dwStyle,          &#x2F;&#x2F; 窗口风格，或称窗口格式</span><br><span class="line">  _In_      int x,                  &#x2F;&#x2F; 初始 x 坐标</span><br><span class="line">  _In_      int y,                  &#x2F;&#x2F; 初始 y 坐标</span><br><span class="line">  _In_      int nWidth,             &#x2F;&#x2F; 初始 x 方向尺寸</span><br><span class="line">  _In_      int nHeight,            &#x2F;&#x2F; 初始 y 方向尺寸</span><br><span class="line">  _In_opt_  HWND hWndParent,        &#x2F;&#x2F; 父窗口句柄</span><br><span class="line">  _In_opt_  HMENU hMenu,            &#x2F;&#x2F; 窗口菜单句柄</span><br><span class="line">  _In_opt_  HINSTANCE hInstance,    &#x2F;&#x2F; 程序实例句柄</span><br><span class="line">  _In_opt_  LPVOID lpParam          &#x2F;&#x2F; 创建参数</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p><strong>返回值</strong></p>
<ol>
<li>如果函数成功，返回值为新窗口的句柄；</li>
<li>如果函数失败，返回值为 NULL。</li>
</ol>
<p><strong>修饰符扫盲</strong>  </p>
<ul>
<li><code>_In_</code> 说明该参数是输入的</li>
<li><code>_opt_</code> 说明该参数是可选参数</li>
</ul>
<p><strong>常见dwStyle风格</strong></p>
<ul>
<li><code>WS_BORDER</code>：创建一个带边框的窗口</li>
<li><code>WS_CAPTION</code>：创建一个有标题框的窗口（包含了 WS_BODER 风格）</li>
<li><code>WS_HSCROLL</code>：创建一个有水平滚动条的窗口</li>
<li><code>WS_VSCROL</code>：创建一个有垂直滚动条的窗口</li>
<li><code>WS_SYSMENU</code>：创建一个在标题条上带有窗口菜单的窗口，必须同时设定 WS_CAPTION 风格</li>
<li><code>WS_OVERLAPPED</code>：产生一个层叠的窗口，一个层叠的窗口有一个标题条和一个边框</li>
<li><code>WS_THICKFRAME</code>：创建一个具有可调边框的窗口，与 WS_SIZEBOX 风格相同</li>
<li><code>WS_MAXIMIZEBOX</code>：创建一个具有最大化按钮的窗口</li>
<li><code>WS_MINIMIZEBOX</code>：创建一个具有最小化按钮的窗口</li>
<li><code>WS_OVERLAPPEDWINDOW</code>：相当于（WS_OVERLAPPED | WS_CAPTION | WS_SYSMENU | WS_THICKFRAME | WS_MINIMIZEBOX | WS_MAXIMIZEBOX），与 WS_TILEDWINDOW 风格相同</li>
</ul>
<h5 id="MessageBox"><a href="#MessageBox" class="headerlink" title="MessageBox"></a>MessageBox</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int WINAPI MessageBox(</span><br><span class="line">        _In_opt_  HWND hWnd,            &#x2F;&#x2F; 该消息框的父窗口句柄(如果为NULL，则没有拥有父窗口)</span><br><span class="line">        _In_opt_  LPCTSTR lpText,       &#x2F;&#x2F; 消息框的内容</span><br><span class="line">        _In_opt_  LPCTSTR lpCaption,    &#x2F;&#x2F; 消息框的标题</span><br><span class="line">        _In_      UINT uType            &#x2F;&#x2F; 指定一个决定对话框的内容和行为的位标志集</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p><strong>返回值</strong>  </p>
<ul>
<li>消息框中返回一个整数值</li>
<li>该值指示用户单击了哪个按钮</li>
</ul>
<table>
<thead>
<tr>
<th>返回值</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>IDOK</td>
<td>用户按下了“确认”按钮</td>
</tr>
<tr>
<td>IDCANCEL</td>
<td>用户按下了“取消”按钮</td>
</tr>
<tr>
<td>IDABORT</td>
<td>用户按下了“中止”按钮</td>
</tr>
<tr>
<td>IDRETRY</td>
<td>用户按下了“重试”按钮</td>
</tr>
<tr>
<td>IDIGNORE</td>
<td>用户按下了“忽略”按钮</td>
</tr>
<tr>
<td>IDYE</td>
<td>用户按下了“是”按钮</td>
</tr>
<tr>
<td>IDNO</td>
<td>用户按下了“否”按钮</td>
</tr>
</tbody></table>
<p><strong>uType参数取值</strong></p>
<table>
<thead>
<tr>
<th>按钮</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>MB_OK</td>
<td>默认值，有一个“确认”按钮在里面</td>
</tr>
<tr>
<td>MB_YESNO</td>
<td>有“是”和“否”两个按钮在里面</td>
</tr>
<tr>
<td>MB_ABORTRETRYIGNORE</td>
<td>有“中止”，“重试”和“跳过”三个按钮在里面</td>
</tr>
<tr>
<td>MB_YESNOCANCEL</td>
<td>有“是”，“否”和“取消”三个按钮在里面</td>
</tr>
<tr>
<td>MB_RETRYCANCEL</td>
<td>有“重试”和“取消”两个按钮在里面</td>
</tr>
<tr>
<td>MB_OKCANCEL</td>
<td>有“确定”和“取消”两个按钮在里面</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>图标</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>MB_ICONWARNING</td>
<td>惊叹号</td>
</tr>
<tr>
<td>MB_ICONINFORMATION</td>
<td>字母i</td>
</tr>
<tr>
<td>MB_ICONQUESTION</td>
<td>问号</td>
</tr>
<tr>
<td>MB_ICONERROR</td>
<td>叉号</td>
</tr>
</tbody></table>
<h5 id="ShowWindow"><a href="#ShowWindow" class="headerlink" title="ShowWindow"></a>ShowWindow</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">BOOL WINAPI ShowWindow(</span><br><span class="line">        _In_  HWND hWnd,        &#x2F;&#x2F; 窗口句柄</span><br><span class="line">        _In_  int nCmdShow      &#x2F;&#x2F; 控制窗口如何显示</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p><strong>返回值</strong></p>
<ul>
<li>如果窗口之前可见，则返回值为非 0</li>
<li>如果窗口之前被隐藏，则返回值为 0</li>
</ul>
<p><strong>使用方式</strong><br>ShowWindow 函数用于设置窗口的显示状态。<br>应用程序第一次调用 ShowWindow 时，应该使用 WinMain 函数的 nCmdshow 参数作为它的 nCmdShow 参数。在随后调用 ShowWindow 函数时，必须使用下列显示方式中的一个给定值，而不是由 WinMain 函数的 nCmdSHow 参数指定的值。</p>
<p><strong>nCmdShow常用参数</strong></p>
<ul>
<li><code>SW_SHOW</code>：在窗口原来的位置以原来的尺寸激活并显示窗口</li>
<li><code>SW_HIDE</code>：隐藏窗口并激活其他窗口</li>
</ul>
<h5 id="UpdateWindow"><a href="#UpdateWindow" class="headerlink" title="UpdateWindow"></a>UpdateWindow</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">BOOL UpdateWindow(</span><br><span class="line">  _In_  HWND hWnd   &#x2F;&#x2F; 指定要更新的窗口的句柄</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p><strong>返回值</strong></p>
<ul>
<li>如果函数调用成功，返回值为非 0</li>
<li>如果函数调用不成功，返回值为 0</li>
</ul>
<p><strong>功能说明</strong></p>
<ul>
<li>如果窗口更新的区域不为空，UpdateWindow 函数通过发送一个 WM_PAINT 消息来更新指定窗口的客户区</li>
<li>如果更新区域为空，则不发送消息</li>
</ul>
<h5 id="GetMessage"><a href="#GetMessage" class="headerlink" title="GetMessage"></a>GetMessage</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">BOOL WINAPI GetMessage(</span><br><span class="line">  _Out_     LPMSG lpMsg,            &#x2F;&#x2F; 指向 MSG 结构的指针，用于存放获取到的消息</span><br><span class="line">  _In_opt_  HWND hWnd,              &#x2F;&#x2F; 需要获取消息的窗口的句柄</span><br><span class="line">  _In_      UINT wMsgFilterMin,     &#x2F;&#x2F; 指定被可以被获取的消息值的最小整数</span><br><span class="line">  _In_      UINT wMsgFilterMax      &#x2F;&#x2F; 指定被可以被获取的消息值的最大整数</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p><strong>返回值</strong></p>
<ul>
<li>如果函数取得 WM_QUIT 之外的其他消息，返回值是 true</li>
<li>如果函数取得 WM_QUIT 消息，返回值是 false</li>
</ul>
<p><strong>功能说明</strong></p>
<ul>
<li>GetMessage 函数的作用是从当前线程的消息队列里获取一个消息并填入 MSG 结构 中</li>
<li>该函数只能获取调用线程的消息，不能获得其他线程的消息。成功获取消息后，线程将从消息队列中删除该消息</li>
<li>如果消息队列为空，函数会一直等待直到有消息到来才有返回值</li>
</ul>
<p><strong>参数说明</strong></p>
<ol>
<li><code>hWnd</code><ul>
<li>值不为NULL，指向的窗口必须属于当前线程</li>
<li>其值是 NULL 时，将获取所有的当前线程的窗口消息和线程消息</li>
<li>当其值是 -1 时，只获取当前线程消息</li>
</ul>
</li>
<li><code>wMsgFilterMin</code> 和 <code>wMsgFilterMax</code> 参数限定消息获取的范围，如果二者都为 0，则消息获取的范围为所有消息</li>
</ol>
<h5 id="PeekMessage"><a href="#PeekMessage" class="headerlink" title="PeekMessage"></a>PeekMessage</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">BOOL WINAPI PeekMessage(</span><br><span class="line">  _Out_     LPMSG lpMsg,            &#x2F;&#x2F; 指向 MSG 结构的指针，用于存放获取到的消息</span><br><span class="line">  _In_opt_  HWND hWnd,              &#x2F;&#x2F; 需要获取消息的窗口的句柄</span><br><span class="line">  _In_      UINT wMsgFilterMin,     &#x2F;&#x2F; 指定被可以被获取的消息值的最小整数</span><br><span class="line">  _In_      UINT wMsgFilterMax      &#x2F;&#x2F; 指定被可以被获取的消息值的最大整数</span><br><span class="line">  _In_     UINT  wRemoveMsg         &#x2F;&#x2F; 指定消息如何被处理</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p><strong>返回值</strong></p>
<ul>
<li>如果获取到有效的消息，返回值是 true；</li>
<li>如果获取不到消息，返回值是 false</li>
</ul>
<p><strong>与GetMessage的区别</strong></p>
<ul>
<li>使用 GetMessage 函数，如果消息队列为空，函数会一直等待直到有消息到来才有返回值</li>
<li>而 PeekMessage 函数会立即返回结果</li>
</ul>
<p><strong>wRemoveMsg取值</strong></p>
<ul>
<li><code>PM_NOREMOVE</code>：消息被获取后不从消息队列中删除</li>
<li><code>PM_REMOVE</code>：消息被获取后并从消息队列中删除</li>
<li><code>PM_NOYIELD</code>：防止系统释放任何正在等待被调用的线程</li>
<li><code>PM_QS_INPUT</code>：处理鼠标和键盘消息</li>
<li><code>PM_QS_PAINT</code>：处理绘图消息</li>
<li><code>PM_QS_POSTMESSAGE</code>：处理所有 posted 的消息，包括计时器和快捷键消息</li>
<li><code>PM_QS_SENDMESSAGE</code>：处理所有 send 的消息</li>
</ul>
<h5 id="TranslateMessage"><a href="#TranslateMessage" class="headerlink" title="TranslateMessage"></a>TranslateMessage</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">BOOL WINAPI TranslateMessage(</span><br><span class="line">  _In_  const MSG *lpMsg        &#x2F;&#x2F; 指向含有消息的 MSG 结构的指针</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p><strong>函数功能</strong></p>
<ul>
<li>将虚拟键消息转换为字符消息</li>
<li>字符消息被寄送到当前线程的消息队列里</li>
<li>当下一次线程调用函数 GetMessage 或 PeekMessage 时被读出</li>
</ul>
<p><strong>返回值</strong></p>
<ol>
<li>如果消息被转换（字符消息被寄送到当前线程的消息队列里）则返回非零值；</li>
<li>如果消息是 WM_KEYDOWN，WM_KEYUP WM_SYSKEYDOWN 或 WM_SYSKEYUP，返回非零值，不考虑转换；</li>
<li>如果消息没被转换（字符消息没被寄送到调用线程的消息队列里）则返回值是零。</li>
</ol>
<h5 id="DispatchMessage"><a href="#DispatchMessage" class="headerlink" title="DispatchMessage"></a>DispatchMessage</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">LRESULT WINAPI DispatchMessage(</span><br><span class="line">  _In_  const MSG *lpmsg        &#x2F;&#x2F; 指向含有消息的 MSG结构 的指针</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p><strong>函数功能</strong><br>分派一个消息给窗口过程（回调函数）</p>
<p><strong>返回值</strong><br>返回值是窗口过程返回的值</p>
<h3 id="窗口过程"><a href="#窗口过程" class="headerlink" title="窗口过程"></a>窗口过程</h3><h4 id="源码-1"><a href="#源码-1" class="headerlink" title="源码"></a>源码</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">LRESULT CALLBACK WndProc(HWND hwnd, UINT message, WPARAM wParam, LPARAM lParam)</span><br><span class="line">&#123;</span><br><span class="line">	switch (message)</span><br><span class="line">	&#123;</span><br><span class="line">	case WM_CREATE:</span><br><span class="line">		break;</span><br><span class="line"></span><br><span class="line">	case WM_KEYDOWN:</span><br><span class="line">		if (wParam &#x3D;&#x3D; VK_ESCAPE)</span><br><span class="line">			PostQuitMessage(0);</span><br><span class="line">		break;</span><br><span class="line"></span><br><span class="line">	case WM_DESTROY:</span><br><span class="line">		PostQuitMessage(0);</span><br><span class="line">		break;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	return DefWindowProc(hwnd, message, wParam, lParam);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="相关函数"><a href="#相关函数" class="headerlink" title="相关函数"></a>相关函数</h4><h5 id="PostQuitMessage"><a href="#PostQuitMessage" class="headerlink" title="PostQuitMessage"></a>PostQuitMessage</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">VOID WINAPI PostQuitMessage(</span><br><span class="line">  _In_  int nExitCode       \\ 指定应用程序的退出代码，此值被用作 WM_QUIT 消息的 wParam 参数</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p><strong>函数功能</strong></p>
<ul>
<li>向系统表明有个线程提出终止（退出）请求</li>
<li>实际上是发送一个 WM_QUIT 消息给线程的消息队列并立即返回</li>
</ul>
<h5 id="DefWindowProc"><a href="#DefWindowProc" class="headerlink" title="DefWindowProc"></a>DefWindowProc</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">LRESULT WINAPI DefWindowProc(</span><br><span class="line">  _In_  HWND hWnd,      \\ 接收消息的窗口句柄</span><br><span class="line">  _In_  UINT Msg,       \\ 消息的标识符</span><br><span class="line">  _In_  WPARAM wParam,  \\ 指定消息的附加消息</span><br><span class="line">  _In_  LPARAM lParam   \\ 指定消息的附加消息</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p><strong>返回值</strong><br>消息处理结果</p>
<p><strong>函数功能</strong></p>
<ul>
<li>调用默认的窗口过程来处理我们不感兴趣的任何消息</li>
<li>该函数是为了确保每个消息都被处理</li>
</ul>
<h4 id="Windows常用消息和含义"><a href="#Windows常用消息和含义" class="headerlink" title="Windows常用消息和含义"></a>Windows常用消息和含义</h4><p><a href="https://fishc.com.cn/thread-47244-1-1.html" target="_blank" rel="noopener">Windows常用消息和含义</a></p>
<h1 id="3-完整代码"><a href="#3-完整代码" class="headerlink" title="3 完整代码"></a>3 完整代码</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;Windows.h&gt;</span><br><span class="line">#include &lt;tchar.h&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;窗口过程声明</span><br><span class="line">LRESULT _stdcall WndProc(HWND, UINT, WPARAM, LPARAM);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;-----------------------------------------------------------------------------</span><br><span class="line">&#x2F;&#x2F; Desc: 入口函数</span><br><span class="line">&#x2F;&#x2F;-----------------------------------------------------------------------------</span><br><span class="line">int _stdcall _tWinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance,</span><br><span class="line">	PTSTR szCmdLine, int iCmdShow)</span><br><span class="line">&#123;</span><br><span class="line">	&#x2F;&#x2F;定义窗口类</span><br><span class="line">	WNDCLASSEX wndClassEx;</span><br><span class="line">	wndClassEx.cbSize &#x3D; sizeof(WNDCLASSEX);</span><br><span class="line">	wndClassEx.style &#x3D; CS_HREDRAW | CS_VREDRAW;</span><br><span class="line">	wndClassEx.lpfnWndProc &#x3D; WndProc;</span><br><span class="line">	wndClassEx.cbClsExtra &#x3D; 0;</span><br><span class="line">	wndClassEx.cbWndExtra &#x3D; 0;</span><br><span class="line">	wndClassEx.hInstance &#x3D; hInstance;</span><br><span class="line">	wndClassEx.hIcon &#x3D; LoadIcon(NULL, IDI_APPLICATION);</span><br><span class="line">	wndClassEx.hCursor &#x3D; LoadCursor(NULL, IDC_ARROW);</span><br><span class="line">	wndClassEx.hbrBackground &#x3D; (HBRUSH)GetStockObject(WHITE_BRUSH);</span><br><span class="line">	wndClassEx.lpszMenuName &#x3D; NULL;</span><br><span class="line">	wndClassEx.lpszClassName &#x3D; L&quot;SimWinClass&quot;;</span><br><span class="line">	wndClassEx.hIconSm &#x3D; NULL;</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F;注册窗口类</span><br><span class="line">	if (!RegisterClassEx(&amp;wndClassEx))</span><br><span class="line">	&#123;</span><br><span class="line">		MessageBox(NULL, L&quot;注册窗口类失败!&quot;, L&quot;SimpleWinApp&quot;, 0);</span><br><span class="line">		return 0;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F;创建窗口</span><br><span class="line">	HWND hwnd &#x3D; NULL;</span><br><span class="line">	hwnd &#x3D; CreateWindowEx(NULL, &#x2F;&#x2F;窗口扩展风格</span><br><span class="line">		L&quot;SimWinClass&quot;,          &#x2F;&#x2F;窗口类名称</span><br><span class="line">		L&quot;SimpleWinApp&quot;,         &#x2F;&#x2F;窗口标题</span><br><span class="line">		WS_OVERLAPPEDWINDOW,     &#x2F;&#x2F;窗口风格</span><br><span class="line">		CW_USEDEFAULT,           &#x2F;&#x2F;窗口初始X位置</span><br><span class="line">		CW_USEDEFAULT,           &#x2F;&#x2F;窗口初始Y位置</span><br><span class="line">		CW_USEDEFAULT,           &#x2F;&#x2F;窗口初始宽度</span><br><span class="line">		CW_USEDEFAULT,           &#x2F;&#x2F;窗口初始高度</span><br><span class="line">		NULL,                    &#x2F;&#x2F;父窗口句柄</span><br><span class="line">		NULL,                    &#x2F;&#x2F;窗口菜单句柄</span><br><span class="line">		hInstance,               &#x2F;&#x2F;程序实例句柄</span><br><span class="line">		NULL);                  &#x2F;&#x2F; 创建参数</span><br><span class="line"></span><br><span class="line">	if (hwnd &#x3D;&#x3D; NULL)</span><br><span class="line">	&#123;</span><br><span class="line">		MessageBox(NULL, L&quot;创建窗口失败!&quot;, L&quot;SimpleWinApp&quot;, 0);</span><br><span class="line">		return 0;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F;显示窗口</span><br><span class="line">	ShowWindow(hwnd, iCmdShow);</span><br><span class="line">	UpdateWindow(hwnd);</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F;消息循环</span><br><span class="line">	MSG  msg;</span><br><span class="line">	while (GetMessage(&amp;msg, NULL, 0, 0))</span><br><span class="line">	&#123;</span><br><span class="line">		TranslateMessage(&amp;msg);</span><br><span class="line">		DispatchMessage(&amp;msg);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F;另外一种消息循环</span><br><span class="line">	&#x2F;**</span><br><span class="line">	MSG  msg;</span><br><span class="line">	while(TRUE)</span><br><span class="line">	&#123;</span><br><span class="line">		if(PeekMessage(&amp;msg, NULL, 0, 0, PM_REMOVE))</span><br><span class="line">		&#123;</span><br><span class="line">			if(msg.message &#x3D;&#x3D; WM_QUIT)</span><br><span class="line">				break;</span><br><span class="line"></span><br><span class="line">			TranslateMessage( &amp;msg );</span><br><span class="line">			DispatchMessage( &amp;msg );</span><br><span class="line">		&#125;</span><br><span class="line">		else</span><br><span class="line">		&#123;</span><br><span class="line">			&#x2F;&#x2F;进行其它处理</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	**&#x2F;</span><br><span class="line"></span><br><span class="line">	return msg.wParam;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;-----------------------------------------------------------------------------</span><br><span class="line">&#x2F;&#x2F; Desc: 窗口过程</span><br><span class="line">&#x2F;&#x2F;-----------------------------------------------------------------------------</span><br><span class="line">LRESULT CALLBACK WndProc(HWND hwnd, UINT message, WPARAM wParam, LPARAM lParam)</span><br><span class="line">&#123;</span><br><span class="line">	switch (message)</span><br><span class="line">	&#123;</span><br><span class="line">	case WM_CREATE:</span><br><span class="line">		break;</span><br><span class="line"></span><br><span class="line">	case WM_KEYDOWN:</span><br><span class="line">		if (wParam &#x3D;&#x3D; VK_ESCAPE)</span><br><span class="line">			PostQuitMessage(0);</span><br><span class="line">		break;</span><br><span class="line"></span><br><span class="line">	case WM_DESTROY:</span><br><span class="line">		PostQuitMessage(0);</span><br><span class="line">		break;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	return DefWindowProc(hwnd, message, wParam, lParam);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="4-运行结果"><a href="#4-运行结果" class="headerlink" title="4 运行结果"></a>4 运行结果</h1><p><img src="/2020/06/28/%E6%9C%80%E6%9C%B4%E7%B4%A0%E7%9A%84Windows%E7%AA%97%E5%8F%A3%E7%A8%8B%E5%BA%8F/3.jpg" alt></p>
]]></content>
      <categories>
        <category>DirectX</category>
      </categories>
      <tags>
        <tag>DirectX</tag>
        <tag>Visual Studio</tag>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>服务器购买和宝塔部署</title>
    <url>/2020/11/15/%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%B4%AD%E4%B9%B0%E5%92%8C%E5%AE%9D%E5%A1%94%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote class="blockquote-center">
<p>^ _ ^ </p>

</blockquote>
<a id="more"></a>

<h1 id="阿里云"><a href="#阿里云" class="headerlink" title="阿里云"></a>阿里云</h1><p>阿里云首页链接：<a href="https://www.aliyun.com/?utm_content=se_1007692031" target="_blank" rel="noopener">https://www.aliyun.com/?utm_content=se_1007692031</a></p>
<h2 id="浏览方式"><a href="#浏览方式" class="headerlink" title="浏览方式"></a>浏览方式</h2><p>浏览首页底端的热门产品</p>
<p><img src="/2020/11/15/%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%B4%AD%E4%B9%B0%E5%92%8C%E5%AE%9D%E5%A1%94%E9%83%A8%E7%BD%B2/1.png" alt="阿里云首页底部"></p>
<h2 id="学生免费领取一个ECS"><a href="#学生免费领取一个ECS" class="headerlink" title="学生免费领取一个ECS"></a>学生免费领取一个ECS</h2><ol>
<li>进入学生机模块</li>
</ol>
<p><img src="/2020/11/15/%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%B4%AD%E4%B9%B0%E5%92%8C%E5%AE%9D%E5%A1%94%E9%83%A8%E7%BD%B2/2.png" alt="学生机"></p>
<ol start="2">
<li>免费领取ECS</li>
</ol>
<p><img src="/2020/11/15/%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%B4%AD%E4%B9%B0%E5%92%8C%E5%AE%9D%E5%A1%94%E9%83%A8%E7%BD%B2/3.png" alt="免费领取ECS"></p>
<ol start="3">
<li>完成测试后领取</li>
</ol>
<p><img src="/2020/11/15/%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%B4%AD%E4%B9%B0%E5%92%8C%E5%AE%9D%E5%A1%94%E9%83%A8%E7%BD%B2/4.png" alt="完成测试后领取"></p>
<h2 id="优惠活动模块"><a href="#优惠活动模块" class="headerlink" title="优惠活动模块"></a>优惠活动模块</h2><p>优惠活动模块网址：<a href="https://www.aliyun.com/minisite/goods?userCode=0phtycgr" target="_blank" rel="noopener">https://www.aliyun.com/minisite/goods?userCode=0phtycgr</a></p>
<p>免费服务器使用额度耗尽后可以去优惠模块购买。</p>
<h1 id="XShell"><a href="#XShell" class="headerlink" title="XShell"></a>XShell</h1><h2 id="下载XShell"><a href="#下载XShell" class="headerlink" title="下载XShell"></a>下载XShell</h2><ol>
<li>进入XShell下载官网：<a href="https://www.netsarang.com/zh/xshell-download/" target="_blank" rel="noopener"><a href="https://www.netsarang.com/zh/xshell-download/" target="_blank" rel="noopener">XShell官网</a></a></li>
</ol>
<ol start="2">
<li>进入免费授权页面</li>
</ol>
<p><img src="/2020/11/15/%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%B4%AD%E4%B9%B0%E5%92%8C%E5%AE%9D%E5%A1%94%E9%83%A8%E7%BD%B2/5.png" alt="进入免费授权页面"></p>
<ol start="3">
<li>填写个人信息</li>
</ol>
<p><img src="/2020/11/15/%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%B4%AD%E4%B9%B0%E5%92%8C%E5%AE%9D%E5%A1%94%E9%83%A8%E7%BD%B2/7.png" alt="填写个人信息"></p>
<ol start="4">
<li>点击邮件中的链接即可下载</li>
</ol>
<p>注意有两封邮件，一封是安装XShell的，一封是安装XFtp的<br><img src="/2020/11/15/%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%B4%AD%E4%B9%B0%E5%92%8C%E5%AE%9D%E5%A1%94%E9%83%A8%E7%BD%B2/18.png" alt="两封邮件"></p>
<p>点击邮件中的链接就可以下载相应的程序了<br><img src="/2020/11/15/%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%B4%AD%E4%B9%B0%E5%92%8C%E5%AE%9D%E5%A1%94%E9%83%A8%E7%BD%B2/19.png" alt="邮件链接"></p>
<h2 id="XShell远程连接远程服务器"><a href="#XShell远程连接远程服务器" class="headerlink" title="XShell远程连接远程服务器"></a>XShell远程连接远程服务器</h2><ol>
<li>打开XShell，新建一个会话</li>
</ol>
<p><img src="/2020/11/15/%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%B4%AD%E4%B9%B0%E5%92%8C%E5%AE%9D%E5%A1%94%E9%83%A8%E7%BD%B2/8.png" alt="新建会话"></p>
<ol start="2">
<li>主机号为云服务器的公网IP</li>
</ol>
<p><img src="/2020/11/15/%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%B4%AD%E4%B9%B0%E5%92%8C%E5%AE%9D%E5%A1%94%E9%83%A8%E7%BD%B2/11.png" alt="主机号配置"></p>
<p><img src="/2020/11/15/%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%B4%AD%E4%B9%B0%E5%92%8C%E5%AE%9D%E5%A1%94%E9%83%A8%E7%BD%B2/12.png" alt="主机号配置"></p>
<ol start="3">
<li>接下来会要求输入用户名和密码。用户名为root，密码在服务器管理端设置</li>
</ol>
<p><img src="/2020/11/15/%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%B4%AD%E4%B9%B0%E5%92%8C%E5%AE%9D%E5%A1%94%E9%83%A8%E7%BD%B2/10.png" alt="用户名和密码"></p>
<h1 id="安装宝塔面板"><a href="#安装宝塔面板" class="headerlink" title="安装宝塔面板"></a>安装宝塔面板</h1><ol>
<li>宝塔网址：<a href="https://www.bt.cn/" target="_blank" rel="noopener">https://www.bt.cn/</a></li>
</ol>
<ol start="2">
<li><p>宝塔linux面板安装教程：<a href="https://www.bt.cn/bbs/thread-19376-1-1.html" target="_blank" rel="noopener">https://www.bt.cn/bbs/thread-19376-1-1.html</a></p>
</li>
<li><p>在按照宝塔前，先将服务器存一份快照</p>
</li>
</ol>
<p><img src="/2020/11/15/%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%B4%AD%E4%B9%B0%E5%92%8C%E5%AE%9D%E5%A1%94%E9%83%A8%E7%BD%B2/13.png" alt="保存快照"></p>
<ol start="4">
<li>CentOS宝塔安装命令</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install -y wget &amp;&amp; wget -O install.sh http:&#x2F;&#x2F;download.bt.cn&#x2F;install&#x2F;install_6.0.sh &amp;&amp; sh install.sh</span><br></pre></td></tr></table></figure>

<p><img src="/2020/11/15/%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%B4%AD%E4%B9%B0%E5%92%8C%E5%AE%9D%E5%A1%94%E9%83%A8%E7%BD%B2/14.png" alt="CentOS安装宝塔"></p>
<ol start="5">
<li>安装成功后可获得宝塔面板的网址</li>
</ol>
<p><img src="/2020/11/15/%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%B4%AD%E4%B9%B0%E5%92%8C%E5%AE%9D%E5%A1%94%E9%83%A8%E7%BD%B2/15.png" alt="宝塔面板网址"></p>
<ol start="6">
<li>宝塔面板</li>
</ol>
<p><img src="/2020/11/15/%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%B4%AD%E4%B9%B0%E5%92%8C%E5%AE%9D%E5%A1%94%E9%83%A8%E7%BD%B2/16.png" alt="宝塔面板"></p>
<ol start="7">
<li>（可选）利用宝塔面板的应用商店<strong>傻瓜式</strong>安装环境</li>
</ol>
<p><img src="/2020/11/15/%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%B4%AD%E4%B9%B0%E5%92%8C%E5%AE%9D%E5%A1%94%E9%83%A8%E7%BD%B2/17.png" alt="傻瓜式环境安装"></p>
<ol start="8">
<li>（可选）利用宝塔面板的安全配置防火墙过滤端口</li>
</ol>
<p><img src="/2020/11/15/%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%B4%AD%E4%B9%B0%E5%92%8C%E5%AE%9D%E5%A1%94%E9%83%A8%E7%BD%B2/20.png" alt="安全面板"></p>
<ol start="9">
<li>（可选）利用Xftp传输文件到远程服务器</li>
</ol>
<p><img src="/2020/11/15/%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%B4%AD%E4%B9%B0%E5%92%8C%E5%AE%9D%E5%A1%94%E9%83%A8%E7%BD%B2/21.png" alt="xftp"></p>
<p><img src="/2020/11/15/%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%B4%AD%E4%B9%B0%E5%92%8C%E5%AE%9D%E5%A1%94%E9%83%A8%E7%BD%B2/22.png" alt="xftp"></p>
<ol start="10">
<li>（可选）通过面板设置更改宝塔面板的一些设置</li>
</ol>
<p>我将用户名和密码更改为自己更容易记的密码了。</p>
]]></content>
      <categories>
        <category>服务器</category>
      </categories>
      <tags>
        <tag>云服务器</tag>
      </tags>
  </entry>
  <entry>
    <title>构造顺序</title>
    <url>/2020/08/22/%E6%9E%84%E9%80%A0%E9%A1%BA%E5%BA%8F/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote class="blockquote-center">
<p>^ _ ^ </p>

</blockquote>
<a id="more"></a>

<h1 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q &amp; A"></a>Q &amp; A</h1><blockquote>
<p><strong>类的实例化顺序，比如父类静态数据，构造函数，字段，子类静态数据，构造函数，字段，当new的时候，他们的执行顺序。</strong></p>
</blockquote>
<ol>
<li>父类静态数据</li>
<li>子类静态数据</li>
<li>父类普通变量</li>
<li>父类构造函数</li>
<li>子类普通变量</li>
<li>子类构造函数</li>
</ol>
<h1 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InitA</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">InitA</span><span class="params">(String host)</span></span>&#123;</span><br><span class="line">		System.out.println(host + <span class="string">":A constructed."</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">B</span><span class="params">(String host)</span> </span>&#123;</span><br><span class="line">		System.out.println(host + <span class="string">":B constructed."</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span></span>&#123;</span><br><span class="line">	<span class="keyword">public</span> InitA a = <span class="keyword">new</span> InitA(<span class="string">"Parent"</span>);</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> B b = <span class="keyword">new</span> B(<span class="string">"Parent"</span>);</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Parent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"Parent constructed."</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">extends</span> <span class="title">Parent</span></span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> InitA a = <span class="keyword">new</span> InitA(<span class="string">"Son"</span>);</span><br><span class="line">	<span class="keyword">public</span> B b = <span class="keyword">new</span> B(<span class="string">"Son"</span>);</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Son</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"Son constructed."</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InitialOrderTest</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Son demo = <span class="keyword">new</span> Son();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java面试</category>
      </categories>
      <tags>
        <tag>Java基础</tag>
        <tag>初始化</tag>
      </tags>
  </entry>
  <entry>
    <title>最短路算法</title>
    <url>/2021/06/17/%E6%9C%80%E7%9F%AD%E8%B7%AF%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote class="blockquote-center">
<p>^ _ ^ </p>

</blockquote>
<a id="more"></a>

<h1 id="最短路问题"><a href="#最短路问题" class="headerlink" title="最短路问题"></a>最短路问题</h1><p>最短路问题（short-path problem）是网络理论解决的典型问题之一。基本内容是：若网络中的每条边都有一个数值（长度、成本、时间等），则找出两节点（通常是源节点和阱节点）之间总权和最小的路径就是最短路问题。</p>
<p>最短路问题可分为<strong>单源最短路</strong>、<strong>全局最短路</strong>和<strong>两点最短路径</strong>三种。<strong>单源最短路</strong>指确定起点或终点的最短路径求解；<strong>全局最短路</strong>求解图中所有点之间的最短路径；<strong>两点最短路径</strong>指确定起点和终点，求两节点之间的最短路径。</p>
<p>最短路问题中比较常用的算法有：</p>
<ol>
<li><strong>Dijkstra算法</strong>：时间复杂度为$O(V^2)$，可用堆进行优化，优化后时间复杂度可降为$O(E + VlogV)$，其中$E$为边数，$V$为结点数。该算法适用于求解<strong>单源最短路问题</strong>。但它只能适用于无负权边的图。</li>
<li><strong>Bellman-Ford算法</strong>：时间复杂度为$O(VE)$。</li>
<li><strong>SPFA算法</strong>：<strong>Bellman-Ford算法</strong>浪费了许多时间做无必要的松弛，可用<strong>SPFA算法</strong>进行优化。<strong>SPFA算法</strong>基于队列进行优化，优化后时间复杂度为$O(kE)$，其中$k$为所有顶点进队的平均次数，可以证明$k$一般小于等于2，由此可见该优化的效果十分显著。</li>
<li><strong>Floyd-Warshall算法</strong>：适用于求解<strong>全局最短路问题</strong>，时间复杂度为$V^3$。该算法可以计算包含负权边的图，但不可含有负环。</li>
<li><strong>搜索算法</strong>：常用的<strong>广度优先搜索（BFS）</strong>和<strong>深度优先搜索（DFS）</strong>可用于解决<strong>两点最短路径问题</strong>，时间复杂度为$O(V)$。</li>
</ol>
<h1 id="图结构"><a href="#图结构" class="headerlink" title="图结构"></a>图结构</h1><p>图算法中<strong>图</strong>的基本表示方法包括<strong>邻接表</strong>和<strong>邻接矩阵</strong>两种。这两种表示法既可用于有向图，也可用于无向图。</p>
<p><img src="/2021/06/17/%E6%9C%80%E7%9F%AD%E8%B7%AF%E7%AE%97%E6%B3%95/1.jpg" alt></p>
<p>对于<strong>稀疏图</strong>（图中边数远小于点个数），用<strong>邻接表</strong>表示能更多的节省空间；而对于需要判断两个顶点之间边的情况，用<strong>邻接矩阵</strong>表示能有更快的访问速度。</p>
<h1 id="Dijkstra算法"><a href="#Dijkstra算法" class="headerlink" title="Dijkstra算法"></a>Dijkstra算法</h1>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>文件&#39;/etc/passwd&#39;介绍</title>
    <url>/2020/12/09/%E6%96%87%E4%BB%B6-etc-passwd-%E4%BB%8B%E7%BB%8D/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote class="blockquote-center">
<p>^ _ ^ </p>

</blockquote>
<a id="more"></a>

<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p><code>/etc/passwd</code>文件存储登录时需要的基本信息。换句话说，它存储用户帐户信息。<br>/etc/passwd是一个纯文本文件。它包含系统帐户的列表，为每个帐户提供一些有用的信息，如用户ID、组ID、主目录、shell等等。<br>/etc/passwd文件应该具有一般读取权限，因为许多命令实用程序使用它来将用户id映射到用户名。但是，对/etc/passwd的写访问必须仅限于超级用户/根帐户。</p>
<h1 id="显示格式"><a href="#显示格式" class="headerlink" title="显示格式"></a>显示格式</h1><p><img src="/2020/12/09/%E6%96%87%E4%BB%B6-etc-passwd-%E4%BB%8B%E7%BB%8D/1.png" alt></p>
<ol>
<li><strong>Username</strong> ：用户名；用于登陆的用户名，长度在1~32个字符之间。</li>
<li><strong>Password</strong>：密码；x字符表示加密的密码存储在/etc/shadow文件中。请注意，您需要使用passwd命令来计算在CLl中输入的密码的哈希值，或者在/etc/shadow文件中存储/更新密码的哈希值。</li>
<li><strong>User ID（UID）</strong>：用户ID；必须为每个用户分配一个用户ID (UID)。UID 0为根帐户保留，UID 1-99为其他预定义帐户保留。系统还为管理和系统帐户/组保留了UID 100-999。</li>
<li><strong>Group ID（GID）</strong>：主组ID(存储在/etc/group文件中)</li>
<li><strong>User ID Info</strong>：用户信息；它允许您添加关于用户的额外信息，如用户的全名、电话号码等。此字段由用户输入。</li>
<li><strong>Home Directory</strong>：主目录；用户登录时将在的目录的绝对路径。如果此目录不存在，则用户主目录变为根目录</li>
<li><strong>Command/Shell</strong>：命令或shell (/bin/bash)的绝对路径。通常，这是一个外壳。请注意，它不必是一个shell。例如，sysadmin可以使用nologin shell，它充当用户帐户的替代shell。如果shell设置为/sbin/nologin，并且用户尝试直接登录到Linux系统，那么/sbin/nologin shell将关闭连接。</li>
</ol>
<h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><h2 id="查看-etc-passwd-文件"><a href="#查看-etc-passwd-文件" class="headerlink" title="查看 /etc/passwd 文件"></a>查看 /etc/passwd 文件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat /etc/passwd</span><br></pre></td></tr></table></figure>

<p><img src="/2020/12/09/%E6%96%87%E4%BB%B6-etc-passwd-%E4%BB%8B%E7%BB%8D/2.png" alt></p>
<h2 id="查看-etc-passwd-文件权限"><a href="#查看-etc-passwd-文件权限" class="headerlink" title="查看 /etc/passwd 文件权限"></a>查看 /etc/passwd 文件权限</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ls -l /etc/passwd</span><br></pre></td></tr></table></figure>

<p><img src="/2020/12/09/%E6%96%87%E4%BB%B6-etc-passwd-%E4%BB%8B%E7%BB%8D/3.png" alt></p>
<h2 id="利用sh脚本查看-etc-passwd"><a href="#利用sh脚本查看-etc-passwd" class="headerlink" title="利用sh脚本查看 /etc/passwd"></a>利用sh脚本查看 /etc/passwd</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># seven fields from /etc/passwd stored in $f1,f2...,$f7</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="keyword">while</span> IFS=: <span class="built_in">read</span> -r f1 f2 f3 f4 f5 f6 f7</span><br><span class="line"><span class="keyword">do</span> </span><br><span class="line"> <span class="built_in">echo</span> <span class="string">"User <span class="variable">$f1</span> use <span class="variable">$f7</span> shell and stores files in <span class="variable">$f6</span> directory."</span></span><br><span class="line"><span class="keyword">done</span> &lt; /etc/passwd</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>注意力模型</title>
    <url>/2022/01/17/%E6%B3%A8%E6%84%8F%E5%8A%9B%E6%A8%A1%E5%9E%8B/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote class="blockquote-center">
<p>^ _ ^ </p>

</blockquote>
<a id="more"></a>

<h1 id="Motivation"><a href="#Motivation" class="headerlink" title="Motivation"></a>Motivation</h1><h2 id="Seq2Seq"><a href="#Seq2Seq" class="headerlink" title="Seq2Seq"></a>Seq2Seq</h2><p><img src="/2022/01/17/%E6%B3%A8%E6%84%8F%E5%8A%9B%E6%A8%A1%E5%9E%8B/seq2seq.png" alt></p>
<p>Above figure show an application which uses <strong>Seq2Seq Model</strong> to realize <strong>Machine Translation</strong>. Seq2Seq model is composed of 2 parts, respectivly <strong>Encoder</strong> and <strong>Decoder</strong> : </p>
<ol>
<li>origin sequence encodes to one coding.</li>
<li>Then decode the coding to the target sequence.</li>
</ol>
<h2 id="RNN-for-Seq2Seq"><a href="#RNN-for-Seq2Seq" class="headerlink" title="RNN for Seq2Seq"></a>RNN for Seq2Seq</h2><p>Besides <strong>Classfication</strong> and <strong>Sequence Labeling</strong>, RNN can also solved <strong>Reading Comprehension</strong> and <strong>Text Generation</strong>, which is corresponded to <strong>Seq2Seq Model</strong>.<br>Seq2Seq based on RNN:</p>
<ol>
<li>Use RNN to encode origin sequence.</li>
<li>Use the last hidden state of encoder RNN as the input, invoking decoder RNN to generate target sequence word by word.    </li>
</ol>
<p>There is a basic hypothesis for Seq2Seq based on RNN: <strong>The last hidden state in the encoder RNN contains all the information of the origin sequence</strong>.<br>Obviously, the hypothesis is unreasonable, especially for long origin sequence.     </p>
<p>To solve the problem, someone proposed <strong>Attention Model</strong>.</p>
<h1 id="Attention-Mechanism"><a href="#Attention-Mechanism" class="headerlink" title="Attention Mechanism"></a>Attention Mechanism</h1><p>The core idea of <strong>Attention Machinism</strong>: When generating a new target word, not noly considering previous time state and already generated word, but also considering which words in the origin sequence is more relevant to the current word need to generate. It guides us put more attention to the words in the source sequence which is more relevant to the current word.</p>
<p><img src="/2022/01/17/%E6%B3%A8%E6%84%8F%E5%8A%9B%E6%A8%A1%E5%9E%8B/attention_seq2seq.png" alt></p>
<p>Mathmatically,  </p>

$$
\begin{matrix}
    \hat{\alpha_s} = attn(h_s, h_{t-1}) \\
    \alpha_s = Softmax(\hat{\alpha})_s
\end{matrix}
$$
    
<ul>
<li>$h_s$: the state of time $s$ in the source sequence.</li>
<li>$h_{t-1}$: the state of previous time in the target sequence.</li>
<li>$attn$: attention calculation formula.</li>
<li>$\hat{\alpha} = [\hat{\alpha}_1, \hat{\alpha}_2, \cdots, \hat{\alpha}_L]$, where $L$ is the length of source sequence.</li>
<li>$Softmax$: Normalize attention score.</li>
</ul>
<p><strong>Attention Calculation Formula</strong><br><img src="/2022/01/17/%E6%B3%A8%E6%84%8F%E5%8A%9B%E6%A8%A1%E5%9E%8B/attention_cal.png" alt></p>
<h1 id="Self-Attention"><a href="#Self-Attention" class="headerlink" title="Self Attention"></a>Self Attention</h1><p>The core idea of <strong>Self-Attention</strong>: Observe its companion, then know its meaning. In other word, the state of one point in the sequence can be calculated by the correlation(attention) between the state at this time and the state at other times.</p>
<p>Specifically,   </p>
<ul>
<li>inputs can be represented by one combination of n vectors: $x_1, x_2, \cdots, x_n$.</li>
<li>outputs can be represented by one combination of n new vectors: $y_1, y_2, \cdots, y_n$.</li>
<li>The calculation formulate of $y_i$: $y_i = \sum_{j=1}^n a_{ij}x_{j}$<ul>
<li>$a_{ij}$ is the attention weight(after softmax normalize) between $x_i$ and $x_j$.</li>
</ul>
</li>
</ul>
<p>Through the self-attention machanism, the relationship between two distant moments can be directly calculated.</p>
<h1 id="Transformer"><a href="#Transformer" class="headerlink" title="Transformer"></a>Transformer</h1><h2 id="Motivation-1"><a href="#Motivation-1" class="headerlink" title="Motivation"></a>Motivation</h2><p>There are some problems needed to fix of <strong>Self-Attention Model</strong>.</p>
<ul>
<li>There is no consideration about <strong>position information</strong> when calculating <strong>self attention</strong>.</li>
<li>input vector $x_i$ is responsible for 3 roles, which caused it hard to learn: <ul>
<li>one of two vectors when calculating attention weight.</li>
<li>the weighted vector(被加权的向量)</li>
</ul>
</li>
<li>only considering relationship of 2 units, but not be able to represent multiple relationship between multiple input units.</li>
<li>the results of self-attention are mutually exclusive, and multiple inputs can not be concerned at the same time.</li>
</ul>
<p>Transformer can solve these problems.</p>
<h2 id="Transformer-Mechanism"><a href="#Transformer-Mechanism" class="headerlink" title="Transformer Mechanism"></a>Transformer Mechanism</h2><p>Just as its name implies, Transformer transfer a vector sequence into another vector sequence.</p>
<h3 id="Importing-Position-Information"><a href="#Importing-Position-Information" class="headerlink" title="Importing Position Information"></a>Importing Position Information</h3><p>We need to import position information for every input vector. There are 2 ways to import position information:</p>
<ol>
<li>Position Embeddings(位置嵌入): Like word embedding, use a continues, lower dimension, dense vector to represent position information.</li>
<li>Position Encodings(位置编码): Use function to map a position index(integer) to a vector.<br><img src="/2022/01/17/%E6%B3%A8%E6%84%8F%E5%8A%9B%E6%A8%A1%E5%9E%8B/position_encoding.png" alt></li>
</ol>
<ul>
<li>$p$ indicates the position index.</li>
<li>$0 \leq i \lt d$ is the index of encoding vector. The dimension of the vector is $d$.</li>
</ul>
<p>Whatever use <strong>Position Embeddings</strong> or <strong>Position Encodings</strong>, after we get a position vector, we add it into the word vecotr, then the result is the final input vector. In result of importing position information, same word in different position will be represented by different vector.</p>
<h3 id="Importing-Role-Information"><a href="#Importing-Role-Information" class="headerlink" title="Importing Role Information"></a>Importing Role Information</h3><p>In the original Attention Machenism, a input vector acts 3 roles: <strong>Query</strong>, <strong>Key</strong>, <strong>Value</strong>. The better way is represent different role with different vector. </p>
<p>The core idea of import role information is <strong>Different Linear Transforamtion for Input Vector</strong>. By the way, a linear transformation can be represented by a <strong>Parameter Matrix</strong>.</p>
<p>Input vector $x_i$ will map to 3 new vectors by 3 different parameter matrixes:</p>
<ul>
<li>$q_i = W^q x_i$</li>
<li>$k_i = W^k x_i$</li>
<li>$v_i = W^v x_i$</li>
</ul>
<p><strong>New Calculation Formulation</strong></p>

$$
\begin{matrix}
y_i = \sum_{j=1}^n = \alpha_{ij}v_j \\
\alpha_{ij} = Softmax(\hat{\alpha}_i)_j, \hat{\alpha}_{i} = [\hat{\alpha}_{i1},\hat{\alpha}_{i2},\cdots,\hat{\alpha}_{iL}] \\
\hat{\alpha}_{ij} = attn(q_i, k_j)
\end{matrix}
$$
    

<h3 id="Multiple-Layer-Attention"><a href="#Multiple-Layer-Attention" class="headerlink" title="Multiple Layer Attention"></a>Multiple Layer Attention</h3><p>In the original Attention Machenism, it only considers the relationship between 2 input sequence units. But in practical applications, it is often necessary to consider the relationship between many sequence units. If we consturct higher order relationship, it will result higher model complexity. </p>
<p>To solve this demands, someone proposed <strong>Message Propagation</strong>, which can realized by stacking multiple layer self-attention model. Normally, attention calculation use linear function. So the result of stacking them will also be linear. In order to enhance the presentation ability of model, we can add non-linear MLP behind every attention layer.</p>
<p>In addition, in order to benefit the process of model learning, we can also use some techniques, such as <strong>Layer Normalization</strong>, <strong>Residual Connections</strong>.</p>
<p>All the layers stacked to construct a <strong>Transformer Block</strong>.<br><img src="/2022/01/17/%E6%B3%A8%E6%84%8F%E5%8A%9B%E6%A8%A1%E5%9E%8B/transformer_block.png" alt></p>
<h3 id="Multi-Head-Machenism"><a href="#Multi-Head-Machenism" class="headerlink" title="Multi-Head Machenism"></a>Multi-Head Machenism</h3><p>Since the result of self-attention need to be normalized, even if an input is related to multiple other inputs, they can not be given a large attention weight at the same time. In the other word, the results of self-attention is <strong>exclusive</strong>.</p>
<p>To solve this problem, the core idea is:</p>
<ul>
<li>Set multiple groups of mapping matrixes.</li>
<li>Concating all the outputs of every results after those mapping.</li>
<li>Through a linear mappping, map the concated output to a vector of dimension d.</li>
</ul>
<p>In other view, <strong>Multi-Head Attention Machenism</strong> is equal to <strong>Ensemble of multiple Self-Attention Model</strong>, like different kernels in the CNN. </p>
<h2 id="Seq2Seq-based-on-Transformer"><a href="#Seq2Seq-based-on-Transformer" class="headerlink" title="Seq2Seq based on Transformer"></a>Seq2Seq based on Transformer</h2><p><img src="/2022/01/17/%E6%B3%A8%E6%84%8F%E5%8A%9B%E6%A8%A1%E5%9E%8B/seq2seq_transformer.png" alt></p>
<h2 id="Pros-amp-Cons"><a href="#Pros-amp-Cons" class="headerlink" title="Pros &amp; Cons"></a>Pros &amp; Cons</h2><p><strong>Advantages</strong>: </p>
<ul>
<li>Good at processing <strong>Long Distant Relationship</strong> between words.</li>
<li>Can be parallel, which will result rapider training speed.</li>
</ul>
<p><strong>Disadvantages</strong>: </p>
<ul>
<li>Too much parameters.<ul>
<li>Bert: 12 layers transformer block, 1.1 million parameters.</li>
<li>Bert-large: 12 layers transformer block, 3.4 million parameters.</li>
</ul>
</li>
</ul>
<h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"></span><br><span class="line"><span class="comment"># input_dim: 4; head_num: 2</span></span><br><span class="line">encoder_layer = nn.TransformerEncoderLayer(d_model=<span class="number">4</span>, nhead=<span class="number">2</span>)</span><br><span class="line"><span class="comment"># input size: [seq_len, batch_size, input_dim]</span></span><br><span class="line"><span class="comment"># output size: [seq_len, batch_size, input_dim]</span></span><br><span class="line">src = torch.rand(<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">out = encoder_layer(src)</span><br><span class="line"></span><br><span class="line"><span class="comment"># stacking encoder layer</span></span><br><span class="line">transformer_encoder = nn.TransformerEncoder(encoder_layer, num_layers=<span class="number">6</span>)</span><br><span class="line">output = transformer_encoder(src)</span><br><span class="line">memory = trandormer_encoder(src)</span><br><span class="line"></span><br><span class="line"><span class="comment"># decoder</span></span><br><span class="line">decoder_layer = nn.TransformerDecoderLayer(d_model=<span class="number">4</span>, nhead=<span class="number">2</span>)</span><br><span class="line">transformer_decoder = nn.TransformerDecoder(decoder_layer, num_layers=<span class="number">6</span>)</span><br><span class="line">out_part = torch.rand(<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">out = transformer_decoder(output_part, memory)</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>Deep Learning</tag>
      </tags>
  </entry>
  <entry>
    <title>用hexo搭建博客</title>
    <url>/2022/01/10/%E7%94%A8hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote class="blockquote-center">
<p>hexo搭建，从0到1 </p>

</blockquote>
<a id="more"></a>
<h1 id="网站搭建"><a href="#网站搭建" class="headerlink" title="网站搭建"></a>网站搭建</h1><h2 id="安装准备"><a href="#安装准备" class="headerlink" title="安装准备"></a>安装准备</h2><p><strong>1. 安装nodeJS</strong><br>从<a href="https://nodejs.org/en/" target="_blank" rel="noopener">nodeJS下载地址</a>下载安装包并安装<br>检查安装是否成功</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[Win + R]</span><br><span class="line">cmd</span><br><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure>

<p><strong>2. 安装cnpm</strong>  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install -g cnpm --registry&#x3D;https:&#x2F;&#x2F;registry.npm.taobao.org</span><br></pre></td></tr></table></figure>
<p>成功后显示<br><img src="/2022/01/10/%E7%94%A8hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/1.png" alt></p>
<p><strong>3. 安装hexo</strong>   </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cnpm install -g hexo-cli</span><br></pre></td></tr></table></figure>
<p>检查是否安装成功:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo -v</span><br></pre></td></tr></table></figure>

<h2 id="生成博客框架"><a href="#生成博客框架" class="headerlink" title="生成博客框架"></a>生成博客框架</h2><p><strong>1. 建立项目文件夹</strong><br>在E:\github中新建Blog文件夹  </p>
<p><strong>2. 初始化</strong><br>从cmd中进入Blog文件夹</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd e:\Github\Blog</span><br></pre></td></tr></table></figure>
<p>执行命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure>
<p>成功后显示<br><img src="/2022/01/10/%E7%94%A8hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/2.png" alt="img"></p>
<p><strong>3. 启动博客</strong>   </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure>
<p>成功后显示<br><img src="/2022/01/10/%E7%94%A8hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/3.png" alt="img"><br>在浏览器中输入以上网址即可本地访问   </p>
<h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><h3 id="新建博文"><a href="#新建博文" class="headerlink" title="新建博文"></a>新建博文</h3><p>执行命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo n &quot;new_article&quot;</span><br><span class="line">&#x2F;&#x2F; 如果出现乱码问题的话可通过将md文件保存为utf-8格式进行解决</span><br></pre></td></tr></table></figure>
<p>在项目文件夹下的source/_posts文件夹可看到这个新建的md文件<br><img src="/2022/01/10/%E7%94%A8hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/4.png" alt="img">  </p>
<h3 id="生成博文"><a href="#生成博文" class="headerlink" title="生成博文"></a>生成博文</h3><p>回到项目主目录（E:\github\Blog）下<br><strong>1. 清理</strong>   </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure>
<p><strong>2. 重新生成</strong>   </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure>
<p><strong>3. 重新启动</strong>   </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure>

<h3 id="部署博客"><a href="#部署博客" class="headerlink" title="部署博客"></a>部署博客</h3><blockquote>
<p>通过部署博客使得博客可以被公开访问<br>将博客部署到github上   </p>
</blockquote>
<p><strong>1. 安装插件</strong><br>进入项目主目录<br>执行命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cnpm install --save hexo-deployer-git</span><br></pre></td></tr></table></figure>
<p>显示如下<br><img src="/2022/01/10/%E7%94%A8hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/5.png" alt="img"><br><strong>2. 配置_config.yml文件</strong><br>文件底部deploy字段原始值为<br><img src="/2022/01/10/%E7%94%A8hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/6.png" alt="img"><br>将其更改为<br><img src="/2022/01/10/%E7%94%A8hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/7.png" alt="img">  </p>
<p><strong>2. 部署到远端</strong>   </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure>

<p><strong>3. 远程访问博客</strong><br>浏览器中输入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;llunch4w.github.io</span><br></pre></td></tr></table></figure>

<h2 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h2><p>使用的主题–<a href="https://github.com/litten/hexo-theme-yilia" target="_blank" rel="noopener">yilia</a><br>进入项目主目录  </p>
<p>将github上的项目克隆到themes文件夹下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;litten&#x2F;hexo-theme-yilia.git themes&#x2F;yilia</span><br></pre></td></tr></table></figure>

<p>修改_config.yml文件<br><img src="/2022/01/10/%E7%94%A8hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/8.png" alt="img"> </p>
<p>清理、生成、推到远端</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>

<h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><p><img src="/2022/01/10/%E7%94%A8hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/9.png" alt="img"><br>执行第二步时出错<br><img src="/2022/01/10/%E7%94%A8hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/10.png" alt="img"></p>
<p><strong>解决方案</strong>   </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cnpm i hexo-generator-json-content --save</span><br></pre></td></tr></table></figure>

<p>hexo d部署失败时，可先将node_modules删除，再执行npm install命令</p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>第一个Electron项目</title>
    <url>/2021/06/05/%E7%AC%AC%E4%B8%80%E4%B8%AAElectron%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote class="blockquote-center">
<p>^ _ ^ </p>

</blockquote>
<a id="more"></a>

<h1 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h1><p>在使用Electron进行开发之前，您需要安装 Node.js。<br>要检查 Node.js 是否正确安装，请在您的终端输入以下命令：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure>

<h1 id="创建应用程序"><a href="#创建应用程序" class="headerlink" title="创建应用程序"></a>创建应用程序</h1><p>首先创建一个文件夹并初始化 npm 包。</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> hello_electron &amp;&amp; <span class="built_in">cd</span> hello_electron</span><br><span class="line">npm init</span><br></pre></td></tr></table></figure>

<p>init初始化命令会提示您在项目初始化配置中设置一些值，最后项目下生成的package.json文件应该像这样：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"hello_electron"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">  <span class="attr">"description"</span>: <span class="string">"Hello World!"</span>,</span><br><span class="line">  <span class="attr">"main"</span>: <span class="string">"main.js"</span>,</span><br><span class="line">  <span class="attr">"author"</span>: <span class="string">"LuckyQ"</span>,</span><br><span class="line">  <span class="attr">"license"</span>: <span class="string">"MIT"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后，将 electron 包安装到应用的开发依赖中。</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">npm install --save-dev electron</span><br></pre></td></tr></table></figure>

<p>大家都知道国内直接使用 npm 的官方镜像是非常慢的，这里推荐使用淘宝 NPM 镜像。<br>你可以使用淘宝定制的 cnpm (gzip 压缩支持) 命令行工具代替默认的 npm:</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>

<p>这样就可以使用 cnpm 命令来安装模块了：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">cnpm install electron --save-dev</span><br></pre></td></tr></table></figure>

<p>最后，在您的 package.json配置文件中的scripts字段下增加一条start命令：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"start"</span>: <span class="string">"electron ."</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>任何 Electron 应用程序的入口都是 main 文件。 这个文件控制了主进程，它运行在一个完整的Node.js环境中，负责控制您应用的生命周期，显示原生界面，执行特殊操作并管理渲染器进程(稍后详细介绍)。</p>
<p>执行期间，Electron 将依据应用中 package.json配置下main字段中配置的值查找此文件。要初始化这个main文件，需要在您项目的根目录下创建一个名为main.js的空文件。</p>
<p>start命令能让您在开发模式下打开您的应用</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">npm <span class="built_in">start</span></span><br></pre></td></tr></table></figure>

<h1 id="创建页面"><a href="#创建页面" class="headerlink" title="创建页面"></a>创建页面</h1><p>在可以为我们的应用创建窗口前，我们需要先创建加载进该窗口的内容。 在 Electron 中，每个窗口中无论是本地的HTML文件还是远程URL都可以被加载显示。</p>
<p>此教程中，您将采用本地HTML的方式。 在您的项目根目录下创建一个名为index.html的文件：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Security-Policy"</span> <span class="attr">content</span>=<span class="string">"default-src 'self'; script-src 'self'"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-Content-Security-Policy"</span> <span class="attr">content</span>=<span class="string">"default-src 'self'; script-src 'self'"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Hello World!<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello World!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    We are using Node.js <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"node-version"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>,</span><br><span class="line">    Chromium <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"chrome-version"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>,</span><br><span class="line">    and Electron <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"electron-version"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>.</span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="在窗口中打开页面"><a href="#在窗口中打开页面" class="headerlink" title="在窗口中打开页面"></a>在窗口中打开页面</h1><p>现在您有了一个页面，将它加载进应用窗口中。 要做到这一点，你需要 两个Electron模块：</p>
<ul>
<li><code>app</code> 模块，它控制应用程序的事件生命周期。</li>
<li><code>BrowserWindow</code> 模块，它创建和管理应用程序窗口。</li>
</ul>
<p>因为主进程运行着Node.js，您可以在文件头部将他们导入作为公共JS模块：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; app, BrowserWindow &#125; = <span class="built_in">require</span>(<span class="string">'electron'</span>)</span><br></pre></td></tr></table></figure>

<p>然后，添加一个createWindow()方法来将index.html加载进一个新的BrowserWindow实例。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createWindow</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> win = <span class="keyword">new</span> BrowserWindow(&#123;</span><br><span class="line">    width: <span class="number">800</span>,</span><br><span class="line">    height: <span class="number">600</span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  win.loadFile(<span class="string">'index.html'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接着，调用createWindow()函数来打开您的窗口。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.whenReady().then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  createWindow()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h1 id="管理窗口的生命周期"><a href="#管理窗口的生命周期" class="headerlink" title="管理窗口的生命周期"></a>管理窗口的生命周期</h1><p>关闭所有窗口时退出应用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.on(<span class="string">'window-all-closed'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (process.platform !== <span class="string">'darwin'</span>) app.quit()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h1 id="通过预加载脚本从渲染器访问Node-js"><a href="#通过预加载脚本从渲染器访问Node-js" class="headerlink" title="通过预加载脚本从渲染器访问Node.js"></a>通过预加载脚本从渲染器访问Node.js</h1><p>现在，最后要做的是输出Electron的版本号和它的依赖项到你的web页面上。</p>
<p>预加载脚本在渲染器进程加载之前加载，并有权访问两个 渲染器全局 (例如 window 和 document) 和 Node.js 环境。创建一个名为 preload.js 的新脚本如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'DOMContentLoaded'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> replaceText = <span class="function">(<span class="params">selector, text</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> element = <span class="built_in">document</span>.getElementById(selector)</span><br><span class="line">    <span class="keyword">if</span> (element) element.innerText = text</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> dependency <span class="keyword">of</span> [<span class="string">'chrome'</span>, <span class="string">'node'</span>, <span class="string">'electron'</span>]) &#123;</span><br><span class="line">    replaceText(<span class="string">`<span class="subst">$&#123;dependency&#125;</span>-version`</span>, process.versions[dependency])</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>要将此脚本附加到渲染器流程，请在你现有的 BrowserWindow 构造器中将路径中的预加载脚本传入 webPreferences.preload 选项。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在文件头部引入 Node.js 中的 path 模块</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="comment">// 修改现有的 createWindow() 函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createWindow</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> win = <span class="keyword">new</span> BrowserWindow(&#123;</span><br><span class="line">    width: <span class="number">800</span>,</span><br><span class="line">    height: <span class="number">600</span>,</span><br><span class="line">    webPreferences: &#123;</span><br><span class="line">      preload: path.join(__dirname, <span class="string">'preload.js'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  win.loadFile(<span class="string">'index.html'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h1><h2 id="main-js"><a href="#main-js" class="headerlink" title="main.js"></a>main.js</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; app, BrowserWindow &#125; = <span class="built_in">require</span>(<span class="string">'electron'</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createWindow</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> win = <span class="keyword">new</span> BrowserWindow(&#123;</span><br><span class="line">      width: <span class="number">800</span>,</span><br><span class="line">      height: <span class="number">600</span>,</span><br><span class="line">      webPreferences: &#123;</span><br><span class="line">        preload: path.join(__dirname, <span class="string">'preload.js'</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  </span><br><span class="line">    win.loadFile(<span class="string">'index.html'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在 Electron 中，只有在 app 模块的 ready 事件被激发后才能创建浏览器窗口</span></span><br><span class="line">app.whenReady().then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    createWindow();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 关闭所有窗口时退出应用</span></span><br><span class="line">app.on(<span class="string">'window-all-closed'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (process.platform !== <span class="string">'darwin'</span>)</span><br><span class="line">        app.quit();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="preload-js"><a href="#preload-js" class="headerlink" title="preload.js"></a>preload.js</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'DOMContentLoaded'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> replaceText = <span class="function">(<span class="params">selector, text</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> element = <span class="built_in">document</span>.getElementById(selector)</span><br><span class="line">      <span class="keyword">if</span> (element) element.innerText = text</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> dependency <span class="keyword">of</span> [<span class="string">'chrome'</span>, <span class="string">'node'</span>, <span class="string">'electron'</span>]) &#123;</span><br><span class="line">      replaceText(<span class="string">`<span class="subst">$&#123;dependency&#125;</span>-version`</span>, process.versions[dependency])</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="index-html"><a href="#index-html" class="headerlink" title="index.html"></a>index.html</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--index.html--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Security-Policy"</span> <span class="attr">content</span>=<span class="string">"default-src 'self'; script-src 'self'"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-Content-Security-Policy"</span> <span class="attr">content</span>=<span class="string">"default-src 'self'; script-src 'self'"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Hello World!<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello World!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    We are using Node.js <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"node-version"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>,</span><br><span class="line">    Chromium <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"chrome-version"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>,</span><br><span class="line">    and Electron <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"electron-version"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>.</span><br><span class="line">        </span><br><span class="line">    <span class="comment">&lt;!-- You can also require other files to run in this process --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./renderer.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>electron</category>
      </categories>
      <tags>
        <tag>nodejs electron</tag>
      </tags>
  </entry>
  <entry>
    <title>网站Guide</title>
    <url>/2020/11/19/%E7%BD%91%E7%AB%99Guide/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote class="blockquote-center">
<p>^ _ ^ </p>

</blockquote>
<a id="more"></a>


<blockquote>
<p>这篇文档主要用于收录一些有趣的网站</p>
</blockquote>
<h1 id="国外网站"><a href="#国外网站" class="headerlink" title="国外网站"></a>国外网站</h1><h2 id="消磨时间"><a href="#消磨时间" class="headerlink" title="消磨时间"></a>消磨时间</h2><h3 id="OATMEAL"><a href="#OATMEAL" class="headerlink" title="OATMEAL"></a>OATMEAL</h3><blockquote>
<p>Oatmeal 燕麦片，包括漫画、游戏、书籍、博客几个模块</p>
</blockquote>
<p><a href="https://theoatmeal.com/" target="_blank" rel="noopener">OATMEAL入口</a></p>
<h3 id="WaitButWay"><a href="#WaitButWay" class="headerlink" title="WaitButWay"></a>WaitButWay</h3><blockquote>
<p>网站主人大概每周会在上面发布一篇有趣的文章</p>
</blockquote>
<p><a href="https://waitbutwhy.com/" target="_blank" rel="noopener">WaitButBeauty入口</a></p>
<h2 id="锻炼身体"><a href="#锻炼身体" class="headerlink" title="锻炼身体"></a>锻炼身体</h2><h3 id="MusicleWiki"><a href="#MusicleWiki" class="headerlink" title="MusicleWiki"></a>MusicleWiki</h3><blockquote>
<p>MusicleWiki 肌肉百科，提供了一个交互式图表，显示了你被限制在公寓里不活动的所有肌肉。只要点击一块肌肉，网站就会给出锻炼它的方法。</p>
</blockquote>
<p><a href="https://musclewiki.com/" target="_blank" rel="noopener">MusicleWiki入口</a></p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://blog.hubspot.com/marketing/surf-internet-websites" target="_blank" rel="noopener">网站推荐网页</a></p>
<blockquote>
<p>还未查看</p>
</blockquote>
]]></content>
      <tags>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>简单情感分类</title>
    <url>/2022/01/19/%E7%AE%80%E5%8D%95%E6%83%85%E6%84%9F%E5%88%86%E7%B1%BB/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote class="blockquote-center">
<p>^ _ ^ </p>

</blockquote>
<a id="more"></a>

<h1 id="Step1-Vacabulary-Mapping"><a href="#Step1-Vacabulary-Mapping" class="headerlink" title="Step1: Vacabulary Mapping"></a>Step1: Vacabulary Mapping</h1><p>Firstly, we need to trans natural signal(token) to integer. So we code a <strong>Vacab</strong> to record the mapping of token and index.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vocab</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.idx_to_token = []</span><br><span class="line">        self.token_to_idx = &#123;&#125;</span><br><span class="line">        self.unk = <span class="string">"&lt;unk&gt;"</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">build</span><span class="params">(self, text, min_freq=<span class="number">1</span>, reserved_tokens=None)</span>:</span></span><br><span class="line">        token_freqs = defaultdict(int)</span><br><span class="line">        <span class="keyword">for</span> sentence <span class="keyword">in</span> text:</span><br><span class="line">            <span class="keyword">for</span> token <span class="keyword">in</span> sentence:</span><br><span class="line">                token_freqs[token] += <span class="number">1</span></span><br><span class="line">        uniq_tokens = [<span class="string">"&lt;unk&gt;"</span>] + (reserved_tokens <span class="keyword">if</span> reserved_tokens <span class="keyword">else</span> [])</span><br><span class="line">        uniq_tokens += [token <span class="keyword">for</span> token, freq <span class="keyword">in</span> token_freqs.items() <span class="keyword">if</span> freq &gt;= min_freq <span class="keyword">and</span> token != <span class="string">"&lt;unk&gt;"</span>]</span><br><span class="line">        <span class="comment"># TODO figure out why return cls rather object</span></span><br><span class="line">        <span class="keyword">return</span> cls(uniq_tokens)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__len__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> len(self.idx_to_token)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getitem__</span><span class="params">(self, token)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.token_to_idx.get(token, self.unk)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">convert_tokens_to_ids</span><span class="params">(self, tokens)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> [self[token] <span class="keyword">for</span> token <span class="keyword">in</span> tokens]</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">convert_ids_to_tokens</span><span class="params">(self, indices)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> [self.idx_to_token[index] <span class="keyword">for</span> index <span class="keyword">in</span> indices]</span><br></pre></td></tr></table></figure>

<h1 id="Step2-Word-Embedding-Layer"><a href="#Step2-Word-Embedding-Layer" class="headerlink" title="Step2: Word Embedding Layer"></a>Step2: Word Embedding Layer</h1><p>Trans a word to a vector which is low dimension, dense, continues is called <strong>Embedding</strong>.  </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># vacabulary size: 8; embedding vector dimesion: 3</span></span><br><span class="line">embedding = nn.Embedding(<span class="number">8</span>, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># input size: [2, 4]</span></span><br><span class="line">input = torch.tensor([[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>], [<span class="number">4</span>, <span class="number">6</span>, <span class="number">6</span>, <span class="number">7</span>]], dtype=torch.long)</span><br><span class="line"><span class="comment"># output size: [2, 4, 3]</span></span><br><span class="line">output = embedding(input)</span><br></pre></td></tr></table></figure>

<h1 id="Step3-Word-Embedding"><a href="#Step3-Word-Embedding" class="headerlink" title="Step3: Word Embedding"></a>Step3: Word Embedding</h1><p>Usually, we need to trans word to word embedding vector first, then take the embedding vector as the input of MLP network. But a sequence usually contains many word vectors. The problem is <strong>How can we take them as the input vector of MLP?</strong><br>One way is <strong>Concating</strong> the n vectos as a new vector whose dimension is $n \times d$. By the way, $d$ is the dimension of word vector.<br>But this way will cause a problem: <strong>The final prediction results are too related with the position of tokens in sequence</strong>. If add a new token in the head of sequence, then all parameters of network will change and the results will be much different. </p>
<p>To solve this problem, we can use <strong>Bag Of Words</strong>. In BOW method, we don’t consider the order of words in the sequence, and simply view the sequence as a set of words. So, we can use <strong>aggregation</strong> to process many word vectors in one sequence, such as <strong>average, sum, max</strong>.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"><span class="keyword">from</span> torch.nn <span class="keyword">import</span> functional <span class="keyword">as</span> F</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MLP</span><span class="params">(nn.Module)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, vocab_size, embedding_dim, hidden_dim, num_class)</span>:</span></span><br><span class="line">        super(MLP, self).__init__()</span><br><span class="line">        <span class="comment"># word vector layer</span></span><br><span class="line">        self.embedding = nn.Embedding(vocab_size, embedding_dim)</span><br><span class="line">        <span class="comment"># word vector layer --&gt; linear layer</span></span><br><span class="line">        self.linear1 = nn.Linear(embedding_dim, hidden_dim)</span><br><span class="line">        <span class="comment"># activation layer</span></span><br><span class="line">        self.activate = F.relu</span><br><span class="line">        <span class="comment"># activate layer --&gt; output layer</span></span><br><span class="line">        self.linear2 = nn.Linear(hidden_dim, num_class)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self, inputs)</span>:</span></span><br><span class="line">        embeddings = self.embeddings(inputs)</span><br><span class="line">        <span class="comment"># aggregation</span></span><br><span class="line">        embedding = embeddings.mean(dim=<span class="number">1</span>)</span><br><span class="line">        hidden = self.activate(self.linear1(embedding))</span><br><span class="line">        outputs = self.linear2(hidden)</span><br><span class="line">        probs = F.log_softmax(outputs, dim=<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> probs</span><br><span class="line"></span><br><span class="line">mlp = MLP(vocab_size=<span class="number">8</span>, embedding_dim=<span class="number">3</span>, hidden_dim=<span class="number">5</span>, num_class=<span class="number">5</span>)</span><br><span class="line"><span class="comment"># input size: [2, 4]</span></span><br><span class="line">input = torch.tensor([[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>], [<span class="number">4</span>, <span class="number">6</span>, <span class="number">6</span>, <span class="number">7</span>]], dtype=torch.long)</span><br><span class="line"><span class="comment"># output size: [2, 2]</span></span><br><span class="line">output = mlp(input)</span><br></pre></td></tr></table></figure>

<p><img src="/2022/01/19/%E7%AE%80%E5%8D%95%E6%83%85%E6%84%9F%E5%88%86%E7%B1%BB/mlp_sc.png" alt></p>
<p>However, in real situation, input sequences in one batch often have different length. In other word, sometimes the input can not be represented by a matrix because of <strong>different sequence length</strong>.<br>A solution for this problem is <strong>EmbeddingBag</strong>:</p>
<ol>
<li>Firstly, <strong>Concating</strong> all the sequences.</li>
<li>Finally, Using <strong>Offsets</strong> to record every start position of every sequence.</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Suppose every input_i has different length</span></span><br><span class="line">inputs = [input1, input2, input3, input4]</span><br><span class="line">offsets = [<span class="number">0</span>] + [i.shape[<span class="number">0</span>] <span class="keyword">for</span> i <span class="keyword">in</span> inputs]</span><br><span class="line">offsets = torch.tensor(offsets[:<span class="number">-1</span>].cumsum(dim=<span class="number">0</span>))</span><br><span class="line">inputs = torch.cat(inputs)</span><br><span class="line"></span><br><span class="line">embedding_bag = nn.EmbeddingBag(num_embeddings=<span class="number">8</span>, embedding_dim=<span class="number">3</span>)</span><br><span class="line"><span class="comment"># output size: [sequence_num, embedding_dim]</span></span><br><span class="line">embeddings = embedding_bag(inputs, offsets)</span><br></pre></td></tr></table></figure>

<p>Moreover, we can use <code>n-gram</code> as a token, which considered <strong>local information</strong> besides but added <strong>data sparsity</strong>.</p>
<h1 id="Step4-Data-Process"><a href="#Step4-Data-Process" class="headerlink" title="Step4: Data Process"></a>Step4: Data Process</h1><p><strong>create dataset</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">load_sentebce_polarity</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">from</span> nltk.corpus <span class="keyword">import</span> sentence_polarity</span><br><span class="line">    <span class="comment"># create vocabulary</span></span><br><span class="line">    vocab = Vocab.build(sentence_polarity.sents())</span><br><span class="line">    <span class="comment"># create train dataset</span></span><br><span class="line">    train_data = ([(vocab.convert_tokens_to_ids(sentence), <span class="number">0</span>) <span class="keyword">for</span> sentence <span class="keyword">in</span> sentence_polarity.sents(categories=<span class="string">'pos'</span>)][:<span class="number">4000</span>]</span><br><span class="line">                + [(vocab.convert_tokens_to_ids(sentence), <span class="number">1</span>) <span class="keyword">for</span> sentence <span class="keyword">in</span> sentence_polarity.sents(categories=<span class="string">'neg'</span>)][:<span class="number">4000</span>])</span><br><span class="line">    <span class="comment"># create test dataset</span></span><br><span class="line">    test_data = ([(vocab.convert_tokens_to_ids(sentence), <span class="number">0</span>) <span class="keyword">for</span> sentence <span class="keyword">in</span> sentence_polarity.sents(categories=<span class="string">'pos'</span>)][<span class="number">4000</span>:]</span><br><span class="line">                + [(vocab.convert_tokens_to_ids(sentence), <span class="number">1</span>) <span class="keyword">for</span> sentence <span class="keyword">in</span> sentence_polarity.sents(categories=<span class="string">'neg'</span>)][<span class="number">4000</span>:])</span><br><span class="line">    <span class="keyword">return</span> train_data, test_data, vocab</span><br></pre></td></tr></table></figure>

<p><strong>create data loader</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">    DataLoader(dataset, batch_size, collate_fn, shuffle)</span></span><br><span class="line"><span class="string">    - dataset: a subclass of torch.utils.data.Dataset</span></span><br><span class="line"><span class="string">    - collate_fn: transform function applies in one mini-batch. e.g. transform origin data to tensor</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># dataset example</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BowDataset</span><span class="params">(Dataset)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, data)</span>:</span></span><br><span class="line">        <span class="comment"># data is the original data</span></span><br><span class="line">        self.data = data</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__len__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> len(self.data)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getitem__</span><span class="params">(self, i)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.data[i]</span><br><span class="line"></span><br><span class="line"><span class="comment"># collate_fn example</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">    examples is a mini-batch of dastaset</span></span><br><span class="line"><span class="string">    suppose data structure is (sentence, polarity)</span></span><br><span class="line"><span class="string">    through collate_fn, we will transfer it to an input tensor</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">collate_fn</span><span class="params">(examples)</span>:</span></span><br><span class="line">    inputs = [torch.tensor(ex[<span class="number">0</span>]) <span class="keyword">for</span> ex <span class="keyword">in</span> examples]</span><br><span class="line">    targets = torch.tensor([ex[<span class="number">1</span>] <span class="keyword">for</span> ex <span class="keyword">in</span> examples], dtype=torch.long)</span><br><span class="line">    offets = [<span class="number">0</span>] + [i.shape[<span class="number">0</span>] <span class="keyword">for</span> i <span class="keyword">in</span> inputs]</span><br><span class="line">    offsets = torch.tensor(offsets[:<span class="number">-1</span>]).cumsum(dim=<span class="number">0</span>)</span><br><span class="line">    inputs = torch.cat(inputs)</span><br><span class="line">    <span class="keyword">return</span> inputs, offsets, targets</span><br></pre></td></tr></table></figure>

<h1 id="Step5-Create-Models"><a href="#Step5-Create-Models" class="headerlink" title="Step5: Create Models"></a>Step5: Create Models</h1><h2 id="MLP"><a href="#MLP" class="headerlink" title="MLP"></a>MLP</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MLP</span><span class="params">(nn.Module)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, vocab_size, embedding_dim, hidden_dim, num_class)</span>:</span></span><br><span class="line">        super(MLP, self).__init__()</span><br><span class="line">        <span class="comment"># word vector layer</span></span><br><span class="line">        self.embedding_bag = nn.EmbeddingBag(vocab_size, embedding_dim)</span><br><span class="line">        <span class="comment"># word vector layer --&gt; linear layer</span></span><br><span class="line">        self.linear1 = nn.Linear(embedding_dim, hidden_dim)</span><br><span class="line">        <span class="comment"># activation layer</span></span><br><span class="line">        self.activate = F.relu</span><br><span class="line">        <span class="comment"># activate layer --&gt; output layer</span></span><br><span class="line">        self.linear2 = nn.Linear(hidden_dim, num_class)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self, inputs, offsets)</span>:</span></span><br><span class="line">        embedding = self.embedding_bag(inputs, offsets)</span><br><span class="line">        hidden = self.activate(self.linear1(embedding))</span><br><span class="line">        outputs = self.linear2(hidden)</span><br><span class="line">        probs = F.log_softmax(outputs, dim=<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> probs</span><br></pre></td></tr></table></figure>

<h2 id="CNN"><a href="#CNN" class="headerlink" title="CNN"></a>CNN</h2><p>In the BOW(Bag-Of-Word) Machenism, we ignored phrase meaning, such as “喜欢”, “不喜欢”. To avoid this defect, we can use CNN to extract local information.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CNN</span><span class="params">(nn.Module)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, vocab_size, embedding_dim, hidden_dim, filter_size, num_filter, num_class)</span>:</span></span><br><span class="line">        super(CNN, self).__init__()</span><br><span class="line">        self.embedding = nn.Embedding(vocab_size, embedding_dim)</span><br><span class="line">        self.conv1d = nn.Conv1d(embedding_dim, num_filter, filter_size, padding=<span class="number">1</span>)</span><br><span class="line">        self.activate = F.relu</span><br><span class="line">        self.linear = nn.Linear(num_filter, num_class)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self, inputs)</span>:</span></span><br><span class="line">        <span class="comment"># embedding size: [batch_size, num_seq, embedding_dim]</span></span><br><span class="line">        embedding = self.embedding(inputs)</span><br><span class="line">        <span class="comment"># after permute(0, 2, 1) size: [batch_size, embedding_dim, num_seq]</span></span><br><span class="line">        <span class="comment"># after conv1d, size: [batch_size, num_filter, num_seq+pad-kernel_size+1]</span></span><br><span class="line">        convolution = self.activate(self.conv1d(embedding.permute(<span class="number">0</span>, <span class="number">2</span>, <span class="number">1</span>)))</span><br><span class="line">        <span class="comment"># after pooling, size: [batch_size, num_filter, 1]</span></span><br><span class="line">        pooling = F.max_pool1d(convolution, kernel_size=convolution.shape[<span class="number">2</span>])</span><br><span class="line">        <span class="comment"># after squeeze, size: [batch_size, num_filter]</span></span><br><span class="line">        <span class="comment"># output size: [batch_size, num_class]</span></span><br><span class="line">        outputs = self.linear(pooling.squeeze(dim=<span class="number">2</span>))</span><br><span class="line">        <span class="comment"># log_prob size: [batch_size, num_class]</span></span><br><span class="line">        log_probs = F.log_softmax(outputs, dim=<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> log_probs</span><br></pre></td></tr></table></figure>

<p>data process function need to modify some:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> torch.nn.utils.rnn <span class="keyword">import</span> pad_sequence</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">collate_fn</span><span class="params">(examples)</span>:</span></span><br><span class="line">    inputs = [torch.tensor(ex[<span class="number">0</span>]) <span class="keyword">for</span> ex <span class="keyword">in</span> examples]</span><br><span class="line">    targets = torch.tensor([ex[<span class="number">1</span>] <span class="keyword">for</span> ex <span class="keyword">in</span> examples], dtype=torch.long)</span><br><span class="line">    <span class="comment"># padding every sequence to the same length, default char is '0'</span></span><br><span class="line">    inputs = pad_sequence(inputs, batch_first=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">return</span> inputs, targets</span><br></pre></td></tr></table></figure>

<h2 id="LSTM"><a href="#LSTM" class="headerlink" title="LSTM"></a>LSTM</h2><p>In the BOW(Bag-Of-Word) machenism, we ignore the order of sequence. For example, pharase “张三打李四” is equal to “李四打张三” in the BOW. So BOW is not reasonable in some situations. To avoid this defect, we can use RNN, specially LSTM.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> torch.nn.utils.rnn <span class="keyword">import</span> pack_padded_sequence</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LSTM</span><span class="params">(nn.Module)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, vocab_size, embedding_dim, hidden_dim, num_class)</span>:</span></span><br><span class="line">        super(LSTM, self).__init__()</span><br><span class="line">        self.embeddings = nn.Embedding(vocan_size, embedding_dim)</span><br><span class="line">        self.lstm = nn.LSTM(embedding_dim, hidden_dim, batch_first=<span class="literal">True</span>)</span><br><span class="line">        self.output = nn.Linear(hidden_dim, num_class)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self, inputs, lengths)</span>:</span></span><br><span class="line">        embeddings = self.embeddings(inputs)</span><br><span class="line">        x_pack = pack_padded_sequence(embeddings, lengths, batch_first=<span class="literal">True</span>, enforce_sorted=<span class="literal">False</span>)</span><br><span class="line">        hidden, (hn, cn) = self.lstm(x_pack)</span><br><span class="line">        outputs = self.output(hn[<span class="number">-1</span>])</span><br><span class="line">        log_probs = F.log_softmax(outputs, dim=<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> log_probs</span><br></pre></td></tr></table></figure>
<p>new data process function:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> torch.nn.utils.rnn <span class="keyword">import</span> pad_sequence</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">collate_fn</span><span class="params">(examples)</span>:</span></span><br><span class="line">    lengths = torch.tensor([len(ex[<span class="number">0</span>]) <span class="keyword">for</span> ex <span class="keyword">in</span> examples])</span><br><span class="line">    inputs = [torch.tensor(ex[<span class="number">0</span>]) <span class="keyword">for</span> ex <span class="keyword">in</span> examples]</span><br><span class="line">    targets = torch.tensor([ex[<span class="number">1</span>] <span class="keyword">for</span> ex <span class="keyword">in</span> examples], dtype=torch.long)</span><br><span class="line">    inputs = pad_sequence(inputs, batch_first=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">return</span> inputs, lengths, target</span><br></pre></td></tr></table></figure>

<h2 id="Transformer"><a href="#Transformer" class="headerlink" title="Transformer"></a>Transformer</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Transformer</span><span class="params">(nn.Module)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, vocab_size, embedding_dim, hidden_dim, num_class, </span></span></span><br><span class="line"><span class="function"><span class="params">                    dim_forward=<span class="number">512</span>, num_head=<span class="number">2</span>, num_layers=<span class="number">2</span>, dropout=<span class="number">0.1</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">                    max_len=<span class="number">128</span>, activation=<span class="string">"relu"</span>)</span>:</span></span><br><span class="line">        super(Transformer, self).__init__()</span><br><span class="line">        self.embedding_dim = embedding_dim</span><br><span class="line">        self.embeddings = nn.Embedding(vocab_size, embedding_dim)</span><br><span class="line">        self.position_embedding = PositionalEncdoing(embedding_dim, dropout, max_len)</span><br><span class="line">        encoder_layer = nn.TransformerEncoderLayer(hidden_dim, num_head, dim_feedforward, dropout, activation)</span><br><span class="line">        self.transformer = nn.TransformerEncoder(encoder_layer, num_layers)</span><br><span class="line">        self.output = nn.Linear(hidden_dim, num_class)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self, inputs, lengths)</span>:</span></span><br><span class="line">        <span class="comment"># [batch_size, num_seq, ...] to [num_seq, batch_size, ...]</span></span><br><span class="line">        inputs = torch.transpose(inputs, <span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">        hidden_states = self.embeddings(inputs)</span><br><span class="line">        hidden_states = self.position_embedding(hidden_states)</span><br><span class="line">        <span class="comment"># no-attention part would be true</span></span><br><span class="line">        attention_mask = length_to_mask(lengths) == <span class="literal">False</span></span><br><span class="line">        hidden_states = self.transformer(hidden_states, src_key_padding_mask=attention_mask)</span><br><span class="line">        hidden_states = hidden_states[<span class="number">0</span>, :, :]</span><br><span class="line">        output = self.output(hidden_states)</span><br><span class="line">        log_probs = F.log_softmax(output, dim=<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> log_probs</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">length_to_mask</span><span class="params">(lengths)</span>:</span></span><br><span class="line">    <span class="string">'''transfer sequence length to mask matrix</span></span><br><span class="line"><span class="string">        @param lengths: [batch, ]</span></span><br><span class="line"><span class="string">        @return [batch, max_len]</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    max_len = torch.max(lengths)</span><br><span class="line">    mask = torch.arange(max_len).expand(lengths.shape[<span class="number">0</span>], max_len) &lt; lengths.unsqueeze(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> mask</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PositionalEncoding</span><span class="params">(nn.Module)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, d_model, dropout=<span class="number">0.1</span>, max_len=<span class="number">512</span>)</span>:</span></span><br><span class="line">        super(PositionalEncoding, self).__init__()</span><br><span class="line">        pe = torch.zeros(max_len, d_model)</span><br><span class="line">        position = torch.arange(<span class="number">0</span>, max_len, dtype=torch.float).unsqueeze(<span class="number">1</span>)</span><br><span class="line">        div_term = torch.exo(torch.arange(<span class="number">0</span>, d_model, <span class="number">2</span>).float() * (-math.log(<span class="number">10000.0</span>)/d_model))</span><br><span class="line">        <span class="comment"># position encoding for even position</span></span><br><span class="line">        pe[:, <span class="number">0</span>::<span class="number">2</span>] = torch.sin(position * div_term)</span><br><span class="line">        <span class="comment"># position encoding for odd position</span></span><br><span class="line">        pe[:, <span class="number">1</span>:<span class="number">2</span>] = torch.cos(position * div_term)</span><br><span class="line">        pe = pe.unsqueeze(<span class="number">0</span>).transpose(<span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">        <span class="comment"># no gradient operation in positiong embedding</span></span><br><span class="line">        self.register_buffer(<span class="string">'pe'</span>, pe)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        x = x + self.pe[:x.size(<span class="number">0</span>), :]</span><br><span class="line">        <span class="keyword">return</span> x</span><br></pre></td></tr></table></figure>

<h1 id="Step6-Training"><a href="#Step6-Training" class="headerlink" title="Step6: Training"></a>Step6: Training</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> tqdm.auto <span class="keyword">import</span> tqdm</span><br><span class="line"></span><br><span class="line"><span class="comment"># hyper-parameter</span></span><br><span class="line">embedding_dim = <span class="number">128</span></span><br><span class="line">hidden_dim = <span class="number">256</span></span><br><span class="line">num_class = <span class="number">2</span></span><br><span class="line">batch_size = <span class="number">32</span></span><br><span class="line">num_epoch = <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># load data</span></span><br><span class="line">train_data, test_data, vocab = load_sentence_polarity()</span><br><span class="line">trian_dataset = BowDataset(train_data)</span><br><span class="line">test_dataset = BowDataset(test_data)</span><br><span class="line">train_data_loader = DataLoader(train_dataset, batch_size=batch_size, collate_fn=collate_fn, shuffle=<span class="literal">True</span>)</span><br><span class="line">test_data_loader = DataLoader(test_dataset, batch_size=<span class="number">1</span>, collate_fn=collate_fn, shuffle=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># create model</span></span><br><span class="line">device = torch.device(<span class="string">'cuda'</span> <span class="keyword">if</span> torch.cuda.is_available() <span class="keyword">else</span> <span class="string">'cpu'</span>)</span><br><span class="line">model = MLP(len(vocab), embedding_dim, hidden_dim, num_class)</span><br><span class="line">model.to(device)</span><br><span class="line"></span><br><span class="line"><span class="comment"># traning</span></span><br><span class="line">nll_loss = nn.NLLLoss()</span><br><span class="line">optimizer = optim.Adm(model.parameters(), lr=<span class="number">0.001</span>)</span><br><span class="line">model.train()</span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> range(num_epoch):</span><br><span class="line">    total_loss = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> batch <span class="keyword">in</span> tqdm(trian_data_loader, desc=<span class="string">f"Training Epoch <span class="subst">&#123;epoch&#125;</span>"</span>):</span><br><span class="line">        inputs, offsets, targets = [x.to(device) <span class="keyword">for</span> x <span class="keyword">in</span> batch]</span><br><span class="line">        log_probs = model(inputs, offsets)</span><br><span class="line">        loss = nll_loss(log_probs, targets)</span><br><span class="line">        optimizer.zero_grad()</span><br><span class="line">        loss.backward()</span><br><span class="line">        optimizer.step()</span><br><span class="line">        total_loss += loss.item()</span><br><span class="line">    print(<span class="string">f"Loss: <span class="subst">&#123;total_loss:<span class="number">.2</span>f&#125;</span>"</span>)</span><br></pre></td></tr></table></figure>

<h1 id="Step7-Testing"><a href="#Step7-Testing" class="headerlink" title="Step7: Testing"></a>Step7: Testing</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">acc = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> batch <span class="keyword">in</span> tqdm(test_data_loader, desc=<span class="string">"Testing"</span>):</span><br><span class="line">    inputs, offsets, targets = [x.to(device) <span class="keyword">for</span> x <span class="keyword">in</span> batch]</span><br><span class="line">    <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">        output = model(inputs, offsets)</span><br><span class="line">        acc += (output.argmax(dim=<span class="number">1</span>) == target).sum().item()</span><br><span class="line">print(<span class="string">f"Acc: <span class="subst">&#123;acc / len(test_data_loader):<span class="number">.2</span>f&#125;</span>"</span>)</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>Deep Learning</tag>
      </tags>
  </entry>
  <entry>
    <title>循环神经网络</title>
    <url>/2022/01/16/%E5%BE%AA%E7%8E%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote class="blockquote-center">
<p>^ _ ^ </p>

</blockquote>
<a id="more"></a>

<h1 id="RNN-Structure"><a href="#RNN-Structure" class="headerlink" title="RNN Structure"></a>RNN Structure</h1><p><strong>Recurrent Neural Netword</strong> refers to the hidden layer output of the network as its own input.</p>
<p><img src="/2022/01/16/%E5%BE%AA%E7%8E%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/rnn_unit.png" alt></p>
<p>(1) $W^{xh}, b^{xh}$: input layer –&gt; hidden layer<br>(2) $W^{hh}, b^{hh}$: hidden layer –&gt; hidden layer<br>(3) $W^{hy}, b^{hy}$: hidden layer –&gt; output layer     </p>
<p>When the RNN process a sequence input, it need to expand the network according to input time. Then:</p>
<ul>
<li>Every input of sequence will align to the different time unit.</li>
<li>And every output of the previous time will also be the input of this time unit.</li>
</ul>
<p><img src="/2022/01/16/%E5%BE%AA%E7%8E%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/rnn.png" alt></p>
<p>Formulaly,</p>

$$
\begin{matrix}
    h_t = tanh(W^{xh}x_t + b^{xh} + W^{hh}h_{t-1} + b^{hh}) \\
    y = Softmax(W^{hy}h_n + b^{hy})
\end{matrix}
$$


<p>where $tanh(z) = \frac{e^z - e^{-z}}{e^{z} + e^{-z}}$ is the activation function. The codomain of <strong>tanh</strong> is <strong>(-1, 1)</strong>.<br>Every time, the hidden layer $h_t$ beared all input information of 1~t. So the hidden layer in the RNN alse be called <strong>Memory Unit</strong>.</p>
<h1 id="LSTM-Structure"><a href="#LSTM-Structure" class="headerlink" title="LSTM Structure"></a>LSTM Structure</h1><p>The defects of RNN:</p>
<ul>
<li>Intuitivly, Information can be lost in the way from input to output through many hidden layers.</li>
<li>The parameter might hardly be optimized because of <strong>Gradient Vanish</strong> and <strong>Gradient Explode</strong>.</li>
</ul>
<p><strong>Long Short Term Memory Network</strong> is a variant Recurrent Neural Network which can keep long-term memory.</p>
<p><img src="/2022/01/16/%E5%BE%AA%E7%8E%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/lstm_unit.png" alt></p>
<h2 id="Motivation-and-Evolution"><a href="#Motivation-and-Evolution" class="headerlink" title="Motivation and Evolution"></a>Motivation and Evolution</h2><p>When we firstly see the structure figure, we might be confused of <strong>Why</strong>. Then we will derive it step by step.</p>
<p>(1)     </p>

$$
\begin{matrix}
    u_t = tanh(W^{xh}x_t + b^{xh} + W^{hh}h_{t-1} + b^{hh}) \\
    h_t = h_{t-1} + u_t
\end{matrix}
$$
    
<p>The advantage of this variant is connect $h_k$ and $h_t$ directly (k &lt; t), striding over several layers between them. Because $h_t = h_{t-1} + u_t = h_{t-2} + u_{t-1} + u_{t} = h_k + u_{k+1} + u_{k+2} + \cdots + u_{t-1} + u_{t}$.</p>
<p>(2)<br>Simply Adding old state $h_{t-1}$ and new state $u_t$ is a rough way without considering the contribution of each state. So we add a weight as a coefficient, also called <strong>gate</strong>.     </p>

$$
\begin{matrix}
    f_t = \sigma(W^{f,xh}x_t + b^{f,xh} + W^{f,hh}h_{t-1} + b^{f,hh}) \\
    i_t = \sigma(W^{i,xh}x_t + b^{i,xh} + W^{i,hh}h_{t-1} + b^{i,hh}) \\
    h_t = f_t \odot h_{t-1} + i_t \odot u_t
\end{matrix}
$$
    

<ul>
<li>$f_t$: Forget Gate. Smaller it is, the more old information lost.</li>
<li>$i_t$: Input Date. Greater it is, the more important new information is.</li>
</ul>
<p>(3)<br>We can also add <strong>Output Gate</strong>. And this is the standard LSTM.</p>

$$
\begin{matrix}
    f_t = \sigma(W^{f,xh}x_t + b^{f,xh} + W^{f,hh}h_{t-1} + b^{f,hh}) \\
    i_t = \sigma(W^{i,xh}x_t + b^{i,xh} + W^{i,hh}h_{t-1} + b^{i,hh}) \\
    c_t = f_t \odot h_{t-1} + i_t \odot u_t \\
    o_t = \sigma(W^{o,xh}x_t + b^{o,xh} + W^{o,hh}h_{t-1} + b^{o,hh}) \\
    h_t = o_t \odot tanh(c_t)
\end{matrix}
$$
   

<p>$c_t$ is named <strong>Memory Cell</strong>.</p>
<h1 id="Bi-RNN"><a href="#Bi-RNN" class="headerlink" title="Bi-RNN"></a>Bi-RNN</h1><p>Bi means <strong>Bidirectional</strong>. </p>
<p>In the traditional RNN, the flow of information is sole-direciton flow. It is not suitable in some tasks. For example, <strong>Part-Of-Speech Tagging</strong>, a word is not only related to previous world, but also related to next word. But in the sole-direction structure, it can not see the next word. </p>
<p>To solve the problem, someone proposed <strong>Bi-RNN</strong>. The core idea is input the same input sequence into 2 RNN networks, respectively forward and backward. Then concating those hidden layers as figure shows. Finally the concat units jointly predict the output.<br><img src="/2022/01/16/%E5%BE%AA%E7%8E%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/bi-rnn.png" alt></p>
<h1 id="Stacked-RNN"><a href="#Stacked-RNN" class="headerlink" title="Stacked RNN"></a>Stacked RNN</h1><p><img src="/2022/01/16/%E5%BE%AA%E7%8E%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/stacked-rnn.png" alt></p>
<h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><h2 id="RNN"><a href="#RNN" class="headerlink" title="RNN"></a>RNN</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> torch.nn <span class="keyword">import</span> RNN</span><br><span class="line">rnn = RNN(input_size=<span class="number">4</span>, hidden_size=<span class="number">5</span>, batch_first=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># inputs size = [batch_size, seq_len, word vector dimension]</span></span><br><span class="line">inputs = torch.rand(<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># outputs size = [batch_size, seq_len, hidden_size]</span></span><br><span class="line"><span class="comment"># hn size = [1, batch_size, hidden_size] : choose the last time hidden layer</span></span><br><span class="line">outputs, hn = rnn(inputs)</span><br></pre></td></tr></table></figure>
<p><strong>Other parameters</strong>: </p>
<ul>
<li><code>bidirectional=True</code>: Bi-RNN, default value is False.</li>
<li><code>num_layers=2</code>: Stacked-RNN, default values is 1.</li>
</ul>
<h2 id="LSTM"><a href="#LSTM" class="headerlink" title="LSTM"></a>LSTM</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> torch.nn <span class="keyword">import</span> LSTM</span><br><span class="line">lstm = LSTM(input_size=<span class="number">4</span>, hidden_size=<span class="number">5</span>, batch_first=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># inputs size = [batch_size, seq_len, word vector dimension]</span></span><br><span class="line">inputs = torch.rand(<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># outputs size = [batch_size, seq_len, hidden_size]</span></span><br><span class="line"><span class="comment"># hn size = [1, batch_size, hidden_size] : choose the last time hidden layer</span></span><br><span class="line"><span class="comment"># cn size = [1, batch_size, hidden_size] : choose the last time memory cell</span></span><br><span class="line">outputs, (hn, cn) = lstm(inputs)</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>Deep Learning</tag>
      </tags>
  </entry>
  <entry>
    <title>虚拟机安装ubuntu桌面版</title>
    <url>/2021/06/20/%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AE%89%E8%A3%85ubuntu%E6%A1%8C%E9%9D%A2%E7%89%88/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote class="blockquote-center">
<p>^ _ ^ </p>

</blockquote>
<a id="more"></a>

<h1 id="下载-ubuntu-ios"><a href="#下载-ubuntu-ios" class="headerlink" title="下载 ubuntu ios"></a>下载 ubuntu ios</h1><ol>
<li>前往清华镜像站：<a href="https://mirrors.tuna.tsinghua.edu.cn/" target="_blank" rel="noopener">https://mirrors.tuna.tsinghua.edu.cn/</a>。</li>
<li>在搜索框中搜索 <code>ubuntu</code> 关键字。</li>
<li>进入 <code>ubuntu-release</code> 文件夹中，选择合适版本进行下载。我选择的是 <strong>21.04</strong> 版。</li>
</ol>
<h1 id="VMWare-安装-ubuntu"><a href="#VMWare-安装-ubuntu" class="headerlink" title="VMWare 安装 ubuntu"></a>VMWare 安装 ubuntu</h1><p>步骤链接：<a href="https://zhuanlan.zhihu.com/p/141033713" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/141033713</a></p>
<h2 id="问题1：全屏显示"><a href="#问题1：全屏显示" class="headerlink" title="问题1：全屏显示"></a>问题1：全屏显示</h2><p>安装链接中有提到 <strong>全屏显示</strong> 问题的解决方法，这里对没有提及的一些要点进行补充：</p>
<ol>
<li><strong>VMware Tools</strong> 并不是本来就在桌面上的，需要点击 <strong>虚拟机 –&gt; 安装 VMware Tools</strong> 进行安装。</li>
<li>安装成功后，Ubuntu 桌面上会出现名为 <strong>VMware Tools</strong> 的文件夹。进入文件夹，解压后缀为 <code>tar.gz</code> 的压缩包。解压过程中，可能会出现 <strong>Not enough space to extract</strong> 错误提示。解决这个错误的方法是将压缩包复制到另外一个目录进行解压。</li>
<li>解压成功后会出现一个 <strong>vmware-tools-distrib</strong> 文件夹，在 <strong>terminal</strong> 中进入该文件夹，运行该文件夹下的 <code>vmware-install.pl</code> 脚本，执行命令为：<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo ./vmware-install.pl</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="问题2：时间调整"><a href="#问题2：时间调整" class="headerlink" title="问题2：时间调整"></a>问题2：时间调整</h2><p>安装后 ubuntu 系统显示的时间不是很准确，在 <strong>Settings</strong> 中的 <strong>Date &amp; Time</strong> 下进行手动修改即可。</p>
<h2 id="问题3：网络连接"><a href="#问题3：网络连接" class="headerlink" title="问题3：网络连接"></a>问题3：网络连接</h2><p>方案一：编辑 –&gt; 虚拟网络编辑器 –&gt; 更改设置 –&gt; 还原默认设置<br>方案二：卸载 VMWare 重装</p>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>虚拟机 ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>群、环、域</title>
    <url>/2020/09/13/%E7%BE%A4%E3%80%81%E7%8E%AF%E3%80%81%E5%9F%9F/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote class="blockquote-center">
<p>^ _ ^ </p>

</blockquote>
<a id="more"></a>

<h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><ul>
<li>群：具有一个二元代数运算的代数系统</li>
<li>环：具有两个代数运算的代数系统</li>
<li>域：特殊的环</li>
</ul>
<h1 id="代数系统"><a href="#代数系统" class="headerlink" title="代数系统"></a>代数系统</h1><p><strong>代数运算</strong> </p>
<blockquote>
<p>在集合S中任取n个元素a1,a2,…an进行一个运算f，f(a1,a2,…an)=c，得到的c也属于集合S，则f是n元代数运算</p>
</blockquote>
<p><strong>实例判断</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 自然数集N上的加法、减法、乘法、除法，哪些是在N上的二元代数运算？</span><br><span class="line"></span><br><span class="line">2. 整数集上的加法、减法、乘法、除法，哪些是在N上的二元代数运算？</span><br><span class="line"></span><br><span class="line">待补充</span><br></pre></td></tr></table></figure>

<p><strong>代数系统</strong></p>
<blockquote>
<p>设S是一个非空集合，f1,f2,…fm是S上的若干代数运算，把S及其运算f1,…fm作为一个整体来看，叫做一个代数系统，记作(S,f1,…fm)</p>
</blockquote>
<p><strong>实例判断</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. S为一个非空集合，p(S)是S的幂集，交运算和并运算是p(S)上的运算，(p(S),交，并)是代数系统吗？</span><br><span class="line"></span><br><span class="line">待补充</span><br></pre></td></tr></table></figure>

<h1 id="群"><a href="#群" class="headerlink" title="群"></a>群</h1><p><strong>半群</strong></p>
<ol>
<li>G是一个非空集合</li>
<li>@是G上的一个二元代数运算且@满足结合律</li>
</ol>
<p>满足1，2的代数系统(G,@)为半群</p>
<p><strong>实例</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 设Z为整数集，+、-、*是数的加法、减法、乘法，问(Z,+),(Z,-),(Z,*)是半群吗？</span><br><span class="line"></span><br><span class="line">待补充</span><br></pre></td></tr></table></figure>

<p><strong>群</strong></p>
<ol>
<li>G为半群</li>
<li>G中有一个元素1，对于G中任意元素a，都有1 @ a = a @ 1 = a</li>
<li>对于G中任意元素a，都可以找到G中一个元素a(-1)，满足a @ a(-1) = a(-1) @ a = 1，其中a(-1)表示a逆</li>
</ol>
<p>满足1，2，3的代数系统(G,@)为群</p>
<h2 id="群的性质"><a href="#群的性质" class="headerlink" title="群的性质"></a>群的性质</h2><p>待补充…</p>
<h2 id="特殊群"><a href="#特殊群" class="headerlink" title="特殊群"></a>特殊群</h2><p><strong>阿贝尔群/交换群</strong>  </p>
<blockquote>
<p>群(G,@)中，@运算适合交换律，则此群为交换群</p>
</blockquote>
<p><strong>置换群</strong></p>
<blockquote>
<p>群G中所有元素经过置换变换@后得到的元素集合是原始元素的一个新的排列，则群(G,@)是置换群</p>
</blockquote>
<ul>
<li>n元置换群又称为n次对称群</li>
</ul>
<p>置换群相关的一些概念，待补充….</p>
<h2 id="子群"><a href="#子群" class="headerlink" title="子群"></a>子群</h2><ol>
<li>(G,@)是一个群</li>
<li>H是G的一个子集，按照运算@，H仍然是一个群</li>
</ol>
<p>满足1，2的代数系统(H,@)为(G,@)的子群</p>
<p><strong>平凡子群</strong><br>一个群G都有两个明显的子群，一个是由其单位元素组成的子群，称为单位子群；还有一个就是G本身。这两个子群称为平凡子群。</p>
<h3 id="子群的判别条件"><a href="#子群的判别条件" class="headerlink" title="子群的判别条件"></a>子群的判别条件</h3><h3 id="循环群"><a href="#循环群" class="headerlink" title="循环群"></a>循环群</h3><p><strong>生成元</strong></p>
<ol>
<li>设a是群(G,@)中的一个元素</li>
<li>a的所有幂的集合作为G的一个子群，记为(a)</li>
</ol>
<p>此群称为a生成的子群</p>
<p><strong>循环群</strong></p>
<blockquote>
<p>若一个群可由其某个元素a生成，则G是一个循环群</p>
</blockquote>
<h3 id="陪集"><a href="#陪集" class="headerlink" title="陪集"></a>陪集</h3>]]></content>
      <categories>
        <category>离散数学</category>
      </categories>
      <tags>
        <tag>群环域</tag>
      </tags>
  </entry>
  <entry>
    <title>详解Java线程</title>
    <url>/2020/09/19/%E8%AF%A6%E8%A7%A3Java%E7%BA%BF%E7%A8%8B/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote class="blockquote-center">
<p>^ _ ^ </p>

</blockquote>

<a id="more"></a>

<h1 id="用户线程和内核线程"><a href="#用户线程和内核线程" class="headerlink" title="用户线程和内核线程"></a>用户线程和内核线程</h1><p><strong>用户线程</strong>：</p>
<ul>
<li>用户程序实现，不依赖操作系统核心</li>
<li>应用程序提供创建、同步、调度和管理线程的函数来控制用户线程</li>
<li>不需要用户态/内核态的切换</li>
<li>内核对用户线程无感知，线程阻塞则进程阻塞</li>
</ul>
<p><img src="/2020/09/19/%E8%AF%A6%E8%A7%A3Java%E7%BA%BF%E7%A8%8B/1.jpg" alt></p>
<p><strong>内核线程</strong>：</p>
<ul>
<li>系统内核管理线程，内核保存线程的状态和上下文信息，线程的创建、同步、调度和管理由内核完成</li>
<li>线程阻塞不会引起进程阻塞</li>
</ul>
<p><img src="/2020/09/19/%E8%AF%A6%E8%A7%A3Java%E7%BA%BF%E7%A8%8B/2.jpg" alt></p>
<h1 id="Java线程的创建方式"><a href="#Java线程的创建方式" class="headerlink" title="Java线程的创建方式"></a>Java线程的创建方式</h1><h2 id="1-继承Thread类"><a href="#1-继承Thread类" class="headerlink" title="1. 继承Thread类"></a>1. 继承Thread类</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Demo1 &#123;</span><br><span class="line">    static int i &#x3D; 0;</span><br><span class="line">    public static class NewThread extends Thread&#123;</span><br><span class="line">        public void run()&#123;</span><br><span class="line">            while(i &lt; 100)&#123;</span><br><span class="line">                System.out.println(&quot;NewThread:&quot; + i++);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        new Demo1.NewThread().start();</span><br><span class="line">        while(i &lt; 100)&#123;</span><br><span class="line">            System.out.println(&quot;main:&quot; + i++);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-实现Runnable接口"><a href="#2-实现Runnable接口" class="headerlink" title="2. 实现Runnable接口"></a>2. 实现Runnable接口</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Demo2 &#123;</span><br><span class="line">    static int i;</span><br><span class="line">    class NewThread implements Runnable&#123;</span><br><span class="line">        public void run()&#123;</span><br><span class="line">            while(i &lt; 100)&#123;</span><br><span class="line">                System.out.println(&quot;NewThread：&quot; + i++);</span><br><span class="line">                try &#123;</span><br><span class="line">                    Thread.sleep(1);</span><br><span class="line">                &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void test()&#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            new Thread(new NewThread()).start();</span><br><span class="line">            while(i &lt; 100)&#123;</span><br><span class="line">                System.out.println(&quot;Main：&quot; + i++);</span><br><span class="line">                try &#123;</span><br><span class="line">                    Thread.sleep(1);</span><br><span class="line">                &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-通过ExecutorService和Callable"><a href="#3-通过ExecutorService和Callable" class="headerlink" title="3. 通过ExecutorService和Callable"></a>3. 通过ExecutorService和Callable<Class></Class></h2><blockquote>
<p>有时，我们需要在主线程中开启多个线程并发执行一个任务，然后收集各个线程执行返回的结果并将最终结果汇总起来，这时就要用到Callable接口。通过ExecutorService和Callable可以实现有返回值的线程</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Demo3 &#123;</span><br><span class="line">    class MyCallable implements Callable&lt;String&gt;&#123;</span><br><span class="line">        private String name;</span><br><span class="line">        public MyCallable(String name)&#123;</span><br><span class="line">            this.name &#x3D; name;</span><br><span class="line">        &#125;</span><br><span class="line">        @Override</span><br><span class="line">        public String call() throws Exception &#123; &#x2F;&#x2F; 线程实现逻辑</span><br><span class="line">            return name;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F; 创建一个大小为5的线程池</span><br><span class="line">    ExecutorService pool &#x3D; Executors.newFixedThreadPool(5);</span><br><span class="line">    &#x2F;&#x2F; 创建一个有多个返回值的任务列表</span><br><span class="line">    List&lt;Future&gt; list &#x3D; new ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void test()&#123;</span><br><span class="line">        for (int i &#x3D; 0; i &lt; 5; i++) &#123;</span><br><span class="line">            &#x2F;&#x2F; 创建一个有返回值的线程实例</span><br><span class="line">            Callable&lt;String&gt; thread &#x3D; new MyCallable(i + &quot; &quot;);</span><br><span class="line">            &#x2F;&#x2F; 提交线程，获取Future放入list中</span><br><span class="line">            Future future &#x3D; pool.submit(thread);</span><br><span class="line">            list.add(future);</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F; 关闭线程池，等待线程执行结束</span><br><span class="line">        pool.shutdown();</span><br><span class="line">        &#x2F;&#x2F; 遍历所有线程执行结果</span><br><span class="line">        for (Future future : list) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                System.out.println(future.get().toString());</span><br><span class="line">            &#125; catch (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="4-基于线程池"><a href="#4-基于线程池" class="headerlink" title="4. 基于线程池"></a>4. 基于线程池</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Demo4 &#123;</span><br><span class="line">    static int index &#x3D; 0;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void test()&#123;</span><br><span class="line">        ExecutorService threadPool &#x3D; Executors.newFixedThreadPool(5);</span><br><span class="line">        for (int i &#x3D; 0; i &lt; 5; i++) &#123;</span><br><span class="line">            threadPool.execute(new Runnable() &#123;</span><br><span class="line">                @Override</span><br><span class="line">                public void run() &#123;</span><br><span class="line">                    while(index &lt; 100)&#123;</span><br><span class="line">                        System.out.println(Thread.currentThread().getName() + &quot;:&quot; + index++);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="线程池的工作原理"><a href="#线程池的工作原理" class="headerlink" title="线程池的工作原理"></a>线程池的工作原理</h1><p><strong>Java线程池的核心组件</strong></p>
<ul>
<li>线程池管理器：用于创建并管理线程</li>
<li>工作线程：线程池中执行特定任务的线程</li>
<li>任务接口：用于定义工作线程的执行和调度策略</li>
<li>任务队列：存放待处理的任务</li>
</ul>
<p><strong>ThreadPoolExecutor</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public ThreadPoolExecutor(int corePoolSize,  &#x2F;&#x2F; 线程池中核心线程的容量</span><br><span class="line">                        int maximumPoolSize, &#x2F;&#x2F; 线程池容量</span><br><span class="line">                        long keepAliveTime,  &#x2F;&#x2F; 空闲线程的最长存活时间</span><br><span class="line">                        TimeUit unit,        &#x2F;&#x2F; 存活时间单位</span><br><span class="line">                        BlockingQueue&lt;Runnable&gt; workQueue) &#x2F;&#x2F; 任务队列</span><br><span class="line">&#123;</span><br><span class="line">    this(corePoolSize,maxmiumPoolSize,keepAliveTime,unit,workQueue,</span><br><span class="line">        Executors.defaultThreadFactory(),defaultHandler);</span><br><span class="line">    &#x2F;&#x2F; threadFactory:线程工厂</span><br><span class="line">    &#x2F;&#x2F; defaultHandler:线程池无法处理任务时的拒绝策略</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>线程池的工作原理</strong></p>
<ul>
<li>线程池刚被创建时，会向系统申请一个管理线程作为线程池管理器</li>
<li>在调用<code>execute()</code>函数添加一个任务时，线程执行步骤如下：<ul>
<li>线程池中有空闲线程，取出空闲线程对任务进行执行</li>
<li>线程池中正在运行线程数量 &lt; corePoolSize：创建一个核心线程并执行该任务</li>
<li>线程池中正在运行线程数量 &gt;= corePoolSize：任务加入BlockingQueue</li>
<li>阻塞队列已满 &amp;&amp; 线程池中正在运行线程数量 &lt; maxmiumPoolSize：创建一个非核心线程并执行该任务</li>
<li>阻塞队列已满 &amp;&amp; 线程池中正在运行线程数量 &gt;= maxmiumPoolSize：拒绝执行该任务</li>
</ul>
</li>
<li>线程任务执行完成后，任务将从BlockingQueue中移除，线程池管理器中将从任务队列中再取出一个任务进行执行</li>
<li>在线程处于空闲状态的时间超过keepAliveTime时间时 &amp;&amp; 正在运行的线程数量超过corePoolSize，该线程将会被认定为空闲线程并停止</li>
</ul>
<p><strong>线程池的拒绝策略</strong></p>
<ul>
<li><ol>
<li>AbortPolicy：抛出异常，阻止线程运行</li>
</ol>
</li>
<li><ol start="2">
<li>CallerRunsPolicy：如果被丢弃的线程任务未关闭，则执行该线程任务</li>
</ol>
</li>
<li><ol start="3">
<li>移除阻塞队列中最早的一个线程任务，并尝试提交当前任务</li>
</ol>
</li>
<li><ol start="4">
<li>丢弃当前线程任务不作任何处理</li>
</ol>
</li>
</ul>
<h1 id="常用线程池"><a href="#常用线程池" class="headerlink" title="常用线程池"></a>常用线程池</h1><h2 id="1-newCachedThreadPool"><a href="#1-newCachedThreadPool" class="headerlink" title="1. newCachedThreadPool"></a>1. newCachedThreadPool</h2><blockquote>
<p>可缓存线程池</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ExecutorService threadPool &#x3D; Executors.newCachedThreadPool();</span><br></pre></td></tr></table></figure>

<p><strong>执行策略</strong></p>
<ul>
<li>处理新任务时，如果当前线程中有可重用线程，则重用它们</li>
<li>否则，创建一个新线程并将其添加到线程池中</li>
<li>线程池中的空闲线程存活时间超过设置的keepAliveTime后，该线程会被终止并从缓存中移除</li>
</ul>
<h2 id="2-newFixedThreadPool"><a href="#2-newFixedThreadPool" class="headerlink" title="2. newFixedThreadPool"></a>2. newFixedThreadPool</h2><blockquote>
<p>固定大小线程池，用于创建一个固定线程数量的线程池，并将线程资源存放在队列中循环使用</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ExecutorService threadPool &#x3D; Executors.newFixedThreadPool(5);</span><br></pre></td></tr></table></figure>

<h2 id="3-newScheduledThreadPool"><a href="#3-newScheduledThreadPool" class="headerlink" title="3. newScheduledThreadPool"></a>3. newScheduledThreadPool</h2><blockquote>
<p>可定时调度线程池，可以在设定延迟时间后或者定期执行某个线程任务</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ScheduledExecutorService threadPool &#x3D; Executors.newScheduledThreadPool();</span><br><span class="line">&#x2F;&#x2F; 1. 创建一个延迟3s执行的线程</span><br><span class="line">threadPool.schedule(new Runnable()&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void run()&#123;&#x2F;&#x2F;...&#125;</span><br><span class="line">&#125;,3,TimeUnit.SECONDS);</span><br><span class="line">&#x2F;&#x2F; 2. 创建一个延迟1s且每3s执行一次的线程</span><br><span class="line">threadPool.schedule(new Runnable()&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void run()&#123;&#x2F;&#x2F;...&#125;</span><br><span class="line">&#125;,1,3,TimeUnit.SECONDS);</span><br></pre></td></tr></table></figure>

<h2 id="4-newSingleThreadExecutor"><a href="#4-newSingleThreadExecutor" class="headerlink" title="4. newSingleThreadExecutor"></a>4. newSingleThreadExecutor</h2><blockquote>
<p>线程池会保证永远有且只有一个可用的线程，在该线程停止或发生异常时，newSingleThreadExecutor线程池会启动一个新的线程来代替该线程继续执行任务</p>
</blockquote>
<h2 id="5-newWorkStealingPool"><a href="#5-newWorkStealingPool" class="headerlink" title="5. newWorkStealingPool"></a>5. newWorkStealingPool</h2><blockquote>
<p>创建持有足够线程的线程池来达到快速运算的目的，在内部通过使用多个队列来减少各个线程调度产生的竞争</p>
</blockquote>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>线程</tag>
      </tags>
  </entry>
  <entry>
    <title>简单粒子系统</title>
    <url>/2020/07/13/%E7%AE%80%E5%8D%95%E7%B2%92%E5%AD%90%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote class="blockquote-center">
<p>模拟洒水系统 </p>

</blockquote>

<a id="more"></a>

<h1 id="思路简述"><a href="#思路简述" class="headerlink" title="思路简述"></a>思路简述</h1><p>Main文件部分与创建茶壶网格模型基本相同，不同点在于 全局变量、顶点格式、 InitGeometry 函数、 Render 函数、 ClearUp 函数部分有所不同。</p>
<h2 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h2><p>增加</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CParticleSystem*        g_pSprayParticles;     &#x2F;&#x2F;喷洒粒子系统对象</span><br></pre></td></tr></table></figure>

<h2 id="顶点格式"><a href="#顶点格式" class="headerlink" title="顶点格式"></a>顶点格式</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">struct CUSTOMVERTEX</span><br><span class="line">&#123;</span><br><span class="line">    D3DXVECTOR3 position;</span><br><span class="line">    D3DXVECTOR3 normal;</span><br><span class="line">&#125;;</span><br><span class="line">#define D3DFVF_CUSTOMVERTEX (D3DFVF_XYZ | D3DFVF_NORMAL)</span><br></pre></td></tr></table></figure>

<h2 id="InitGeometry"><a href="#InitGeometry" class="headerlink" title="InitGeometry"></a>InitGeometry</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;创建喷洒粒子系统对象</span><br><span class="line">g_pSprayParticles &#x3D; new CParticleSystem(500,2000);</span><br><span class="line">g_pSprayParticles-&gt;Create( g_pd3dDevice );</span><br></pre></td></tr></table></figure>

<h2 id="Render"><a href="#Render" class="headerlink" title="Render"></a>Render</h2><p>增加粒子系统的渲染</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;渲染粒子系统</span><br><span class="line">g_pSprayParticles-&gt;Render(g_pd3dDevice);</span><br></pre></td></tr></table></figure>

<h2 id="ClearUp"><a href="#ClearUp" class="headerlink" title="ClearUp"></a>ClearUp</h2><p>增加粒子系统的删除</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;销毁粒子系统对象</span><br><span class="line">if( g_pSprayParticles !&#x3D; NULL )</span><br><span class="line">    g_pSprayParticles-&gt;Destroy();</span><br><span class="line">SAFE_DELETE(g_pSprayParticles);</span><br></pre></td></tr></table></figure>

<h1 id="ParticalSystem类"><a href="#ParticalSystem类" class="headerlink" title="ParticalSystem类"></a>ParticalSystem类</h1><blockquote>
<p>处理粒子系统部分，包括粒子系统的定义、创建、渲染和销毁</p>
</blockquote>
<h1 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h1><h2 id="ParticalSystem-h"><a href="#ParticalSystem-h" class="headerlink" title="ParticalSystem.h"></a>ParticalSystem.h</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; </span><br><span class="line">&#x2F;&#x2F; Desc: 喷洒粒子系统类头文件</span><br><span class="line">&#x2F;&#x2F;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">#pragma once</span><br><span class="line">#include &quot;UtilMacro.h&quot;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;点精灵顶点结构和顶点格式</span><br><span class="line">struct POINTVERTEX</span><br><span class="line">&#123;</span><br><span class="line">    D3DXVECTOR3 pos;</span><br><span class="line">    D3DCOLOR    color;</span><br><span class="line">&#125;;</span><br><span class="line">#define D3DFVF_POINTVERTEX (D3DFVF_XYZ|D3DFVF_DIFFUSE)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;-----------------------------------------------------------------------------</span><br><span class="line">&#x2F;&#x2F; Desc: 粒子结构</span><br><span class="line">&#x2F;&#x2F;-----------------------------------------------------------------------------</span><br><span class="line">struct PARTICLE</span><br><span class="line">&#123;</span><br><span class="line">	D3DXVECTOR3 m_vPos0;      &#x2F;&#x2F;初始位置</span><br><span class="line">    D3DXVECTOR3 m_vVel0;      &#x2F;&#x2F;初始速度</span><br><span class="line">    float       m_fTime0;     &#x2F;&#x2F;创建时间</span><br><span class="line">    D3DXVECTOR3 m_vPos;       &#x2F;&#x2F;当前位置</span><br><span class="line">    D3DXVECTOR3 m_vVel;       &#x2F;&#x2F;当前速度</span><br><span class="line">    D3DXCOLOR   m_vColor;     &#x2F;&#x2F;粒子颜色</span><br><span class="line">    PARTICLE*   m_pNext;      &#x2F;&#x2F;指向下一粒子的指针</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;-----------------------------------------------------------------------------</span><br><span class="line">&#x2F;&#x2F; Desc: 粒子系统类的定义</span><br><span class="line">&#x2F;&#x2F;-----------------------------------------------------------------------------</span><br><span class="line">class CParticleSystem</span><br><span class="line">&#123;</span><br><span class="line">private:</span><br><span class="line">    DWORD     m_dwParticlesLim;   &#x2F;&#x2F;链表中粒子的最大数量</span><br><span class="line">    PARTICLE* m_pParticles;       &#x2F;&#x2F;当前粒子链表</span><br><span class="line">    PARTICLE* m_pParticlesFree;   &#x2F;&#x2F;保存已经死亡粒子的链表, 从该链表为新粒子分配内存</span><br><span class="line"></span><br><span class="line">    LPDIRECT3DVERTEXBUFFER9   m_pVB;        &#x2F;&#x2F;保存粒子数据的顶点缓存</span><br><span class="line">	LPDIRECT3DTEXTURE9        m_pTexture;   &#x2F;&#x2F;粒子纹理</span><br><span class="line"></span><br><span class="line">	DWORD  m_dwBase;       &#x2F;&#x2F;每次填充顶点缓存时的起始位置</span><br><span class="line">    DWORD  m_dwFlush;      &#x2F;&#x2F;一次填充顶点缓存的粒子数量</span><br><span class="line">    DWORD  m_dwDiscard;    &#x2F;&#x2F;顶点缓存能够容纳的最大粒子数量</span><br><span class="line"></span><br><span class="line">public:</span><br><span class="line">	DWORD  m_dwParticles;  &#x2F;&#x2F;当前链表中粒子的数量</span><br><span class="line"></span><br><span class="line">public:</span><br><span class="line">	CParticleSystem( DWORD dwFlush, DWORD dwDiscard);</span><br><span class="line">	~CParticleSystem();</span><br><span class="line">	HRESULT Create(LPDIRECT3DDEVICE9 pd3dDevice);</span><br><span class="line">	HRESULT Update( float fSecsPerFrame);</span><br><span class="line">	HRESULT Render( LPDIRECT3DDEVICE9 pd3dDevice );</span><br><span class="line">	HRESULT Destroy();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="ParticleSystem-cpp"><a href="#ParticleSystem-cpp" class="headerlink" title="ParticleSystem.cpp"></a>ParticleSystem.cpp</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">&#x2F;&#x2F; Desc:     喷洒粒子系统类源文件</span><br><span class="line">&#x2F;&#x2F;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">#include &quot;d3dx9.h&quot;</span><br><span class="line">#include &quot;ParticleSystem.h&quot;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;-----------------------------------------------------------------------------</span><br><span class="line">&#x2F;&#x2F; Desc: 构造函数</span><br><span class="line">&#x2F;&#x2F;-----------------------------------------------------------------------------</span><br><span class="line">CParticleSystem::CParticleSystem( DWORD dwFlush, DWORD dwDiscard)</span><br><span class="line">&#123;</span><br><span class="line">    m_dwBase         &#x3D; 0;</span><br><span class="line">    m_dwFlush        &#x3D; dwFlush;</span><br><span class="line">	m_dwDiscard      &#x3D; dwDiscard;</span><br><span class="line"></span><br><span class="line">    m_dwParticles    &#x3D; 0;</span><br><span class="line">    m_dwParticlesLim &#x3D; 2000;</span><br><span class="line"></span><br><span class="line">    m_pParticles     &#x3D; NULL;</span><br><span class="line">    m_pParticlesFree &#x3D; NULL;</span><br><span class="line">	m_pVB            &#x3D; NULL;</span><br><span class="line">	m_pTexture &#x3D; NULL;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;-----------------------------------------------------------------------------</span><br><span class="line">&#x2F;&#x2F; Desc: 析构函数</span><br><span class="line">&#x2F;&#x2F;-----------------------------------------------------------------------------</span><br><span class="line">CParticleSystem::~CParticleSystem()</span><br><span class="line">&#123;</span><br><span class="line">    while( m_pParticles )</span><br><span class="line">    &#123;</span><br><span class="line">        PARTICLE* pParticle &#x3D; m_pParticles;</span><br><span class="line">        m_pParticles &#x3D; pParticle-&gt;m_pNext;</span><br><span class="line">        delete pParticle;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    while( m_pParticlesFree )</span><br><span class="line">    &#123;</span><br><span class="line">        PARTICLE *pParticle &#x3D; m_pParticlesFree;</span><br><span class="line">        m_pParticlesFree &#x3D; pParticle-&gt;m_pNext;</span><br><span class="line">        delete pParticle;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;-----------------------------------------------------------------------------</span><br><span class="line">&#x2F;&#x2F; Desc: 创建粒子纹理</span><br><span class="line">&#x2F;&#x2F;-----------------------------------------------------------------------------</span><br><span class="line">HRESULT CParticleSystem::Create( LPDIRECT3DDEVICE9 pd3dDevice )</span><br><span class="line">&#123;</span><br><span class="line">	HRESULT hr;</span><br><span class="line"></span><br><span class="line">	V_RETURN( D3DXCreateTextureFromFile(pd3dDevice, L&quot;particle.bmp&quot;, &amp;m_pTexture ));</span><br><span class="line"></span><br><span class="line">	V_RETURN( pd3dDevice-&gt;CreateVertexBuffer( m_dwDiscard * </span><br><span class="line">		sizeof(POINTVERTEX), D3DUSAGE_DYNAMIC | D3DUSAGE_WRITEONLY | D3DUSAGE_POINTS, </span><br><span class="line">		D3DFVF_POINTVERTEX, D3DPOOL_SYSTEMMEM, &amp;m_pVB, NULL ));</span><br><span class="line"></span><br><span class="line">	return S_OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;-----------------------------------------------------------------------------</span><br><span class="line">&#x2F;&#x2F; Desc: 更新当前粒子的属性</span><br><span class="line">&#x2F;&#x2F;-----------------------------------------------------------------------------</span><br><span class="line">HRESULT CParticleSystem::Update( float fSecsPerFrame)</span><br><span class="line">&#123;</span><br><span class="line">    PARTICLE *pParticle, **ppParticle;</span><br><span class="line">    static float fTime &#x3D; 0.0f;</span><br><span class="line">    fTime +&#x3D; fSecsPerFrame;</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F;更新已存在粒子的属性值</span><br><span class="line">    ppParticle &#x3D; &amp;m_pParticles;   &#x2F;&#x2F;粒子链表</span><br><span class="line">    while( *ppParticle )</span><br><span class="line">    &#123;</span><br><span class="line">        pParticle &#x3D; *ppParticle;  &#x2F;&#x2F;取出当前粒子</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;计算粒子的新位置</span><br><span class="line">        float fT &#x3D; fTime - pParticle-&gt;m_fTime0;  &#x2F;&#x2F;当前粒子已存活的时间</span><br><span class="line">        float fGravity &#x3D; -9.8f;</span><br><span class="line">        pParticle-&gt;m_vPos    &#x3D; pParticle-&gt;m_vVel0 * fT + pParticle-&gt;m_vPos0;</span><br><span class="line">        pParticle-&gt;m_vPos.y +&#x3D; (0.5f * fGravity) * (fT * fT);</span><br><span class="line">        pParticle-&gt;m_vVel.y  &#x3D; pParticle-&gt;m_vVel0.y + fGravity * fT; </span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;如果粒子死亡则删除</span><br><span class="line">        if( pParticle-&gt;m_vPos.y &lt; 0 )  &#x2F;&#x2F;在本中判断粒子死亡的条件是粒子已经落到地面</span><br><span class="line">        &#123;</span><br><span class="line">            *ppParticle &#x3D; pParticle-&gt;m_pNext;</span><br><span class="line">            pParticle-&gt;m_pNext &#x3D; m_pParticlesFree;</span><br><span class="line">            m_pParticlesFree &#x3D; pParticle;</span><br><span class="line">            m_dwParticles--;</span><br><span class="line">        &#125;</span><br><span class="line">        else  &#x2F;&#x2F;准备处理下一个粒子</span><br><span class="line">        &#123;</span><br><span class="line">            ppParticle &#x3D; &amp;pParticle-&gt;m_pNext;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;添加新粒子</span><br><span class="line">	DWORD  dwEmited &#x3D; 0;</span><br><span class="line">	UINT numEmitedPerFrame &#x3D; (UINT)(1000*fSecsPerFrame);    &#x2F;&#x2F;每次发射的粒子数</span><br><span class="line">    while( m_dwParticles &lt; m_dwParticlesLim &amp;&amp; dwEmited&lt;&#x3D;numEmitedPerFrame)</span><br><span class="line">    &#123;</span><br><span class="line">		&#x2F;&#x2F;创建一个新粒子</span><br><span class="line">        if( m_pParticlesFree )</span><br><span class="line">        &#123;</span><br><span class="line">            pParticle &#x3D; m_pParticlesFree;</span><br><span class="line">            m_pParticlesFree &#x3D; pParticle-&gt;m_pNext;</span><br><span class="line">        &#125;</span><br><span class="line">        else</span><br><span class="line">        &#123;</span><br><span class="line">            if( NULL &#x3D;&#x3D; ( pParticle &#x3D; new PARTICLE ) )</span><br><span class="line">                return E_OUTOFMEMORY;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">		&#x2F;&#x2F;将新粒子链接到粒子链表</span><br><span class="line">        pParticle-&gt;m_pNext &#x3D; m_pParticles;</span><br><span class="line">        m_pParticles &#x3D; pParticle;</span><br><span class="line">        m_dwParticles++;</span><br><span class="line">		dwEmited++;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;为新粒子设置初始位置、初始速度、当前位置、当前速度、颜色和创建时间等属性</span><br><span class="line">        float fRand &#x3D; ((float)rand()&#x2F;(float)RAND_MAX)*2.0f - 1.0f;  &#x2F;&#x2F;[-1,1]</span><br><span class="line">        pParticle-&gt;m_vPos0 &#x3D; D3DXVECTOR3(0,1,0);    &#x2F;&#x2F;粒子初始位置</span><br><span class="line">        pParticle-&gt;m_vVel0.x  &#x3D; 8.0f*fRand;         &#x2F;&#x2F;粒子初始速度</span><br><span class="line">        pParticle-&gt;m_vVel0.z  &#x3D; 10.0f;</span><br><span class="line">		pParticle-&gt;m_vVel0.y  &#x3D; 0.0f;</span><br><span class="line"></span><br><span class="line">        pParticle-&gt;m_vPos &#x3D; pParticle-&gt;m_vPos0;     </span><br><span class="line">        pParticle-&gt;m_vVel &#x3D; pParticle-&gt;m_vVel0;</span><br><span class="line"></span><br><span class="line">        pParticle-&gt;m_vColor &#x3D; D3DXCOLOR(1.0f, 1.0f, 1.0f, 1.0f);  &#x2F;&#x2F;粒子颜色</span><br><span class="line">        pParticle-&gt;m_fTime0     &#x3D; fTime;            &#x2F;&#x2F;粒子创建时间</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return S_OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;将FLOAT型参数转换为DWORD型</span><br><span class="line">inline DWORD FtoDW( FLOAT f ) &#123; return *((DWORD*)&amp;f); &#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;-----------------------------------------------------------------------------</span><br><span class="line">&#x2F;&#x2F; Desc: 渲染粒子系统</span><br><span class="line">&#x2F;&#x2F;-----------------------------------------------------------------------------</span><br><span class="line">HRESULT CParticleSystem::Render( LPDIRECT3DDEVICE9 pd3dDevice )</span><br><span class="line">&#123;</span><br><span class="line">    HRESULT hr;</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F;为使用点精灵设置相关渲染状态</span><br><span class="line">    pd3dDevice-&gt;SetRenderState( D3DRS_POINTSPRITEENABLE, true );     &#x2F;&#x2F;使用点精灵</span><br><span class="line">    pd3dDevice-&gt;SetRenderState( D3DRS_POINTSCALEENABLE,  true );</span><br><span class="line">    pd3dDevice-&gt;SetRenderState( D3DRS_POINTSIZE,     FtoDW(0.1f) );  &#x2F;&#x2F;粒子大小</span><br><span class="line">    pd3dDevice-&gt;SetRenderState( D3DRS_POINTSIZE_MIN, FtoDW(0.00f) ); &#x2F;&#x2F;点的最小尺寸</span><br><span class="line">    pd3dDevice-&gt;SetRenderState( D3DRS_POINTSCALE_A,  FtoDW(0.00f) );</span><br><span class="line">    pd3dDevice-&gt;SetRenderState( D3DRS_POINTSCALE_B,  FtoDW(0.00f) );</span><br><span class="line">    pd3dDevice-&gt;SetRenderState( D3DRS_POINTSCALE_C,  FtoDW(1.00f) );</span><br><span class="line"></span><br><span class="line">	pd3dDevice-&gt;SetRenderState( D3DRS_LIGHTING, false );        &#x2F;&#x2F;禁用光照处理</span><br><span class="line">	pd3dDevice-&gt;SetRenderState( D3DRS_ZWRITEENABLE, false );     &#x2F;&#x2F;禁用深度缓存操作</span><br><span class="line">    pd3dDevice-&gt;SetRenderState( D3DRS_ALPHABLENDENABLE, true );  &#x2F;&#x2F;启用Alpha 混合</span><br><span class="line">    pd3dDevice-&gt;SetRenderState( D3DRS_SRCBLEND, D3DBLEND_ONE );  &#x2F;&#x2F;注意Alpha混合方式</span><br><span class="line">    pd3dDevice-&gt;SetRenderState( D3DRS_DESTBLEND, D3DBLEND_ONE );</span><br><span class="line"></span><br><span class="line">	pd3dDevice-&gt;SetTexture(0, m_pTexture );   &#x2F;&#x2F;设置粒子纹理</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;为渲染粒子准备顶点缓存数据</span><br><span class="line">    pd3dDevice-&gt;SetStreamSource( 0, m_pVB, 0, sizeof(POINTVERTEX) );</span><br><span class="line">    pd3dDevice-&gt;SetFVF( D3DFVF_POINTVERTEX );</span><br><span class="line"></span><br><span class="line">    PARTICLE*    pParticle &#x3D; m_pParticles;</span><br><span class="line">    POINTVERTEX* pVertices;</span><br><span class="line">    DWORD        dwNumParticlesToRender &#x3D; 0;</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F;确定锁定顶点缓存的起始位置</span><br><span class="line">	m_dwBase +&#x3D; m_dwFlush;</span><br><span class="line">	if(m_dwBase &gt;&#x3D; m_dwDiscard)  &#x2F;&#x2F;顶点缓存已满, 重新从头开始锁定</span><br><span class="line">		m_dwBase &#x3D; 0;</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F;锁定一个顶点缓存片段</span><br><span class="line">	V_RETURN( hr &#x3D; m_pVB-&gt;Lock( m_dwBase * sizeof(POINTVERTEX), m_dwFlush * sizeof(POINTVERTEX),</span><br><span class="line">		(void**) &amp;pVertices, m_dwBase ? D3DLOCK_NOOVERWRITE : D3DLOCK_DISCARD ));</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;使用粒子位置和颜色数据填充顶点缓存, 并渲染</span><br><span class="line">    while( pParticle )</span><br><span class="line">    &#123;</span><br><span class="line">		&#x2F;&#x2F;根据粒子的运动速度确定其模糊程度,</span><br><span class="line">        D3DXVECTOR3 vPos(pParticle-&gt;m_vPos);</span><br><span class="line">        D3DXVECTOR3 vVel(pParticle-&gt;m_vVel);</span><br><span class="line">        FLOAT       fLengthSq &#x3D; D3DXVec3LengthSq(&amp;vVel);</span><br><span class="line">        UINT        dwSteps;</span><br><span class="line"></span><br><span class="line">        if( fLengthSq &lt; 1.0f )        dwSteps &#x3D; 2;</span><br><span class="line">        else if( fLengthSq &lt;  4.00f ) dwSteps &#x3D; 3;</span><br><span class="line">        else if( fLengthSq &lt;  9.00f ) dwSteps &#x3D; 4;</span><br><span class="line">        else if( fLengthSq &lt; 12.25f ) dwSteps &#x3D; 5;</span><br><span class="line">        else if( fLengthSq &lt; 16.00f ) dwSteps &#x3D; 6;</span><br><span class="line">        else if( fLengthSq &lt; 20.25f ) dwSteps &#x3D; 7;</span><br><span class="line">        else                          dwSteps &#x3D; 8;</span><br><span class="line"></span><br><span class="line">        vVel *&#x3D; -0.04f &#x2F; (float)dwSteps;</span><br><span class="line">        DWORD dwDiffuse &#x3D; (DWORD) pParticle-&gt;m_vColor;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;通过对其在不同位置渲染多次来实现模糊效果</span><br><span class="line">        for( DWORD i &#x3D; 0; i &lt; dwSteps; i++ )</span><br><span class="line">        &#123;</span><br><span class="line">            pVertices-&gt;pos     &#x3D; vPos;         &#x2F;&#x2F;点图元的位置</span><br><span class="line">            pVertices-&gt;color &#x3D; dwDiffuse;    &#x2F;&#x2F;点图元的颜色</span><br><span class="line">            pVertices++;</span><br><span class="line">			vPos +&#x3D; vVel;     &#x2F;&#x2F;为实现模糊效果确定该点图元的下一位置</span><br><span class="line"></span><br><span class="line">            if( ++dwNumParticlesToRender &#x3D;&#x3D; m_dwFlush )  &#x2F;&#x2F;填充完毕指定的数据块</span><br><span class="line">            &#123;</span><br><span class="line">               m_pVB-&gt;Unlock();</span><br><span class="line">               pd3dDevice-&gt;DrawPrimitive( D3DPT_POINTLIST, m_dwBase, dwNumParticlesToRender);</span><br><span class="line"></span><br><span class="line">				m_dwBase +&#x3D; m_dwFlush;</span><br><span class="line">				if(m_dwBase &gt;&#x3D; m_dwDiscard)</span><br><span class="line">					m_dwBase &#x3D; 0;</span><br><span class="line"></span><br><span class="line">				m_pVB-&gt;Lock( m_dwBase * sizeof(POINTVERTEX), m_dwFlush * sizeof(POINTVERTEX),</span><br><span class="line">		            (void**) &amp;pVertices, m_dwBase ? D3DLOCK_NOOVERWRITE : D3DLOCK_DISCARD );</span><br><span class="line">                dwNumParticlesToRender &#x3D; 0;  &#x2F;&#x2F;将需要渲染的顶点数重新置零</span><br><span class="line">            &#125; &#x2F;&#x2F;end if</span><br><span class="line">        &#125;  &#x2F;&#x2F;end for </span><br><span class="line">        pParticle &#x3D; pParticle-&gt;m_pNext;</span><br><span class="line">    &#125; &#x2F;&#x2F;end while</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; Unlock the vertex buffer</span><br><span class="line">    m_pVB-&gt;Unlock();</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;渲染剩余不足一块的粒子</span><br><span class="line">    if( dwNumParticlesToRender )</span><br><span class="line">    &#123;</span><br><span class="line">        pd3dDevice-&gt;DrawPrimitive( D3DPT_POINTLIST, m_dwBase, dwNumParticlesToRender );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;恢复相关渲染状态</span><br><span class="line">	pd3dDevice-&gt;SetRenderState( D3DRS_LIGHTING, true );</span><br><span class="line">    pd3dDevice-&gt;SetRenderState( D3DRS_POINTSPRITEENABLE, false );</span><br><span class="line">    pd3dDevice-&gt;SetRenderState( D3DRS_POINTSCALEENABLE,  false );</span><br><span class="line">	pd3dDevice-&gt;SetRenderState( D3DRS_ZWRITEENABLE, true );</span><br><span class="line">    pd3dDevice-&gt;SetRenderState( D3DRS_ALPHABLENDENABLE, false );</span><br><span class="line"></span><br><span class="line">    return S_OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;-----------------------------------------------------------------------------</span><br><span class="line">&#x2F;&#x2F; Desc: 释放粒子顶点缓存和粒子纹理</span><br><span class="line">&#x2F;&#x2F;-----------------------------------------------------------------------------</span><br><span class="line">HRESULT CParticleSystem::Destroy()</span><br><span class="line">&#123;</span><br><span class="line">	SAFE_RELEASE(m_pVB);</span><br><span class="line">	SAFE_RELEASE(m_pTexture);</span><br><span class="line">    return S_OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="UtilMacro-h"><a href="#UtilMacro-h" class="headerlink" title="UtilMacro.h"></a>UtilMacro.h</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">&#x2F;&#x2F; Desc: 辅助宏定义</span><br><span class="line">&#x2F;&#x2F;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line"></span><br><span class="line">#pragma once</span><br><span class="line"></span><br><span class="line">#ifndef V</span><br><span class="line">#define V(x)           &#123; hr &#x3D; x; &#125;</span><br><span class="line">#endif</span><br><span class="line"></span><br><span class="line">#ifndef V_RETURN</span><br><span class="line">#define V_RETURN(x)    &#123; hr &#x3D; x; if( FAILED(hr) ) &#123; return hr; &#125; &#125;</span><br><span class="line">#endif</span><br><span class="line"></span><br><span class="line">#ifndef SAFE_DELETE</span><br><span class="line">#define SAFE_DELETE(p)       &#123; if(p) &#123; delete (p);     (p)&#x3D;NULL; &#125; &#125;</span><br><span class="line">#endif    </span><br><span class="line">#ifndef SAFE_DELETE_ARRAY</span><br><span class="line">#define SAFE_DELETE_ARRAY(p) &#123; if(p) &#123; delete[] (p);   (p)&#x3D;NULL; &#125; &#125;</span><br><span class="line">#endif    </span><br><span class="line">#ifndef SAFE_RELEASE</span><br><span class="line">#define SAFE_RELEASE(p)      &#123; if(p) &#123; (p)-&gt;Release(); (p)&#x3D;NULL; &#125; &#125;</span><br><span class="line">#endif</span><br></pre></td></tr></table></figure>

<h2 id="Main-cpp"><a href="#Main-cpp" class="headerlink" title="Main.cpp"></a>Main.cpp</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">&#x2F;&#x2F; Desc: 绘制茶壶模型</span><br><span class="line">&#x2F;&#x2F;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">#include &lt;d3dx9.h&gt;  &#x2F;&#x2F;该头文件中又包含了d3d9.h头文件</span><br><span class="line">#include &lt;tchar.h&gt;</span><br><span class="line">#include &lt;d3dx9core.h&gt;</span><br><span class="line">#include &quot;UtilMacro.h&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;-----------------------------------------------------------------------------</span><br><span class="line">&#x2F;&#x2F; Desc: 全局变量</span><br><span class="line">&#x2F;&#x2F;-----------------------------------------------------------------------------</span><br><span class="line">LPDIRECT3D9             g_pD3D &#x3D; NULL;    &#x2F;&#x2F;Direct3D对象</span><br><span class="line">LPDIRECT3DDEVICE9       g_pd3dDevice &#x3D; NULL;    &#x2F;&#x2F;Direct3D设备对象</span><br><span class="line">LPD3DXFONT              g_pFont &#x3D; 0;       &#x2F;&#x2F;字体对象</span><br><span class="line">LPD3DXMESH              g_pTeapotMesh &#x3D; NULL;   &#x2F;&#x2F;茶壶网格模型</span><br><span class="line"></span><br><span class="line">RECT   g_ClientRect;    &#x2F;&#x2F;窗口客户区</span><br><span class="line">float  g_FPS &#x3D; 0;       &#x2F;&#x2F;帧速率</span><br><span class="line">WCHAR  g_strFPS[20];    &#x2F;&#x2F;包含帧速率的字符数组</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;-----------------------------------------------------------------------------</span><br><span class="line">&#x2F;&#x2F; Desc: 顶点结构和顶点格式</span><br><span class="line">&#x2F;&#x2F;-----------------------------------------------------------------------------</span><br><span class="line">struct CUSTOMVERTEX</span><br><span class="line">&#123;</span><br><span class="line">	D3DXVECTOR3 position;</span><br><span class="line">	DWORD color;</span><br><span class="line">&#125;;</span><br><span class="line">#define D3DFVF_CUSTOMVERTEX (D3DFVF_XYZ | D3DFVF_DIFFUSE)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;-----------------------------------------------------------------------------</span><br><span class="line">&#x2F;&#x2F; Desc: 设置世界矩阵</span><br><span class="line">&#x2F;&#x2F;-----------------------------------------------------------------------------</span><br><span class="line">void SetWorldMatrix()</span><br><span class="line">&#123;</span><br><span class="line">	&#x2F;&#x2F;创建并设置世界矩阵</span><br><span class="line">	D3DXMATRIXA16 matWorld;</span><br><span class="line">	float  time &#x3D; timeGetTime() * 0.001f;</span><br><span class="line">	float fAngle &#x3D; time * D3DX_PI &#x2F; 2;</span><br><span class="line">	&#x2F;&#x2F;fAngle &#x3D; 0;</span><br><span class="line">	D3DXMatrixRotationY(&amp;matWorld, fAngle);     &#x2F;&#x2F;旋转	</span><br><span class="line">	g_pd3dDevice-&gt;SetTransform(D3DTS_WORLD, &amp;matWorld);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;-----------------------------------------------------------------------------</span><br><span class="line">&#x2F;&#x2F; Desc: 设置观察矩阵和投影矩阵</span><br><span class="line">&#x2F;&#x2F;-----------------------------------------------------------------------------</span><br><span class="line">void SetViewandProjMatrices()</span><br><span class="line">&#123;</span><br><span class="line">	&#x2F;&#x2F;建立并设置观察矩阵</span><br><span class="line">	D3DXVECTOR3 vEyePt(0.0f, 0.0f, -5.0f);</span><br><span class="line">	D3DXVECTOR3 vLookatPt(0.0f, 0.0f, 0.0f);</span><br><span class="line">	D3DXVECTOR3 vUpVec(0.0f, 1.0f, 0.0f);</span><br><span class="line">	D3DXMATRIXA16 matView;</span><br><span class="line">	D3DXMatrixLookAtLH(&amp;matView, &amp;vEyePt, &amp;vLookatPt, &amp;vUpVec);</span><br><span class="line">	g_pd3dDevice-&gt;SetTransform(D3DTS_VIEW, &amp;matView);</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F;建立并设置投影矩阵</span><br><span class="line">	D3DXMATRIXA16 matProj;</span><br><span class="line">	float aspect &#x3D; (float)(g_ClientRect.right - g_ClientRect.left) &#x2F; (g_ClientRect.bottom - g_ClientRect.top);</span><br><span class="line">	D3DXMatrixPerspectiveFovLH(&amp;matProj, D3DX_PI &#x2F; 4, aspect, 1.0f, 100.0f);</span><br><span class="line">	g_pd3dDevice-&gt;SetTransform(D3DTS_PROJECTION, &amp;matProj);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;-----------------------------------------------------------------------------</span><br><span class="line">&#x2F;&#x2F; Desc: 设置灯光</span><br><span class="line">&#x2F;&#x2F;-----------------------------------------------------------------------------</span><br><span class="line">void SetLights()</span><br><span class="line">&#123;</span><br><span class="line">	&#x2F;&#x2F;方向光</span><br><span class="line">	D3DXVECTOR3 vecDir;</span><br><span class="line">	D3DLIGHT9 light;</span><br><span class="line">	ZeroMemory(&amp;light, sizeof(D3DLIGHT9));</span><br><span class="line">	light.Type &#x3D; D3DLIGHT_DIRECTIONAL;</span><br><span class="line">	light.Diffuse.r &#x3D; 1.0f;</span><br><span class="line">	light.Diffuse.g &#x3D; 1.0f;</span><br><span class="line">	light.Diffuse.b &#x3D; 1.0f;</span><br><span class="line">	vecDir &#x3D; D3DXVECTOR3(1, -1, 1);</span><br><span class="line">	D3DXVec3Normalize((D3DXVECTOR3*)&amp;light.Direction, &amp;vecDir);</span><br><span class="line">	light.Range &#x3D; 1000.0f;</span><br><span class="line">	g_pd3dDevice-&gt;SetLight(0, &amp;light);</span><br><span class="line">	g_pd3dDevice-&gt;LightEnable(0, TRUE);</span><br><span class="line">	g_pd3dDevice-&gt;SetRenderState(D3DRS_LIGHTING, true);</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F;全局环境光</span><br><span class="line">	g_pd3dDevice-&gt;SetRenderState(D3DRS_AMBIENT, 0xff505050);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;-----------------------------------------------------------------------------</span><br><span class="line">&#x2F;&#x2F; Desc: 设置材质</span><br><span class="line">&#x2F;&#x2F;-----------------------------------------------------------------------------</span><br><span class="line">void SetMaterial()</span><br><span class="line">&#123;</span><br><span class="line">	D3DMATERIAL9 mtrl;</span><br><span class="line">	ZeroMemory(&amp;mtrl, sizeof(D3DMATERIAL9));</span><br><span class="line">	mtrl.Diffuse.r &#x3D; mtrl.Ambient.r &#x3D; 1.0f;</span><br><span class="line">	mtrl.Diffuse.g &#x3D; mtrl.Ambient.g &#x3D; 0.0f;</span><br><span class="line">	mtrl.Diffuse.b &#x3D; mtrl.Ambient.b &#x3D; 0.0f;</span><br><span class="line">	mtrl.Diffuse.a &#x3D; mtrl.Ambient.a &#x3D; 1.0f;</span><br><span class="line">	g_pd3dDevice-&gt;SetMaterial(&amp;mtrl);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;-----------------------------------------------------------------------------</span><br><span class="line">&#x2F;&#x2F; Desc: 初始化Direct3D</span><br><span class="line">&#x2F;&#x2F;-----------------------------------------------------------------------------</span><br><span class="line">HRESULT InitD3D(HWND hWnd)</span><br><span class="line">&#123;</span><br><span class="line">	HRESULT hr;</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F;创建Direct3D对象, 该对象用来创建Direct3D设备对象</span><br><span class="line">	g_pD3D &#x3D; Direct3DCreate9(D3D_SDK_VERSION);</span><br><span class="line">	if (g_pD3D &#x3D;&#x3D; NULL)</span><br><span class="line">		return E_FAIL;</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F;检查设备性能</span><br><span class="line">	D3DCAPS9  caps;</span><br><span class="line">	g_pD3D-&gt;GetDeviceCaps(D3DADAPTER_DEFAULT, D3DDEVTYPE_HAL, &amp;caps);</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F;检查设备是否支持硬件顶点处理</span><br><span class="line">	int vp &#x3D; 0;</span><br><span class="line">	if (caps.DevCaps &amp; D3DDEVCAPS_HWTRANSFORMANDLIGHT)</span><br><span class="line">	&#123;</span><br><span class="line">		vp &#x3D; D3DCREATE_HARDWARE_VERTEXPROCESSING;</span><br><span class="line">	&#125;</span><br><span class="line">	else</span><br><span class="line">	&#123;</span><br><span class="line">		vp &#x3D; D3DCREATE_SOFTWARE_VERTEXPROCESSING;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F;设置D3DPRESENT_PARAMETERS结构</span><br><span class="line">	D3DPRESENT_PARAMETERS d3dpp;</span><br><span class="line">	ZeroMemory(&amp;d3dpp, sizeof(d3dpp));</span><br><span class="line">	d3dpp.Windowed &#x3D; TRUE;</span><br><span class="line">	d3dpp.SwapEffect &#x3D; D3DSWAPEFFECT_DISCARD;</span><br><span class="line">	d3dpp.BackBufferFormat &#x3D; D3DFMT_UNKNOWN;</span><br><span class="line">	d3dpp.EnableAutoDepthStencil &#x3D; TRUE;</span><br><span class="line">	d3dpp.AutoDepthStencilFormat &#x3D; D3DFMT_D16;</span><br><span class="line">	d3dpp.PresentationInterval &#x3D; D3DPRESENT_INTERVAL_IMMEDIATE;</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F;创建Direct3D设备对象</span><br><span class="line">	V_RETURN(g_pD3D-&gt;CreateDevice(D3DADAPTER_DEFAULT, D3DDEVTYPE_HAL, hWnd, vp, &amp;d3dpp, &amp;g_pd3dDevice));</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F;创建字体对象</span><br><span class="line">	V_RETURN(D3DXCreateFont(g_pd3dDevice, 0, 0, 0, 0, 0, 0, 0, 0, 0, L&quot;Arial&quot;, &amp;g_pFont));</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F;获取窗口客户区</span><br><span class="line">	GetClientRect(hWnd, &amp;g_ClientRect);</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F;设置观察和投影矩阵</span><br><span class="line">	SetViewandProjMatrices();</span><br><span class="line"></span><br><span class="line">	return S_OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;-----------------------------------------------------------------------------</span><br><span class="line">&#x2F;&#x2F; Desc: 创建场景图形</span><br><span class="line">&#x2F;&#x2F;-----------------------------------------------------------------------------</span><br><span class="line">HRESULT InitGeometry()</span><br><span class="line">&#123;</span><br><span class="line">	HRESULT hr;</span><br><span class="line">	V_RETURN(D3DXCreateTeapot(g_pd3dDevice, &amp;g_pTeapotMesh, NULL));</span><br><span class="line">	return S_OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;-----------------------------------------------------------------------------</span><br><span class="line">&#x2F;&#x2F; Desc: 计算帧速率</span><br><span class="line">&#x2F;&#x2F;-----------------------------------------------------------------------------</span><br><span class="line">float GetFPS()</span><br><span class="line">&#123;</span><br><span class="line">	static float  fps &#x3D; 0;</span><br><span class="line">	static int    frameCount &#x3D; 0;</span><br><span class="line">	static float  currentTime &#x3D; 0.0f;</span><br><span class="line">	static float  lastTime &#x3D; 0.0f;</span><br><span class="line"></span><br><span class="line">	frameCount++;</span><br><span class="line">	currentTime &#x3D; timeGetTime()*0.001f;</span><br><span class="line"></span><br><span class="line">	if (currentTime - lastTime &gt; 1.0f)</span><br><span class="line">	&#123;</span><br><span class="line">		fps &#x3D; (float)frameCount &#x2F; (currentTime - lastTime);</span><br><span class="line">		lastTime &#x3D; currentTime;</span><br><span class="line">		frameCount &#x3D; 0;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	return fps;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;-----------------------------------------------------------------------------</span><br><span class="line">&#x2F;&#x2F; Desc: 渲染图形 </span><br><span class="line">&#x2F;&#x2F;-----------------------------------------------------------------------------</span><br><span class="line">void Render()</span><br><span class="line">&#123;</span><br><span class="line">	&#x2F;&#x2F;清空后台缓存</span><br><span class="line">	g_pd3dDevice-&gt;Clear(0, NULL, D3DCLEAR_TARGET | D3DCLEAR_ZBUFFER, D3DCOLOR_XRGB(45, 50, 170), 1.0f, 0);</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F;开始在后台缓存绘制图形</span><br><span class="line">	if (SUCCEEDED(g_pd3dDevice-&gt;BeginScene()))</span><br><span class="line">	&#123;</span><br><span class="line">		&#x2F;&#x2F;设置灯光和材质</span><br><span class="line">		SetLights();</span><br><span class="line">		SetMaterial();</span><br><span class="line"></span><br><span class="line">		&#x2F;&#x2F;设置世界矩阵</span><br><span class="line">		SetWorldMatrix();</span><br><span class="line"></span><br><span class="line">		&#x2F;&#x2F;绘制茶壶</span><br><span class="line">		g_pTeapotMesh-&gt;DrawSubset(0);</span><br><span class="line"></span><br><span class="line">		&#x2F;&#x2F;在窗口左上角绘制文本</span><br><span class="line">		int charCount &#x3D; swprintf_s(g_strFPS, 20, L&quot;FPS: %0.2f&quot;, GetFPS());</span><br><span class="line">		g_pFont-&gt;DrawText(NULL, g_strFPS, charCount, &amp;g_ClientRect, DT_TOP | DT_LEFT, 0xffffffff);</span><br><span class="line"></span><br><span class="line">		&#x2F;&#x2F;结束在后台缓存渲染图形</span><br><span class="line">		g_pd3dDevice-&gt;EndScene();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F;将在后台缓存绘制的图形提交到前台缓存显示</span><br><span class="line">	g_pd3dDevice-&gt;Present(NULL, NULL, NULL, NULL);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;-----------------------------------------------------------------------------</span><br><span class="line">&#x2F;&#x2F; Desc: 释放创建的对象</span><br><span class="line">&#x2F;&#x2F;-----------------------------------------------------------------------------</span><br><span class="line">void Cleanup()</span><br><span class="line">&#123;</span><br><span class="line">	SAFE_RELEASE(g_pTeapotMesh);</span><br><span class="line">	SAFE_RELEASE(g_pFont);</span><br><span class="line">	SAFE_RELEASE(g_pd3dDevice);</span><br><span class="line">	SAFE_RELEASE(g_pD3D);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;-----------------------------------------------------------------------------</span><br><span class="line">&#x2F;&#x2F; Desc: 消息处理</span><br><span class="line">&#x2F;&#x2F;-----------------------------------------------------------------------------</span><br><span class="line">LRESULT WINAPI WndProc(HWND hWnd, UINT msg, WPARAM wParam, LPARAM lParam)</span><br><span class="line">&#123;</span><br><span class="line">	switch (msg)</span><br><span class="line">	&#123;</span><br><span class="line">	case WM_KEYDOWN:</span><br><span class="line">		if (wParam &#x3D;&#x3D; VK_ESCAPE)</span><br><span class="line">			PostQuitMessage(0);</span><br><span class="line">		break;</span><br><span class="line"></span><br><span class="line">	case WM_DESTROY:</span><br><span class="line">		PostQuitMessage(0);</span><br><span class="line">		break;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	return DefWindowProc(hWnd, msg, wParam, lParam);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;-----------------------------------------------------------------------------</span><br><span class="line">&#x2F;&#x2F; Desc: 程序入口</span><br><span class="line">&#x2F;&#x2F;-----------------------------------------------------------------------------</span><br><span class="line">int _stdcall _tWinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance,</span><br><span class="line">	PTSTR szCmdLine, int iCmdShow)</span><br><span class="line">&#123;</span><br><span class="line">	&#x2F;&#x2F;定义窗口类</span><br><span class="line">	WNDCLASSEX wndClassEx;</span><br><span class="line">	wndClassEx.cbSize &#x3D; sizeof(WNDCLASSEX);</span><br><span class="line">	wndClassEx.style &#x3D; CS_CLASSDC;</span><br><span class="line">	wndClassEx.lpfnWndProc &#x3D; WndProc;</span><br><span class="line">	wndClassEx.cbClsExtra &#x3D; 0;</span><br><span class="line">	wndClassEx.cbWndExtra &#x3D; 0;</span><br><span class="line">	wndClassEx.hInstance &#x3D; hInstance;</span><br><span class="line">	wndClassEx.hIcon &#x3D; LoadIcon(NULL, IDI_APPLICATION);</span><br><span class="line">	wndClassEx.hCursor &#x3D; LoadCursor(NULL, IDC_ARROW);</span><br><span class="line">	wndClassEx.hbrBackground &#x3D; (HBRUSH)GetStockObject(WHITE_BRUSH);</span><br><span class="line">	wndClassEx.lpszMenuName &#x3D; NULL;</span><br><span class="line">	wndClassEx.lpszClassName &#x3D; L&quot;ClassName&quot;;</span><br><span class="line">	wndClassEx.hIconSm &#x3D; NULL;</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F;注册窗口类</span><br><span class="line">	if (!RegisterClassEx(&amp;wndClassEx))</span><br><span class="line">	&#123;</span><br><span class="line">		MessageBox(NULL, L&quot;注册窗口类失败!&quot;, L&quot;Teapot&quot;, 0);</span><br><span class="line">		return 0;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F;创建窗口</span><br><span class="line">	HWND hWnd &#x3D; NULL;</span><br><span class="line">	hWnd &#x3D; CreateWindowEx(NULL, &#x2F;&#x2F;窗口扩展风格</span><br><span class="line">		L&quot;ClassName&quot;,            &#x2F;&#x2F;窗口类名称</span><br><span class="line">		L&quot;Teapot&quot;,               &#x2F;&#x2F;窗口标题</span><br><span class="line">		WS_OVERLAPPEDWINDOW,     &#x2F;&#x2F;窗口风格</span><br><span class="line">		CW_USEDEFAULT,           &#x2F;&#x2F;窗口初始X位置</span><br><span class="line">		CW_USEDEFAULT,           &#x2F;&#x2F;窗口初始Y位置</span><br><span class="line">		600,                     &#x2F;&#x2F;窗口初始宽度</span><br><span class="line">		480,                     &#x2F;&#x2F;窗口初始高度</span><br><span class="line">		NULL,                    &#x2F;&#x2F;父窗口句柄</span><br><span class="line">		NULL,                    &#x2F;&#x2F;窗口菜单句柄</span><br><span class="line">		hInstance,               &#x2F;&#x2F;程序实例句柄</span><br><span class="line">		NULL);                  &#x2F;&#x2F; 创建参数</span><br><span class="line"></span><br><span class="line">	if (hWnd &#x3D;&#x3D; NULL)</span><br><span class="line">	&#123;</span><br><span class="line">		MessageBox(NULL, L&quot;创建窗口失败!&quot;, L&quot;Teapot&quot;, 0);</span><br><span class="line">		return 0;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F;初始化Direct3D</span><br><span class="line">	if (SUCCEEDED(InitD3D(hWnd)))</span><br><span class="line">	&#123;</span><br><span class="line">		&#x2F;&#x2F;创建并填充顶点缓存</span><br><span class="line">		if (SUCCEEDED(InitGeometry()))</span><br><span class="line">		&#123;</span><br><span class="line">			&#x2F;&#x2F;显示窗口</span><br><span class="line">			ShowWindow(hWnd, SW_SHOWDEFAULT);</span><br><span class="line">			UpdateWindow(hWnd);</span><br><span class="line"></span><br><span class="line">			&#x2F;&#x2F;进入消息循环</span><br><span class="line">			MSG msg;</span><br><span class="line">			ZeroMemory(&amp;msg, sizeof(msg));</span><br><span class="line">			while (msg.message !&#x3D; WM_QUIT)</span><br><span class="line">			&#123;</span><br><span class="line">				if (PeekMessage(&amp;msg, NULL, 0U, 0U, PM_REMOVE))</span><br><span class="line">				&#123;</span><br><span class="line">					TranslateMessage(&amp;msg);</span><br><span class="line">					DispatchMessage(&amp;msg);</span><br><span class="line">				&#125;</span><br><span class="line">				else</span><br><span class="line">				&#123;</span><br><span class="line">					Render();  &#x2F;&#x2F;渲染图形</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F;释放创建的相关对象</span><br><span class="line">	Cleanup();</span><br><span class="line"></span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>DirectX</category>
      </categories>
      <tags>
        <tag>DirectX</tag>
      </tags>
  </entry>
  <entry>
    <title>解决mac下hexo博客部署失败问题</title>
    <url>/2022/01/15/%E8%A7%A3%E5%86%B3mac%E4%B8%8Bhexo%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E5%A4%B1%E8%B4%A5%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote class="blockquote-center">
<p>^ _ ^ </p>

</blockquote>
<a id="more"></a>

<p><img src="/2022/01/15/%E8%A7%A3%E5%86%B3mac%E4%B8%8Bhexo%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E5%A4%B1%E8%B4%A5%E9%97%AE%E9%A2%98/1.png" alt></p>
<p>这个问题出现的原因：nodejs的版本太高了，切换为12版本再部署即可。<br>因此需要做：<br>（1）下载nodejs版本管理工具<code>nvm</code><br><a href="https://www.jianshu.com/p/622ad36ee020" target="_blank" rel="noopener">参考</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.8/install.sh | bash</span><br></pre></td></tr></table></figure>
<p>下载过程中可能出现如下错误，本质是因为网络连接的错误<br><code>curl: (35) OpenSSL SSL_connect: Connection reset by peer in connection to raw.githubusercontent.com:443</code><br><a href="https://blog.csdn.net/jartins/article/details/115407952" target="_blank" rel="noopener">参考</a><br><code>sudo vi /etc/hosts</code> –&gt; 添加“185.199.108.133     raw.githubusercontent.com” -&gt; wq</p>
<p>(2)<br><code>nvm use 12</code> –&gt; <code>hexo d -g</code></p>
]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>车牌识别</title>
    <url>/2021/06/04/%E8%BD%A6%E7%89%8C%E8%AF%86%E5%88%AB/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote class="blockquote-center">
<p>^ _ ^ </p>

</blockquote>
<a id="more"></a>

<h1 id="安装-Pytesseract"><a href="#安装-Pytesseract" class="headerlink" title="安装 Pytesseract"></a>安装 Pytesseract</h1><p>可以使用pytesseract库从图像中提取文本。Tesseract是一款由Google赞助的开源OCR。</p>
<p><strong>Step1 : python下载pytesseract模块</strong></p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">pip install pytesseract</span><br></pre></td></tr></table></figure>

<p><strong>Step2 : 下载Tesseract-OCR</strong><br>Tesseract-OCR安装程序下载链接：<a href="https://links.jianshu.com/go?to=http%3A%2F%2Fdigi.bib.uni-mannheim.de%2Ftesseract%2Ftesseract-ocr-setup-4.00.00dev.exe" target="_blank" rel="noopener">Tesseract-OCR</a></p>
<p>将Tesseract-OCR安装到自定义目录（例如我的电脑是D:\Tesseract-OCR）</p>
<p><strong>Step3 : 修改pytesseract.py文件</strong><br>找到python下pytesseract模块的路径（例如我的电脑是D:\python36\Lib\site-packages\pytesseract），修改文件夹下的pytesseract.py文件。点开编辑，找到tesseract_cmd将它改为你刚刚安装的tesseract的路径。</p>
<p><img src="/2021/06/04/%E8%BD%A6%E7%89%8C%E8%AF%86%E5%88%AB/1.jpg" alt></p>
<p><strong>Step4 : 修改环境变量</strong><br>在用户变量或系统变量的Path中添加Tesseract-OCR路径下的tessdata</p>
<p><img src="/2021/06/04/%E8%BD%A6%E7%89%8C%E8%AF%86%E5%88%AB/2.jpg" alt></p>
<p><strong>Step5 : 测试</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> pytesseract</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    image = Image.open(<span class="string">"code.jpg"</span>)</span><br><span class="line">    image = image.convert(<span class="string">'RGB'</span>)</span><br><span class="line">    text = pytesseract.image_to_string(image)</span><br><span class="line">    print(text)</span><br></pre></td></tr></table></figure>

<p><img src="/2021/06/04/%E8%BD%A6%E7%89%8C%E8%AF%86%E5%88%AB/3.jpg" alt></p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>Pytesseract的安装与使用：<a href="https://www.jianshu.com/p/2db541800418" target="_blank" rel="noopener">https://www.jianshu.com/p/2db541800418</a></p>
<h1 id="车牌识别"><a href="#车牌识别" class="headerlink" title="车牌识别"></a>车牌识别</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"><span class="keyword">import</span> imutils</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pytesseract</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 预处理图像</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">preprocess</span><span class="params">(img)</span>:</span></span><br><span class="line">    gray = cv.cvtColor(img, cv.COLOR_BGR2GRAY) </span><br><span class="line">    gray = cv.bilateralFilter(gray, <span class="number">13</span>, <span class="number">15</span>, <span class="number">15</span>)</span><br><span class="line">    <span class="comment">#cv.imshow("gray", gray)</span></span><br><span class="line">    <span class="keyword">return</span> gray</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 2. 边缘检测</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edge_detect</span><span class="params">(img)</span>:</span></span><br><span class="line">    edged = cv.Canny(img, <span class="number">30</span>, <span class="number">200</span>) </span><br><span class="line">    <span class="comment">#cv.imshow("edged", edged)</span></span><br><span class="line">    <span class="keyword">return</span> edged</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 找到所有的轮廓，显示面积前10的轮廓</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">contour_detect</span><span class="params">(img, edged)</span>:</span></span><br><span class="line">    contours = cv.findContours(edged.copy(), cv.RETR_TREE, cv.CHAIN_APPROX_SIMPLE)</span><br><span class="line">    contours = imutils.grab_contours(contours)</span><br><span class="line">    contours = sorted(contours, key = cv.contourArea, reverse = <span class="literal">True</span>)[:<span class="number">10</span>]</span><br><span class="line">    copy_img = img.copy()</span><br><span class="line">    cv.drawContours(copy_img, contours, <span class="number">-1</span>, (<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>), <span class="number">3</span>)</span><br><span class="line">    <span class="comment">#cv.imshow("contours", copy_img)</span></span><br><span class="line">    <span class="keyword">return</span> contours</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. 定位车牌</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">position</span><span class="params">(img, contours)</span>:</span></span><br><span class="line">    <span class="comment"># screenCnt 保存所有可能是车牌的轮廓：</span></span><br><span class="line">    screenCnt = []</span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> contours:</span><br><span class="line">        <span class="comment"># 轮廓近似</span></span><br><span class="line">        peri = cv.arcLength(c, <span class="literal">True</span>)</span><br><span class="line">        approx = cv.approxPolyDP(c, <span class="number">0.018</span> * peri, <span class="literal">True</span>)</span><br><span class="line">        <span class="comment"># 近似轮廓是否为矩形</span></span><br><span class="line">        <span class="keyword">if</span> len(approx) == <span class="number">4</span>:</span><br><span class="line">            screenCnt.append(approx)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> len(screenCnt) != <span class="number">0</span>:</span><br><span class="line">        cv.drawContours(img, screenCnt, <span class="number">-1</span>, (<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>), <span class="number">3</span>)</span><br><span class="line">        <span class="comment">#cv.imshow("card position", img)</span></span><br><span class="line">        <span class="keyword">return</span> screenCnt[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">"No contour detected"</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 5. 对图片中车牌以外的部分进行遮罩，提取出车牌区域</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">extract_card</span><span class="params">(gray, card_contour)</span>:</span></span><br><span class="line">    mask = np.zeros(gray.shape, np.uint8)</span><br><span class="line">    cv.drawContours(mask, [card_contour], <span class="number">0</span>, <span class="number">255</span>, <span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line">    (x, y) = np.where(mask == <span class="number">255</span>)</span><br><span class="line">    (topx, topy) = (np.min(x), np.min(y))</span><br><span class="line">    (bottomx, bottomy) = (np.max(x), np.max(y))</span><br><span class="line">    card = gray[topx:bottomx+<span class="number">1</span>, topy:bottomy+<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment">#cv.imshow("card", card)</span></span><br><span class="line">    <span class="keyword">return</span> card</span><br><span class="line"></span><br><span class="line"><span class="comment"># 6. 识别车牌</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ocr_card</span><span class="params">(card)</span>:</span></span><br><span class="line">    cv.imshow(<span class="string">"card"</span>, card)</span><br><span class="line">    text = pytesseract.image_to_string(card, config=<span class="string">'--psm 11'</span>)</span><br><span class="line">    print(text)</span><br><span class="line">    <span class="keyword">return</span> text</span><br><span class="line"></span><br><span class="line"><span class="comment"># 7. 将识别到的文字显示在画布上</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">draw_text</span><span class="params">(text)</span>:</span></span><br><span class="line">    <span class="comment"># 创建黑色画布</span></span><br><span class="line">    img = np.zeros((<span class="number">100</span>,<span class="number">300</span>,<span class="number">3</span>), np.uint8)</span><br><span class="line">    font = cv.FONT_HERSHEY_SIMPLEX</span><br><span class="line">    cv.putText(img, text, (<span class="number">50</span>,<span class="number">50</span>), font, <span class="number">1</span>, (<span class="number">0</span>,<span class="number">255</span>,<span class="number">0</span>), <span class="number">3</span>)</span><br><span class="line">    cv.imshow(<span class="string">"text"</span>, img)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    img = cv.imread(<span class="string">'car1.jpeg'</span>, cv.IMREAD_COLOR)</span><br><span class="line">    img = cv.resize(img, (<span class="number">600</span>, <span class="number">400</span>))</span><br><span class="line">    <span class="comment">#cv.imshow("img", img)</span></span><br><span class="line"></span><br><span class="line">    gray = preprocess(img)</span><br><span class="line">    edged = edge_detect(gray)</span><br><span class="line">    contours = contour_detect(img, edged)</span><br><span class="line">    card_contour = position(img, contours)</span><br><span class="line">    card = extract_card(gray, card_contour)</span><br><span class="line">    text = ocr_card(card)</span><br><span class="line">    draw_text(text)</span><br><span class="line"></span><br><span class="line">    cv.waitKey(<span class="number">0</span>)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>图像处理应用</category>
      </categories>
      <tags>
        <tag>OpenCV 图像处理</tag>
      </tags>
  </entry>
  <entry>
    <title>链接</title>
    <url>/2021/01/11/%E9%93%BE%E6%8E%A5/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote class="blockquote-center">
<p>^ _ ^ </p>

</blockquote>
<a id="more"></a>

<h1 id="链接简介"><a href="#链接简介" class="headerlink" title="链接简介"></a>链接简介</h1><h2 id="什么是链接（What）"><a href="#什么是链接（What）" class="headerlink" title="什么是链接（What）"></a>什么是链接（What）</h2><p><code>链接(linking)</code>是将各种代码和数据部分收集起来并合并成为一个单一文件的过程，这个文件可被加载（或被拷贝）到存储器并运行。</p>
<h3 id="静态链接"><a href="#静态链接" class="headerlink" title="静态链接"></a>静态链接</h3><p><img src="/2021/01/11/%E9%93%BE%E6%8E%A5/1.png" alt></p>
<p><code>静态链接器</code>以一组可重定位目标文件和命令行参数作为输入，生成一个完全链接的可以加载和运行的可执行目标文件作为输出。<br>为了构造可执行文件，链接器必须完成两个主要任务：</p>
<ul>
<li><strong>符号解析</strong>：目标文件定义和引用符号，符号解析的目的是将每个符号引用刚好与一个符号定义联系起来。</li>
<li><strong>重定位</strong>：编译器和汇编器生成从地址0开始的代码和数据节，链接器通过把每个符号定义与一个存储器位置联系起来，然后修改所有对这些符号的引用，使得他们指向这个存储器位置，从而重定位这些节。</li>
</ul>
<h4 id="静态库"><a href="#静态库" class="headerlink" title="静态库"></a>静态库</h4><p>所有的编译系统都提供一种机制，将所有相关的目标模块打包成为一个单独的文件，称为<code>静态库</code>，它可以用做链接器的输入。当链接器构造一个输出的可执行文件时，它只拷贝静态库里被应用程序引用的目标模块，减少了可执行文件在磁盘和存储器中的大小。</p>
<p><img src="/2021/01/11/%E9%93%BE%E6%8E%A5/2.png" alt></p>
<ul>
<li>在unix系统中，静态库以一种称为<code>存档</code>的特殊文件格式放在磁盘中。</li>
<li>存档文件是一组连接起来的可重定位目标文件的集合，有一个头部来描述各个成员目标文件的大小和位置。</li>
<li>存档文件名由后缀.a标识</li>
</ul>
<h4 id="链接器使用静态库原理"><a href="#链接器使用静态库原理" class="headerlink" title="链接器使用静态库原理"></a>链接器使用静态库原理</h4><h3 id="动态链接"><a href="#动态链接" class="headerlink" title="动态链接"></a>动态链接</h3><h2 id="链接发生于什么时候（When）"><a href="#链接发生于什么时候（When）" class="headerlink" title="链接发生于什么时候（When）"></a>链接发生于什么时候（When）</h2><ol>
<li>编译时，即源代码被翻译成机器代码时</li>
<li>加载时，即程序被加载器加载到存储器并执行时</li>
<li>运行时，运用程序运行时</li>
</ol>
<h2 id="链接由谁执行（Who）"><a href="#链接由谁执行（Who）" class="headerlink" title="链接由谁执行（Who）"></a>链接由谁执行（Who）</h2><p>在早期的计算机系统中，链接是手动执行的。在现代系统中，链接是由称为<code>链接器</code>的程序自动执行的。</p>
<h1 id="链接工作原理"><a href="#链接工作原理" class="headerlink" title="链接工作原理"></a>链接工作原理</h1><h2 id="前提概念"><a href="#前提概念" class="headerlink" title="前提概念"></a>前提概念</h2><h3 id="目标文件"><a href="#目标文件" class="headerlink" title="目标文件"></a>目标文件</h3><p>目标文件有三种形式：</p>
<ul>
<li>可重定位目标文件：包含二进制代码和数据，其形式可以在编译时与其他可重定位文件合并起来，创建一个可执行目标文件</li>
<li>可执行目标文件：包含二进制代码和数据，其形式可以被执行拷贝到存储器并执行</li>
<li>共享目标文件：一种特殊类型的可重定位目标文件，可以在加载或者运行时被动态地加载到存储器并链接</li>
</ul>
<p>编译器和汇编器生成可重定位目标文件（包括共享目标文件），链接器生成可执行目标文件。</p>
<h3 id="可重定位目标文件"><a href="#可重定位目标文件" class="headerlink" title="可重定位目标文件"></a>可重定位目标文件</h3><p><strong>典型的ELF可重定位目标文件格式</strong><br><img src="/2021/01/11/%E9%93%BE%E6%8E%A5/3.png" alt></p>
<ul>
<li><strong>ELF头</strong><ul>
<li>以一个16字节的序列开始，该序列描述了生成该文件的系统的字大小和字节顺序（大端/小端）</li>
<li>剩下部分包含帮助链接器语法分析和解释目标文件的信息，如：ELF头大小、目标文件的类型（可重定位/可执行/可共享）、机器类型（如x86-64）、节头部表的文件偏移、节头部表中的条目大小和数量</li>
</ul>
</li>
<li><strong>节头部表</strong><ul>
<li>夹在ELF头和节头部表之间的都是节</li>
<li>不同节的位置和大小都是由节头部表描述的，其中目标文件中每个节都有一个固定大小的条目</li>
</ul>
</li>
<li><strong>.text</strong>：已编译程序的机器代码</li>
<li><strong>.rodata</strong>：只读数据</li>
<li><strong>.data</strong>：已初始化的全局C变量（局部C变量在运行时保存在栈中，既不出现在.data节中，也不存在于.bss节中）</li>
<li><strong>.bss</strong>：未初始化的全局C变量。在目标文件中这节不占据实际的空间，它仅仅是一个占位符。</li>
<li><strong>.systab</strong>：一个符号表，它存放在程序中定义和引用的函数和全局变量的信息。</li>
<li><strong>.rel.text</strong>：一个.text节中位置的列表，当链接器把这个目标文件和其他文件结合时，需要修改这些位置。一般而言，任何调用外部函数或者引用全局变量的指令都需要修改。</li>
<li><strong>.rel.data</strong>：被模块引用或定义的任何全局变量的重定位信息。一般而言，任何已初始化的全局变量，如果它的初始值是一个全局变量地址或者外部定义函数的地址，都需要被修改。</li>
<li><strong>.debug</strong>：一个调试符号表，其条目是程序中定义的局部变量和类型定义，程序中定义和引用的全局变量，以及原始的C源程序。只有以-g选项调用编译驱动程序时才会得到这张表。</li>
<li><strong>.line</strong>：原始C源程序的行号和.text节中机器指令之间的映射。只有以-g选项调用编译驱动程序时才会得到这张表。</li>
<li><strong>.strtab</strong>：一个字符串表，其内容包括.symtab和.debug节中的符号表，以及节头部中的节名字。字符串表就是以null结尾的字符串序列。</li>
</ul>
<h3 id="符号和符号表"><a href="#符号和符号表" class="headerlink" title="符号和符号表"></a>符号和符号表</h3>]]></content>
      <categories>
        <category>计算机理论</category>
      </categories>
      <tags>
        <tag>深入理解计算机系统</tag>
      </tags>
  </entry>
  <entry>
    <title>阿里巴巴编程题2021</title>
    <url>/2021/06/16/%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4%E7%BC%96%E7%A8%8B%E9%A2%982021/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote class="blockquote-center">
<p>^_^ </p>

</blockquote>
<a id="more"></a>

<h1 id="子集"><a href="#子集" class="headerlink" title="子集"></a>子集</h1><h2 id="时空限制"><a href="#时空限制" class="headerlink" title="时空限制"></a>时空限制</h2><blockquote>
<p>时间限制：C/C++ 2秒，其他语言4秒<br>空间限制：C/C++ 128M，其他语言256M</p>
</blockquote>
<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>小强现在有$n$个物品,每个物品有两种属性$x_i$和$y_i$.他想要从中挑出尽可能多的物品满足以下条件:对于任意两个物品$i$和$j$,满足$x_i &lt; x_j &amp;&amp; y_i &lt; y_j$或者$x_i &gt; x_j &amp;&amp; y_i &gt; y_j$.问最多能挑出多少物品。</p>
<h2 id="输入描述"><a href="#输入描述" class="headerlink" title="输入描述"></a>输入描述</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">第一行输入一个正整数T.表示有T组数据.</span><br><span class="line">对于每组数据,第一行输入一个正整数n.表示物品个数.</span><br><span class="line">接下来两行,每行有n个整数.</span><br><span class="line">第一行表示n个节点的x属性.</span><br><span class="line">第二行表示n个节点的y属性.</span><br><span class="line">1 &lt;&#x3D; T &lt;&#x3D; 10</span><br><span class="line">2 &lt;&#x3D; n &lt;&#x3D; 100000</span><br><span class="line">0 &lt;&#x3D; x,y &lt;&#x3D; 1000000000</span><br></pre></td></tr></table></figure>

<h2 id="输出描述"><a href="#输出描述" class="headerlink" title="输出描述"></a>输出描述</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输出T行,每一行对应每组数据的输出.</span><br></pre></td></tr></table></figure>

<h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p><strong>输入1</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2</span><br><span class="line">3</span><br><span class="line">1 3 2</span><br><span class="line">0 2 3</span><br><span class="line">4</span><br><span class="line">1 5 4 2 </span><br><span class="line">10 32 19 21</span><br></pre></td></tr></table></figure>

<p><strong>输出1</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2</span><br><span class="line">3</span><br></pre></td></tr></table></figure>

<h2 id="我的答案"><a href="#我的答案" class="headerlink" title="我的答案"></a>我的答案</h2><blockquote>
<p>错误！</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LuckyQ</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-06-16 20:53</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getAnswer</span><span class="params">(<span class="keyword">int</span>[] x, <span class="keyword">int</span>[] y)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = x.length;</span><br><span class="line">        <span class="comment">// 将xc冒泡排序(从小到大)，y跟着变化</span></span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(flag)&#123;</span><br><span class="line">            flag = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = i; j &lt; n - <span class="number">1</span>; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(x[j] &gt; x[j + <span class="number">1</span>])&#123;</span><br><span class="line">                    <span class="keyword">int</span> temp = x[j + <span class="number">1</span>];</span><br><span class="line">                    x[j + <span class="number">1</span>] = x[j];</span><br><span class="line">                    x[j] = temp;</span><br><span class="line">                    temp = y[j + <span class="number">1</span>];</span><br><span class="line">                    y[j + <span class="number">1</span>] = y[j];</span><br><span class="line">                    y[j] = temp;</span><br><span class="line">                    flag = <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> minNum = y[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; n; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(y[j] &gt; minNum)&#123;</span><br><span class="line">                ans++;</span><br><span class="line">                minNum = y[j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> T = scanner.nextInt();</span><br><span class="line">        <span class="keyword">while</span>(T-- != <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> n = scanner.nextInt();</span><br><span class="line">            <span class="keyword">int</span>[] x = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">                x[i] = scanner.nextInt();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span>[] y = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; n; i++)&#123;</span><br><span class="line">                y[i] = scanner.nextInt();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(getAnswer(x, y));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="小强爱数学"><a href="#小强爱数学" class="headerlink" title="小强爱数学"></a>小强爱数学</h1><h2 id="时空限制-1"><a href="#时空限制-1" class="headerlink" title="时空限制"></a>时空限制</h2><blockquote>
<p>时间限制：C/C++ 1秒，其他语言2秒<br>空间限制：C/C++ 128M，其他语言256M</p>
</blockquote>
<h2 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h2><p>小强发现当已知$xy=B$以及$x+y=A$,能很轻易的算出$x^2+y^2$的值.但小强想请你在已知$A$和$B$的情况下,计算出$x^n+y^n$的值.因为这个结果可能很大,所以所有的运算都在模1e9+7下进行.</p>
<h2 id="输入描述-1"><a href="#输入描述-1" class="headerlink" title="输入描述"></a>输入描述</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">第一行输入一个正整数T.表示有T组数据</span><br><span class="line">接下来T行,每行输入三个整数A,B和n.</span><br><span class="line">1 &lt;&#x3D; T &lt;&#x3D; 100</span><br><span class="line">0 &lt;&#x3D; A,B &lt; 1e9+7</span><br><span class="line">1 &lt;&#x3D; n &lt;&#x3D; 1e5</span><br></pre></td></tr></table></figure>

<h2 id="输出描述-1"><a href="#输出描述-1" class="headerlink" title="输出描述"></a>输出描述</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输出T行,每一行表示每组数据的结果.</span><br></pre></td></tr></table></figure>

<h2 id="例子-1"><a href="#例子-1" class="headerlink" title="例子"></a>例子</h2><p><strong>输入1</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3</span><br><span class="line">4 4 3</span><br><span class="line">2 3 4</span><br><span class="line">5 2 6</span><br></pre></td></tr></table></figure>

<p><strong>输出1</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">16</span><br><span class="line">999999993</span><br><span class="line">9009</span><br></pre></td></tr></table></figure>

<h2 id="我的答案-1"><a href="#我的答案-1" class="headerlink" title="我的答案"></a>我的答案</h2><p>没有思路┭┮﹏┭┮</p>
<h1 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h1><h2 id="时空限制-2"><a href="#时空限制-2" class="headerlink" title="时空限制"></a>时空限制</h2><blockquote>
<p>时间限制：C/C++ 1秒，其他语言2秒<br>空间限制：C/C++ 128M，其他语言256M</p>
</blockquote>
<h2 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h2><p>小强现在有$n$个节点,他想请你帮他计算出有多少种不同的二叉树满足节点个数为$n$且树的高度不超过$m$的方案.因为答案很大,所以答案需要模上1e9+7后输出.<br>树的高度: 定义为所有叶子到根路径上节点个数的最大值.</p>
<h2 id="输入描述-2"><a href="#输入描述-2" class="headerlink" title="输入描述"></a>输入描述</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">第一行输入两个正整数n和m.</span><br><span class="line">1 &lt;&#x3D; m &lt;&#x3D; n &lt;&#x3D; 50</span><br></pre></td></tr></table></figure>

<h2 id="输出描述-2"><a href="#输出描述-2" class="headerlink" title="输出描述"></a>输出描述</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输出一个答案表示方案数.</span><br></pre></td></tr></table></figure>

<h2 id="例子-2"><a href="#例子-2" class="headerlink" title="例子"></a>例子</h2><p><strong>输入1</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3 3</span><br></pre></td></tr></table></figure>

<p><strong>输出1</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">5</span><br></pre></td></tr></table></figure>

<hr>

<p><strong>输入2</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3 2</span><br></pre></td></tr></table></figure>

<p><strong>输出2</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1</span><br></pre></td></tr></table></figure>

<hr>

<p><strong>输入3</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">4 3</span><br></pre></td></tr></table></figure>

<p><strong>输出3</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">6</span><br></pre></td></tr></table></figure>

<h2 id="我的答案-2"><a href="#我的答案-2" class="headerlink" title="我的答案"></a>我的答案</h2><blockquote>
<p>只能过 30%</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LuckyQ</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-06-16 20:53</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getAnswer</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] f = <span class="keyword">new</span> <span class="keyword">int</span>[n + <span class="number">1</span>];</span><br><span class="line">        f[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        f[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">2</span>; k &lt;= n; k++)&#123;</span><br><span class="line">            <span class="comment">// 固定根结点后，根结点占一层，故剩余层数需要-1</span></span><br><span class="line">            <span class="keyword">int</span> maxLevel = Math.min(k, m) - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">int</span> i = maxLevel, j = k - <span class="number">1</span> - i, ans = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span>(j &gt; maxLevel)&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span>(i &gt; j)&#123;</span><br><span class="line">                ans += f[i] * f[j];</span><br><span class="line">                i--;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">            ans *= <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(i == j)&#123;</span><br><span class="line">                ans += f[i] * f[i];</span><br><span class="line">            &#125;</span><br><span class="line">            f[k] = ans;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> f[n];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> n = scanner.nextInt();</span><br><span class="line">        <span class="keyword">int</span> m = scanner.nextInt();</span><br><span class="line">        System.out.println(getAnswer(n, m));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="对称飞行器"><a href="#对称飞行器" class="headerlink" title="对称飞行器"></a>对称飞行器</h1><h2 id="时空限制-3"><a href="#时空限制-3" class="headerlink" title="时空限制"></a>时空限制</h2><blockquote>
<p>时间限制：C/C++ 2秒，其他语言4秒<br>空间限制：C/C++ 256M，其他语言512M</p>
</blockquote>
<h2 id="题目描述-3"><a href="#题目描述-3" class="headerlink" title="题目描述"></a>题目描述</h2><p>小强在玩一个走迷宫的游戏，他操控的人物现在位于迷宫的起点，他的目标是尽快的到达终点。<br>每一次他可以选择花费一个时间单位向上或向下或向左或向右走一格，或是使用自己的对称飞行器花费一个时间单位瞬移到关于当前自己点中心对称的格子，且每一次移动的目的地不能存在障碍物。<br>具体来说，设当前迷宫有$n$行$m$列，如果当前小强操控的人物位于点$A(x,y)$，那么关于点$A$中心对称的格子$B(x_1,y_1)$满足$x + x_1 = n + 1$且$y + y_1 = m + 1$。<br>需要注意的是，对称飞行器最多使用5次。</p>
<h2 id="输入描述-3"><a href="#输入描述-3" class="headerlink" title="输入描述"></a>输入描述</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">第一行两个空格分隔的正整数n,m，分别代表迷宫的行数和列数。</span><br><span class="line">接下来n行，每行一个长度为m的字符串来描述这个迷宫。</span><br><span class="line">其中</span><br><span class="line">.代表通路。</span><br><span class="line">#代表障碍。</span><br><span class="line">S代表起点。</span><br><span class="line">E代表终点。</span><br><span class="line">保证只有一个S和一个E。</span><br><span class="line">2 &lt;&#x3D; n,m &lt;&#x3D; 500</span><br></pre></td></tr></table></figure>

<h2 id="输出描述-3"><a href="#输出描述-3" class="headerlink" title="输出描述"></a>输出描述</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">仅一行一个整数表示从起点最小花费多少时间单位到达终点。</span><br><span class="line">如果无法到达终点，输出 -1。</span><br></pre></td></tr></table></figure>

<h2 id="例子-3"><a href="#例子-3" class="headerlink" title="例子"></a>例子</h2><p><strong>输入1</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">4 4</span><br><span class="line">#S..</span><br><span class="line">E#..</span><br><span class="line">#...</span><br><span class="line">....</span><br></pre></td></tr></table></figure>

<p><strong>输出1</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">4</span><br></pre></td></tr></table></figure>
<blockquote>
<p>一种可行的路径是用对称飞行器到达 (4,3) 再向上走一步，再向右走一步，然后使用一次对称飞行器到达终点。</p>
</blockquote>
<h2 id="我的答案-3"><a href="#我的答案-3" class="headerlink" title="我的答案"></a>我的答案</h2><p>没有思路┭┮﹏┭┮</p>
<h1 id="知识竞赛"><a href="#知识竞赛" class="headerlink" title="知识竞赛"></a>知识竞赛</h1><h2 id="时空限制-4"><a href="#时空限制-4" class="headerlink" title="时空限制"></a>时空限制</h2><blockquote>
<p>时间限制：C/C++ 2秒，其他语言4秒<br>空间限制：C/C++ 256M，其他语言512M</p>
</blockquote>
<h2 id="题目描述-4"><a href="#题目描述-4" class="headerlink" title="题目描述"></a>题目描述</h2><p>最近部门要选两个员工去参加一个需要合作的知识竞赛，每个员工均有一个推理能力值$A_i$，以及一个阅读能力值$B_i$。如果选择第$i$个人和第$j$个人去参加竞赛，那么他们在阅读方面所表现出的能力为$X = \frac{B_i + B_j}{2}$，他们在推理方面所表现出的能力为$Y = \frac{A_i + A_j}{2}$。<br>现在需要最大化他们表现较差一方面的能力，即让$min(X,Y)$尽可能大，问这个值最大是多少。</p>
<h2 id="输入描述-4"><a href="#输入描述-4" class="headerlink" title="输入描述"></a>输入描述</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">第一行一个正整数n，代表员工数。</span><br><span class="line">接下来n行每行两个正整数Ai,Bi，分别用来描述第i个员工的推理和阅读能力。</span><br><span class="line">2 &lt;&#x3D; n &lt;&#x3D; 2 x 10^5</span><br><span class="line">1 &lt;&#x3D; Ai,Bi &lt;&#x3D; 10^8</span><br></pre></td></tr></table></figure>

<h2 id="输出描述-4"><a href="#输出描述-4" class="headerlink" title="输出描述"></a>输出描述</h2><blockquote>
<p>仅一行一个一位小数用来表示答案。</p>
</blockquote>
<h2 id="例子-4"><a href="#例子-4" class="headerlink" title="例子"></a>例子</h2><p><strong>输入1</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3</span><br><span class="line">2 2</span><br><span class="line">3 1</span><br><span class="line">1 3</span><br></pre></td></tr></table></figure>

<p><strong>输出1</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2.0</span><br></pre></td></tr></table></figure>
<blockquote>
<p>选择第一个和第二个员工或第一个和第三个时，较差方面的能力都是 1.5，选择第二个和第三个时较差方面能力是 2。</p>
</blockquote>
<h2 id="我的答案-4"><a href="#我的答案-4" class="headerlink" title="我的答案"></a>我的答案</h2><blockquote>
<p>超时！</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LuckyQ</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-06-16 20:53</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">getAnswer</span><span class="params">(<span class="keyword">int</span>[] A, <span class="keyword">int</span>[] B)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = A.length;</span><br><span class="line">        <span class="keyword">double</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; n; j++)&#123;</span><br><span class="line">                <span class="keyword">double</span> x = (B[i] + B[j]) / <span class="number">2.0</span>;</span><br><span class="line">                <span class="keyword">double</span> y = (A[i] + A[j]) / <span class="number">2.0</span>;</span><br><span class="line">                <span class="keyword">double</span> t = Math.min(x, y);</span><br><span class="line">                <span class="keyword">if</span>(t &gt; ans)&#123;</span><br><span class="line">                    ans = t;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> n = scanner.nextInt();</span><br><span class="line">        <span class="keyword">int</span>[] A = <span class="keyword">new</span> <span class="keyword">int</span>[n], B = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> a = scanner.nextInt();</span><br><span class="line">            <span class="keyword">int</span> b = scanner.nextInt();</span><br><span class="line">            A[i] = a;</span><br><span class="line">            B[i] = b;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(String.format(<span class="string">"%.1f"</span>, getAnswer(A, B)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="树上最短链"><a href="#树上最短链" class="headerlink" title="树上最短链"></a>树上最短链</h1><h2 id="时空限制-5"><a href="#时空限制-5" class="headerlink" title="时空限制"></a>时空限制</h2><blockquote>
<p>时间限制：C/C++ 2秒，其他语言4秒<br>空间限制：C/C++ 256M，其他语言512M</p>
</blockquote>
<h2 id="题目描述-5"><a href="#题目描述-5" class="headerlink" title="题目描述"></a>题目描述</h2><p>在一个地区有n个城市以及n-1条无向边，每条边的时间边权都是1，并且这些城市是联通的，即这个地区形成了一个树状结构。每个城市有一个等级。<br>现在小强想从一个城市走到另一个不同的城市，并且每条边经过至多一次，同时他还有一个要求，起点和终点城市可以任意选择，但是等级必须是相同的。<br>但是小强不喜欢走特别远的道路，所以他想知道时间花费最小是多少。</p>
<h2 id="输入描述-5"><a href="#输入描述-5" class="headerlink" title="输入描述"></a>输入描述</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">第一行一个正整数n，含义如题面所述。</span><br><span class="line">第二行 n 个正整数 Ai，代表每个城市的等级。</span><br><span class="line">接下来 n - 1 行每行两个正整数u ，v代表一条无向边。</span><br><span class="line">保证给出的图是一棵树。</span><br><span class="line">1 &lt;&#x3D; n &lt;&#x3D; 5000</span><br><span class="line">1 &lt;&#x3D; u,v &lt;&#x3D; n</span><br><span class="line">1 &lt;&#x3D; Ai &lt;&#x3D; 10^9</span><br></pre></td></tr></table></figure>

<h2 id="输出描述-5"><a href="#输出描述-5" class="headerlink" title="输出描述"></a>输出描述</h2><blockquote>
<p>仅一行一个整数代表答案，如果无法满足要求，输出  -1。</p>
</blockquote>
<h2 id="例子-5"><a href="#例子-5" class="headerlink" title="例子"></a>例子</h2><p><strong>输入1</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3</span><br><span class="line">1 2 1</span><br><span class="line">1 2</span><br><span class="line">2 3</span><br></pre></td></tr></table></figure>

<p><strong>输出1</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>刷题</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
</search>
